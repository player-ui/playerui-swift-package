{"version":3,"sources":["../../../../../../../../../../../execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/core/make-flow/src/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/core/make-flow/src/identify.ts"],"names":["ObjType","type"],"mappings":"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","sourcesContent":["import type {\n  Flow,\n  Asset,\n  AssetWrapper,\n  NavigationFlow,\n  NavigationFlowEndState,\n} from \"@player-ui/types\";\nimport identify, { ObjType } from \"./identify\";\n\nexport * from \"./identify\";\nexport { identify };\n\ninterface JSend<T> {\n  /** The status of the JSEND wrapper */\n  status: string;\n  /** The data we care about */\n  data: T;\n}\n\ninterface CollectionAsset extends Asset<\"collection\"> {\n  /** The values of the collection. Used when there are an array of assets passed to the makeFlow fn */\n  values: Array<AssetWrapper>;\n}\n\n/** Check an object for the JSEND wrapper and remove it if needed */\nfunction unwrapJSend(obj: object) {\n  const isJSend = \"status\" in obj && \"data\" in obj;\n\n  if (isJSend) {\n    return (obj as JSend<object>).data;\n  }\n\n  return obj;\n}\n\ninterface NavOptions {\n  /** An optional expression to run when this Flow starts */\n  onStart?: NavigationFlow[\"onStart\"];\n  /** An optional expression to run when this Flow ends */\n  onEnd?: NavigationFlow[\"onEnd\"];\n  /**\n   * A description of _how_ the flow ended.\n   * If this is a flow started from another flow, the outcome determines the flow transition\n   */\n  outcome?: NavigationFlowEndState[\"outcome\"];\n}\n\n/**\n * create a default navigation if the flow was exactly one view and there is no navigation already\n */\nconst createDefaultNav = (flow: Flow, options?: NavOptions): Flow => {\n  if (\n    (flow.navigation === undefined || flow.navigation === null) &&\n    Array.isArray(flow.views) &&\n    flow.views.length === 1\n  ) {\n    const navFlow: NavigationFlow = {\n      startState: \"VIEW_0\",\n      VIEW_0: {\n        state_type: \"VIEW\",\n        ref: flow.views[0].id ?? `${flow.id}-views-0`,\n        transitions: {\n          \"*\": \"END_done\",\n          Prev: \"END_back\",\n        },\n      },\n      END_done: {\n        state_type: \"END\",\n        outcome: options?.outcome ?? \"doneWithFlow\",\n      },\n      END_back: {\n        state_type: \"END\",\n        outcome: \"BACK\",\n      },\n    };\n\n    if (options?.onStart !== undefined) {\n      navFlow.onStart = options.onStart;\n    }\n\n    if (options?.onEnd !== undefined) {\n      navFlow.onEnd = options.onEnd;\n    }\n\n    return {\n      ...flow,\n      navigation: {\n        BEGIN: \"Flow\",\n        Flow: navFlow,\n      },\n    };\n  }\n\n  return flow;\n};\n\n/**\n * Take any given object and try to convert it to a flow\n */\nexport function makeFlow(obj: any, args?: NavOptions): Flow {\n  const objified = unwrapJSend(typeof obj === \"string\" ? JSON.parse(obj) : obj);\n\n  if (Array.isArray(objified)) {\n    const collection: CollectionAsset = {\n      id: \"collection\",\n      type: \"collection\",\n      values: objified.map((v) => {\n        const type = identify(v);\n\n        if (type === ObjType.ASSET) {\n          return { asset: v };\n        }\n\n        return v;\n      }),\n    };\n\n    return makeFlow(collection);\n  }\n\n  const type = identify(obj);\n\n  if (type === ObjType.UNKNOWN) {\n    throw new Error(\n      \"No clue how to convert this into a flow. Just do it yourself\",\n    );\n  }\n\n  if (type === ObjType.FLOW) {\n    return createDefaultNav(obj, args);\n  }\n\n  if (type === ObjType.ASSET_WRAPPER) {\n    return makeFlow(obj.asset);\n  }\n\n  return {\n    id: \"generated-flow\",\n    views: [obj],\n    data: {},\n    navigation: {\n      BEGIN: \"FLOW_1\",\n      FLOW_1: {\n        startState: \"VIEW_1\",\n        VIEW_1: {\n          state_type: \"VIEW\",\n          ref: obj.id,\n          transitions: {\n            \"*\": \"END_Done\",\n          },\n        },\n        END_Done: {\n          state_type: \"END\",\n          outcome: \"done\",\n        },\n      },\n    },\n  };\n}\n","import type { AssetWrapper } from \"@player-ui/types\";\n\nexport enum ObjType {\n  FLOW,\n  ASSET,\n  ASSET_WRAPPER,\n  UNKNOWN,\n}\n\n/** Try to identify any object as an Asset or Flow  */\nexport default function identify(obj: object): ObjType {\n  if (\"id\" in obj && \"type\" in obj) {\n    return ObjType.ASSET;\n  }\n\n  if (\n    \"asset\" in obj &&\n    identify((obj as AssetWrapper).asset) === ObjType.ASSET\n  ) {\n    return ObjType.ASSET_WRAPPER;\n  }\n\n  if (\"navigation\" in obj || \"schema\" in obj || \"views\" in obj) {\n    return ObjType.FLOW;\n  }\n\n  return ObjType.UNKNOWN;\n}\n"]}