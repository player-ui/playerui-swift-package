{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1833/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/dist/index.global.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/async.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts","../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/types.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/consoleLogger.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/noopLogger.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/types.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/builder/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset-transform.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts","../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts"],"names":["Player","equalToOrIn","value","check","Array","isArray","includes","callTap","tap","args","ctx","context","callback","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","split","asArray","findInArray","array","key","findIndex","obj","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","set","Error","options","transaction","map","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","length","NOOP_MODEL","createModelWithOptions","reduce","nextModel","dlv_es_default","def","p","undef","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","keys","forEach","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","push","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isPromiseLike","then","Promise","constructor","catch","finally","isAwaitable","AwaitableSymbol","collateAwaitable","promises","result","all","makeAwaitable","withoutContext","fn","_context","isInRange","position","isObjectExpression","isErrorWithLocation","makePromiseAwareBinaryOp","operation","a","b","async","resolve","awaitableThen","resolvedA","resolvedB","makePromiseAwareUnaryOp","resolved","handleConditionalBranching","testValue","getTrueBranch","getFalseBranch","resolveNode","branch","branchResult","parse","schema","parseQueue","shift","path","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","count","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","match","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","from","filter","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","find","iter","tar","dequal","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","unpackNode","item","unpacked","children","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","size","entry","createStatefulValidationObject","severity","state","isBlockingNavigation","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","createBasicMatcher","seed","matcher","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","insert","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","module","pDefer","deferred","promise","reject","require_queue_microtask","queueMicrotask","bind","window","global","setTimeout","require_sorted_array","SortedArray","defclass","compare","compareDefault","element","high","low","pos","ordering","search","remove","splice","comparing","define","amd","src_exports","ApplicabilityPlugin","AssetPlugin","AssetTransformCorePlugin","BINDING_BRACKETS_REGEX","BindingParser","Builder","ConsoleLogger","ConstantsController","DataController","DependencyMiddleware","DependencyModel","DependencyTracker","EMPTY_NODE","ExpressionEvaluator","FlowController","FlowExpPlugin","FlowInstance","LocalModel","LocalStateStore","MultiNodePlugin","NOOPDataModel","NOT_STARTED_STATE","NodeType","NoopLogger","Parser","PipelinedDataModel","ProxyLogger","ROOT_BINDING","Resolver","SCHEMA_VALIDATION_PROVIDER_NAME","SIMPLE_BINDING_REGEX","SchemaController","StringResolverPlugin","SwitchPlugin","TapableLogger","TemplatePlugin","VALIDATION_PROVIDER_NAME_SYMBOL","VIEW_VALIDATION_PROVIDER_NAME","ValidationBindingTrackerViewPlugin","ValidationController","ValidationMiddleware","ValidatorRegistry","ViewController","ViewInstance","findClosestNodeAtPosition","severities","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","import_ts_nested_error","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","expected","whitespace","maybeNumber","Number","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","hooks","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","actualValue","appendPathSegments","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","import_ts_nested_error2","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","force","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","rootModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","handler","appliedTransaction","import_timm","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","waitFor","arg","condition","ifTrue","ifFalse","testResult","resolvedTest","resolveParams","checkArg","checkObject","anyElements","found","anyArgs","andandOperator","LogicalOperators","and","ororOperator","or","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","PromiseCollectionHandler","handleArray","items","hasPromises","some","handleObject","resolvedAttributes","attr","keyPromise","valuePromise","leftNode","rightNode","leftResult","awaitedLeft","rightResult","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","expressions","defaultHookOptions","_execAST","_resolveNode","clear","resolvedOpts","_nothing","_execString","evaluateAsync","addExpressionFunction","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","matched","storedAST","throwErrors","import_ts_nested_error3","_currentValue","isAsync","expressionContext","leftVal","rightVal","argVal","expressionName","n","resolvedArgs","objVal","propVal","logger","warn","results","ele","_console","console","trace","createHandler","debug","info","setSeverity","getConsoleFn","log","sevIndex","sevConf","noop","logHandlers","addHandler","logHandler","removeHandler","loggerProvider","proxiedLoggerProvider","identify","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","fns","addDataTypes","getValidationsForBinding","typeDef","getApparentType","validation","vRef","trigger","normalizeBinding","cached","bindingArray","recordBinding","getType","schemaType","baseType","getTypeDefinition","dataType","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","import_timm2","validator","shadowModelPaths","shouldIncludeInvalid","asModel","includeInvalid","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","import_timm3","registry","register","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","currentValue","objToParse","localObj","objEntries","v","defaultValue","accumulation","current","localValue","newChildren","parentObj","import_timm4","baseAst","child","withContext","root","skipResolve","beforeUpdate","afterUpdate","beforeResolve","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm5","rawParent","cacheUpdate","partiallyResolvedParent","resolvedAST","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","isNestedMultiNodeWithAsync","isNestedMultiNode","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","rawParentToPassIn","hasAsync","newValues","mValue","mTree","asset","unpackAndPush","bindingDep","copy","scope","initial","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","onUpdate","resolver","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","setTemplatePlugin","plugin","_Builder","assetWrapper","valueNode","addChild","multiNode","m","asyncNode","newChild","updateChildrenByPath","pathToMatch","updateFn","updatedChildren","templateSymbol","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","apply","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","propertiesToSkip","newNode","import_timm6","findBasePath","parentNode","original","propertiesToSkipCache","applyResolver","propsToSkip","plugins","stringResolver","nodePath","isApplicability","isApplicable","nodeType","parsedApplicability","import_timm7","applicabilityNode","applicability","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","childVal","assetAST","updateCallback","removeKey","useSharedState","initialState","newState","getLocalStateFunction","countKey","localState","oldCount","findUp","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","lastUpdatedNode","updateState","getStore","stepKey","store","storedState","useLocalState","transform","skip","isParentOfUpdated","isChildOfUpdated","originalNode","import_p_defer","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","transition","afterTransition","history","_oldState","nextState","flowPromise","state_type","startState","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","navigation","navStack","run","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","track","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","newlyComputed","nodeSet","sectionNode","temp","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","import_timm8","dismissable","dismiss","newApplicableValidations","currentPhase","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","import_queue_microtask","import_sorted_array","createSortedArray","Registry","initialSet","query","callbackfn","isRegistryEmpty","initialViews","resolveView","transformRegistry","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","viewPlugins","createViewPlugins","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","applyViewPlugins","pluginOptions","ReadOnlyDataController","controller","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","player","expressionEvaluator","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","expEvaluator","PLAYER_VERSION","COMMIT","_Player","config","constantsController","viewController","dataController","validationController","bindingParser","resolveFlowContent","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","import_p_defer2","resolveStrings","transitionVal","computedTransitionVal","import_timm9","param","await","constants","views","utils","pluginSymbol","endState","flowResult","controllers","fail","payload","maybeUpdateState","endProps","errorState"],"mappings":"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","sourcesContent":["\"use strict\";\nvar Player = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn8;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit3;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn8(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn8(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn8(a, path, nextVal);\n      }\n      function omit3(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn8,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit3,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length = array.length, index = 0;\n            while (index < length)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    ApplicabilityPlugin: () => ApplicabilityPlugin,\n    AssetPlugin: () => AssetPlugin,\n    AssetTransformCorePlugin: () => AssetTransformCorePlugin,\n    BINDING_BRACKETS_REGEX: () => BINDING_BRACKETS_REGEX,\n    BindingInstance: () => BindingInstance,\n    BindingParser: () => BindingParser,\n    Builder: () => Builder,\n    ConsoleLogger: () => ConsoleLogger,\n    ConstantsController: () => ConstantsController,\n    DataController: () => DataController,\n    DependencyMiddleware: () => DependencyMiddleware,\n    DependencyModel: () => DependencyModel,\n    DependencyTracker: () => DependencyTracker,\n    EMPTY_NODE: () => EMPTY_NODE,\n    ExpNodeOpaqueIdentifier: () => ExpNodeOpaqueIdentifier,\n    ExpressionEvaluator: () => ExpressionEvaluator,\n    FlowController: () => FlowController,\n    FlowExpPlugin: () => FlowExpPlugin,\n    FlowInstance: () => FlowInstance,\n    LocalModel: () => LocalModel,\n    LocalStateStore: () => LocalStateStore,\n    MultiNodePlugin: () => MultiNodePlugin,\n    NOOPDataModel: () => NOOPDataModel,\n    NOOP_MODEL: () => NOOP_MODEL,\n    NOT_STARTED_STATE: () => NOT_STARTED_STATE,\n    NodeType: () => NodeType,\n    NoopLogger: () => NoopLogger,\n    Parser: () => Parser,\n    PipelinedDataModel: () => PipelinedDataModel,\n    Player: () => Player,\n    ProxyLogger: () => ProxyLogger,\n    ROOT_BINDING: () => ROOT_BINDING,\n    Resolver: () => Resolver,\n    SCHEMA_VALIDATION_PROVIDER_NAME: () => SCHEMA_VALIDATION_PROVIDER_NAME,\n    SIMPLE_BINDING_REGEX: () => SIMPLE_BINDING_REGEX,\n    SchemaController: () => SchemaController,\n    StringResolverPlugin: () => StringResolverPlugin,\n    SwitchPlugin: () => SwitchPlugin,\n    TapableLogger: () => TapableLogger,\n    TemplatePlugin: () => TemplatePlugin,\n    VALIDATION_PROVIDER_NAME_SYMBOL: () => VALIDATION_PROVIDER_NAME_SYMBOL,\n    VIEW_VALIDATION_PROVIDER_NAME: () => VIEW_VALIDATION_PROVIDER_NAME,\n    ValidationBindingTrackerViewPlugin: () => ValidationBindingTrackerViewPlugin,\n    ValidationController: () => ValidationController,\n    ValidationMiddleware: () => ValidationMiddleware,\n    ValidatorRegistry: () => ValidatorRegistry,\n    ViewController: () => ViewController,\n    ViewInstance: () => ViewInstance,\n    caresAboutDataChanges: () => caresAboutDataChanges,\n    constructModelForPipeline: () => constructModelForPipeline,\n    findClosestNodeAtPosition: () => findClosestNodeAtPosition,\n    findInArray: () => findInArray,\n    findNextExp: () => findNextExp,\n    getBindingSegments: () => getBindingSegments,\n    getNodeID: () => getNodeID,\n    hasSwitchKey: () => hasSwitchKey,\n    hasTemplateKey: () => hasTemplateKey,\n    hasTemplateValues: () => hasTemplateValues,\n    isAwaitable: () => isAwaitable,\n    isBinding: () => isBinding,\n    isErrorWithLocation: () => isErrorWithLocation,\n    isExpressionNode: () => isExpressionNode,\n    isObjectExpression: () => isObjectExpression,\n    isPromiseLike: () => isPromiseLike,\n    maybeConvertToNum: () => maybeConvertToNum,\n    parse: () => parse2,\n    parseExpression: () => parseExpression,\n    removeBindingAndChildrenFromMap: () => removeBindingAndChildrenFromMap,\n    resolveDataRefs: () => resolveDataRefs,\n    resolveDataRefsInString: () => resolveDataRefsInString,\n    resolveExpressionsInString: () => resolveExpressionsInString,\n    severities: () => severities,\n    toModel: () => toModel,\n    toNodeResolveOptions: () => toNodeResolveOptions,\n    withParser: () => withParser,\n    withoutContext: () => withoutContext\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\n  var import_ts_nested_error2 = __toESM(require_nested_error());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts\n  var import_ts_nested_error = __toESM(require_nested_error());\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\n  var SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error2.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyMiddleware = class extends DependencyTracker {\n    constructor() {\n      super();\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    set(transaction, options, next) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return next?.set(transaction, options) ?? [];\n    }\n    get(binding, options, next) {\n      this.addReadDep(binding);\n      return next?.get(binding, options);\n    }\n    delete(binding, options, next) {\n      this.addWriteDep(binding);\n      return next?.delete(binding, options);\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts\n  var import_timm = __toESM(require_timm());\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\n  var import_ts_nested_error3 = __toESM(require_nested_error());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts\n  var evaluator_functions_exports = {};\n  __export(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal,\n    waitFor: () => waitFor\n  });\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/async.ts\n  function isPromiseLike(value) {\n    return value != null && typeof value === \"object\" && typeof value.then === \"function\" && // Additional safeguards against false positives\n    (value instanceof Promise || // Check for standard Promise constructor name\n    value.constructor?.name === \"Promise\" || // Verify it has other Promise-like methods to reduce false positives\n    typeof value.catch === \"function\" && typeof value.finally === \"function\");\n  }\n  var AwaitableSymbol = Symbol(\"Awaitable\");\n  function isAwaitable(val) {\n    return isPromiseLike(val) && val[AwaitableSymbol] !== void 0;\n  }\n  function collateAwaitable(promises) {\n    const result = Promise.all(promises);\n    return makeAwaitable(result);\n  }\n  function makeAwaitable(promise) {\n    promise[AwaitableSymbol] = AwaitableSymbol;\n    promise.awaitableThen = (arg) => {\n      return makeAwaitable(promise.then(arg));\n    };\n    return promise;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const testResult = ctx.evaluate(condition);\n    if (isAwaitable(testResult)) {\n      return testResult.awaitableThen((resolvedTest) => {\n        if (resolvedTest) {\n          return ctx.evaluate(ifTrue);\n        }\n        if (ifFalse) {\n          return ctx.evaluate(ifFalse);\n        }\n        return null;\n      });\n    }\n    if (testResult) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  var waitFor = (ctx, promise) => {\n    return makeAwaitable(promise);\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts\n  function withoutContext(fn) {\n    return (_context, ...args) => fn(...args);\n  }\n  function isInRange(position, location) {\n    return position.character >= location.start.character && position.character <= location.end.character;\n  }\n  function findClosestNodeAtPosition(node, position) {\n    switch (node.type) {\n      case \"Modification\":\n      case \"Assignment\":\n      case \"LogicalExpression\":\n      case \"BinaryExpression\": {\n        const check = findClosestNodeAtPosition(node.left, position) ?? findClosestNodeAtPosition(node.right, position);\n        if (check) {\n          return check;\n        }\n        break;\n      }\n      case \"UnaryExpression\": {\n        const checkArg = findClosestNodeAtPosition(node.argument, position);\n        if (checkArg) {\n          return checkArg;\n        }\n        break;\n      }\n      case \"MemberExpression\": {\n        const checkObject = findClosestNodeAtPosition(node.object, position) ?? findClosestNodeAtPosition(node.property, position);\n        if (checkObject) {\n          return checkObject;\n        }\n        break;\n      }\n      case \"ConditionalExpression\": {\n        const checkObject = findClosestNodeAtPosition(node.test, position) ?? findClosestNodeAtPosition(node.consequent, position) ?? findClosestNodeAtPosition(node.alternate, position);\n        if (checkObject) {\n          return checkObject;\n        }\n        break;\n      }\n      case \"ArrayExpression\":\n      case \"Compound\": {\n        const elements = node.type === \"ArrayExpression\" ? node.elements : node.body;\n        const anyElements = elements.find(\n          (e) => findClosestNodeAtPosition(e, position)\n        );\n        if (anyElements) {\n          return anyElements;\n        }\n        break;\n      }\n      case \"Object\": {\n        const checkObject = node.attributes.reduce(\n          (found, next) => {\n            return found ?? findClosestNodeAtPosition(next.key, position) ?? findClosestNodeAtPosition(next.value, position);\n          },\n          void 0\n        );\n        if (checkObject) {\n          return checkObject;\n        }\n        break;\n      }\n      case \"CallExpression\": {\n        const anyArgs = node.args.find((arg) => {\n          return findClosestNodeAtPosition(arg, position);\n        }) ?? findClosestNodeAtPosition(node.callTarget, position);\n        if (anyArgs) {\n          return anyArgs;\n        }\n        break;\n      }\n    }\n    if (node.location && isInRange(position, node.location)) {\n      return node;\n    }\n  }\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  function isErrorWithLocation(error) {\n    return error.index !== void 0 && error.description !== void 0;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\n  var andandOperator = (ctx, a, b, async) => {\n    return LogicalOperators.and(ctx, a, b, async);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b, async) => {\n    return LogicalOperators.or(ctx, a, b, async);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // Promise-aware comparison operators\n    // eslint-disable-next-line\n    \"==\": makePromiseAwareBinaryOp((a, b) => a == b),\n    // eslint-disable-next-line\n    \"!=\": makePromiseAwareBinaryOp((a, b) => a != b),\n    \">\": makePromiseAwareBinaryOp((a, b) => a > b),\n    \">=\": makePromiseAwareBinaryOp((a, b) => a >= b),\n    \"<\": makePromiseAwareBinaryOp((a, b) => a < b),\n    \"<=\": makePromiseAwareBinaryOp((a, b) => a <= b),\n    \"!==\": makePromiseAwareBinaryOp((a, b) => a !== b),\n    \"===\": makePromiseAwareBinaryOp((a, b) => a === b),\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": makePromiseAwareUnaryOp((a) => !a)\n  };\n  function makePromiseAwareBinaryOp(operation) {\n    return (a, b, async) => {\n      if (async && (isAwaitable(a) || isAwaitable(b))) {\n        return collateAwaitable([\n          Promise.resolve(a),\n          Promise.resolve(b)\n        ]).awaitableThen(\n          ([resolvedA, resolvedB]) => operation(resolvedA, resolvedB)\n        );\n      }\n      return operation(a, b);\n    };\n  }\n  function makePromiseAwareUnaryOp(operation) {\n    return (a, async) => {\n      if (async && isAwaitable(a)) {\n        return a.awaitableThen((resolved) => operation(resolved));\n      }\n      return operation(a);\n    };\n  }\n  function handleConditionalBranching(testValue, getTrueBranch, getFalseBranch, resolveNode, async) {\n    if (async && isAwaitable(testValue)) {\n      return testValue.awaitableThen((resolved) => {\n        const branch2 = resolved ? getTrueBranch() : getFalseBranch();\n        const branchResult = resolveNode(branch2);\n        return isAwaitable(branchResult) ? Promise.resolve(branchResult) : branchResult;\n      });\n    }\n    const branch = testValue ? getTrueBranch() : getFalseBranch();\n    return resolveNode(branch);\n  }\n  var PromiseCollectionHandler = {\n    /**\n     * Handle array with potential Promise elements\n     */\n    handleArray(items, async) {\n      if (!async) {\n        return items;\n      }\n      const hasPromises = items.some((item) => isAwaitable(item));\n      return hasPromises ? collateAwaitable(items) : items;\n    },\n    /**\n     * Handle object with potential Promise keys/values\n     */\n    handleObject(attributes, resolveNode, async) {\n      const resolvedAttributes = {};\n      const promises = [];\n      let hasPromises = false;\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        if (async && (isAwaitable(key) || isAwaitable(value))) {\n          hasPromises = true;\n          const keyPromise = Promise.resolve(key);\n          const valuePromise = Promise.resolve(value);\n          promises.push(\n            collateAwaitable([keyPromise, valuePromise]).awaitableThen(\n              ([resolvedKey, resolvedValue]) => {\n                resolvedAttributes[resolvedKey] = resolvedValue;\n              }\n            )\n          );\n        } else {\n          resolvedAttributes[key] = value;\n        }\n      });\n      return hasPromises ? collateAwaitable(promises).awaitableThen(() => resolvedAttributes) : resolvedAttributes;\n    }\n  };\n  var LogicalOperators = {\n    and: (ctx, leftNode, rightNode, async) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (async && isAwaitable(leftResult)) {\n        return leftResult.awaitableThen((awaitedLeft) => {\n          if (!awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isAwaitable(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult && ctx.evaluate(rightNode);\n    },\n    or: (ctx, leftNode, rightNode, async) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (async && isAwaitable(leftResult)) {\n        return leftResult.awaitableThen((awaitedLeft) => {\n          if (awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isAwaitable(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult || ctx.evaluate(rightNode);\n    }\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(\n          Object.entries(DEFAULT_BINARY_OPERATORS)\n        ),\n        unary: new Map(\n          Object.entries(DEFAULT_UNARY_OPERATORS)\n        ),\n        expressions: new Map([\n          ...Object.entries(evaluator_functions_exports),\n          [\"await\", waitFor]\n        ])\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n        return this._resolveNode(result, node, options);\n      });\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    /**\n     * Evaluate functions in an async context\n     * @experimental These Player APIs are in active development and may change. Use with caution\n     */\n    evaluateAsync(expr, options) {\n      if (Array.isArray(expr)) {\n        return collateAwaitable(\n          expr.map(\n            async (exp) => this.evaluate(exp, { ...options, async: true })\n          )\n        ).awaitableThen((values) => {\n          return values.pop();\n        });\n      } else {\n        return this.evaluate(expr, { ...options, async: true });\n      }\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        const [, matched] = Array.from(matches);\n        if (matched) {\n          matchedExp = matched;\n        }\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const isAsync = options.async ?? false;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right, isAsync);\n            }\n            const left2 = resolveNode(node.left);\n            const right2 = resolveNode(node.right);\n            if (options.async && (isAwaitable(left2) || isAwaitable(right2))) {\n              return collateAwaitable([left2, right2]).awaitableThen(\n                ([leftVal, rightVal]) => operator(expressionContext, leftVal, rightVal, isAsync)\n              );\n            }\n            return operator(expressionContext, left2, right2, isAsync);\n          }\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            return collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) => operator(leftVal, rightVal, isAsync)\n            );\n          }\n          return operator(left, right, isAsync);\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.argument, isAsync);\n            }\n            const arg2 = resolveNode(node.argument);\n            if (options.async && isAwaitable(arg2)) {\n              return arg2.awaitableThen(\n                (argVal) => operator(expressionContext, argVal, isAsync)\n              );\n            }\n            return operator(expressionContext, arg2, isAsync);\n          }\n          const arg = resolveNode(node.argument);\n          if (options.async && isAwaitable(arg)) {\n            return arg.awaitableThen((argVal) => operator(argVal, isAsync));\n          }\n          return operator(arg, isAsync);\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        return PromiseCollectionHandler.handleObject(\n          node.attributes,\n          resolveNode,\n          options.async || false\n        );\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (operator.name === waitFor.name && !options.async) {\n          throw new Error(\"Usage of await outside of async context\");\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        if (options.async) {\n          const hasPromises = args.some(isAwaitable);\n          if (hasPromises) {\n            return collateAwaitable(args).awaitableThen(\n              (resolvedArgs) => operator(expressionContext, ...resolvedArgs)\n            );\n          }\n        }\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        if (options.async && (isAwaitable(obj) || isAwaitable(prop))) {\n          return collateAwaitable([obj, prop]).awaitableThen(\n            ([objVal, propVal]) => objVal[propVal]\n          );\n        }\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          if (isPromiseLike(value)) {\n            if (options.async && isAwaitable(value)) {\n              return value.awaitableThen((resolvedValue) => {\n                model.set([[node.left.ref, resolvedValue]]);\n                return resolvedValue;\n              });\n            } else {\n              options.logger?.warn(\n                \"Unawaited promise written to mode, this behavior is undefined and may change in future releases\"\n              );\n            }\n          }\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          if (options.async && isAwaitable(value)) {\n            return value.awaitableThen((resolvedValue) => {\n              this.vars[node.left.name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const testResult = resolveNode(node.test);\n        return handleConditionalBranching(\n          testResult,\n          () => node.consequent,\n          () => node.alternate,\n          resolveNode,\n          isAsync\n        );\n      }\n      if (node.type === \"ArrayExpression\") {\n        const results = node.elements.map((ele) => resolveNode(ele));\n        return PromiseCollectionHandler.handleArray(results, isAsync);\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(\n                expressionContext,\n                node.left,\n                node.right,\n                isAsync\n              );\n            } else {\n              const left = resolveNode(node.left);\n              const right = resolveNode(node.right);\n              if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n                newValue = collateAwaitable([left, right]).awaitableThen(\n                  ([leftVal, rightVal]) => operation(expressionContext, leftVal, rightVal, isAsync)\n                );\n              } else {\n                newValue = operation(expressionContext, left, right, isAsync);\n              }\n            }\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n            if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n              newValue = collateAwaitable([left, right]).awaitableThen(\n                ([leftVal, rightVal]) => operation(leftVal, rightVal, isAsync)\n              );\n            } else {\n              newValue = operation(left, right, isAsync);\n            }\n          }\n          if (node.left.type === \"ModelRef\") {\n            if (options.async && isAwaitable(newValue)) {\n              return newValue.awaitableThen((resolvedValue) => {\n                model.set([[node.left.ref, resolvedValue]]);\n                return resolvedValue;\n              });\n            }\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            if (options.async && isAwaitable(newValue)) {\n              return newValue.awaitableThen((resolvedValue) => {\n                this.vars[node.left.name] = resolvedValue;\n                return resolvedValue;\n              });\n            }\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/types.ts\n  var severities = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/consoleLogger.ts\n  var ConsoleLogger = class {\n    constructor(severity = \"warn\", _console = console) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.severity = severity;\n      this._console = _console;\n    }\n    setSeverity(severity) {\n      this.severity = severity;\n    }\n    getConsoleFn(severity) {\n      switch (severities.indexOf(severity)) {\n        case 0:\n        case 1:\n        case 2:\n          return this._console.log;\n        case 3:\n          return this._console.warn;\n        default:\n          return this._console.error;\n      }\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const sevIndex = severities.indexOf(severity);\n        const sevConf = severities.indexOf(this.severity);\n        if (sevIndex >= sevConf) {\n          this.getConsoleFn(severity)(`player - ${severity} -`, ...args);\n        }\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/noopLogger.ts\n  var noop = () => {\n  };\n  var NoopLogger = class {\n    constructor() {\n      this.trace = noop;\n      this.debug = noop;\n      this.info = noop;\n      this.warn = noop;\n      this.error = noop;\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts\n  var import_timm2 = __toESM(require_timm());\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\n  var import_timm3 = __toESM(require_timm());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\n  var import_timm5 = __toESM(require_timm());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\n  var import_timm4 = __toESM(require_timm());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/types.ts\n  var NodeType = /* @__PURE__ */ ((NodeType2) => {\n    NodeType2[\"Asset\"] = \"asset\";\n    NodeType2[\"View\"] = \"view\";\n    NodeType2[\"Applicability\"] = \"applicability\";\n    NodeType2[\"Template\"] = \"template\";\n    NodeType2[\"Value\"] = \"value\";\n    NodeType2[\"MultiNode\"] = \"multi-node\";\n    NodeType2[\"Switch\"] = \"switch\";\n    NodeType2[\"Async\"] = \"async\";\n    NodeType2[\"Unknown\"] = \"unknown\";\n    NodeType2[\"Empty\"] = \"empty\";\n    return NodeType2;\n  })(NodeType || {});\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\n  var EMPTY_NODE = {\n    type: \"empty\" /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(value, \"view\" /* View */);\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\" /* Value */, options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\" /* Value */,\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm4.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\" /* Value */) {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm5.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\" /* Empty */\n      };\n      const isNestedMultiNodeWithAsync = resolvedAST.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent?.parent?.parent?.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent.parent.type === \"value\" /* Value */ && resolvedAST.parent?.type === \"asset\" /* Asset */ && resolvedAST.parent.value.id.includes(\"async\");\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent?.parent?.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent.type === \"value\" /* Value */;\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\" /* MultiNode */) {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      if (isNestedMultiNodeWithAsync) {\n        resolvedAST.parent = partiallyResolvedParent.parent;\n      } else {\n        resolvedAST.parent = partiallyResolvedParent;\n      }\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" /* MultiNode */ && !childNode.override) {\n              const arr = (0, import_timm5.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm5.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm5.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\" /* MultiNode */) {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const hasAsync = resolvedAST.values.map((value, index) => value.type === \"async\" /* Async */ ? index : -1).filter((index) => index !== -1);\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" /* Async */ && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        if (hasAsync.length > 0) {\n          const copy = newValues;\n          hasAsync.forEach((index) => {\n            if (copy[index])\n              copy.splice(index, 1, ...unpackNode(copy[index]));\n          });\n          resolvedAST.values = copy;\n        } else {\n          resolvedAST.values = newValues;\n        }\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  function unpackNode(item) {\n    const unpacked = [];\n    if (\"children\" in item && item.children?.[0]?.value.type === \"asset\" /* Asset */ && (item.children?.[0]?.value).children) {\n      if ((item.children?.[0]?.value).children?.[0]?.value.type === \"multi-node\" /* MultiNode */) {\n        ((item.children?.[0]?.value).children?.[0]?.value).values.forEach((value) => {\n          unpacked.push(value);\n        });\n      }\n    } else {\n      unpacked.push(item);\n    }\n    return unpacked;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n    setTemplatePlugin(plugin) {\n      this.templatePlugin = plugin;\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/builder/index.ts\n  var Builder = class _Builder {\n    /**\n     * Creates an asset node\n     *\n     * @param value - the value to put in the asset node\n     */\n    static asset(value) {\n      return {\n        type: \"asset\" /* Asset */,\n        value\n      };\n    }\n    static assetWrapper(value) {\n      const valueNode = _Builder.value();\n      _Builder.addChild(valueNode, \"asset\", value);\n      return valueNode;\n    }\n    /**\n     * Creates a value node\n     *\n     * @param v - The object to put in the value node\n     */\n    static value(v) {\n      return {\n        type: \"value\" /* Value */,\n        value: v\n      };\n    }\n    /**\n     * Creates a multiNode and associates the multiNode as the parent\n     * of all the value nodes\n     *\n     * @param values - the value, applicability or async nodes to put in the multinode\n     */\n    static multiNode(...values) {\n      const m = {\n        type: \"multi-node\" /* MultiNode */,\n        override: true,\n        values\n      };\n      values.forEach((v) => {\n        v.parent = m;\n      });\n      return m;\n    }\n    /**\n     * Creates an async node\n     *\n     * @param id - the id of async node. It should be identical for each async node\n     */\n    static asyncNode(id, flatten2 = true) {\n      return {\n        id,\n        type: \"async\" /* Async */,\n        flatten: flatten2,\n        value: {\n          type: \"value\" /* Value */,\n          value: {\n            id\n          }\n        }\n      };\n    }\n    /**\n     * Adds a child node to a node\n     *\n     * @param node - The node to add a child to\n     * @param path - The path at which to add the child\n     * @param child - The child node\n     */\n    static addChild(node, path, child) {\n      child.parent = node;\n      const newChild = {\n        path: Array.isArray(path) ? path : [path],\n        value: child\n      };\n      node.children = node.children || [];\n      node.children.push(newChild);\n      return node;\n    }\n    /**\n     * Updates children of a node of the same path and preserves order\n     *\n     * @param node - The node to update children for\n     * @param pathToMatch - The path to match against child paths\n     * @param mapFn - Function to transform matching children\n     */\n    static updateChildrenByPath(node, pathToMatch, updateFn) {\n      if (!node.children)\n        return node;\n      const updatedChildren = node.children.map(\n        (child) => (\n          // Check if paths match exactly\n          child.path.join() === pathToMatch.join() ? { ...child, value: updateFn(child) } : child\n        )\n      );\n      return {\n        ...node,\n        children: updatedChildren\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\" /* Value */, {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\" /* MultiNode */,\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" /* Template */ && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\" /* MultiNode */) {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\" /* Template */) {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" /* View */ || node.type === \"asset\" /* Asset */) && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\" /* Template */,\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\" /* MultiNode */) {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" /* Template */ && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n      view.setTemplatePlugin(this);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts\n  var import_timm6 = __toESM(require_timm());\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\" /* MultiNode */) {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" /* Empty */ || node.type === \"unknown\" /* Unknown */) {\n          return null;\n        }\n        if (node.type === \"value\" /* Value */ || node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n          let propsToSkip;\n          if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" /* MultiNode */ && (node.parent?.parent?.type === \"asset\" /* Asset */ || node.parent?.parent?.type === \"view\" /* View */) && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts\n  var import_timm7 = __toESM(require_timm());\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\" /* Applicability */) {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\" /* Applicability */,\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\" /* Applicability */) {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" /* Switch */ && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\" /* Value */,\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\" /* Switch */,\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\" /* Empty */) {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\" /* Switch */) {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" /* Value */ && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" /* Switch */ && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\" /* Value */, options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\" /* MultiNode */,\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\" /* MultiNode */) {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\" /* Asset */, options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset-transform.ts\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(view) {\n      this.stateStore.clear();\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode;\n        const updateState = (node) => {\n          lastUpdatedNode = node;\n          view.update(/* @__PURE__ */ new Set());\n        };\n        const getStore = (node, stepKey) => {\n          let store;\n          const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n          const storedState = this.stateStore.get(node);\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n          return {\n            useSharedState: (key) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: (initialState) => {\n              return store.getLocalStateFunction(\n                stepKey,\n                countKey\n              )(initialState);\n            }\n          };\n        };\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol\n              );\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n          return node;\n        });\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = void 0;\n        });\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== \"asset\" /* Asset */ && node.type !== \"view\" /* View */) {\n              return value;\n            }\n            const originalNode = resolver.getSourceNode(node);\n            if (!originalNode) {\n              return value;\n            }\n            const transform = this.registry.get(value);\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n              return transform?.resolve(value, options, store);\n            }\n            return value;\n          }\n        );\n      });\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\n  var import_timm9 = __toESM(require_timm());\n  var import_p_defer2 = __toESM(require_p_defer());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts\n  var import_p_defer = __toESM(require_p_defer());\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\n  var import_timm8 = __toESM(require_timm());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\" /* MultiNode */) {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm8.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts\n  var import_queue_microtask = __toESM(require_queue_microtask());\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        resolveView: new SyncWaterfallHook(),\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n      this.viewPlugins = this.createViewPlugins();\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.applyViewPlugins(view);\n      this.hooks.view.call(view);\n      view.update();\n    }\n    applyViewPlugins(view) {\n      for (const plugin of this.viewPlugins) {\n        plugin.apply(view);\n      }\n    }\n    createViewPlugins() {\n      const pluginOptions = toNodeResolveOptions(this.viewOptions);\n      return [\n        new AssetPlugin(),\n        new SwitchPlugin(pluginOptions),\n        new ApplicabilityPlugin(),\n        new AssetTransformCorePlugin(this.transformRegistry),\n        new StringResolverPlugin(),\n        new TemplatePlugin(pluginOptions),\n        new MultiNodePlugin()\n      ];\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n\n  // ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\n  var PLAYER_VERSION = \"__VERSION__\";\n  var COMMIT = \"__GIT_COMMIT__\";\n  var _Player = class _Player {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        flowController: new SyncHook(),\n        viewController: new SyncHook(),\n        view: new SyncHook(),\n        expressionEvaluator: new SyncHook(),\n        dataController: new SyncHook(),\n        schema: new SyncHook(),\n        validationController: new SyncHook(),\n        bindingParser: new SyncHook(),\n        state: new SyncHook(),\n        onStart: new SyncHook(),\n        onEnd: new SyncHook(),\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer2.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm9.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm9.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm9.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            const result = expressionEvaluator.evaluate(exp);\n            if (isPromiseLike(result)) {\n              this.logger.warn(\n                \"Async expression used as return value in in non-async context, transitioning with '*' value\"\n              );\n            }\n            flowController?.transition(String(result));\n          }\n          expressionEvaluator.reset();\n        });\n        flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ASYNC_ACTION\") {\n            const { exp } = value;\n            try {\n              let result = expressionEvaluator.evaluateAsync(exp);\n              if (isPromiseLike(result)) {\n                if (value.await) {\n                  result = await result;\n                } else {\n                  this.logger.warn(\n                    \"Unawaited promise used as return value in in non-async context, transitioning with '*' value\"\n                  );\n                }\n              } else {\n                this.logger.warn(\n                  \"Non async expression used in async action node\"\n                );\n              }\n              flowController?.transition(String(result));\n            } catch (e) {\n              flowResultDeferred.reject(e);\n            }\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n  var Player = _Player;\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","import type { BindingLike, BindingInstance } from \"./binding\";\n\n/** Check if the parameter representing a binding is already of the Binding class */\nexport function isBinding(binding: BindingLike): binding is BindingInstance {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\n\n/** Convert the string to an int if you can, otherwise just return the original string */\nexport function maybeConvertToNum(i: string): string | number {\n  const asInt = parseInt(i, 10);\n\n  if (isNaN(asInt)) {\n    return i;\n  }\n\n  return asInt;\n}\n\n/**\n * utility to convert binding into binding segments.\n */\nexport function getBindingSegments(\n  binding: BindingLike,\n): Array<string | number> {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n\n  return binding.asArray();\n}\n\n/** Like _.findIndex, but ignores types */\nexport function findInArray<T extends Record<string | number, object>>(\n  array: Array<T>,\n  key: string | number,\n  value: T,\n): number | undefined {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      // Intentional double-equals because we want '4' to be coerced to 4\n      // eslint-disable-next-line eqeqeq\n      return obj[key] == value;\n    }\n\n    return false;\n  });\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { BindingLike, BindingFactory } from \"../binding\";\nimport { BindingInstance, isBinding } from \"../binding\";\nimport { NOOP_MODEL } from \"./noop-model\";\n\nexport const ROOT_BINDING = new BindingInstance([]);\nexport type BatchSetTransaction = [BindingInstance, any][];\n\nexport type Updates = Array<{\n  /** The updated binding */\n  binding: BindingInstance;\n\n  /** The old value */\n  oldValue: any;\n\n  /** The new value */\n  newValue: any;\n\n  /** Force the Update to be included even if no data changed */\n  force?: boolean;\n}>;\n\n/** Options to use when getting or setting data */\nexport interface DataModelOptions {\n  /**\n   * The data (either to set or get) should represent a formatted value\n   * For setting data, the data will be de-formatted before continuing in the pipeline\n   * For getting data, the data will be formatted before returning\n   */\n  formatted?: boolean;\n\n  /**\n   * By default, fetching data will ignore any invalid data.\n   * You can choose to grab the queued invalid data if you'd like\n   * This is usually the case for user-inputs\n   */\n  includeInvalid?: boolean;\n\n  /**\n   * A flag to set to ignore any default value in the schema, and just use the raw value\n   */\n  ignoreDefaultValue?: boolean;\n\n  /**\n   * A flag to indicate that this update should happen silently\n   */\n  silent?: boolean;\n\n  /** Other context associated with this request */\n  context?: {\n    /** The data model to use when getting other data from the context of this request */\n    model: DataModelWithParser;\n  };\n}\n\nexport interface DataModelWithParser<Options = DataModelOptions> {\n  get(binding: BindingLike, options?: Options): any;\n  set(transaction: [BindingLike, any][], options?: Options): Updates;\n  delete(binding: BindingLike, options?: Options): void;\n}\n\nexport interface DataModelImpl<Options = DataModelOptions> {\n  get(binding: BindingInstance, options?: Options): any;\n  set(transaction: BatchSetTransaction, options?: Options): Updates;\n  delete(binding: BindingInstance, options?: Options): void;\n}\n\nexport interface DataModelMiddleware {\n  /** The name of the middleware */\n  name?: string;\n\n  set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates;\n\n  get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): any;\n\n  delete?(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): void;\n\n  reset?(): void;\n}\n\n/** Wrap the inputs of the DataModel with calls to parse raw binding inputs */\nexport function withParser<Options = unknown>(\n  model: DataModelImpl<Options>,\n  parseBinding: BindingFactory,\n): DataModelWithParser<Options> {\n  /** Parse something into a binding if it requires it */\n  function maybeParse(\n    binding: BindingLike,\n    readOnly: boolean,\n  ): BindingInstance {\n    const parsed = isBinding(binding)\n      ? binding\n      : parseBinding(binding, {\n          get: model.get,\n          set: model.set,\n          readOnly,\n        });\n\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n\n    return parsed;\n  }\n\n  return {\n    get(binding, options?: Options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options?: Options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options,\n      );\n    },\n    delete(binding, options?: Options) {\n      return model.delete(maybeParse(binding, false), options);\n    },\n  };\n}\n\n/** Wrap a middleware instance in a DataModel compliant API */\nexport function toModel(\n  middleware: DataModelMiddleware,\n  defaultOptions?: DataModelOptions,\n  next?: DataModelImpl,\n): DataModelImpl {\n  if (!next) {\n    return middleware as DataModelImpl;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction: BatchSetTransaction, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n\n      return next?.delete(binding, resolvedOptions);\n    },\n  };\n}\n\nexport type DataPipeline = Array<DataModelMiddleware | DataModelImpl>;\n\n/**\n * Given a set of steps in a pipeline, create the effective data-model\n */\nexport function constructModelForPipeline(\n  pipeline: DataPipeline,\n): DataModelImpl {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n\n  /** Default and propagate the options into the nested calls */\n  function createModelWithOptions(options?: DataModelOptions) {\n    const model: DataModelImpl =\n      pipeline.reduce<DataModelImpl | undefined>(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        undefined,\n      ) ?? NOOP_MODEL;\n\n    return model;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    },\n  };\n}\n\n/** A DataModel that manages middleware data handlers  */\nexport class PipelinedDataModel implements DataModelImpl {\n  private pipeline: DataPipeline;\n  private effectiveDataModel: DataModelImpl;\n\n  public readonly hooks = {\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n  };\n\n  constructor(pipeline: DataPipeline = []) {\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public setMiddleware(handlers: DataPipeline) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n\n  public addMiddleware(handler: DataModelMiddleware) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n\n    this.set([[ROOT_BINDING, model]]);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options,\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n\n  public get(binding: BindingInstance, options?: DataModelOptions): any {\n    return this.effectiveDataModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: DataModelOptions): void {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","import type { DataModelWithParser } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nexport type ExpressionObjectType = {\n  /** The expression to eval */\n  value: BasicExpressionTypes;\n};\n\nexport type ExpressionLiteralType =\n  | string\n  | number\n  | boolean\n  | undefined\n  | null;\n\nexport type BasicExpressionTypes =\n  | ExpressionLiteralType\n  | ExpressionObjectType\n  | Array<ExpressionLiteralType | ExpressionObjectType>;\n\nexport type ExpressionType = BasicExpressionTypes | ExpressionNode;\n\nexport interface OperatorProcessingOptions {\n  /**\n   * When set to a falsy value, the arguments passed to the handler will be raw AST Nodes\n   * This enables lazy evaluation of arguments\n   */\n  resolveParams: boolean;\n\n  /**\n   * Whether the expression should be allowed to be evaluated asynchronously\n   */\n  async?: boolean;\n}\n\nexport type BinaryOperatorBasic = (\n  left: any,\n  right: any,\n  async: boolean,\n) => unknown;\nexport type BinaryOperatorAdvanced = OperatorProcessingOptions &\n  ((ctx: ExpressionContext, left: any, right: any, async: boolean) => unknown);\n\nexport type BinaryOperator = BinaryOperatorAdvanced | BinaryOperatorBasic;\n\nexport type UnaryOperator =\n  | ((arg: any, async: boolean) => unknown)\n  | (((ctx: ExpressionContext, arg: any, async: boolean) => unknown) &\n      OperatorProcessingOptions);\n\nexport interface ExpressionContext {\n  /** A means of executing an expression */\n  evaluate: (expr: ExpressionType) => unknown;\n\n  /** The data model that expression handlers can use when fetching data */\n  model: DataModelWithParser;\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport type ExpressionHandler<\n  T extends readonly unknown[] = unknown[],\n  R = void,\n> = ((context: ExpressionContext, ...args: T) => R) &\n  Partial<OperatorProcessingOptions>;\n\nexport const ExpNodeOpaqueIdentifier: unique symbol =\n  Symbol(\"Expression Node ID\");\n\n/** Checks if the input is an already processed Expression node */\nexport function isExpressionNode(x: any): x is ExpressionNode {\n  return (\n    typeof x === \"object\" &&\n    x !== null &&\n    !Array.isArray(x) &&\n    x.__id === ExpNodeOpaqueIdentifier\n  );\n}\n\nexport interface NodePosition {\n  /** The character location */\n  character: number;\n}\n\nexport interface NodeLocation {\n  // We only care about the character offset, not the line/column for now\n  // But making these objects allows us to add more (like line number) later\n\n  /** The start of the node */\n  start: NodePosition;\n\n  /** The end of the node */\n  end: NodePosition;\n}\n\nexport interface BaseNode<T> {\n  /** The thing to discriminate the AST type on */\n  type: T;\n\n  /** How to tell this apart from other objects */\n  __id: typeof ExpNodeOpaqueIdentifier;\n\n  /** The location of the node in the source expression string */\n  location?: NodeLocation;\n\n  /**\n   * The error that occurred while parsing this node\n   * This is only set if the parsing mode is set to non-strict\n   */\n  error?: Error;\n}\n\n/** A helper interface for nodes that container left and right children */\nexport interface DirectionalNode {\n  /** The left node. Often for the left hand side of an expression */\n  left: ExpressionNode;\n\n  /** The right child. Often for the right hand side of an expression */\n  right: ExpressionNode;\n}\n\nexport interface LiteralNode extends BaseNode<\"Literal\"> {\n  /** A node that holds a literal value */\n  value: string | number;\n\n  /** The unprocessed value */\n  raw?: any;\n}\n\nexport interface BinaryNode\n  extends BaseNode<\"BinaryExpression\">,\n    DirectionalNode {\n  /** The operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface LogicalNode\n  extends BaseNode<\"LogicalExpression\">,\n    DirectionalNode {\n  /** The logical operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface UnaryNode extends BaseNode<\"UnaryExpression\"> {\n  /** The operation to perform on the node */\n  operator: string;\n\n  /** The single argument that the operation should be performed on */\n  argument: ExpressionNode;\n}\n\nexport type ThisNode = BaseNode<\"ThisExpression\">;\n\nexport interface ModelRefNode extends BaseNode<\"ModelRef\"> {\n  /** The binding that the model reference points to */\n  ref: string;\n}\n\nexport interface ObjectNode extends BaseNode<\"Object\"> {\n  /**  */\n  attributes: Array<{\n    /** The property name of the object */\n    key: ExpressionNode;\n\n    /** the associated value */\n    value: ExpressionNode;\n  }>;\n}\n\nexport interface MemberExpressionNode extends BaseNode<\"MemberExpression\"> {\n  /** The object to be introspected */\n  object: ExpressionNode;\n\n  /** If the property uses . or open-bracket */\n  computed: boolean;\n\n  /** The property to access on the object */\n  property: ExpressionNode;\n}\n\nexport interface ConditionalExpressionNode\n  extends BaseNode<\"ConditionalExpression\"> {\n  /** The test for the ternary */\n  test: ExpressionNode;\n\n  /** The truthy case for the ternary */\n  consequent: ExpressionNode;\n\n  /** The falsy case for the ternary */\n  alternate: ExpressionNode;\n}\n\nexport interface CompoundNode extends BaseNode<\"Compound\"> {\n  /** The contents of the compound expression */\n  body: ExpressionNode[];\n}\n\nexport interface CallExpressionNode extends BaseNode<\"CallExpression\"> {\n  /** The arguments to the function */\n  args: ExpressionNode[];\n\n  /** The function name */\n  callTarget: IdentifierNode;\n}\n\nexport interface ArrayExpressionNode extends BaseNode<\"ArrayExpression\"> {\n  /** The items in an array */\n  elements: ExpressionNode[];\n}\n\nexport interface IdentifierNode extends BaseNode<\"Identifier\"> {\n  /** The variable name */\n  name: string;\n}\n\nexport type AssignmentNode = BaseNode<\"Assignment\"> & DirectionalNode;\n\nexport interface ModificationNode\n  extends BaseNode<\"Modification\">,\n    DirectionalNode {\n  /** The operator for the modification */\n  operator: string;\n}\n\nexport type ExpressionNode =\n  | LiteralNode\n  | BinaryNode\n  | LogicalNode\n  | UnaryNode\n  | ThisNode\n  | ModelRefNode\n  | MemberExpressionNode\n  | ConditionalExpressionNode\n  | CompoundNode\n  | CallExpressionNode\n  | ArrayExpressionNode\n  | IdentifierNode\n  | AssignmentNode\n  | ModificationNode\n  | ObjectNode;\n\nexport type ExpressionNodeType = ExpressionNode[\"type\"];\n\nexport interface ErrorWithLocation extends Error {\n  /** The place in the string where the error occurs */\n  index: number;\n\n  /** a helpful description */\n  description: string;\n}\n","/* eslint @typescript-eslint/no-use-before-define: 0 */\n/**\n * An expression to AST parser based on JSEP: http://jsep.from.so/\n */\nimport type {\n  ErrorWithLocation,\n  ExpressionNode,\n  ExpressionNodeType,\n  NodeLocation,\n} from \"./types\";\nimport { ExpNodeOpaqueIdentifier } from \"./types\";\n\nconst PERIOD_CODE = 46; // '.'\nconst COMMA_CODE = 44; // ','\nconst SQUOTE_CODE = 39; // Single quote\nconst DQUOTE_CODE = 34; // Double quotes\nconst OPAREN_CODE = 40; // (\nconst CPAREN_CODE = 41; // )\nconst OBRACK_CODE = 91; // [\nconst CBRACK_CODE = 93; // ]\nconst QUMARK_CODE = 63; // ?\nconst SEMCOL_CODE = 59; // ;\nconst COLON_CODE = 58; // :\nconst OCURL_CODE = 123; // {\nconst CCURL_CODE = 125; // }\n\n// Operations\n// ----------\n\n// Set `t` to `true` to save space (when minified, not gzipped)\nconst t = true;\n\n// Use a quickly-accessible map to store all of the unary operators\n// Values are set to `true` (it really doesn't matter)\nconst unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n\n// Also use a map for the binary operations but set their values to their\n// binary precedence for quick reference:\n// see [Operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\nconst binaryOps: Record<string, number> = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14,\n};\n\n/** Wrap the message and index in an error and throw it */\nfunction throwError(message: string, index: number): ErrorWithLocation {\n  const err = new Error(`${message} at character ${index}`);\n\n  (err as ErrorWithLocation).index = index;\n  (err as ErrorWithLocation).description = message;\n\n  throw err;\n}\n\n/** Create a new location marker that spans both nodes */\nfunction createSpanningLocation(start?: NodeLocation, end?: NodeLocation) {\n  if (!start || !end) {\n    return;\n  }\n\n  return {\n    start: start.start,\n    end: end.end,\n  };\n}\n\n/** Get return the longest key length of any object */\nfunction getMaxKeyLen(obj: object): number {\n  let maxLen = 0;\n\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n\n  return maxLen;\n}\n\nconst maxUnopLen = getMaxKeyLen(unaryOps);\nconst maxBinopLen = getMaxKeyLen(binaryOps);\n\n// Literals\n// ----------\n// Store the values to return for the various literals we may encounter\nconst literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined,\n} as const;\n\n// Except for `this`, which is special. This could be changed to something like `'self'` as well\nconst thisStr = \"this\";\n\n/** Returns the precedence of a binary operator or `0` if it isn't a binary operator */\nfunction binaryPrecedence(opVal: string): number {\n  return binaryOps[opVal] || 0;\n}\n\n/**\n * Utility function (gets called from multiple places)\n * Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n */\nfunction createBinaryExpression(\n  operator: string | boolean,\n  left: string,\n  right: string,\n  location?: NodeLocation,\n) {\n  let type: ExpressionNodeType;\n\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (\n    operator === \"+=\" ||\n    operator === \"-=\" ||\n    operator === \"&=\" ||\n    operator === \"|=\"\n  ) {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location,\n  };\n}\n\n/** `ch` is a character code in the next three functions */\nfunction isDecimalDigit(ch: number) {\n  return ch >= 48 && ch <= 57; // 0...9\n}\n\n/** Check if the char is the character code for the start of an identifier */\nfunction isIdentifierStart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122)\n  ); // A...z\n}\n\n/** Check if the char code is still a valid identifier portion */\nfunction isIdentifierPart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122) || // A...z\n    (ch >= 48 && ch <= 57)\n  ); // 0...9\n}\n\n/** Check if the 2 chars are the start of a model reference */\nfunction isModelRefStart(ch0: number, ch1: number) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE; // '{{'\n}\n\n/** Parse out an expression from the string */\nexport function parseExpression(\n  expr: string,\n  options?: {\n    /** If true (the default), will throw on invalid expressions */\n    strict?: boolean;\n  },\n): ExpressionNode {\n  const strictMode = options?.strict ?? true;\n\n  // `index` stores the character number we are currently at while `length` is a constant\n  // All of the gobbles below will modify `index` as we move along\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n\n  let index = 0;\n\n  /** Create a location object  */\n  const getLocation = (startChar: number) => {\n    return {\n      start: {\n        character: startChar,\n      },\n      end: {\n        character: index,\n      },\n    };\n  };\n\n  /** Grab the char at the index from the expression */\n  function exprI(i: number) {\n    return charAtFunc.call(expr, i);\n  }\n\n  /** Grab the unicode char at the index in the expression */\n  function exprICode(i: number) {\n    return charCodeAtFunc.call(expr, i);\n  }\n\n  /**\n   * Gobble an object and store the object in an attributes array\n   */\n  function gobbleObjects() {\n    const attributes: Array<{\n      /** The property name of the object */\n      key: any;\n\n      /** the associated value */\n      value: any;\n    }> = [];\n    let closed = false;\n\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n\n    // get rid of OCURL_CODE\n    ++index;\n\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      // check for end\n      if (chCode === CCURL_CODE) {\n        // if we are at the end but a key was defined\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        // check for key\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n\n        // get key\n        key = gobbleStringLiteral();\n        // remove spaces\n        gobbleSpaces();\n        // remove colon\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n\n        shouldDefineKey = true;\n        key = undefined;\n        value = undefined;\n      }\n\n      chCode = exprICode(index);\n    }\n\n    // throw error if object is not closed\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Push `index` up to the next non-space character\n   */\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    // Space or tab\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n\n  /**\n   * The main parsing function. Much of this code is dedicated to ternary expressions\n   */\n  function gobbleExpression(): ExpressionNode {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      // Ternary expression: test ? consequent : alternate\n      index++;\n      const consequent = gobbleExpression();\n\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n\n      gobbleSpaces();\n\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      throwError(\"Expected :\", index);\n    }\n\n    return test;\n  }\n\n  /**\n   * Search for the operation portion of the string (e.g. `+`, `===`)\n   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n   * and move down from 3 to 2 to 1 character until a matching binary operation is found\n   * then, return that binary operation\n   */\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * This function is responsible for gobbling an individual expression,\n   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n   */\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n\n    // First, try to get the leftmost thing\n    // Then, check to see if there's a binary operator operating on that leftmost thing\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n\n    // If there wasn't a binary operator, just return the leftmost node\n    if (!biop) {\n      return left;\n    }\n\n    // Otherwise, we need to start a stack to properly place the binary operations in their\n    // precedence structure\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n\n    const stack = [left, biopInfo, right];\n\n    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n\n      if (prec === 0) {\n        break;\n      }\n\n      biopInfo = { value: biop, prec };\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location),\n        );\n        stack.push(node);\n      }\n\n      node = gobbleToken();\n\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n\n    i = stack.length - 1;\n    node = stack[i];\n\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location),\n      );\n      i -= 2;\n    }\n\n    return node;\n  }\n\n  /**\n   * An individual part of a binary expression:\n   * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n   */\n  function gobbleToken(): any {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      // Char code 46 is a dot `.` which can start off a numeric literal\n      return gobbleNumericLiteral();\n    }\n\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      // Single or double quotes\n      return gobbleStringLiteral();\n    }\n\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      // Open parenthesis\n      // `foo`, `bar.baz`\n      return gobbleVariable();\n    }\n\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n\n    // not a double bracket: {{}} but if its a single {}\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n   * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n   */\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n\n    if (exprICode(index) === PERIOD_CODE) {\n      // Can start with a decimal marker\n      num += exprI(index++);\n\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      // Exponent marker\n      num += exprI(index++);\n      ch = exprI(index);\n\n      if (ch === \"+\" || ch === \"-\") {\n        // Exponent sign\n        num += exprI(index++);\n      }\n\n      while (isDecimalDigit(exprICode(index))) {\n        // Exponent itself\n        num += exprI(index++);\n      }\n\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n\n    const chCode = exprICode(index);\n    // Check to make sure this isn't a variable name that start with a number (123abc)\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index,\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Parses a string literal, staring with single or double quotes with basic support for escape codes\n   * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n   */\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n\n    while (index < length) {\n      let ch = exprI(index++);\n\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n\n      // Check for all of the common escape codes\n      ch = exprI(index++);\n\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\u000B\";\n          break;\n        default:\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Model refs are bindings wrapped in 2 sets of double curlys\n   * e.g. {{foo.bar.ref}}\n   */\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n\n    index += 2; // Skip the {{\n    while (index < length) {\n      const ch = exprI(index++);\n\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Gobbles only identifiers\n   * e.g.: `foo`, `_value`, `$x1`\n   * Also, this function checks if that identifier is a literal:\n   * (e.g. `true`, `false`, `null`) or `this`\n   */\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n\n    const identifier = expr.slice(start, index);\n\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: (literals as any)[identifier],\n        raw: identifier,\n        location: getLocation(start),\n      };\n    }\n\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start),\n      };\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start),\n    };\n  }\n\n  /**\n   * Gobbles a list of arguments within the context of a function call\n   * or array literal. This function also assumes that the opening character\n   * `(` or `[` has already been gobbled, and gobbles expressions and commas\n   * until the terminator character `)` or `]` is encountered.\n   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n   */\n  function gobbleArguments(termination: number) {\n    const args = [];\n    let charIndex;\n    let node;\n\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n\n      if (charIndex === termination) {\n        // Done parsing\n        index++;\n        break;\n      }\n\n      if (charIndex === COMMA_CODE) {\n        // Between expressions\n        index++;\n        continue;\n      }\n\n      node = gobbleExpression();\n\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n\n      args.push(node);\n    }\n\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n\n    return args;\n  }\n\n  /**\n   * Gobble a non-literal variable name. This variable name may include properties\n   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n   * It also gobbles function calls:\n   * e.g. `Math.acos(obj.angle)`\n   */\n  function gobbleVariable(): ExpressionNode {\n    let charIndex = exprICode(index);\n    let node: any =\n      charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n\n    while (\n      charIndex === PERIOD_CODE ||\n      charIndex === OBRACK_CODE ||\n      charIndex === OPAREN_CODE\n    ) {\n      index++;\n\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex),\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex),\n        };\n\n        gobbleSpaces();\n        charIndex = exprICode(index);\n\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        // A function call is being made; gobble all the arguments\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n\n    return node;\n  }\n\n  /**\n   * Responsible for parsing a group of things within parentheses `()`\n   * This function assumes that it needs to gobble the opening parenthesis\n   * and then tries to gobble everything within that parenthesis, assuming\n   * that the next thing it should see is the close parenthesis. If not,\n   * then the expression probably doesn't have a `)`\n   */\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n\n    throwError(\"Unclosed (\", index);\n  }\n\n  /**\n   * Responsible for parsing Array literals `[1, 2, 3]`\n   * This function assumes that it needs to gobble the opening bracket\n   * and then tries to gobble the expressions as arguments.\n   */\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  const nodes = [];\n\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n\n      // Expressions can be separated by semicolons, commas, or just inferred without any\n      // separators\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++; // ignore separators\n        continue;\n      }\n\n      const node = gobbleExpression();\n\n      // Try to gobble each expression individually\n      if (node) {\n        nodes.push(node);\n        // If we weren't able to find a binary expression and are out of room, then\n        // the expression passed in probably has too much\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n\n    // If there's only one expression just try returning the expression\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e,\n    };\n  }\n}\n","/**\n * Promise detection that handles various Promise implementations\n * and reduces false positives from objects with coincidental 'then' methods\n */\nexport function isPromiseLike(value: any): value is Promise<any> {\n  return (\n    value != null &&\n    typeof value === \"object\" &&\n    typeof value.then === \"function\" &&\n    // Additional safeguards against false positives\n    (value instanceof Promise ||\n      // Check for standard Promise constructor name\n      value.constructor?.name === \"Promise\" ||\n      // Verify it has other Promise-like methods to reduce false positives\n      (typeof value.catch === \"function\" &&\n        typeof value.finally === \"function\"))\n  );\n}\n\n/** Unique private symbol to indicate async functions wrapped in Player's await function */\nexport const AwaitableSymbol: unique symbol = Symbol(\"Awaitable\");\n\n/**\n * Wrapper for Promises that are generated from the `await` function with a unique symbol so we can\n * determine when a promise should be awaited by us (as its returned by await) or a promise thats\n * generated from any async function\n */\nexport interface Awaitable<T> extends Promise<T> {\n  /** Prevent unwrapped then from being exposed from underlying promise */\n  then: never;\n  /** Internalally awaitable wrapper around underlying then function */\n  awaitableThen<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | undefined\n      | null,\n  ): Promise<TResult1 | TResult2>;\n  /** Symbol to identify this as something returned by await */\n  [AwaitableSymbol]: symbol;\n}\n\n/** Typeguard for AwaitableResult */\nexport function isAwaitable(val: unknown): val is Awaitable<any> {\n  return (\n    isPromiseLike(val) && (val as Awaitable<any>)[AwaitableSymbol] !== undefined\n  );\n}\n\n/**\n * Wraps Promise.all in AwaitableResult wrapper to allow internal functions to await internally produced promises\n */\nexport function collateAwaitable<T extends readonly unknown[] | []>(\n  promises: T,\n): Awaitable<any> {\n  const result = Promise.all(promises) as Promise<any>;\n  return makeAwaitable(result);\n}\n\n/**\n * Add AwaitableSymbol to base promise and promise returned by then() function\n */\nexport function makeAwaitable(promise: Promise<any>): Awaitable<any> {\n  (promise as Awaitable<any>)[AwaitableSymbol] = AwaitableSymbol;\n  (promise as any).awaitableThen = (arg: any) => {\n    return makeAwaitable(promise.then(arg));\n  };\n  return promise as Awaitable<any>;\n}\n","import { isExpressionNode } from \"./types\";\nimport type {\n  ErrorWithLocation,\n  ExpressionHandler,\n  ExpressionNode,\n  ExpressionObjectType,\n  ExpressionType,\n  NodeLocation,\n  NodePosition,\n} from \"./types\";\n\n/** Generates a function by removing the first context argument */\nexport function withoutContext<T extends unknown[], Return>(\n  fn: (...args: T) => Return,\n): ExpressionHandler<T, Return> {\n  return (_context, ...args) => fn(...args);\n}\n\n/** Checks if the location includes the target position  */\nfunction isInRange(position: NodePosition, location: NodeLocation) {\n  return (\n    position.character >= location.start.character &&\n    position.character <= location.end.character\n  );\n}\n\n/** Get the node in the expression that's closest to the desired position */\nexport function findClosestNodeAtPosition(\n  node: ExpressionNode,\n  position: NodePosition,\n): ExpressionNode | undefined {\n  // This is just mapping recursively over nodes in the tree\n\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check =\n        findClosestNodeAtPosition(node.left, position) ??\n        findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n\n      break;\n    }\n\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n\n      break;\n    }\n\n    case \"MemberExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.object, position) ??\n        findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ConditionalExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.test, position) ??\n        findClosestNodeAtPosition(node.consequent, position) ??\n        findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements =\n        node.type === \"ArrayExpression\" ? node.elements : node.body;\n\n      const anyElements = elements.find((e) =>\n        findClosestNodeAtPosition(e, position),\n      );\n\n      if (anyElements) {\n        return anyElements;\n      }\n\n      break;\n    }\n\n    case \"Object\": {\n      const checkObject = node.attributes.reduce<ExpressionNode | undefined>(\n        (found, next) => {\n          return (\n            found ??\n            findClosestNodeAtPosition(next.key, position) ??\n            findClosestNodeAtPosition(next.value, position)\n          );\n        },\n        undefined,\n      );\n\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"CallExpression\": {\n      const anyArgs =\n        node.args.find((arg) => {\n          return findClosestNodeAtPosition(arg, position);\n        }) ?? findClosestNodeAtPosition(node.callTarget, position);\n\n      if (anyArgs) {\n        return anyArgs;\n      }\n\n      break;\n    }\n  }\n\n  // Lastly check for yourself\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\n\n/** Checks if the expression is a simple type */\nexport function isObjectExpression(\n  expr: ExpressionType,\n): expr is ExpressionObjectType {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n\n  return (\n    typeof expr === \"object\" &&\n    expr !== null &&\n    !Array.isArray(expr) &&\n    \"value\" in expr\n  );\n}\n\n/**\n * Type guard for ErrorWithLocation\n */\nexport function isErrorWithLocation(error: Error): error is ErrorWithLocation {\n  return (\n    (error as ErrorWithLocation).index !== undefined &&\n    (error as ErrorWithLocation).description !== undefined\n  );\n}\n","import { SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport { parseExpression } from \"./parser\";\nimport * as DEFAULT_EXPRESSION_HANDLERS from \"./evaluator-functions\";\nimport { collateAwaitable, isAwaitable, isPromiseLike } from \"./async\";\nimport { isExpressionNode } from \"./types\";\nimport { isObjectExpression } from \"./utils\";\nimport type {\n  ExpressionNode,\n  BinaryOperator,\n  UnaryOperator,\n  ExpressionType,\n  ExpressionContext,\n  ExpressionHandler,\n} from \"./types\";\n\n/** a && b -- but handles short cutting if the first value is false */\nconst andandOperator: BinaryOperator = (ctx, a, b, async) => {\n  return LogicalOperators.and(ctx, a, b, async);\n};\nandandOperator.resolveParams = false;\n\n/** a || b -- but with short cutting if first value is true */\nconst ororOperator: BinaryOperator = (ctx, a, b, async) => {\n  return LogicalOperators.or(ctx, a, b, async);\n};\nororOperator.resolveParams = false;\n\nconst DEFAULT_BINARY_OPERATORS: Record<string, BinaryOperator> = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a: any, b: any) => a + b,\n  \"-\": (a: any, b: any) => a - b,\n  \"*\": (a: any, b: any) => a * b,\n  \"/\": (a: any, b: any) => a / b,\n  \"%\": (a: any, b: any) => a % b,\n\n  // Promise-aware comparison operators\n  // eslint-disable-next-line\n  \"==\": makePromiseAwareBinaryOp((a: any, b: any) => a == b),\n  // eslint-disable-next-line\n  \"!=\": makePromiseAwareBinaryOp((a: any, b: any) => a != b),\n  \">\": makePromiseAwareBinaryOp((a: any, b: any) => a > b),\n  \">=\": makePromiseAwareBinaryOp((a: any, b: any) => a >= b),\n  \"<\": makePromiseAwareBinaryOp((a: any, b: any) => a < b),\n  \"<=\": makePromiseAwareBinaryOp((a: any, b: any) => a <= b),\n  \"!==\": makePromiseAwareBinaryOp((a: any, b: any) => a !== b),\n  \"===\": makePromiseAwareBinaryOp((a: any, b: any) => a === b),\n\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n\n  // eslint-disable-next-line\n  \"|\": (a: any, b: any) => a | b,\n\n  // eslint-disable-next-line\n  \"&\": (a: any, b: any) => a & b,\n  \"+=\": (a: any, b: any) => a + b,\n  \"-=\": (a: any, b: any) => a - b,\n\n  // eslint-disable-next-line\n  \"&=\": (a: any, b: any) => a & b,\n\n  // eslint-disable-next-line\n  \"|=\": (a: any, b: any) => a | b,\n};\n\nconst DEFAULT_UNARY_OPERATORS: Record<string, UnaryOperator> = {\n  \"-\": (a: any) => -a,\n  \"+\": (a: any) => Number(a),\n  \"!\": makePromiseAwareUnaryOp((a: any) => !a),\n};\n\n/**\n * Higher-order function that makes any binary operation Promise-aware\n */\nfunction makePromiseAwareBinaryOp<T>(\n  operation: (a: any, b: any) => T,\n): (a: any, b: any, async: boolean) => T | Promise<T> {\n  return (a: any, b: any, async: boolean) => {\n    //async handler\n    if (async && (isAwaitable(a) || isAwaitable(b))) {\n      return collateAwaitable([\n        Promise.resolve(a),\n        Promise.resolve(b),\n      ]).awaitableThen(([resolvedA, resolvedB]) =>\n        operation(resolvedA, resolvedB),\n      );\n    }\n    //sync handler\n    return operation(a, b);\n  };\n}\n\n/**\n * Higher-order function that makes any unary operation Promise-aware\n */\nfunction makePromiseAwareUnaryOp<T>(\n  operation: (a: any) => T,\n): (a: any, async: boolean) => T | Promise<T> {\n  return (a: any, async: boolean) => {\n    //async handler\n    if (async && isAwaitable(a)) {\n      return a.awaitableThen((resolved: any) => operation(resolved));\n    }\n    //sync handler\n    return operation(a);\n  };\n}\n\n/**\n * Utility for handling conditional branching with Promises\n */\nfunction handleConditionalBranching(\n  testValue: any,\n  getTrueBranch: () => any,\n  getFalseBranch: () => any,\n  resolveNode: (node: any) => any,\n  async: boolean,\n): any {\n  //async handler\n  if (async && isAwaitable(testValue)) {\n    return testValue.awaitableThen((resolved: boolean) => {\n      const branch = resolved ? getTrueBranch() : getFalseBranch();\n      const branchResult = resolveNode(branch);\n      return isAwaitable(branchResult)\n        ? Promise.resolve(branchResult)\n        : branchResult;\n    });\n  }\n\n  // sync handler\n  const branch = testValue ? getTrueBranch() : getFalseBranch();\n  return resolveNode(branch);\n}\n\n/**\n * Utility for handling collections (arrays/objects) with potential Promises\n */\nconst PromiseCollectionHandler = {\n  /**\n   * Handle array with potential Promise elements\n   */\n  handleArray<T>(items: T[], async: boolean): T[] | Promise<T[]> {\n    if (!async) {\n      return items;\n    }\n    const hasPromises = items.some((item) => isAwaitable(item));\n    return hasPromises ? collateAwaitable(items) : items;\n  },\n\n  /**\n   * Handle object with potential Promise keys/values\n   */\n  handleObject(\n    attributes: Array<{ key: any; value: any }>,\n    resolveNode: (node: any) => any,\n    async: boolean,\n  ): Record<string, any> | Promise<Record<string, any>> {\n    const resolvedAttributes: Record<string, any> = {};\n    const promises: Promise<void>[] = [];\n    let hasPromises = false;\n\n    attributes.forEach((attr) => {\n      const key = resolveNode(attr.key);\n      const value = resolveNode(attr.value);\n\n      //async handler\n      if (async && (isAwaitable(key) || isAwaitable(value))) {\n        hasPromises = true;\n        const keyPromise = Promise.resolve(key);\n        const valuePromise = Promise.resolve(value);\n\n        promises.push(\n          collateAwaitable([keyPromise, valuePromise]).awaitableThen(\n            ([resolvedKey, resolvedValue]) => {\n              resolvedAttributes[resolvedKey] = resolvedValue;\n            },\n          ),\n        );\n      } else {\n        resolvedAttributes[key] = value;\n      }\n    });\n\n    return hasPromises\n      ? collateAwaitable(promises).awaitableThen(() => resolvedAttributes)\n      : resolvedAttributes;\n  },\n};\n\n/**\n * Smart logical operators that handle short-circuiting with Promises\n */\nconst LogicalOperators = {\n  and: (ctx: any, leftNode: any, rightNode: any, async: boolean) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (async && isAwaitable(leftResult)) {\n      return leftResult.awaitableThen((awaitedLeft: any) => {\n        if (!awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isAwaitable(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult && ctx.evaluate(rightNode);\n  },\n\n  or: (ctx: any, leftNode: any, rightNode: any, async: boolean) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (async && isAwaitable(leftResult)) {\n      return leftResult.awaitableThen((awaitedLeft: any) => {\n        if (awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isAwaitable(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult || ctx.evaluate(rightNode);\n  },\n};\n\nexport interface HookOptions extends ExpressionContext {\n  /** Given an expression node  */\n  resolveNode: (node: ExpressionNode) => any;\n\n  /** Enabling this flag skips calling the onError hook, and just throws errors back to the caller.\n   * The caller is responsible for handling the error.\n   */\n  throwErrors?: boolean;\n\n  /** Whether expressions should be parsed strictly or not */\n  strict?: boolean;\n\n  /** Whether the expression should be evaluated asynchronously */\n  async?: boolean;\n}\n\nexport type ExpressionEvaluatorOptions = Omit<\n  HookOptions,\n  \"resolveNode\" | \"evaluate\"\n>;\n\nexport type ExpressionEvaluatorFunction = (\n  exp: ExpressionType,\n  options?: ExpressionEvaluatorOptions,\n) => any;\n\n/**\n * The expression evaluator is responsible for parsing and executing anything in the custom expression language\n * */\nexport class ExpressionEvaluator {\n  private readonly vars: Record<string, any> = {};\n  public readonly hooks: {\n    resolve: SyncWaterfallHook<[any, ExpressionNode, HookOptions]>;\n    resolveOptions: SyncWaterfallHook<[HookOptions]>;\n    beforeEvaluate: SyncWaterfallHook<[ExpressionType, HookOptions]>;\n    onError: SyncBailHook<[Error], true>;\n  } = {\n    /** Resolve an AST node for an expression to a value */\n    resolve: new SyncWaterfallHook<[any, ExpressionNode, HookOptions]>(),\n    /** Gets the options that will be passed in calls to the resolve hook */\n    resolveOptions: new SyncWaterfallHook<[HookOptions]>(),\n    /** Allows users to change the expression to be evaluated before processing */\n    beforeEvaluate: new SyncWaterfallHook<[ExpressionType, HookOptions]>(),\n    /**\n     * An optional means of handling an error in the expression execution\n     * Return true if handled, to stop propagation of the error\n     */\n    onError: new SyncBailHook<[Error], true>(),\n  };\n\n  private readonly expressionsCache: Map<string, ExpressionNode> = new Map();\n\n  private readonly defaultHookOptions: HookOptions;\n\n  public readonly operators: {\n    binary: Map<string, BinaryOperator>;\n    unary: Map<string, UnaryOperator>;\n    expressions: Map<string, ExpressionHandler<any, any>>;\n  } = {\n    binary: new Map<string, BinaryOperator>(\n      Object.entries(DEFAULT_BINARY_OPERATORS),\n    ),\n    unary: new Map<string, UnaryOperator>(\n      Object.entries(DEFAULT_UNARY_OPERATORS),\n    ),\n    expressions: new Map<string, ExpressionHandler<any, any>>([\n      ...Object.entries(DEFAULT_EXPRESSION_HANDLERS),\n      [\"await\", DEFAULT_EXPRESSION_HANDLERS.waitFor],\n    ]),\n  };\n\n  public reset(): void {\n    this.expressionsCache.clear();\n  }\n\n  constructor(defaultOptions: ExpressionEvaluatorOptions) {\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node: ExpressionNode) =>\n        this._execAST(node, this.defaultHookOptions),\n    };\n\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n      return this._resolveNode(result, node, options);\n    });\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  public evaluate(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): any {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node: ExpressionNode) => this._execAST(node, resolvedOpts),\n    });\n\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n\n    // Unwrap any returned expression type\n    // Since this could also be an object type, we need to recurse through it until we find the end\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n\n    // Check for literals\n    if (\n      typeof expression === \"number\" ||\n      typeof expression === \"boolean\" ||\n      expression === undefined ||\n      expression === null\n    ) {\n      return expression;\n    }\n\n    // Skip doing anything with objects that are _actually_ just parsed expression nodes\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null,\n      );\n    }\n\n    return this._execString(String(expression), resolvedOpts);\n  }\n\n  /**\n   * Evaluate functions in an async context\n   * @experimental These Player APIs are in active development and may change. Use with caution\n   */\n  public evaluateAsync(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): Promise<any> {\n    // handle async expression block\n    if (Array.isArray(expr)) {\n      return collateAwaitable(\n        expr.map(async (exp) =>\n          this.evaluate(exp, { ...options, async: true } as any),\n        ),\n      ).awaitableThen((values) => {\n        return values.pop();\n      });\n    } else {\n      return this.evaluate(expr, { ...options, async: true } as any);\n    }\n  }\n\n  public addExpressionFunction<T extends readonly unknown[], R>(\n    name: string,\n    handler: ExpressionHandler<T, R>,\n  ): void {\n    this.operators.expressions.set(name, handler);\n  }\n\n  public addBinaryOperator(operator: string, handler: BinaryOperator): void {\n    this.operators.binary.set(operator, handler);\n  }\n\n  public addUnaryOperator(operator: string, handler: UnaryOperator): void {\n    this.operators.unary.set(operator, handler);\n  }\n\n  public setExpressionVariable(name: string, value: unknown): void {\n    this.vars[name] = value;\n  }\n\n  public getExpressionVariable(name: string): unknown {\n    return this.vars[name];\n  }\n\n  private _execAST(node: ExpressionNode, options: HookOptions): any {\n    return this.hooks.resolve.call(undefined, node, options);\n  }\n\n  private _execString(exp: string, options: HookOptions) {\n    if (exp === \"\") {\n      return exp;\n    }\n\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n    if (matches) {\n      const [, matched] = Array.from(matches); // In case the expression was surrounded by @[ ]@\n      if (matched) {\n        matchedExp = matched;\n      }\n    }\n\n    let storedAST: ExpressionNode;\n\n    try {\n      storedAST =\n        this.expressionsCache.get(matchedExp) ??\n        parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error parsing expression: ${exp}`, e);\n      }\n\n      return;\n    }\n\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n\n  private _resolveNode(\n    _currentValue: any,\n    node: ExpressionNode,\n    options: HookOptions,\n  ): unknown {\n    const { resolveNode, model } = options;\n    const isAsync = options.async ?? false;\n\n    const expressionContext: ExpressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options),\n    };\n\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right, isAsync);\n          }\n\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          // Handle promises in binary operations\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            return collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) =>\n                operator(expressionContext, leftVal, rightVal, isAsync),\n            );\n          }\n\n          return operator(expressionContext, left, right, isAsync);\n        }\n\n        const left = resolveNode(node.left);\n        const right = resolveNode(node.right);\n\n        if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n          return collateAwaitable([left, right]).awaitableThen(\n            ([leftVal, rightVal]) => operator(leftVal, rightVal, isAsync),\n          );\n        }\n\n        return operator(left, right, isAsync);\n      }\n\n      return;\n    }\n\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.argument, isAsync);\n          }\n\n          const arg = resolveNode(node.argument);\n\n          if (options.async && isAwaitable(arg)) {\n            return arg.awaitableThen((argVal) =>\n              operator(expressionContext, argVal, isAsync),\n            );\n          }\n\n          return operator(expressionContext, arg, isAsync);\n        }\n\n        const arg = resolveNode(node.argument);\n\n        if (options.async && isAwaitable(arg)) {\n          return arg.awaitableThen((argVal) => operator(argVal, isAsync));\n        }\n\n        return operator(arg, isAsync);\n      }\n\n      return;\n    }\n\n    if (node.type === \"Object\") {\n      return PromiseCollectionHandler.handleObject(\n        node.attributes,\n        resolveNode,\n        options.async || false,\n      );\n    }\n\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n\n      const operator = this.operators.expressions.get(expressionName);\n\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n\n      if (\n        operator.name === DEFAULT_EXPRESSION_HANDLERS.waitFor.name &&\n        !options.async\n      ) {\n        throw new Error(\"Usage of await outside of async context\");\n      }\n\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n\n      const args = node.args.map((n) => resolveNode(n));\n\n      // Check if any arguments are promises\n      if (options.async) {\n        const hasPromises = args.some(isAwaitable);\n\n        if (hasPromises) {\n          return collateAwaitable(args).awaitableThen((resolvedArgs) =>\n            operator(expressionContext, ...resolvedArgs),\n          );\n        }\n      }\n\n      return operator(expressionContext, ...args);\n    }\n\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n\n      if (options.async && (isAwaitable(obj) || isAwaitable(prop))) {\n        return collateAwaitable([obj, prop]).awaitableThen(\n          ([objVal, propVal]) => objVal[propVal],\n        );\n      }\n\n      return obj[prop];\n    }\n\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n\n        if (isPromiseLike(value)) {\n          if (options.async && isAwaitable(value)) {\n            return value.awaitableThen((resolvedValue) => {\n              model.set([[(node.left as any).ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          } else {\n            options.logger?.warn(\n              \"Unawaited promise written to mode, this behavior is undefined and may change in future releases\",\n            );\n          }\n        }\n\n        model.set([[(node.left as any).ref, value]]);\n        return value;\n      }\n\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n\n        if (options.async && isAwaitable(value)) {\n          return value.awaitableThen((resolvedValue) => {\n            this.vars[(node.left as any).name] = resolvedValue;\n            return resolvedValue;\n          });\n        }\n\n        this.vars[(node.left as any).name] = value;\n        return value;\n      }\n\n      return;\n    }\n\n    if (node.type === \"ConditionalExpression\") {\n      const testResult = resolveNode(node.test);\n\n      return handleConditionalBranching(\n        testResult,\n        () => node.consequent,\n        () => node.alternate,\n        resolveNode,\n        isAsync,\n      );\n    }\n\n    if (node.type === \"ArrayExpression\") {\n      const results = node.elements.map((ele) => resolveNode(ele));\n      return PromiseCollectionHandler.handleArray(results, isAsync);\n    }\n\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n\n      if (operation) {\n        let newValue;\n\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(\n              expressionContext,\n              node.left,\n              node.right,\n              isAsync,\n            );\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n\n            if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n              newValue = collateAwaitable([left, right]).awaitableThen(\n                ([leftVal, rightVal]) =>\n                  operation(expressionContext, leftVal, rightVal, isAsync),\n              );\n            } else {\n              newValue = operation(expressionContext, left, right, isAsync);\n            }\n          }\n        } else {\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            newValue = collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) => operation(leftVal, rightVal, isAsync),\n            );\n          } else {\n            newValue = operation(left, right, isAsync);\n          }\n        }\n\n        if (node.left.type === \"ModelRef\") {\n          if (options.async && isAwaitable(newValue)) {\n            return newValue.awaitableThen((resolvedValue) => {\n              model.set([[(node.left as any).ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          }\n          model.set([[(node.left as any).ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          if (options.async && isAwaitable(newValue)) {\n            return newValue.awaitableThen((resolvedValue) => {\n              this.vars[(node.left as any).name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[(node.left as any).name] = newValue;\n        }\n\n        return newValue;\n      }\n\n      return resolveNode(node.left);\n    }\n  }\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Schema as SchemaType, Formatting } from \"@player-ui/types\";\n\nimport type { BindingInstance } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { FormatDefinition, FormatOptions, FormatType } from \"./types\";\n\n/** A function that returns itself */\nconst identify = (val: any) => val;\n\n/** Expand the authored schema into a set of paths -> DataTypes */\nexport function parse(\n  schema: SchemaType.Schema,\n): Map<string, SchemaType.DataTypes> {\n  const expandedPaths = new Map<string, SchemaType.DataTypes>();\n\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n\n  const parseQueue: Array<{\n    /** The node to process */\n    node: SchemaType.Node;\n\n    /** The path in the data-model this node represents */\n    path: Array<string>;\n\n    /** A set of visited DataTypes to prevent loops */\n    visited: Set<string>;\n  }> = [{ node: schema.ROOT, path: [], visited: new Set() }];\n\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n\n    if (!next) {\n      break;\n    }\n\n    const { node, path, visited } = next;\n\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n\n      const nestedPathStr = nestedPath.join(\".\");\n\n      if (expandedPaths.has(nestedPathStr)) {\n        // We've gone in a loop. Panic\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\",\n        );\n      }\n\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`,\n        );\n      }\n\n      expandedPaths.set(nestedPathStr, type);\n\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: new Set([...visited, type.type]),\n        });\n      }\n    });\n  }\n\n  return expandedPaths;\n}\n\n/**\n * The Schema is the central hub for all data invariants, and metaData associated with the data-model itself\n * Outside of the types defined in the JSON payload, it doesn't manage or keep any state.\n * It simply servers as an orchestrator for other modules to interface w/ the schema.\n */\nexport class SchemaController implements ValidationProvider {\n  private formatters: Map<string, FormatType<any, any, FormatOptions>> =\n    new Map();\n\n  private types: Map<string, SchemaType.DataType<any>> = new Map();\n  public readonly schema: Map<string, SchemaType.DataTypes> = new Map();\n\n  private bindingSchemaNormalizedCache: Map<BindingInstance, string> =\n    new Map();\n\n  public readonly hooks = {\n    resolveTypeForBinding: new SyncWaterfallHook<\n      [SchemaType.DataTypes | undefined, BindingInstance]\n    >(),\n  };\n\n  constructor(schema?: SchemaType.Schema) {\n    this.schema = schema ? parse(schema) : new Map();\n  }\n\n  public addFormatters(fns: Array<FormatType<any, any, FormatOptions>>) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n\n  public addDataTypes(types: Array<SchemaType.DataType<any>>) {\n    types.forEach((t) => {\n      this.types.set(t.type, t);\n    });\n  }\n\n  getValidationsForBinding(\n    binding: BindingInstance,\n  ): Array<ValidationObject> | undefined {\n    const typeDef = this.getApparentType(binding);\n\n    if (!typeDef?.validation?.length) {\n      return undefined;\n    }\n\n    // Set the defaults for schema-level validations\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef,\n    }));\n  }\n\n  private normalizeBinding(binding: BindingInstance): string {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray\n      .map((p) => (typeof p === \"number\" ? \"[]\" : p))\n      .join(\".\");\n\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray\n        .map((p) => (p === item ? \"{}\" : p))\n        .join(\".\");\n\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n\n    return normalized;\n  }\n\n  public getType(binding: BindingInstance): SchemaType.DataTypes | undefined {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding,\n    );\n  }\n\n  public getApparentType(\n    binding: BindingInstance,\n  ): SchemaType.DataTypes | undefined {\n    const schemaType = this.getType(binding);\n\n    if (schemaType === undefined) {\n      return undefined;\n    }\n\n    const baseType = this.getTypeDefinition(schemaType?.type);\n\n    if (baseType === undefined) {\n      return schemaType;\n    }\n\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...(schemaType.validation ?? []),\n        ...(baseType.validation ?? []),\n      ],\n    };\n  }\n\n  public getTypeDefinition(dataType: string) {\n    return this.types.get(dataType);\n  }\n\n  public getFormatterForType(\n    formatReference: Formatting.Reference,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const { type: formatType, ...options } = formatReference;\n\n    const formatter = this.formatters.get(formatType);\n\n    if (!formatter) {\n      return;\n    }\n\n    return {\n      format: formatter.format\n        ? (val) => formatter.format?.(val, options)\n        : identify,\n      deformat: formatter.deformat\n        ? (val) => formatter.deformat?.(val, options)\n        : identify,\n    };\n  }\n\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  public getFormatter(\n    binding: BindingInstance,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const type = this.getApparentType(binding);\n\n    if (!type?.format) {\n      return undefined;\n    }\n\n    return this.getFormatterForType(type.format);\n  }\n}\n","import { setIn } from \"timm\";\nimport type { Expression } from \"@player-ui/types\";\nimport type { DataModelWithParser } from \"../data\";\n\nconst DOUBLE_OPEN_CURLY = \"{{\";\nconst DOUBLE_CLOSE_CURLY = \"}}\";\n\nexport interface Options {\n  /**\n   * The model to use when resolving refs\n   * Passing `false` will skip trying to resolve any direct model refs ({{foo}})\n   */\n  model: false | DataModelWithParser;\n\n  /**\n   * A function to evaluate an expression\n   * Passing `false` will skip trying to evaluate any expressions (@[ foo() ]@)\n   */\n  evaluate: false | ((exp: Expression) => any);\n\n  /**\n   * Optionaly resolve binding without formatting in case Type format applies\n   */\n  formatted?: boolean;\n}\n\n/** Search the given string for the coordinates of the next expression to resolve */\nexport function findNextExp(str: string) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n\n  if (expStart === -1) {\n    return undefined;\n  }\n\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n\n  while (count > 0 && workingString.length > 0) {\n    // Find the next open or close curly\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n\n    // We can't close anything, so there's no point in going on with life.\n    if (nextCloseCurly === -1) {\n      break;\n    }\n\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      // We've hit another open bracket before closing out the one we want\n      // Move everything over and bump our close count by 1\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length,\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      // We've hit another closing bracket\n      // Decrement our count and updates offsets\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length,\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n\n  return {\n    start: expStart,\n    end: offset,\n  };\n}\n\n/** Finds any subset of the string wrapped in @[]@ and evaluates it as an expression */\nexport function resolveExpressionsInString(\n  val: string,\n  { evaluate }: Options,\n): string {\n  if (!evaluate) {\n    return val;\n  }\n\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length,\n    );\n    const expValue = evaluate(expString);\n\n    // The string is only the expression, return the raw value.\n    if (\n      matchStart === 0 &&\n      expStrWithBrackets === val &&\n      typeof expValue !== \"string\"\n    ) {\n      return expValue;\n    }\n\n    newVal =\n      newVal.substr(0, matchStart) +\n      expValue +\n      newVal.substr(matchStart + expStrWithBrackets.length);\n    // remove the surrounding @[]@ to get the expression\n    match = newVal.match(expMatch);\n  }\n\n  return newVal;\n}\n\n/** Return a string with all data model references resolved */\nexport function resolveDataRefsInString(val: string, options: Options): string {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n\n  if (\n    !model ||\n    typeof workingString !== \"string\" ||\n    workingString.indexOf(DOUBLE_OPEN_CURLY) === -1\n  ) {\n    return workingString;\n  }\n\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n\n    if (!expLocation) {\n      return workingString;\n    }\n\n    const { start, end } = expLocation;\n\n    // Strip out the wrapping curlies from {{binding}} before passing to the model\n    const binding = workingString\n      .substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length,\n      )\n      .trim();\n\n    const evaledVal = model.get(binding, { formatted });\n\n    // Exit early if the string is _just_ a model lookup\n    // If the result is a string, we may need further processing for nested bindings\n    if (\n      start === 0 &&\n      end === workingString.length &&\n      typeof evaledVal !== \"string\"\n    ) {\n      return evaledVal;\n    }\n\n    workingString =\n      workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n\n  return workingString;\n}\n\n/** Traverse the thing and replace any model refs */\nfunction traverseObject<T>(val: T, options: Options): T {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val as string, options) as unknown as T;\n    }\n\n    case \"object\": {\n      if (!val) return val;\n      // TODO: Do we care refs in keys?\n      const keys = Object.keys(val);\n      let newVal = val;\n\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn(\n            newVal as any,\n            [key],\n            traverseObject((val as any)[key], options),\n          ) as any;\n        });\n      }\n\n      return newVal;\n    }\n\n    default:\n      return val;\n  }\n}\n\n/** Recursively resolve all model refs in whatever you pass in */\nexport function resolveDataRefs<T>(val: T, options: Options): T {\n  return traverseObject(val, options);\n}\n","import type { BindingInstance } from \"../binding\";\n\n/**\n * Remove a binding, and any children from from the map\n * If the binding is an array-item, then it will be spliced from the array and the others will be shifted down\n *\n * @param sourceMap - A map of bindings to values\n * @param binding - The binding to remove from the map\n */\nexport function removeBindingAndChildrenFromMap<T>(\n  sourceMap: Map<BindingInstance, T>,\n  binding: BindingInstance,\n): Map<BindingInstance, T> {\n  const targetMap = new Map(sourceMap);\n\n  const parentBinding = binding.parent();\n  const property = binding.key();\n\n  // Clear out any that are sub-bindings of this binding\n\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n\n  if (typeof property === \"number\") {\n    // Splice out this index from the rest\n\n    // Order matters here b/c we are shifting items in the array\n    // Start with the smallest index and work our way down\n    const bindingsToRewrite = Array.from(sourceMap.keys())\n      .filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n\n        return false;\n      })\n      .sort();\n\n    bindingsToRewrite.forEach((trackedBinding) => {\n      // If the tracked binding is a sub-binding of the parent binding, then we need to\n      // update the path to reflect the new index\n\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding) as T);\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n\n  return targetMap;\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import type { Node } from \"./types\";\n\n/**\n * Checks if there are templated values in the object\n *\n * @param obj - The Parsed Object to check to see if we have a template array type for\n * @param localKey - The key being checked\n */\nexport function hasTemplateValues(obj: any, localKey: string) {\n  return (\n    Object.hasOwnProperty.call(obj, \"template\") &&\n    Array.isArray(obj?.template) &&\n    obj.template.length &&\n    obj.template.find((tmpl: any) => tmpl.output === localKey)\n  );\n}\n\n/** Check to see if the string is a valid switch key */\nexport function hasSwitchKey(localKey: string) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\n\n/** Check to see if the string is a valid template key */\nexport function hasTemplateKey(localKey: string) {\n  return localKey === \"template\";\n}\n\n/** Get the ID of the Node if there is one */\nexport function getNodeID(node?: Node.Node | null): string | undefined {\n  if (!node) {\n    return;\n  }\n\n  if (\n    \"value\" in node &&\n    typeof node.value === \"object\" &&\n    typeof node.value?.id === \"string\"\n  ) {\n    return node.value.id;\n  }\n}\n","import type { BindingInstance, BindingLike } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ExpressionType } from \"../../expressions\";\nimport type { Resolve } from \"./types\";\n\n/** Check to see if and of the data-changes affect the given dependencies  */\nexport function caresAboutDataChanges(\n  dataChanges?: Set<BindingInstance>,\n  dependencies?: Set<BindingInstance>,\n) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n\n  return (\n    depArray.find(\n      (dep) =>\n        !!dataChangeArray.find(\n          (change) =>\n            change === dep || change.contains(dep) || dep.contains(change),\n        ),\n    ) !== undefined\n  );\n}\n\n/** Convert the options object for a resolver to one for a node */\nexport function toNodeResolveOptions(\n  resolverOptions: Resolve.ResolverOptions,\n): Resolve.NodeResolveOptions {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n\n        return value;\n      },\n      format: (bindingLike: BindingLike, value: any) =>\n        resolverOptions.format\n          ? resolverOptions.format(\n              isBinding(bindingLike)\n                ? bindingLike\n                : resolverOptions.parseBinding(bindingLike),\n              value,\n            )\n          : value,\n    },\n    evaluate: (exp: ExpressionType) =>\n      resolverOptions.evaluator.evaluate(exp, resolverOptions),\n  };\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { addLast, clone, setIn } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\nimport type { BindingInstance, BindingLike } from \"../../binding\";\nimport type {\n  DataModelOptions,\n  DataModelWithParser,\n  Updates,\n} from \"../../data\";\nimport { DependencyModel, withParser } from \"../../data\";\nimport type { Logger } from \"../../logger\";\nimport { Node, NodeType } from \"../parser\";\nimport { caresAboutDataChanges, toNodeResolveOptions } from \"./utils\";\nimport type { Resolve } from \"./types\";\nimport { getNodeID } from \"../parser/utils\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\ninterface NodeUpdate extends Resolve.ResolvedNode {\n  /** A flag to track if a node has changed since the last resolution */\n  updated: boolean;\n}\n\n/** Add model context to the data model */\nconst withContext = (model: DataModelWithParser): DataModelWithParser => {\n  return {\n    get: (binding: BindingLike, options?: DataModelOptions): any => {\n      return model.get(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    set: (\n      transaction: [BindingLike, any][],\n      options?: DataModelOptions,\n    ): Updates => {\n      return model.set(transaction, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    delete: (binding: BindingLike, options?: DataModelOptions): void => {\n      return model.delete(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n  };\n};\n\n/**\n * The Resolver is the way to take a parsed AST graph of a view and resolve it to a concrete representation of the current user state\n * It combines the ability to mutate ast nodes before resolving, as well as the mutating the resolved objects while parsing\n */\nexport class Resolver {\n  public readonly hooks = {\n    /** A hook to allow skipping of the resolution tree for a specific node */\n    skipResolve: new SyncWaterfallHook<\n      [boolean, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** An event emitted before calculating the next update */\n    beforeUpdate: new SyncHook<[Set<BindingInstance> | undefined]>(),\n\n    /** An event emitted after calculating the next update */\n    afterUpdate: new SyncHook<[any]>(),\n\n    /** The options passed to a node to resolve it to an object */\n    resolveOptions: new SyncWaterfallHook<\n      [Resolve.NodeResolveOptions, Node.Node]\n    >(),\n\n    /** A hook to transform the AST node into a new AST node before resolving it */\n    beforeResolve: new SyncWaterfallHook<\n      [Node.Node | null, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform an AST node into it's resolved value.\n     * This runs _before_ any children are resolved\n     */\n    resolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform the resolved value of an AST node.\n     * This runs _after_ all children nodes are resolved\n     */\n    afterResolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** Called at the very end of a node's tree being updated */\n    afterNodeUpdate: new SyncHook<\n      [Node.Node, Node.Node | undefined, NodeUpdate]\n    >(),\n  };\n\n  /**\n   * The AST tree after beforeResolve is ran mapped to the AST before beforeResolve is ran\n   */\n  private readonly ASTMap: Map<Node.Node, Node.Node>;\n  /**\n   * The root node in the AST tree we want to resolve\n   */\n  public readonly root: Node.Node;\n\n  /**\n   * The cache of the last resolved values when walking the tree.\n   * This gets recycled every update to avoid stale data if a node is unused in an update\n   */\n  private resolveCache: Map<Node.Node, Resolve.ResolvedNode>;\n\n  /**\n   * Cache of node IDs that have been processed to track if nodes have duplicate IDs\n   */\n  private idCache: Set<string>;\n\n  /**\n   * The parameters required to resolve AST nodes\n   */\n  private readonly options: Resolve.ResolverOptions;\n\n  /**\n   * Tapable logger for logging errors encountered during view resolution\n   */\n  private logger?: Logger;\n\n  constructor(root: Node.Node, options: Resolve.ResolverOptions) {\n    this.root = root;\n    this.options = options;\n    this.resolveCache = new Map();\n    this.ASTMap = new Map();\n    this.logger = options.logger;\n    this.idCache = new Set();\n  }\n\n  public getSourceNode(convertedAST: Node.Node) {\n    return this.ASTMap.get(convertedAST);\n  }\n\n  public update(changes?: Set<BindingInstance>): any {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = new Map<Node.Node, Resolve.ResolvedNode>();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n\n    const updated = this.computeTree(\n      this.root,\n      undefined,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      undefined,\n      prevASTMap,\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n\n  public getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n\n  private getPreviousResult(node: Node.Node): Resolve.ResolvedNode | undefined {\n    if (!node) {\n      return;\n    }\n\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n\n    if (id) {\n      if (this.idCache.has(id)) {\n        // Only log this conflict once to cut down on noise\n        // May want to swap this to logging when we first see the id -- which may not be the first render\n        if (isFirstUpdate) {\n          if (node.type === NodeType.Asset || node.type === NodeType.View) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`,\n            );\n          } else if (node.type === NodeType.Value) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`,\n            );\n          }\n        }\n\n        // Don't use anything from a prev result if there's a duplicate id detected\n        return;\n      }\n\n      this.idCache.add(id);\n    }\n\n    return this.resolveCache.get(node);\n  }\n\n  private cloneNode(node: any) {\n    const clonedNode = clone(node);\n\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\") return;\n\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n\n    return clonedNode;\n  }\n\n  private computeTree(\n    node: Node.Node,\n    rawParent: Node.Node | undefined,\n    dataChanges: Set<BindingInstance> | undefined,\n    cacheUpdate: Map<Node.Node, Resolve.ResolvedNode>,\n    options: Resolve.NodeResolveOptions,\n    partiallyResolvedParent: Node.Node | undefined,\n    prevASTMap: Map<Node.Node, Node.Node>,\n  ): NodeUpdate {\n    const dependencyModel = new DependencyModel(options.data.model);\n\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding),\n    );\n\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser,\n        },\n        evaluate: (exp) =>\n          this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node,\n      },\n      node,\n    );\n\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions,\n    );\n\n    // Shallow clone the node so that changes to it during the resolve steps don't impact the original.\n    // We are trusting that this becomes a deep clone once the whole node tree has been traversed.\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent,\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions,\n    ) ?? {\n      type: NodeType.Empty,\n    };\n\n    const isNestedMultiNodeWithAsync =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.parent.type === NodeType.Value &&\n      resolvedAST.parent?.type === NodeType.Asset &&\n      resolvedAST.parent.value.id.includes(\"async\");\n\n    const isNestedMultiNode =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.type === NodeType.Value;\n\n    if (previousResult && shouldUseLastValue) {\n      const update = {\n        ...previousResult,\n        updated: false,\n      };\n\n      /** Recursively repopulate the AST map given some AST Node and it's resolved AST representation */\n      const repopulateASTMapFromCache = (\n        resolvedNode: Resolve.ResolvedNode,\n        AST: Node.Node,\n        ASTParent: Node.Node | undefined,\n      ) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false,\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n\n        /** Helper function for recursing over child node */\n        const handleChildNode = (childNode: Node.Node) => {\n          // In order to get the correct results, we need to use the node references from the last update.\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult) return;\n\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST,\n          );\n        };\n\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(({ value: childAST }) =>\n            handleChildNode(childAST),\n          );\n        } else if (resolvedASTLocal.type === NodeType.MultiNode) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n\n      // Point the root of the cached node to the new resolved node.\n      previousResult.node.parent = partiallyResolvedParent;\n\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n\n      return update;\n    }\n\n    if (isNestedMultiNodeWithAsync) {\n      resolvedAST.parent = partiallyResolvedParent.parent;\n    } else {\n      resolvedAST.parent = partiallyResolvedParent;\n    }\n\n    resolveOptions.node = resolvedAST;\n\n    this.ASTMap.set(resolvedAST, node);\n\n    let resolved = this.hooks.resolve.call(\n      undefined,\n      resolvedAST,\n      resolveOptions,\n    );\n\n    let updated = !dequal(previousResult?.value, resolved);\n\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    const childDependencies = new Set<BindingInstance>();\n    dependencyModel.trackSubset(\"children\");\n\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue,\n        } = computedChildTree;\n\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n\n        if (childValue) {\n          if (childNode.type === NodeType.MultiNode && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path as any[], []),\n              childValue,\n            );\n            resolved = setIn(resolved, child.path, arr);\n          } else {\n            resolved = setIn(resolved, child.path, childValue);\n          }\n        }\n\n        updated = updated || childUpdated;\n\n        return { ...child, value: childNode };\n      });\n\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === NodeType.MultiNode) {\n      const childValue: any = [];\n      const rawParentToPassIn = isNestedMultiNode\n        ? partiallyResolvedParent?.parent\n        : node;\n\n      const hasAsync = resolvedAST.values\n        .map((value, index) => (value.type === NodeType.Async ? index : -1))\n        .filter((index) => index !== -1);\n\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n\n        if (mTree.value !== undefined && mTree.value !== null) {\n          /**\n           * async nodes' parent is a multi-node\n           * When the node to resolve is an async node and the flatten flag is true\n           * Add the content streamed in to the childValue of parent multi-node\n           * Array.isArray(mTree.value.asset.values) is the case when the content is an async asset\n           */\n          if (\n            mValue.type === NodeType.Async &&\n            mValue.flatten &&\n            mTree.value.asset &&\n            Array.isArray(mTree.value.asset.values)\n          ) {\n            // This flatten function only changed the values not node structure\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n\n        mTree.dependencies.forEach((bindingDep) =>\n          childDependencies.add(bindingDep),\n        );\n\n        updated = updated || mTree.updated;\n\n        return mTree.node;\n      });\n\n      if (hasAsync.length > 0) {\n        // this likely turned into a nested multinode, attempt to flatten in node structure\n        const copy = newValues;\n        hasAsync.forEach((index) => {\n          if (copy[index]) copy.splice(index, 1, ...unpackNode(copy[index]));\n        });\n        resolvedAST.values = copy;\n      } else {\n        resolvedAST.values = newValues;\n      }\n      resolved = childValue;\n    }\n\n    childDependencies.forEach((bindingDep) =>\n      dependencyModel.addChildReadDep(bindingDep),\n    );\n\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope?: \"core\" | \"children\") =>\n        dependencyModel.getDependencies(scope),\n    });\n\n    const update: NodeUpdate = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies,\n      ]),\n    };\n\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update,\n    );\n    cacheUpdate.set(node, update);\n\n    return update;\n  }\n}\n\n/**\n * helper function to flatten a potential nested array and combine with initial array\n */\nfunction unpackAndPush(item: any | any[], initial: any[]): void {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i: any) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n\nfunction unpackNode(item: Node.Node) {\n  const unpacked: Node.Node[] = [];\n  if (\n    \"children\" in item &&\n    item.children?.[0]?.value.type === NodeType.Asset &&\n    (item.children?.[0]?.value as Node.Asset).children\n  ) {\n    if (\n      (item.children?.[0]?.value as Node.Asset).children?.[0]?.value.type ===\n      NodeType.MultiNode\n    ) {\n      (\n        (item.children?.[0]?.value as Node.Asset).children?.[0]\n          ?.value as Node.MultiNode\n      ).values.forEach((value) => {\n        unpacked.push(value);\n      });\n    }\n  } else {\n    unpacked.push(item);\n  }\n  return unpacked;\n}\n","import { set } from \"timm\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type { Options } from \"./options\";\nimport type { Node } from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** Create a function that checks for a start/end sequence in a string */\nconst createPatternMatcher = (start: string, end: string) => {\n  return (testStr: string) => {\n    const startLocation = testStr.indexOf(start);\n\n    if (startLocation === -1) {\n      return false;\n    }\n\n    const endLocation = testStr.indexOf(end);\n\n    if (endLocation === -1) {\n      return false;\n    }\n\n    return startLocation < endLocation;\n  };\n};\n\nconst bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nconst expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n\n/** Check to see if a string contains a reference to dynamic content */\nfunction hasSomethingToResolve(str: string) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\n\n/** Resolve data refs in a string if necessary. */\nfunction resolveString(str: string, resolveOptions: Options) {\n  return hasSomethingToResolve(str)\n    ? resolveDataRefs(str, {\n        model: resolveOptions.data.model,\n        evaluate: resolveOptions.evaluate,\n      })\n    : str;\n}\n\n/** Recursively resolve all string references in an object or array */\nexport function resolveAllRefs(\n  node: any,\n  resolveOptions: Options,\n  propertiesToSkip: Set<string | number>,\n): any {\n  if (\n    node === null ||\n    node === undefined ||\n    (typeof node !== \"object\" && typeof node !== \"string\")\n  ) {\n    return node;\n  }\n\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n\n  let newNode = node;\n\n  Object.keys(node).forEach((key: string | number) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n\n    const val = node[key];\n\n    let newVal = val;\n\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n\n    if (newVal !== val) {\n      newNode = set(newNode, key as any, newVal);\n    }\n  });\n\n  return newNode;\n}\n\n/** Traverse up the node tree finding the first available 'path' */\nconst findBasePath = (\n  node: Node.Node,\n  resolver: Resolver,\n): Node.PathSegment[] => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return (\n      parentNode.children?.find((child) => child.value === original)?.path ?? []\n    );\n  }\n\n  if (parentNode.type !== NodeType.MultiNode) {\n    return [];\n  }\n\n  return findBasePath(parentNode, resolver);\n};\n\n/** A plugin that resolves all string references for each node */\nexport default class StringResolverPlugin implements ViewPlugin {\n  private propertiesToSkipCache: Map<string, Set<string>>;\n\n  constructor() {\n    this.propertiesToSkipCache = new Map();\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === NodeType.Empty || node.type === NodeType.Unknown) {\n        return null;\n      }\n\n      if (\n        node.type === NodeType.Value ||\n        node.type === NodeType.Asset ||\n        node.type === NodeType.View\n      ) {\n        /** Use specified properties to skip during string resolution, or default */\n        let propsToSkip: Set<string>;\n        if (node.type === NodeType.Asset || node.type === NodeType.View) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"],\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (\n          node.parent?.type === NodeType.MultiNode &&\n          (node.parent?.parent?.type === NodeType.Asset ||\n            node.parent?.parent?.type === NodeType.View) &&\n          node.parent.parent.value?.id &&\n          this.propertiesToSkipCache.has(node.parent.parent.value.id)\n        ) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id,\n          ) as Set<string>;\n        } else {\n          propsToSkip = new Set([\"exp\"]);\n        }\n\n        const nodePath = findBasePath(node, resolver);\n\n        /** If the path includes something that is supposed to be skipped, this node should be skipped too. */\n        if (\n          nodePath.length > 0 &&\n          nodePath.some((segment) => propsToSkip.has(segment.toString()))\n        ) {\n          return node.value;\n        }\n\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n\n      return value;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n}\n","const ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n\n/**\n * Replaces %num in message with the provided parameters in order.\n *\n * @param message - Parameterized string like \"This is a %1\"\n * @param params - Parameters to replace in message E.g. ['tax2021.amount']\n * @returns A message with the parameters replaced.\n */\nexport function replaceParams(\n  message: string,\n  params: Record<string, any>,\n): string {\n  return message\n    .slice()\n    .replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n","import type { Validation } from \"@player-ui/types\";\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { setIn } from \"timm\";\n\nimport type { BindingInstance, BindingFactory } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { DataModelWithParser, DataModelMiddleware } from \"../../data\";\nimport type { SchemaController } from \"../../schema\";\nimport type {\n  ErrorValidationResponse,\n  ValidationObject,\n  ValidationObjectWithHandler,\n  ValidatorContext,\n  ValidationProvider,\n  ValidationResponse,\n  WarningValidationResponse,\n  StrongOrWeakBinding,\n} from \"../../validator\";\nimport {\n  ValidationMiddleware,\n  ValidatorRegistry,\n  removeBindingAndChildrenFromMap,\n} from \"../../validator\";\nimport type { Logger } from \"../../logger\";\nimport { ProxyLogger } from \"../../logger\";\nimport type { Resolve, ViewInstance } from \"../../view\";\nimport { caresAboutDataChanges } from \"../../view\";\nimport { replaceParams } from \"../../utils\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type {\n  ExpressionEvaluatorOptions,\n  ExpressionType,\n} from \"../../expressions\";\nimport type { BindingTracker } from \"./binding-tracker\";\nimport { ValidationBindingTrackerViewPlugin } from \"./binding-tracker\";\n\nexport const SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nexport const VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n\nexport const VALIDATION_PROVIDER_NAME_SYMBOL: unique symbol = Symbol.for(\n  \"validation-provider-name\",\n);\n\nexport type ValidationObjectWithSource = ValidationObjectWithHandler & {\n  /** The name of the validation */\n  [VALIDATION_PROVIDER_NAME_SYMBOL]: string;\n};\n\ntype SimpleValidatorContext = Omit<\n  ValidatorContext,\n  \"validation\" | \"schemaType\"\n>;\n\ninterface BaseActiveValidation<T> {\n  /** The validation is being actively shown */\n  state: \"active\";\n\n  /** The validation response */\n  response: T;\n}\n\ntype ActiveWarning = BaseActiveValidation<WarningValidationResponse> & {\n  /** Warnings track if they can be dismissed automatically (by navigating) */\n  dismissable: boolean;\n};\ntype ActiveError = BaseActiveValidation<ErrorValidationResponse>;\n\n/**\n * warnings that keep track of their active state\n */\ntype StatefulWarning = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"warning\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** warnings start with no state, but can active or dismissed */\n      state: \"none\" | \"dismissed\";\n    }\n  | ActiveWarning\n);\n\n/** Errors that keep track of their state */\ntype StatefulError = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"error\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** Errors start with no state an can be activated */\n      state: \"none\";\n    }\n  | ActiveError\n);\n\nexport type StatefulValidationObject = StatefulWarning | StatefulError;\n\n/** Helper function to determin if the subset is within the containingSet */\nfunction isSubset<T>(subset: Set<T>, containingSet: Set<T>): boolean {\n  if (subset.size > containingSet.size) return false;\n  for (const entry of subset) if (!containingSet.has(entry)) return false;\n  return true;\n}\n\n/** Helper for initializing a validation object that tracks state */\nfunction createStatefulValidationObject(\n  obj: ValidationObjectWithSource,\n): StatefulValidationObject {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false,\n  };\n}\n\ntype ValidationRunner = (obj: ValidationObjectWithHandler) =>\n  | {\n      /** A validation message */\n      message: string;\n    }\n  | undefined;\n\n/** A class that manages validating bindings across phases */\nclass ValidatedBinding {\n  public currentPhase?: Validation.Trigger;\n  private applicableValidations: Array<StatefulValidationObject> = [];\n  private validationsByState: Record<\n    Validation.Trigger,\n    Array<StatefulValidationObject>\n  > = {\n    load: [],\n    change: [],\n    navigation: [],\n  };\n\n  public get allValidations(): Array<StatefulValidationObject> {\n    return Object.values(this.validationsByState).flat();\n  }\n\n  public weakBindings: Set<BindingInstance>;\n\n  private onDismiss?: () => void;\n\n  constructor(\n    possibleValidations: Array<ValidationObjectWithSource>,\n    onDismiss?: () => void,\n    log?: Logger,\n    weakBindings?: Set<BindingInstance>,\n  ) {\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? new Set();\n  }\n\n  private checkIfBlocking(statefulObj: StatefulValidationObject) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n\n    return false;\n  }\n\n  public getAll(): Array<ValidationResponse> {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj),\n        });\n      }\n\n      return all;\n    }, [] as Array<ValidationResponse>);\n  }\n\n  public get(): ValidationResponse | undefined {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid),\n      };\n    }\n  }\n\n  private runApplicableValidations(\n    runner: ValidationRunner,\n    canDismiss: boolean,\n    phase: Validation.Trigger,\n  ) {\n    // If the currentState is not load, skip those\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          // Don't rerun any dismissed warnings\n          return originalValue;\n        }\n\n        // treat all warnings the same and block it once (unless blocking is true)\n        const blocking =\n          originalValue.value.blocking ??\n          ((originalValue.value.severity === \"warning\" && \"once\") || true);\n\n        const obj = setIn(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking,\n        ) as StatefulValidationObject;\n\n        const isBlockingNavigation =\n          blocking === true || (blocking === \"once\" && !canDismiss);\n\n        if (\n          phase === \"navigation\" &&\n          obj.state === \"active\" &&\n          obj.value.blocking !== true\n        ) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj as ActiveWarning;\n            if (\n              warn.dismissable &&\n              warn.response.dismiss &&\n              (warn.response.blocking !== \"once\" || !warn.response.blocking)\n            ) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n\n              warn.dismissable = true;\n            }\n\n            return warn as StatefulValidationObject;\n          }\n        }\n\n        const response = runner(obj.value);\n\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable:\n            obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response\n            ? {\n                ...obj.value,\n                message: response.message ?? \"Something is broken\",\n                severity: obj.value.severity,\n                displayTarget: obj.value.displayTarget ?? \"field\",\n              }\n            : undefined,\n        } as StatefulValidationObject;\n\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          (newState.response as WarningValidationResponse).dismiss = () => {\n            (newState as StatefulWarning).state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n\n        return newState;\n      },\n    );\n  }\n\n  public update(\n    phase: Validation.Trigger,\n    canDismiss: boolean,\n    runner: ValidationRunner,\n  ) {\n    const newApplicableValidations: StatefulValidationObject[] = [];\n\n    if (phase === \"load\" && this.currentPhase !== undefined) {\n      // Tried to run the 'load' phase twice. Aborting\n      return;\n    }\n\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      // Already added all the types. No need to continue adding new validations\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      // The transition to the 'change' type can only come from a 'load' type\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change,\n      ];\n    } else if (\n      phase === \"navigation\" &&\n      (this.currentPhase === \"load\" || this.currentPhase === \"change\")\n    ) {\n      // Can transition to a nav state from a change or load\n\n      // if there is an non-blocking error that is active then remove the error from applicable validations so it can no longer be shown\n      // which is needed if there are additional warnings to become active for that binding after the error is shown\n      this.applicableValidations.forEach((element) => {\n        if (\n          !(\n            element.type === \"error\" &&\n            element.state === \"active\" &&\n            element.isBlockingNavigation === false\n          )\n        ) {\n          newApplicableValidations.push(element);\n        }\n      });\n\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...(this.currentPhase === \"load\" ? this.validationsByState.change : []),\n      ];\n      this.currentPhase = \"navigation\";\n    }\n\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n}\n\n/**\n * A controller for orchestrating validation within a running player\n *\n * The current validation flow is as follows:\n *\n *   - When a binding is first seen, gather all of the possible validations for it from the providers\n *     - Schema and Crossfield (view) are both providers of possible validations\n *     - Run all of the applicable validations for that binding for the `load` trigger\n *\n *   - When a change occurs, set the phase of the binding to `change`.\n *     - Run all of the `change` triggered validations for that binding.\n *\n *   - When a navigation event occurs, set the phase of the binding to `navigate`.\n *     - Run all `change` and `navigate` validations for each tracked binding.\n *     - For any warnings, also keep a state of `shown` or `dismissed`.\n *       - Set all non-dismissed warnings to `shown`.\n *       - Set all `shown` warnings to `dismissed`.\n *     - Allow navigation forward if there are no non-dismissed warnings and no valid errors.\n */\nexport class ValidationController implements BindingTracker {\n  public readonly hooks = {\n    /** A hook called to tap into the validator registry for adding more validators */\n    createValidatorRegistry: new SyncHook<[ValidatorRegistry]>(),\n\n    /** A callback/event when a new validation is added to the view */\n    onAddValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n    onRemoveValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    resolveValidationProviders: new SyncWaterfallHook<\n      [\n        Array<{\n          /** The name of the provider */\n          source: string;\n          /** The provider itself */\n          provider: ValidationProvider;\n        }>,\n      ],\n      {\n        /** The view this is triggered for  */\n        view?: ViewInstance;\n      }\n    >(),\n\n    /** A hook called when a binding is added to the tracker */\n    onTrackBinding: new SyncHook<[BindingInstance]>(),\n  };\n\n  private tracker: BindingTracker | undefined;\n  private validations = new Map<BindingInstance, ValidatedBinding>();\n  private validatorRegistry?: ValidatorRegistry;\n  private schema: SchemaController;\n\n  private providers:\n    | Array<{\n        /** The name of the provider */\n        source: string;\n        /** The provider itself */\n        provider: ValidationProvider;\n      }>\n    | undefined;\n\n  private viewValidationProvider?: ValidationProvider;\n  private options?: SimpleValidatorContext;\n  private weakBindingTracker = new Set<BindingInstance>();\n\n  constructor(schema: SchemaController, options?: SimpleValidatorContext) {\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n\n  setOptions(options: SimpleValidatorContext) {\n    this.options = options;\n  }\n\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  public getDataMiddleware(): Array<DataModelMiddleware> {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding,\n          );\n\n          return next?.delete(binding, options);\n        },\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n\n          // return validation issues directly on bindings first\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n\n          // if none, check to see any validations this binding may be a weak ref of and return\n          const newInvalidBindings: Set<StrongOrWeakBinding> = new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (\n              caresAboutDataChanges(\n                new Set([binding]),\n                weakValidation.weakBindings,\n              ) &&\n              weakValidation?.get()?.severity === \"error\"\n            ) {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true,\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false,\n                  });\n                }\n              });\n            }\n          });\n\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) },\n      ),\n    ];\n  }\n\n  private getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema,\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (\n            binding: BindingInstance,\n          ): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding,\n            );\n          },\n\n          getValidationsForView: (): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          },\n        },\n      },\n    ]);\n\n    return this.providers;\n  }\n\n  public reset() {\n    this.validations.clear();\n    this.tracker = undefined;\n  }\n\n  public onView(view: ViewInstance): void {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (\n            !this.options ||\n            this.getValidationForBinding(binding) !== undefined\n          ) {\n            return;\n          }\n\n          // Set the default value for the binding if we need to\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true,\n          });\n\n          if (originalValue !== withoutDefault) {\n            // Don't trigger updates when setting the default value\n            this.options.model.set([[binding, originalValue]], {\n              silent: true,\n            });\n          }\n\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(new Set([binding]));\n            },\n          );\n\n          this.hooks.onTrackBinding.call(binding);\n        },\n      },\n    });\n\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n\n    bindingTrackerPlugin.apply(view);\n  }\n\n  updateValidationsForBinding(\n    binding: BindingInstance,\n    trigger: Validation.Trigger,\n    validationContext?: SimpleValidatorContext,\n    onDismiss?: () => void,\n  ): void {\n    const context = validationContext ?? this.options;\n\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n\n    if (trigger === \"load\") {\n      // Get all of the validations from each provider\n      const possibleValidations = this.getValidationProviders().reduce<\n        Array<ValidationObjectWithSource>\n      >((vals, provider) => {\n        vals.push(\n          ...(provider.provider\n            .getValidationsForBinding?.(binding)\n            ?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source,\n            })) ?? []),\n        );\n\n        return vals;\n      }, []);\n\n      if (possibleValidations.length === 0) {\n        return;\n      }\n\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger,\n        ),\n      );\n    }\n\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n\n      if (this.weakBindingTracker.size > 0) {\n        const t = this.validations.get(binding) as ValidatedBinding;\n        this.weakBindingTracker.forEach((b) => t.weakBindings.add(b));\n      }\n\n      return response ? { message: response.message } : undefined;\n    });\n\n    // Also run any validations that binding or sub-binding is a weak binding of\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (\n          vBinding !== binding &&\n          caresAboutDataChanges(new Set([binding]), validation.weakBindings)\n        ) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context,\n            );\n            return response ? { message: response.message } : undefined;\n          });\n        }\n      });\n    }\n  }\n\n  validationRunner(\n    validationObj: ValidationObjectWithHandler,\n    binding: BindingInstance,\n    context: SimpleValidatorContext | undefined = this.options,\n  ) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n\n    const handler =\n      validationObj.handler ?? this.getValidator(validationObj.type);\n\n    const weakBindings = new Set<BindingInstance>();\n\n    // For any data-gets in the validation runner, default to using the _invalid_ value (since that's what we're testing against)\n    const model: DataModelWithParser = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete,\n    };\n\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (\n          exp: ExpressionType,\n          options: ExpressionEvaluatorOptions = { model },\n        ) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding),\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\",\n      }),\n      validationObj,\n    );\n\n    this.weakBindingTracker = weakBindings;\n\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate,\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n\n      return {\n        message,\n      };\n    }\n  }\n\n  private updateValidationsForView(trigger: Validation.Trigger): void {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n\n    /** Run validations for all bindings in view */\n    const updateValidations = (dismissValidations: boolean) => {\n      this.getBindings().forEach((binding) => {\n        this.validations\n          .get(binding)\n          ?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n\n            return this.validationRunner(obj, binding, this.options);\n          });\n      });\n    };\n\n    // Should dismiss for non-navigation triggers.\n    updateValidations(!isNavigationTrigger);\n\n    if (isNavigationTrigger) {\n      // If validations didn't change since last update, dismiss all dismissible validations.\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n\n  private get activeBindings(): Set<BindingInstance> {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== undefined,\n      ),\n    );\n  }\n\n  public getValidator(type: string) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n\n    return registry.get(type);\n  }\n\n  getBindings(): Set<BindingInstance> {\n    return this.tracker?.getBindings() ?? new Set();\n  }\n\n  trackBinding(binding: BindingInstance): void {\n    this.tracker?.trackBinding(binding);\n  }\n\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger: Validation.Trigger = \"navigation\"): {\n    /** Indicating if the view can proceed without error */\n    canTransition: boolean;\n\n    /** the validations that are preventing the view from continuing */\n    validations?: Map<BindingInstance, ValidationResponse>;\n  } {\n    this.updateValidationsForView(trigger);\n\n    const validations = new Map<BindingInstance, ValidationResponse>();\n\n    let canTransition = true;\n\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v,\n            )}`,\n          );\n\n          canTransition = false;\n        }\n\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n\n    return {\n      canTransition,\n      validations: validations.size ? validations : undefined,\n    };\n  }\n\n  /** Get the current tracked validation for the given binding */\n  public getValidationForBinding(\n    binding: BindingInstance,\n  ): ValidatedBinding | undefined {\n    return this.validations.get(binding);\n  }\n\n  forView(parser: BindingFactory): Resolve.Validation {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding),\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return undefined;\n        }\n\n        const validationMapping = new Map<\n          BindingInstance,\n          ValidationResponse\n        >();\n\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n\n        return validationMapping.size === 0 ? undefined : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\",\n        );\n      },\n      type: (binding) =>\n        this.schema.getType(isBinding(binding) ? binding : parser(binding)),\n    };\n  }\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","import { BindingInstance } from \"../../binding\";\n\n/** Recursively flattens a nested object to be an object of depth 1 with keys being the full path in the orginal object */\nexport function flatten(obj: any, roots: [string][] = [], sep = \".\"): any {\n  return (\n    Object\n      // find props of given object\n      .keys(obj)\n      // return an object by iterating props\n      .reduce(\n        (memo, prop) => ({\n          // create a new object\n\n          // include previously returned object\n          ...memo,\n          ...(Object.prototype.toString.call(obj[prop]) === \"[object Object]\"\n            ? // keep working if value is an object\n              flatten(obj[prop], roots.concat([prop]))\n            : // include current prop and value and prefix prop with the roots\n              { [roots.concat([prop]).join(sep)]: obj[prop] }),\n        }),\n        {},\n      )\n  );\n}\n\n/** Converts an object into a list of binding/value tuples to use with a LocalModel object */\nexport function objectToBatchSet(obj: any): [BindingInstance, any][] {\n  const flattenedObj = flatten(obj);\n  const batchTxn: [BindingInstance, any][] = [];\n\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n\n  return batchTxn;\n}\n","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","// Add the types export first so it's naming takes precedence\nexport * from \"@player-ui/types\";\nexport * from \"./binding/index\";\nexport * from \"./data/index\";\nexport * from \"./expressions/index\";\nexport * from \"./logger/index\";\nexport * from \"./schema/index\";\nexport * from \"./string-resolver/index\";\nexport * from \"./validator/index\";\nexport * from \"./view/index\";\n\nexport * from \"./player\";\nexport * from \"./controllers/index\";\nexport * from \"./types\";\nexport * from \"./plugins/flow-exp-plugin\";\n","import { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport type { ParserResult, AnyNode } from \"../binding-grammar/index\";\nimport {\n  // We can swap this with whichever parser we want to use\n  parseCustom as parseBinding,\n} from \"../binding-grammar\";\nimport type { BindingParserOptions, BindingLike } from \"./binding\";\nimport { BindingInstance } from \"./binding\";\nimport { isBinding } from \"./utils\";\nimport type { NormalizedResult, ResolveBindingASTOptions } from \"./resolver\";\nimport { resolveBindingAST } from \"./resolver\";\n\nexport * from \"./utils\";\nexport * from \"./binding\";\n\nexport const SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nexport const BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nconst LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n\nconst DEFAULT_OPTIONS: BindingParserOptions = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  },\n};\n\ntype BeforeResolveNodeContext = Required<NormalizedResult> &\n  ResolveBindingASTOptions;\n\n/** A parser for creating bindings from a string */\nexport class BindingParser {\n  private cache: Record<string, BindingInstance>;\n  private parseCache: Record<string, ParserResult>;\n  private parserOptions: BindingParserOptions;\n\n  public hooks = {\n    skipOptimization: new SyncBailHook<[string], boolean>(),\n    beforeResolveNode: new SyncWaterfallHook<\n      [AnyNode, BeforeResolveNodeContext]\n    >(),\n  };\n\n  constructor(options?: Partial<BindingParserOptions>) {\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  private normalizePath(\n    path: string,\n    resolveOptions: ResolveBindingASTOptions,\n  ) {\n    /**\n     * Ensure no binding characters exist in path and the characters remaining\n     * look like a binding format.\n     */\n    if (\n      !BINDING_BRACKETS_REGEX.test(path) &&\n      LAZY_BINDING_REGEX.test(path) &&\n      this.hooks.skipOptimization.call(path) !== true\n    ) {\n      return { path: path.split(\".\"), updates: undefined } as NormalizedResult;\n    }\n\n    const ast = this.parseCache[path] ?? parseBinding(path);\n    this.parseCache[path] = ast;\n\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`,\n      );\n    }\n\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e: any) {\n      throw new NestedError(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n\n  private getBindingForNormalizedResult(\n    normalized: NormalizedResult,\n  ): BindingInstance {\n    const normalizedStr = normalized.path.join(\".\");\n\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse,\n    );\n    this.cache[normalizedStr] = created;\n\n    return created;\n  }\n\n  public parse(\n    rawBinding: BindingLike,\n    overrides: Partial<BindingParserOptions> = {},\n  ): BindingInstance {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n\n    const options = {\n      ...this.parserOptions,\n      ...overrides,\n    };\n\n    let updates: Record<string, any> = {};\n\n    const joined = Array.isArray(rawBinding)\n      ? rawBinding.join(\".\")\n      : String(rawBinding);\n\n    const normalizeConfig: ResolveBindingASTOptions = {\n      getValue: (path: Array<string | number>) => {\n        const normalized = this.normalizePath(path.join(\".\"), normalizeConfig);\n\n        return options.get(this.getBindingForNormalizedResult(normalized));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path: any) => {\n        if (path === undefined) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\",\n          );\n        }\n\n        if (\n          typeof path !== \"string\" &&\n          typeof path !== \"number\" &&\n          typeof path !== \"boolean\"\n        ) {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`,\n          );\n        }\n\n        const normalized = this.normalizePath(String(path), normalizeConfig);\n\n        if (normalized.updates) {\n          updates = {\n            ...updates,\n            ...normalized.updates,\n          };\n        }\n\n        const joinedNormalizedPath = normalized.path.join(\".\");\n\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n\n        return joinedNormalizedPath;\n      },\n    };\n\n    const normalized = this.normalizePath(joined, normalizeConfig);\n\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates,\n      };\n    }\n\n    const updateKeys = Object.keys(updates);\n\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map<[BindingInstance, any]>(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding],\n        ],\n      );\n\n      options.set(updateTransaction);\n    }\n\n    return this.getBindingForNormalizedResult(normalized);\n  }\n}\n","export interface Node<T extends string> {\n  /** The basic node type */\n  name: T;\n}\n\n/**\n * An AST node that represents a nested path in the model\n * foo.{{bar}}.baz (this is {{bar}})\n */\nexport interface PathNode extends Node<\"PathNode\"> {\n  /** The path in the model that this node represents */\n  path: Array<AnyNode>;\n}\n\n/**\n * A segment representing a query\n * [foo=bar]\n */\nexport interface QueryNode extends Node<\"Query\"> {\n  /** The key to query */\n  key: AnyNode;\n\n  /** The target value */\n  value?: AnyNode;\n}\n\n/** A simple segment */\nexport interface ValueNode extends Node<\"Value\"> {\n  /** The segment value */\n  value: string | number;\n}\n\n/** A nested expression */\nexport interface ExpressionNode extends Node<\"Expression\"> {\n  /** The expression */\n  value: string;\n}\n\n/** Helper to create a value node */\nexport const toValue = (value: string | number): ValueNode => ({\n  name: \"Value\",\n  value,\n});\n\n/** Helper to create an expression node */\nexport const toExpression = (value: string): ExpressionNode => ({\n  name: \"Expression\",\n  value,\n});\n\n/** Helper to create a nested path node */\nexport const toPath = (path: Array<AnyNode>): PathNode => ({\n  name: \"PathNode\",\n  path,\n});\n\n/** Helper to create a query node */\nexport const toQuery = (key: AnyNode, value?: AnyNode): QueryNode => ({\n  name: \"Query\",\n  key,\n  value,\n});\n\n/** Create a concat node */\nexport const toConcatenatedNode = (\n  values: Array<PathNode | ValueNode | ExpressionNode>,\n): PathNode | ValueNode | ConcatenatedNode | ExpressionNode => {\n  if (values.length === 1) {\n    return values[0];\n  }\n\n  return {\n    name: \"Concatenated\",\n    value: values,\n  };\n};\n\n/**\n * A binding segment that's multiple smaller ones\n * {{foo}}_bar_{{baz}}\n */\nexport interface ConcatenatedNode extends Node<\"Concatenated\"> {\n  /** A list of nested paths, or value nodes to concat together to form a segment */\n  value: Array<PathNode | ValueNode | ExpressionNode>;\n}\n\nexport type AnyNode =\n  | PathNode\n  | QueryNode\n  | ValueNode\n  | ConcatenatedNode\n  | ExpressionNode;\nexport type Path = Array<AnyNode>;\n\nexport interface ParserSuccessResult {\n  /** A successful parse result */\n  status: true;\n\n  /** The path the binding represents */\n  path: PathNode;\n}\n\nexport interface ParserFailureResult {\n  /** A failed parse result */\n  status: false;\n\n  /** The message representing the reason the parse result failed */\n  error: string;\n}\n\nexport type ParserResult = ParserSuccessResult | ParserFailureResult;\n\nexport type Parser = (raw: string) => ParserResult;\n","import type {\n  Parser,\n  AnyNode,\n  PathNode,\n  ConcatenatedNode,\n  ValueNode,\n  QueryNode,\n  ExpressionNode,\n} from \"../ast\";\nimport {\n  toValue,\n  toPath,\n  toConcatenatedNode,\n  toQuery,\n  toExpression,\n} from \"../ast\";\n\nconst SEGMENT_SEPARATOR = \".\";\nconst OPEN_CURL = \"{\";\nconst CLOSE_CURL = \"}\";\nconst OPEN_BRACKET = \"[\";\nconst CLOSE_BRACKET = \"]\";\nconst EQUALS = \"=\";\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nconst BACK_TICK = \"`\";\n// const IDENTIFIER_REGEX = /[\\w\\-@]+/;\n\n/** A _faster_ way to match chars instead of a regex. */\nconst isIdentifierChar = (char?: string): boolean => {\n  if (!char) {\n    return false;\n  }\n\n  const charCode = char.charCodeAt(0);\n\n  const matches =\n    charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125; // }\n\n  return !matches;\n};\n\n/** Parse out a binding AST from a path */\nexport const parse: Parser = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n\n  /** get the next char in the string */\n  const next = (expected?: string) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n\n  /** gobble all whitespace */\n  const whitespace = () => {\n    /* eslint-disable no-unmodified-loop-condition */\n    while (ch === \" \") {\n      next();\n    }\n  };\n\n  /** get an identifier if you can */\n  const identifier = (): ValueNode | undefined => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n\n    let value: string | number = ch;\n\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n\n  /** get an expression node if you can */\n  const expression = (): ExpressionNode | undefined => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n\n      let exp = ch;\n\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n\n        exp += ch;\n      }\n\n      next(BACK_TICK);\n\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n\n  /** Grab a value using a regex */\n  const regex = (match: RegExp): ValueNode | undefined => {\n    if (!ch?.match(match)) {\n      return;\n    }\n\n    let value = ch;\n\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      return toValue(value);\n    }\n  };\n\n  /** parse out a nestedPath if you can */\n  const nestedPath = (): PathNode | undefined => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n\n      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n\n  /** get a simple segment node */\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n\n  /** Parse a segment */\n  const segment = ():\n    | ConcatenatedNode\n    | PathNode\n    | ValueNode\n    | ExpressionNode\n    | undefined => {\n    // Either a string, modelRef, or concatenated version (both)\n    const segments: Array<ValueNode | PathNode | ExpressionNode> = [];\n    let nextSegment = simpleSegment();\n\n    while (nextSegment !== undefined) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n\n    if (segments.length === 0) {\n      return undefined;\n    }\n\n    return toConcatenatedNode(segments);\n  };\n\n  /** get an optionally quoted block */\n  const optionallyQuotedSegment = ():\n    | ValueNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    whitespace();\n\n    // see if we have a quote\n\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n\n    return simpleSegment();\n  };\n\n  /** eat equals signs */\n  const equals = (): boolean => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n\n    while (ch === EQUALS) {\n      next();\n    }\n\n    return true;\n  };\n\n  /** Parse out a bracket */\n  const parseBracket = ():\n    | ValueNode\n    | QueryNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value: ValueNode | QueryNode | PathNode | ExpressionNode | undefined =\n        optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n\n      return value;\n    }\n  };\n\n  /** Parse a segment and any number of brackets following it */\n  const parseSegmentAndBrackets = (): Array<AnyNode> => {\n    // try to parse a segment first\n\n    const parsed: Array<AnyNode> = [];\n\n    const firstSegment = segment();\n\n    if (firstSegment) {\n      parsed.push(firstSegment);\n\n      let bracketSegment = parseBracket();\n\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value =\n          isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value\n            ? bracketSegment.value\n            : maybeNumber;\n      }\n\n      while (bracketSegment !== undefined) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n\n    return parsed;\n  };\n\n  /** Parse out a path segment */\n  const parsePath = (): PathNode => {\n    const parts: AnyNode[] = [];\n\n    let nextSegment = parseSegmentAndBrackets();\n\n    while (nextSegment !== undefined) {\n      parts.push(...nextSegment);\n\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n\n    return toPath(parts);\n  };\n\n  try {\n    const result = parsePath();\n\n    return {\n      status: true,\n      path: result,\n    };\n  } catch (e: any) {\n    return {\n      status: false,\n      error: e.message,\n    };\n  }\n};\n","import { getBindingSegments } from \"./utils\";\n\nexport interface BindingParserOptions {\n  /** Get the value for a specific binding */\n  get: (binding: BindingInstance) => any;\n\n  /**\n   * Set the values for bindings.\n   * This is used when the query syntax needs to modify an object\n   */\n  set: (transaction: Array<[BindingInstance, any]>) => void;\n\n  /**\n   * Get the result of evaluating an expression\n   */\n  evaluate: (exp: string) => any;\n\n  /**\n   * Without readOnly, if a binding such as this is used: arr[key='does not exist'],\n   * then an object with that key will be created.\n   * This is done to make assignment such as arr[key='abc'].val = 'foo' work smoothly.\n   * Setting readOnly to true will prevent this behavior, avoiding unintended data changes.\n   */\n  readOnly?: boolean;\n}\n\nexport type Getter = (path: BindingInstance) => any;\n\nexport type RawBindingSegment = number | string;\nexport type RawBinding = string | RawBindingSegment[];\nexport type BindingLike = RawBinding | BindingInstance;\nexport type BindingFactory = (\n  raw: RawBinding,\n  options?: Partial<BindingParserOptions>,\n) => BindingInstance;\n\n/**\n * A path in the data model\n */\nexport class BindingInstance {\n  private split: RawBindingSegment[];\n  private joined: string;\n  private factory: BindingFactory;\n\n  constructor(\n    raw: RawBinding,\n    factory = (rawBinding: RawBinding) => new BindingInstance(rawBinding),\n  ) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n\n      const tryNum = Number(segment);\n      // test to make sure turning a numerical string to a number doesn't change\n      // the actual value of the string by getting rid of a leading zero\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n\n  asArray(): RawBindingSegment[] {\n    return this.split;\n  }\n\n  asString(): string {\n    return this.joined;\n  }\n\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding: BindingInstance): boolean {\n    // need to account for partial key matches\n    // [foo, bar] !== [foo, ba]\n    const bindingAsArray = binding.asArray();\n\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n\n    // Check every overlapping index to make sure they're the same\n    // Intentionally use a for loop for speeeed\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  relative(binding: BindingInstance): RawBindingSegment[] {\n    return this.asArray().slice(binding.asArray().length);\n  }\n\n  parent(): BindingInstance {\n    return this.factory(this.split.slice(0, -1));\n  }\n\n  key(): RawBindingSegment {\n    return this.split[this.split.length - 1];\n  }\n\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative: BindingLike): BindingInstance {\n    const descendentSegments = getBindingSegments(relative);\n\n    return this.factory(this.split.concat(descendentSegments));\n  }\n}\n","import { NestedError } from \"ts-nested-error\";\nimport type { SyncWaterfallHook } from \"tapable-ts\";\nimport type { PathNode, AnyNode } from \"../binding-grammar\";\nimport { findInArray, maybeConvertToNum } from \"./utils\";\n\nexport interface NormalizedResult {\n  /** The normalized path */\n  path: Array<string | number>;\n\n  /** Any new updates that need to happen for this binding to be resolved */\n  updates?: Record<string, any>;\n}\n\nexport interface ResolveBindingASTOptions {\n  /** Get the value of the model at the given path */\n  getValue: (path: Array<string | number>) => any;\n\n  /** Convert the value into valid path segments */\n  convertToPath: (value: any) => string;\n\n  /** Convert the value into valid path segments */\n  evaluate: (exp: string) => any;\n}\n\nexport interface ResolveBindingASTHooks {\n  /** A hook for transforming a node before fully resolving it */\n  beforeResolveNode: SyncWaterfallHook<\n    [AnyNode, Required<NormalizedResult> & ResolveBindingASTOptions]\n  >;\n}\n\n/** Given a binding AST, resolve it */\nexport function resolveBindingAST(\n  bindingPathNode: PathNode,\n  options: ResolveBindingASTOptions,\n  hooks?: ResolveBindingASTHooks,\n): NormalizedResult {\n  const context: Required<NormalizedResult> = {\n    updates: {},\n    path: [],\n  };\n\n  // let updates: Record<string, any> = {};\n  // const path: Array<string | number> = [];\n\n  /** Get the value for any child node */\n  function getValueForNode(node: AnyNode): any {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates,\n        };\n      }\n\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path),\n        );\n      } catch (e: any) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e,\n        );\n      }\n    }\n\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n\n        return options.convertToPath(actualValue);\n      } catch (e: any) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n\n  /** Handle when path segments are binding paths (foo.bar) or single segments (foo) */\n  function appendPathSegments(segment: string | number) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n\n  /** Compute the _actual_ binding val from the AST */\n  function resolveNode(_node: AnyNode) {\n    const resolvedNode =\n      hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n\n      case \"Query\": {\n        // Look for an object at the path with the given key/val criteria\n        const objToQuery: Record<string, any>[] =\n          options.getValue(context.path) ?? [];\n\n        const { key, value } = resolvedNode;\n\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n\n        if (index === undefined || index === -1) {\n          context.updates[\n            [...context.path, objToQuery.length, resolvedKey].join(\".\")\n          ] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n\n        break;\n      }\n\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n\n      default:\n        throw new Error(`Unsupported node type: ${(resolvedNode as any).name}`);\n    }\n  }\n\n  bindingPathNode.path.forEach(resolveNode);\n\n  return {\n    path: context.path,\n    updates:\n      Object.keys(context.updates ?? {}).length > 0\n        ? context.updates\n        : undefined,\n  };\n}\n","import type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelMiddleware,\n  DataModelOptions,\n  Updates,\n} from \"./model\";\n\nexport type DependencySets = \"core\" | \"children\";\n\n/** A class to track usage of read/writes to/from a data model */\nexport class DependencyTracker {\n  protected readDeps: Set<BindingInstance>;\n  protected writeDeps: Set<BindingInstance>;\n  protected namedSet: DependencySets;\n\n  private namedDependencySets: Partial<\n    Record<\n      DependencySets,\n      {\n        /** readDeps */\n        readDeps: Set<BindingInstance>;\n        /** writeDeps */\n        writeDeps: Set<BindingInstance>;\n      }\n    >\n  >;\n\n  constructor() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n\n  protected createSubset(name: DependencySets, force = false): void {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: new Set(),\n        writeDeps: new Set(),\n      };\n    }\n  }\n\n  /** Grab all of the bindings that this depended on */\n  public getDependencies(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.readDeps ?? new Set();\n    }\n\n    return this.readDeps;\n  }\n\n  public trackSubset(name: DependencySets) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n\n  public trackDefault() {\n    this.namedSet = \"core\";\n  }\n\n  /** Grab all of the bindings this wrote to */\n  public getModified(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? new Set();\n    }\n\n    return this.writeDeps;\n  }\n\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  public readsBinding(binding: BindingInstance): boolean {\n    return this.readDeps.has(binding);\n  }\n\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  public writesBinding(binding: BindingInstance): boolean {\n    return this.writeDeps.has(binding);\n  }\n\n  /** Reset all tracking of dependencies */\n  public reset() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n\n  protected addReadDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n\n    this.readDeps.add(binding);\n  }\n\n  protected addWriteDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n\n    this.writeDeps.add(binding);\n  }\n\n  public addChildReadDep(binding: BindingInstance): void {\n    this.addReadDep(binding, \"children\");\n  }\n}\n\n/** Middleware that tracks dependencies of read/written data */\nexport class DependencyMiddleware\n  extends DependencyTracker\n  implements DataModelMiddleware\n{\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return next?.set(transaction, options) ?? [];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addReadDep(binding);\n\n    return next?.get(binding, options);\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n}\n\n/** A data-model that tracks dependencies of read/written data */\nexport class DependencyModel<Options = DataModelOptions>\n  extends DependencyTracker\n  implements DataModelImpl<Options>\n{\n  private readonly rootModel: DataModelImpl<Options>;\n\n  constructor(rootModel: DataModelImpl<Options>) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n\n  public set(transaction: BatchSetTransaction, options?: Options): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return this.rootModel.set(transaction, options);\n  }\n\n  public get(binding: BindingInstance, options?: Options) {\n    this.addReadDep(binding);\n\n    return this.rootModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: Options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n}\n","import type { DataModelImpl } from \"./model\";\n\n/**\n * A model that does nothing\n * Helpful for testing and other default DataModel applications\n */\nexport class NOOPDataModel implements DataModelImpl {\n  get() {\n    return undefined;\n  }\n\n  set() {\n    return [];\n  }\n\n  delete() {}\n}\n\n/** You only really need 1 instance of the NOOP model */\nexport const NOOP_MODEL = new NOOPDataModel();\n","import get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type { BatchSetTransaction, DataModelImpl, Updates } from \"./model\";\n\n/**\n * A data model that stores data in an in-memory JS object\n */\nexport class LocalModel implements DataModelImpl {\n  public model: {\n    [key: string]: any;\n  };\n\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public reset(model = {}) {\n    this.model = model;\n  }\n\n  public get(binding?: BindingInstance) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n\n    return get(this.model, binding.asArray() as string[]);\n  }\n\n  public set(transaction: BatchSetTransaction) {\n    const effectiveOperations: Updates = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value) as any;\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n\n  public delete(binding: BindingInstance) {\n    const parentBinding = binding.parent();\n\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n\n      if (parentValue !== undefined) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key() as number),\n          ) as any;\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key() as string),\n          ) as any;\n        }\n      }\n    }\n  }\n}\n","import type { Binding } from \"@player-ui/types\";\n\nimport type { BindingLike } from \"../binding\";\nimport type {\n  ExpressionHandler,\n  ExpressionContext,\n  ExpressionNode,\n} from \"./types\";\nimport { Awaitable, isAwaitable, makeAwaitable } from \"./async\";\n\n/** Sets a value to the data-model */\nexport const setDataVal: ExpressionHandler<[Binding, any], any> = (\n  _context: ExpressionContext,\n  binding,\n  value,\n) => {\n  _context.model.set([[binding as BindingLike, value]]);\n};\n\n/** Fetches a valid from the data-model */\nexport const getDataVal: ExpressionHandler<[Binding], unknown> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.get(binding as BindingLike);\n};\n\n/** Deletes a value from the model */\nexport const deleteDataVal: ExpressionHandler<[Binding], void> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.delete(binding);\n};\n\n/** Conditional expression handler */\nexport const conditional: ExpressionHandler<\n  [ExpressionNode, ExpressionNode, ExpressionNode?]\n> = (ctx, condition, ifTrue, ifFalse) => {\n  const testResult = ctx.evaluate(condition);\n\n  // Handle Promise case automatically (same pattern as ternary operator)\n  if (isAwaitable(testResult)) {\n    return testResult.awaitableThen((resolvedTest: any) => {\n      if (resolvedTest) {\n        return ctx.evaluate(ifTrue);\n      }\n      if (ifFalse) {\n        return ctx.evaluate(ifFalse);\n      }\n      return null;\n    });\n  }\n\n  // Handle sync case\n  if (testResult) {\n    return ctx.evaluate(ifTrue);\n  }\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n  return null;\n};\n\nconditional.resolveParams = false;\n\n/**\n * Internal await function\n * This is technically registered as `await` but can't be called that due to conflicting with the keyword\n */\nexport const waitFor: ExpressionHandler<[Promise<any>], Awaitable<any>> = (\n  ctx,\n  promise,\n) => {\n  return makeAwaitable(promise);\n};\n","export type LogFn = (...args: Array<any>) => void;\n\nexport const severities = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"] as const;\nexport type Severity = (typeof severities)[number];\nexport type Logger = Record<Severity, LogFn>;\nexport type LoggerProvider = () => Logger | undefined;\n","import type { Logger, Severity } from \"./types\";\nimport { severities } from \"./types\";\n\nexport type ConsoleHandler = Pick<typeof console, \"log\" | \"warn\" | \"error\">;\n\n/** A Logger implementation that uses console */\nexport default class ConsoleLogger implements Logger {\n  private severity: Severity;\n  private _console: ConsoleHandler;\n\n  constructor(severity: Severity = \"warn\", _console: ConsoleHandler = console) {\n    this.severity = severity;\n    this._console = _console;\n  }\n\n  public setSeverity(severity: Severity) {\n    this.severity = severity;\n  }\n\n  private getConsoleFn(severity: Severity) {\n    switch (severities.indexOf(severity)) {\n      case 0:\n      case 1:\n      case 2:\n        return this._console.log;\n      case 3:\n        return this._console.warn;\n      default:\n        return this._console.error;\n    }\n  }\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      const sevIndex = severities.indexOf(severity);\n      const sevConf = severities.indexOf(this.severity);\n\n      if (sevIndex >= sevConf) {\n        this.getConsoleFn(severity)(`player - ${severity} -`, ...args);\n      }\n    };\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { Logger } from \"./types\";\n\n/** An empty function so the logger ignore everything */\nconst noop = () => {};\n\n/** A logger implementation that goes nowhere */\nexport default class NoopLogger implements Logger {\n  public readonly trace = noop;\n  public readonly debug = noop;\n  public readonly info = noop;\n  public readonly warn = noop;\n  public readonly error = noop;\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { Logger, Severity } from \"./types\";\n\n/** A logger that has a tapable subscriptions to callbacks */\nexport default class TapableLogger implements Logger {\n  public readonly hooks = {\n    trace: new SyncHook<[Array<any>]>(),\n    debug: new SyncHook<[Array<any>]>(),\n    info: new SyncHook<[Array<any>]>(),\n    warn: new SyncHook<[Array<any>]>(),\n    error: new SyncHook<[Array<any>]>(),\n    log: new SyncHook<[Severity, Array<any>]>(),\n  };\n\n  private logHandlers: Set<Logger> = new Set();\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n\n  public addHandler(logHandler: Logger) {\n    this.logHandlers.add(logHandler);\n  }\n\n  public removeHandler(logHandler: Logger) {\n    this.logHandlers.delete(logHandler);\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { Logger, Severity, LoggerProvider } from \"./types\";\n\n/**\n * The ProxyLogger allows a user to log to another Logger instance that may not exist yet\n */\nexport default class ProxyLogger implements Logger {\n  private proxiedLoggerProvider: LoggerProvider;\n\n  constructor(loggerProvider: LoggerProvider) {\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import { setIn } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelOptions,\n  DataModelMiddleware,\n  Updates,\n} from \"../data\";\nimport { toModel } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nimport type { ValidationResponse } from \"./types\";\nimport { removeBindingAndChildrenFromMap } from \"./binding-map-splice\";\n\n/**\n * A BindingInstance with an indicator of whether or not it's a strong binding\n */\nexport type StrongOrWeakBinding = {\n  /** BindingInstance in question */\n  binding: BindingInstance;\n  /** Boolean indicating whether the relevant BindingInstance is a strong binding */\n  isStrong: boolean;\n};\n\n/**\n * Returns a validation object if the data is invalid or an set of BindingsInstances if the binding itself is a weak ref of another invalid validation\n */\nexport type MiddlewareChecker = (\n  binding: BindingInstance,\n  model: DataModelImpl,\n) => ValidationResponse | Set<StrongOrWeakBinding> | undefined;\n\n/**\n * Middleware for the data-model that caches the results of invalid data\n */\nexport class ValidationMiddleware implements DataModelMiddleware {\n  public validator: MiddlewareChecker;\n  public shadowModelPaths: Map<BindingInstance, any>;\n  private logger?: Logger;\n  private shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n\n  constructor(\n    validator: MiddlewareChecker,\n    options?: {\n      /** A logger instance */\n      logger?: Logger;\n      /** Optional function to include data staged in shadowModel */\n      shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n    },\n  ) {\n    this.validator = validator;\n    this.shadowModelPaths = new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction: BatchSetTransaction = [];\n\n    const includedBindings = new Set<BindingInstance>();\n\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n\n    const invalidBindings: Array<BindingInstance> = [];\n\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n\n      if (validations === undefined) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (\n            !validation.isStrong &&\n            validation.binding.asString() === binding.asString()\n          ) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${\n            validations.severity\n          } - ${validations.message}`,\n        );\n      }\n    });\n\n    let validResults: Updates = [];\n\n    if (next && nextTransaction.length > 0) {\n      // defer clearing the shadow model to prevent validations that are run twice due to weak binding refs still needing the data\n      nextTransaction.forEach(([binding]) =>\n        this.shadowModelPaths.delete(binding),\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n\n      validResults = result;\n    }\n\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true,\n      };\n    });\n\n    return [...validResults, ...invalidResults];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    let val = next?.get(binding, options);\n\n    if (\n      this.shouldIncludeInvalid?.(options) ??\n      options?.includeInvalid === true\n    ) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n\n          return;\n        }\n\n        if (binding.contains(shadowBinding)) {\n          val = setIn(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n\n    return val;\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding,\n    );\n\n    return next?.delete(binding, options);\n  }\n}\n","import type { ValidatorFunction } from \"./types\";\n\n/** A registry that tracks validators  */\nexport class ValidatorRegistry {\n  private registry: Map<string, ValidatorFunction<any>>;\n\n  constructor() {\n    this.registry = new Map();\n  }\n\n  /** Use the given validator name to fetch the handler */\n  public get(name: string): ValidatorFunction | undefined {\n    return this.registry.get(name);\n  }\n\n  /** Register a new validator */\n  public register<T>(name: string, handler: ValidatorFunction<T>) {\n    this.registry.set(name, handler);\n  }\n}\n","import { setIn } from \"timm\";\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { AnyAssetType, Node } from \"./types\";\nimport { NodeType } from \"./types\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\nexport const EMPTY_NODE: Node.Empty = {\n  type: NodeType.Empty,\n};\n\nexport interface ParseObjectOptions {\n  /** how nested the templated is */\n  templateDepth?: number;\n}\n\nexport interface ParseObjectChildOptions {\n  key: string;\n  path: Node.PathSegment[];\n  parentObj: object;\n}\n\ninterface NestedObj {\n  /** The values of a nested local object */\n  children: Node.Child[];\n\n  value: any;\n}\n/**\n * The Parser is the way to take an incoming view from the user and parse it into an AST.\n * It provides a few ways to interact with the parsing, including mutating an object before and after creation of an AST node\n */\nexport class Parser {\n  public readonly hooks = {\n    /**\n     * A hook to interact with an object _before_ parsing it into an AST\n     *\n     * @param value - The object we're are about to parse\n     * @returns - A new value to parse.\n     *  If undefined, the original value is used.\n     *  If null, we stop parsing this node.\n     */\n    onParseObject: new SyncWaterfallHook<[object, NodeType]>(),\n\n    /**\n     * A callback to interact with an AST _after_ we parse it into the AST\n     *\n     * @param value - The object we parsed\n     * @param node - The AST node we generated\n     * @returns - A new AST node to use\n     *   If undefined, the original value is used.\n     *   If null, we ignore this node all together\n     */\n    onCreateASTNode: new SyncWaterfallHook<\n      [Node.Node | undefined | null, object]\n    >(),\n\n    parseNode: new SyncBailHook<\n      [\n        obj: object,\n        nodeType: Node.ChildrenTypes,\n        parseOptions: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ],\n      Node.Node | Node.Child[]\n    >(),\n  };\n\n  public parseView(value: AnyAssetType): Node.View {\n    const viewNode = this.parseObject(value, NodeType.View);\n\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n\n    return viewNode as Node.View;\n  }\n\n  public createASTNode(node: Node.Node | null, value: any): Node.Node | null {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n\n    if (tapped === undefined) {\n      return node;\n    }\n\n    return tapped;\n  }\n\n  public parseObject(\n    obj: object,\n    type: Node.ChildrenTypes = NodeType.Value,\n    options: ParseObjectOptions = { templateDepth: 0 },\n  ): Node.Node | null {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options,\n    ) as Node.Node | null;\n\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n\n    const parseLocalObject = (\n      currentValue: any,\n      objToParse: unknown,\n      path: string[] = [],\n    ): NestedObj => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n\n      if (!localObj) {\n        return currentValue;\n      }\n\n      const objEntries = Array.isArray(localObj)\n        ? localObj.map((v, i) => [i, v])\n        : [\n            ...Object.entries(localObj),\n            ...Object.getOwnPropertySymbols(localObj).map((s) => [\n              s,\n              (localObj as any)[s],\n            ]),\n          ];\n\n      const defaultValue: NestedObj = {\n        children: [],\n        value: currentValue,\n      };\n\n      const newValue = objEntries.reduce((accumulation, current): NestedObj => {\n        let { value } = accumulation;\n        const { children } = accumulation;\n        const [localKey, localValue] = current;\n\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          NodeType.Value,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj,\n          },\n        ) as Node.Child[];\n\n        if (newChildren) {\n          children.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey,\n          ]);\n\n          value = result.value;\n          children.push(...result.children);\n        } else {\n          value = setIn(accumulation.value, [...path, localKey], localValue);\n        }\n\n        return {\n          value,\n          children,\n        };\n      }, defaultValue);\n\n      return newValue;\n    };\n\n    const { value, children } = parseLocalObject(undefined, obj);\n\n    const baseAst =\n      value === undefined && !children.length\n        ? undefined\n        : {\n            type,\n            value,\n          };\n\n    if (baseAst && children.length) {\n      const parent: Node.BaseWithChildren<any> = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n}\n","import type { Asset as AssetType, Expression, Binding } from \"@player-ui/types\";\n\nexport type AnyAssetType = AssetType<string>;\nexport enum NodeType {\n  Asset = \"asset\",\n  View = \"view\",\n  Applicability = \"applicability\",\n  Template = \"template\",\n  Value = \"value\",\n  MultiNode = \"multi-node\",\n  Switch = \"switch\",\n  Async = \"async\",\n  Unknown = \"unknown\",\n  Empty = \"empty\",\n}\nexport declare namespace Node {\n  export type ChildrenTypes = NodeType.Asset | NodeType.Value | NodeType.View;\n\n  export interface Base<T extends NodeType> {\n    /** Every node contains a type to distinguish it from other nodes */\n    type: T;\n\n    /** Every node (outside of the root) contains a reference to it's parent */\n    parent?: Node;\n  }\n\n  export type PathSegment = string | number;\n\n  export interface Child {\n    /** The path of the child relative to the parent */\n    path: PathSegment[];\n\n    /** If true, the path points to an array, and the value will be appended to it result */\n    array?: boolean;\n\n    /** The child node */\n    value: Node;\n  }\n\n  export interface BaseWithChildren<T extends NodeType> extends Base<T> {\n    /** Any node that contains a list of children underneath it */\n    children?: Child[];\n  }\n\n  export interface Asset<T extends AnyAssetType = AnyAssetType>\n    extends BaseWithChildren<NodeType.Asset>,\n      PluginOptions {\n    /** Any asset nested within a view */\n    value: T;\n  }\n\n  export interface View<T extends AnyAssetType = AnyAssetType>\n    extends BaseWithChildren<NodeType.View>,\n      PluginOptions {\n    /** The root of the parsed view */\n    value: T;\n  }\n\n  export interface Applicability extends Base<NodeType.Applicability> {\n    /** The expression to execute that determines applicability of the target node */\n    expression: Expression;\n\n    /** The node to use if the expression is truthy */\n    value: Node;\n  }\n\n  export interface Template extends Base<NodeType.Template> {\n    /** The location of an array in the model */\n    data: Binding;\n\n    /** The template to use when mapping over the data */\n    template: unknown;\n\n    /** The number of nested templates so far */\n    depth: number;\n\n    /** Should the template recompute when data changes */\n    dynamic?: boolean;\n\n    /** Specifies the template placement in relation to existing elements*/\n    placement?: \"prepend\" | \"append\";\n  }\n\n  export interface Value\n    extends BaseWithChildren<NodeType.Value>,\n      PluginOptions {\n    /** A simple node representing a value */\n    value: any;\n  }\n\n  export interface MultiNode extends Base<NodeType.MultiNode> {\n    /**\n     * Should this list override the target node if they overlap?\n     * If not amend the existing list\n     */\n    override?: boolean;\n\n    /** A list of values that comprise this node */\n    values: Array<Node>;\n  }\n\n  export interface Switch extends Base<NodeType.Switch> {\n    /** Should this list be re-computed when data changes */\n    dynamic?: boolean;\n\n    /** A list of cases to evaluate in order */\n    cases: SwitchCase[];\n  }\n\n  export interface SwitchCase {\n    /** The expression to evaluate for a single case statement */\n    case: Expression | true;\n    /** The value to use if this case is true */\n    value: Value;\n  }\n\n  export interface Async extends Base<NodeType.Async> {\n    /** The unique id of the node */\n    id: string;\n    /** The value representing the node */\n    value: Node;\n    /**\n     * Should the content streamed in be flattened during resolving\n     */\n    flatten?: boolean;\n  }\n\n  export interface PluginOptions {\n    /** A list of plugins */\n    plugins?: {\n      /** StringResolverPlugin options */\n      stringResolver?: {\n        /**\n         * An optional array of node properties to skip during string resolution\n         * Specified in the AssetTransformPlugin\n         */\n        propertiesToSkip?: string[];\n      };\n    };\n  }\n\n  export type Unknown = Base<NodeType.Unknown>;\n  export type Empty = Base<NodeType.Empty>;\n  export type ViewOrAsset = View | Asset;\n\n  export type Node =\n    | Asset\n    | Applicability\n    | Template\n    | Value\n    | View\n    | MultiNode\n    | Switch\n    | Async\n    | Unknown\n    | Empty;\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { View as ViewType } from \"@player-ui/types\";\nimport type { BindingInstance, BindingFactory } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { Logger } from \"../logger\";\nimport type { Resolve } from \"./resolver\";\nimport { Resolver } from \"./resolver\";\nimport type { Node } from \"./parser\";\nimport { Parser } from \"./parser\";\nimport { TemplatePlugin } from \"./plugins\";\n\n/**\n * Manages the view level validations\n */\nclass CrossfieldProvider implements ValidationProvider {\n  private allValidations = new Set<ValidationObject>();\n  private byBinding = new Map<BindingInstance, Array<ValidationObject>>();\n  private logger?: Logger;\n\n  constructor(initialView: ViewType, parser: BindingFactory, logger?: Logger) {\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n\n  private parse(contentView: ViewType, parser: BindingFactory) {\n    const xfieldRefs = contentView.validation;\n\n    if (xfieldRefs === undefined) {\n      return;\n    }\n\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`,\n      );\n\n      return;\n    }\n\n    // Grab the validations from the view (as authored) and parse out the ones that have a _ref_ (to a binding)\n    // Group them all by binding to make it easier to return than later\n\n    xfieldRefs.forEach((vRef) => {\n      // x-field validations by default are triggered by navigating away from the page\n      // the reference can also override that _or_ the severity\n      const withDefaults: ValidationObject = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef,\n      };\n\n      this.allValidations.add(withDefaults);\n\n      // The validation reference contains a _ref_ (a binding)\n      const { ref } = vRef;\n\n      if (ref) {\n        /** Group together validations by binding */\n        const parsed = parser(ref);\n\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.byBinding.get(binding);\n  }\n}\n\nexport type ViewHooks = {\n  /** Hook every time there is an update to this view instance */\n  onUpdate: SyncHook<[ViewType]>;\n  /** Hook to retrieve the parser used for this view */\n  parser: SyncHook<[Parser]>;\n  /** Hook to retrieve the resolver used for this view */\n  resolver: SyncHook<[Resolver]>;\n  /** Hook to retrieve the template plugin used for this view */\n  templatePlugin: SyncHook<[TemplatePlugin]>;\n};\n\n/** A stateful view instance from an content */\nexport class ViewInstance implements ValidationProvider {\n  public hooks: ViewHooks = {\n    onUpdate: new SyncHook(),\n    parser: new SyncHook(),\n    resolver: new SyncHook(),\n    templatePlugin: new SyncHook(),\n  };\n\n  private resolver?: Resolver;\n  public readonly initialView: ViewType;\n  public readonly resolverOptions: Resolve.ResolverOptions;\n  private rootNode?: Node.Node;\n\n  private validationProvider?: CrossfieldProvider;\n\n  private templatePlugin: TemplatePlugin | undefined;\n\n  // TODO might want to add a version/timestamp to this to compare updates\n  public lastUpdate: Record<string, any> | undefined;\n\n  constructor(initialView: ViewType, resolverOptions: Resolve.ResolverOptions) {\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n  }\n\n  public updateAsync(): void {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n\n  public update(changes?: Set<BindingInstance>): any {\n    if (this.rootNode === undefined) {\n      /** On initialization of the view, also create a validation parser */\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger,\n      );\n\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\",\n        );\n      }\n\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser),\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n\n    const update = this.resolver?.update(changes);\n\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n\n    return update;\n  }\n\n  getValidationsForBinding(\n    binding: BindingInstance,\n  ): Array<ValidationObject> | undefined {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n\n  public setTemplatePlugin(plugin: TemplatePlugin): void {\n    this.templatePlugin = plugin;\n  }\n}\n\n/** A plugin for a view */\nexport interface ViewPlugin {\n  /** Called with a view instance */\n  apply(view: ViewInstance): void;\n}\n","import type { Node, AnyAssetType } from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/**\n * Functions for building AST nodes (relatively) easily\n */\nexport class Builder {\n  /**\n   * Creates an asset node\n   *\n   * @param value - the value to put in the asset node\n   */\n  static asset<T extends AnyAssetType>(value: T): Node.Asset<T> {\n    return {\n      type: NodeType.Asset,\n      value,\n    };\n  }\n\n  static assetWrapper<T extends Node.Node>(value: T): Node.Value {\n    const valueNode = Builder.value();\n    Builder.addChild(valueNode, \"asset\", value);\n    return valueNode;\n  }\n\n  /**\n   * Creates a value node\n   *\n   * @param v - The object to put in the value node\n   */\n  static value(v?: object): Node.Value {\n    return {\n      type: NodeType.Value,\n      value: v,\n    };\n  }\n\n  /**\n   * Creates a multiNode and associates the multiNode as the parent\n   * of all the value nodes\n   *\n   * @param values - the value, applicability or async nodes to put in the multinode\n   */\n  static multiNode(\n    ...values: (Node.Value | Node.Applicability | Node.Async)[]\n  ): Node.MultiNode {\n    const m: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: true,\n      values,\n    };\n\n    values.forEach((v) => {\n      v.parent = m;\n    });\n\n    return m;\n  }\n\n  /**\n   * Creates an async node\n   *\n   * @param id - the id of async node. It should be identical for each async node\n   */\n  static asyncNode(id: string, flatten = true): Node.Async {\n    return {\n      id,\n      type: NodeType.Async,\n      flatten: flatten,\n      value: {\n        type: NodeType.Value,\n        value: {\n          id,\n        },\n      },\n    };\n  }\n\n  /**\n   * Adds a child node to a node\n   *\n   * @param node - The node to add a child to\n   * @param path - The path at which to add the child\n   * @param child - The child node\n   */\n  static addChild<N extends Node.BaseWithChildren<NT>, NT extends NodeType>(\n    node: N,\n    path: Node.PathSegment | Node.PathSegment[],\n    child: Node.Node,\n  ): N {\n    child.parent = node as Node.Node;\n\n    const newChild: Node.Child = {\n      path: Array.isArray(path) ? path : [path],\n      value: child,\n    };\n\n    node.children = node.children || [];\n    node.children.push(newChild);\n\n    return node;\n  }\n\n  /**\n   * Updates children of a node of the same path and preserves order\n   *\n   * @param node - The node to update children for\n   * @param pathToMatch - The path to match against child paths\n   * @param mapFn - Function to transform matching children\n   */\n  static updateChildrenByPath<T extends Node.ViewOrAsset | Node.Value>(\n    node: T,\n    pathToMatch: Node.PathSegment[],\n    updateFn: (child: Node.Child) => Node.Node,\n  ): T {\n    if (!node.children) return node;\n\n    // Use map to preserve original order\n    const updatedChildren = node.children.map((child) =>\n      // Check if paths match exactly\n      child.path.join() === pathToMatch.join()\n        ? { ...child, value: updateFn(child) }\n        : child,\n    );\n\n    return {\n      ...node,\n      children: updatedChildren,\n    };\n  }\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Template } from \"@player-ui/types\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport { hasTemplateKey } from \"../parser/utils\";\n\nconst templateSymbol = Symbol(\"template\");\n\nexport interface TemplateItemInfo {\n  /** The index of the data for the current iteration of the template */\n  index: number;\n  /** The data for the current iteration of the template */\n  data: any;\n  /** The depth of the template node */\n  depth: number;\n}\n\nexport interface TemplateSubstitution {\n  /** Regular expression to find and replace. The global flag will be always be added to this expression. */\n  expression: string | RegExp;\n  /** The value to replace matches with. */\n  value: string;\n}\n\nexport type TemplateSubstitutionsFunc = (\n  baseSubstitutions: TemplateSubstitution[],\n  templateItemInfo: TemplateItemInfo,\n) => TemplateSubstitution[];\n\n/** A view plugin to resolve/manage templates */\nexport default class TemplatePlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  hooks: {\n    resolveTemplateSubstitutions: SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo],\n      Record<string, any>\n    >;\n  } = {\n    resolveTemplateSubstitutions: new SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo]\n    >(),\n  };\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private parseTemplate(\n    parseObject: any,\n    node: Node.Template,\n    options: Options,\n  ): Node.Node | null {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n\n    if (!data) {\n      return null;\n    }\n\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n\n    const values: Array<Node.Node> = [];\n\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions =\n        this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index),\n            },\n          ],\n          {\n            depth,\n            data: dataItem,\n            index,\n          },\n        );\n      let templateStr = JSON.stringify(template);\n\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n\n      const parsed = parseObject(JSON.parse(templateStr), NodeType.Value, {\n        templateDepth: node.depth + 1,\n      });\n\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n\n    const result: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: false,\n      values,\n    };\n\n    // Removes undefined Symbol property\n    if (node.placement !== undefined) {\n      (result as any)[templateSymbol] = node.placement;\n    }\n\n    return result;\n  }\n\n  applyParser(parser: Parser): void {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === NodeType.Template && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options,\n        );\n      }\n\n      return node;\n    });\n\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node: Node.Node): string | undefined {\n        if (node.type === NodeType.MultiNode) {\n          return (node as any)[templateSymbol];\n        } else if (node.type === NodeType.Template) {\n          return node.placement;\n        }\n        return undefined;\n      }\n\n      if (\n        node &&\n        (node.type === NodeType.View || node.type === NodeType.Asset) &&\n        Array.isArray(node.children)\n      ) {\n        node.children = node.children.sort((a, b) => {\n          // compare template output with static values\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n\n          const pathsEqual = aPath === bPath;\n\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n\n            if (aPlacement !== undefined && bPlacement === undefined) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== undefined && aPlacement === undefined) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== undefined && bPlacement !== undefined) {\n              // Both have placement values\n              if (aPlacement === bPlacement) {\n                return 0; // Same placement, no preference\n              }\n              // \"prepend\" should come before \"append\"\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n\n          // Trigger more sorting for nested assets\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj\n            .map((template: Template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: NodeType.Template,\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement,\n                },\n                template,\n              );\n\n              if (!templateAST) return;\n\n              if (templateAST.type === NodeType.MultiNode) {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST,\n              };\n            })\n            .filter(Boolean);\n        }\n      },\n    );\n  }\n\n  applyResolverHooks(resolver: Resolver): void {\n    // Transform dynamic templates into MultiNodes\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === NodeType.Template && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance): void {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    view.setTemplatePlugin(this);\n  }\n}\n","import { omit } from \"timm\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** A view plugin to remove inapplicable assets from the tree */\nexport default class ApplicabilityPlugin implements ViewPlugin {\n  private isApplicability(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node: Node.Node | null, options: Options) => {\n        let newNode = node;\n\n        if (node?.type === NodeType.Applicability) {\n          const isApplicable = options.evaluate(node.expression);\n\n          if (isApplicable === false) {\n            return null;\n          }\n\n          newNode = node.value;\n        }\n\n        return newNode;\n      },\n    );\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit(obj, \"applicability\"),\n            nodeType,\n            options,\n          );\n\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: NodeType.Applicability,\n              expression: (obj as any).applicability,\n              value: parsedApplicability,\n            },\n            obj,\n          );\n\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n\n          if (applicabilityNode.type === NodeType.Applicability) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n\n          return childOptions\n            ? [\n                {\n                  path: [...childOptions.path, childOptions.key],\n                  value: applicabilityNode,\n                },\n              ]\n            : applicabilityNode;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { EMPTY_NODE, NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { hasSwitchKey } from \"../parser/utils\";\n\n/** A view plugin to resolve switches */\nexport default class SwitchPlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private resolveSwitch(node: Node.Switch, options: Options): Node.Node {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n\n    return EMPTY_NODE;\n  }\n\n  private isSwitch(obj: any) {\n    return (\n      obj &&\n      (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") ||\n        Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"))\n    );\n  }\n\n  applyParser(parser: Parser) {\n    /** Switches resolved during the parsing phase are static */\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === NodeType.Switch && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          this.isSwitch(obj) ||\n          (childOptions && hasSwitchKey(childOptions.key))\n        ) {\n          const objToParse =\n            childOptions && hasSwitchKey(childOptions.key)\n              ? { [childOptions.key]: obj }\n              : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic\n            ? objToParse.dynamicSwitch\n            : objToParse.staticSwitch;\n\n          const cases: Node.SwitchCase[] = switchContent\n            .map(\n              (switchCase: {\n                [x: string]: any;\n                /**\n                 *\n                 */\n                case: any;\n              }) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  NodeType.Value,\n                  options,\n                );\n\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value: value as Node.Value,\n                  };\n                }\n\n                return;\n              },\n            )\n            .filter(Boolean);\n\n          const switchAST = parser.createASTNode(\n            {\n              type: NodeType.Switch,\n              dynamic,\n              cases,\n            },\n            objToParse,\n          );\n\n          if (!switchAST || switchAST.type === NodeType.Empty) {\n            return childOptions ? [] : null;\n          }\n\n          if (switchAST.type === NodeType.Switch) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value: any = switchAST;\n\n            if (\n              switchAST.type === NodeType.Value &&\n              switchAST.children?.length === 1 &&\n              switchAST.value === undefined\n            ) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n\n            return [{ path, value }];\n          }\n\n          return switchAST;\n        }\n      },\n    );\n  }\n\n  applyResolver(resolver: Resolver) {\n    /** Switches resolved during the parsing phase are dynamic */\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === NodeType.Switch && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { hasTemplateValues, hasTemplateKey } from \"../parser/utils\";\n\n/** A view plugin to resolve multi nodes */\nexport default class MultiNodePlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          childOptions &&\n          !hasTemplateKey(childOptions.key) &&\n          Array.isArray(obj)\n        ) {\n          const values = obj\n            .map((childVal) =>\n              parser.parseObject(childVal, NodeType.Value, options),\n            )\n            .filter((child): child is Node.Node => !!child);\n\n          if (!values.length) {\n            return [];\n          }\n\n          const multiNode = parser.createASTNode(\n            {\n              type: NodeType.MultiNode,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key,\n              ),\n              values,\n            },\n            obj,\n          );\n\n          if (!multiNode) {\n            return [];\n          }\n\n          if (multiNode.type === NodeType.MultiNode) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/** A view plugin to resolve assets */\nexport default class AssetPlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, NodeType.Asset, options);\n\n          if (!assetAST) {\n            return [];\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n}\n","export interface Store {\n  useLocalState<T>(initialState: T): readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\ninterface SharedStore {\n  getLocalStateFunction<T>(\n    key: string | symbol,\n    countKey: symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\n/** A store that holds on to state for a transform */\nexport class LocalStateStore implements SharedStore {\n  private state: Map<string | symbol, any>;\n\n  private updateCallback?: () => void;\n\n  constructor(onUpdate?: () => void) {\n    this.updateCallback = onUpdate;\n\n    this.state = new Map();\n  }\n\n  public removeKey(key: symbol | string) {\n    this.state.delete(key);\n  }\n\n  public reset() {\n    this.state.clear();\n  }\n\n  useSharedState<T>(key: string | symbol) {\n    return (initialState: T) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n\n      return [\n        this.state.get(key) as T,\n        (newState: T) => {\n          const current = this.state.get(key) as T;\n\n          this.state.set(key, newState);\n\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n\n  getLocalStateFunction<T>(key: symbol, countKey: symbol) {\n    return (initialState: T) => {\n      // initialize if not already created\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n\n      this.state.set(countKey, oldCount + 1);\n\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n\n      const value = localState[oldCount] as T;\n\n      return [\n        value,\n        (newState: T) => {\n          const oldValue = localState[oldCount] as T;\n          localState[oldCount] = newState;\n\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n}\n","import type { Node, ViewInstance } from \"..\";\nimport { NodeType } from \"..\";\nimport { LocalStateStore } from \"../../controllers/view/store\";\nimport type { TransformRegistry } from \"../../controllers/view/types\";\n\n/** Traverse up the nodes until the target is found */\nfunction findUp(node: Node.Node, target: Node.Node): boolean {\n  if (node === target) {\n    return true;\n  }\n\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n\n  return false;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport default class AssetTransformCorePlugin {\n  public readonly stateStore: Map<Node.Node, LocalStateStore>;\n  private readonly registry: TransformRegistry;\n  private beforeResolveSymbol: symbol;\n  private resolveSymbol: symbol;\n  private beforeResolveCountSymbol: symbol;\n  private resolveCountSymbol: symbol;\n\n  constructor(registry: TransformRegistry) {\n    this.registry = registry;\n    this.stateStore = new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n\n  apply(view: ViewInstance) {\n    // Clear out everything when we create a new view\n    this.stateStore.clear();\n\n    view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n      let lastUpdatedNode: Node.Node | undefined;\n\n      /** A function to update the state and trigger a view re-compute */\n      const updateState = (node: Node.Node) => {\n        lastUpdatedNode = node;\n        view.update(new Set());\n      };\n\n      /** Given a node and a transform step, fetch a local store */\n      const getStore = (node: Node.Node, stepKey: symbol) => {\n        let store: LocalStateStore;\n        const countKey =\n          stepKey === this.resolveSymbol\n            ? this.resolveCountSymbol\n            : this.beforeResolveCountSymbol;\n\n        const storedState = this.stateStore.get(node);\n\n        if (storedState) {\n          store = storedState;\n          store.removeKey(countKey);\n        } else {\n          store = new LocalStateStore(() => {\n            updateState(node);\n          });\n          this.stateStore.set(node, store);\n        }\n\n        return {\n          useSharedState: (\n            key: string | symbol,\n          ): (<T>(initialState: T) => readonly [T, (value: T) => void]) => {\n            return store.useSharedState(key);\n          },\n          useLocalState: <T>(initialState: T) => {\n            return store.getLocalStateFunction<T>(\n              stepKey,\n              countKey,\n            )(initialState);\n          },\n        };\n      };\n\n      resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n        if (node && (node.type === \"asset\" || node.type === \"view\")) {\n          const transform = this.registry.get(node.value);\n\n          if (transform?.beforeResolve) {\n            const store = getStore(\n              options.node ?? node,\n              this.beforeResolveSymbol,\n            );\n\n            return transform.beforeResolve(node, options, store);\n          }\n        }\n\n        return node;\n      });\n\n      resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n        lastUpdatedNode = undefined;\n      });\n\n      resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n        if (!skip || !lastUpdatedNode) {\n          return skip;\n        }\n\n        const isParentOfUpdated = findUp(lastUpdatedNode, node);\n        const isChildOfUpdated = findUp(node, lastUpdatedNode);\n\n        return !isParentOfUpdated && !isChildOfUpdated;\n      });\n\n      resolver.hooks.afterResolve.tap(\n        \"asset-transform\",\n        (value, node, options) => {\n          if (node.type !== NodeType.Asset && node.type !== NodeType.View) {\n            return value;\n          }\n\n          const originalNode = resolver.getSourceNode(node);\n\n          if (!originalNode) {\n            return value;\n          }\n\n          const transform = this.registry.get(value);\n\n          if (transform?.resolve) {\n            const store = getStore(originalNode, this.resolveSymbol);\n\n            return transform?.resolve(value, options, store);\n          }\n\n          return value;\n        },\n      );\n    });\n  }\n}\n","import { setIn } from \"timm\";\nimport deferred from \"p-defer\";\nimport type { Flow, FlowResult } from \"@player-ui/types\";\n\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { Logger } from \"./logger\";\nimport { TapableLogger } from \"./logger\";\nimport type { ExpressionType } from \"./expressions\";\nimport { ExpressionEvaluator, isPromiseLike } from \"./expressions\";\nimport { SchemaController } from \"./schema\";\nimport { BindingParser } from \"./binding\";\nimport type { ViewInstance } from \"./view\";\nimport { resolveDataRefs } from \"./string-resolver\";\nimport type { FlowInstance } from \"./controllers\";\nimport {\n  ConstantsController,\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport { FlowExpPlugin } from \"./plugins/flow-exp-plugin\";\nimport { DefaultExpPlugin } from \"./plugins/default-exp-plugin\";\nimport type {\n  PlayerFlowState,\n  InProgressState,\n  CompletedState,\n  ErrorState,\n  PlayerHooks,\n} from \"./types\";\nimport { NOT_STARTED_STATE } from \"./types\";\n\n// Variables injected at build time\nconst PLAYER_VERSION = \"__VERSION__\";\nconst COMMIT = \"__GIT_COMMIT__\";\n\nexport interface PlayerPlugin {\n  /**\n   * Unique identifier of the plugin.\n   * Enables the plugin to be retrievable from Player.\n   */\n  symbol?: symbol;\n\n  /** The name of the plugin */\n  name: string;\n\n  /**\n   * Use this to tap into Player hooks\n   */\n  apply: (player: Player) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ExtendedPlayerPlugin<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Assets = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Views = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Expressions = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTypes = void,\n> {}\n\nexport interface PlayerConfigOptions {\n  /** A set of plugins to load  */\n  plugins?: PlayerPlugin[];\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport interface PlayerInfo {\n  /** Version of the running player */\n  version: string;\n\n  /** Hash of the HEAD commit used to build the current version */\n  commit: string;\n}\n\n/**\n * This is it.\n */\nexport class Player {\n  public static readonly info: PlayerInfo = {\n    version: PLAYER_VERSION,\n    commit: COMMIT,\n  };\n\n  public readonly logger: TapableLogger = new TapableLogger();\n  public readonly constantsController: ConstantsController =\n    new ConstantsController();\n  private config: PlayerConfigOptions;\n  private state: PlayerFlowState = NOT_STARTED_STATE;\n\n  public readonly hooks: PlayerHooks = {\n    flowController: new SyncHook<[FlowController]>(),\n    viewController: new SyncHook<[ViewController]>(),\n    view: new SyncHook<[ViewInstance]>(),\n    expressionEvaluator: new SyncHook<[ExpressionEvaluator]>(),\n    dataController: new SyncHook<[DataController]>(),\n    schema: new SyncHook<[SchemaController]>(),\n    validationController: new SyncHook<[ValidationController]>(),\n    bindingParser: new SyncHook<[BindingParser]>(),\n    state: new SyncHook<[PlayerFlowState]>(),\n    onStart: new SyncHook<[Flow]>(),\n    onEnd: new SyncHook<[]>(),\n    resolveFlowContent: new SyncWaterfallHook<[Flow]>(),\n  };\n\n  constructor(config?: PlayerConfigOptions) {\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      ...(this.config.plugins || []),\n      new FlowExpPlugin(),\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n\n  /**  Returns currently registered plugins */\n  public getPlugins(): PlayerPlugin[] {\n    return this.config.plugins ?? [];\n  }\n\n  /** Find instance of [Plugin] that has been registered to Player */\n  public findPlugin<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n  ): Plugin | undefined {\n    return this.config.plugins?.find((el) => el.symbol === symbol) as Plugin;\n  }\n\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  public applyTo<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n    apply: (plugin: Plugin) => void,\n  ): void {\n    const plugin = this.findPlugin<Plugin>(symbol);\n\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  public registerPlugin(plugin: PlayerPlugin): void {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n\n  /** Returns the current version of the running player */\n  public getVersion(): string {\n    return Player.info.version;\n  }\n\n  /** Returns the git commit used to build Player version */\n  public getCommit(): string {\n    return Player.info.commit;\n  }\n\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  public getState(): PlayerFlowState {\n    return this.state;\n  }\n\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  private setState(state: PlayerFlowState) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n\n  /** Start Player with the given flow */\n  private setupFlow(userContent: Flow): {\n    /** a callback to _actually_ start the flow */\n    start: () => void;\n\n    /** the state object to kick if off */\n    state: Omit<InProgressState, \"ref\">;\n  } {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger,\n    });\n\n    this.hooks.onStart.call(userFlow);\n\n    this.hooks.flowController.call(flowController);\n\n    // eslint-disable-next-line prefer-const\n    let expressionEvaluator: ExpressionEvaluator;\n    // eslint-disable-next-line prefer-const\n    let dataController: DataController;\n\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      },\n    });\n\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred<FlowResult>();\n\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n\n    const validationController = new ValidationController(schema);\n\n    this.hooks.validationController.call(validationController);\n\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger,\n    });\n\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.format(value) : value;\n    });\n\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.deformat(value) : value;\n    });\n\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default,\n    );\n\n    // eslint-disable-next-line prefer-const\n    let viewController: ViewController;\n\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger,\n    });\n\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n\n      return true;\n    });\n\n    /** Resolve any data references in a string */\n    function resolveStrings<T>(val: T, formatted?: boolean) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted,\n      });\n    }\n\n    flowController.hooks.flow.tap(\"player\", (flow: FlowInstance) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        /** Checks to see if there are any transitions for a specific transition state (i.e. next, back). If not, it will default to * */\n        const computedTransitionVal = state.transitions[transitionVal]\n          ? transitionVal\n          : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd as ExpressionType);\n          }\n        }\n\n        /** If the transition does not exist, then do not resolve any expressions */\n        if (\n          !(\"transitions\" in state) ||\n          !state.transitions[computedTransitionVal]\n        ) {\n          return state;\n        }\n\n        /** resolves and sets the transition to the computed exp */\n        return setIn(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal]),\n        ) as any;\n      });\n\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } =\n            validationController.validateView(\"navigation\");\n\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n\n            return true;\n          }\n        }\n\n        return undefined;\n      });\n\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n\n        if (\"ref\" in state) {\n          newState = setIn(state, [\"ref\"], resolveStrings(state.ref)) as any;\n        }\n\n        if (\"param\" in state) {\n          newState = setIn(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false),\n          ) as any;\n        }\n\n        return newState;\n      });\n\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n\n      // Tap for synchronous action states\n      flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          const result = expressionEvaluator.evaluate(exp);\n          if (isPromiseLike(result)) {\n            this.logger.warn(\n              \"Async expression used as return value in in non-async context, transitioning with '*' value\",\n            );\n          }\n          flowController?.transition(String(result));\n        }\n\n        expressionEvaluator.reset();\n      });\n\n      // Tap for async action states\n      flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ASYNC_ACTION\") {\n          const { exp } = value;\n          try {\n            let result = expressionEvaluator.evaluateAsync(exp);\n            if (isPromiseLike(result)) {\n              if (value.await) {\n                result = await result;\n              } else {\n                this.logger.warn(\n                  \"Unawaited promise used as return value in in non-async context, transitioning with '*' value\",\n                );\n              }\n            } else {\n              this.logger.warn(\n                \"Non async expression used in async action node\",\n              );\n            }\n            flowController?.transition(String(result));\n          } catch (e) {\n            flowResultDeferred.reject(e);\n          }\n        }\n\n        expressionEvaluator.reset();\n      });\n    });\n\n    this.hooks.dataController.call(dataController);\n\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController,\n    });\n\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: <Plugin = unknown>(pluginSymbol: symbol) => {\n          return this.findPlugin(pluginSymbol) as unknown as Plugin;\n        },\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b)),\n      },\n      constants: this.constantsController,\n    });\n\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n\n    return {\n      start: () => {\n        flowController\n          .start()\n          .then((endState) => {\n            const flowResult: FlowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize(),\n            };\n\n            return flowResult;\n          })\n          .then(flowResultDeferred.resolve)\n          .catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          })\n          .catch(flowResultDeferred.reject)\n          .finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController,\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger,\n      },\n    };\n  }\n\n  public async start(payload: Flow): Promise<CompletedState> {\n    const ref = Symbol(payload?.id ?? \"payload\");\n\n    /** A check to avoid updating the state for a flow that's not the current one */\n    const maybeUpdateState = <T extends PlayerFlowState>(newState: T) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`,\n        );\n\n        return newState;\n      }\n\n      this.setState(newState);\n\n      return newState;\n    };\n\n    this.setState({\n      status: \"not-started\",\n      ref,\n    });\n\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state,\n      });\n\n      start();\n\n      // common data for the end state\n      // make sure to use the same ref as the starting one\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly(),\n        },\n      } as const;\n\n      return maybeUpdateState({\n        ...(await state.flowResult),\n        ...endProps,\n      });\n    } catch (error: any) {\n      const errorState: ErrorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error,\n      };\n\n      maybeUpdateState(errorState);\n\n      throw error;\n    }\n  }\n}\n","import { SyncBailHook, SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { DeferredPromise } from \"p-defer\";\nimport defer from \"p-defer\";\nimport type {\n  NavigationFlow,\n  NavigationFlowState,\n  NavigationFlowEndState,\n} from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\n\nexport interface NamedState {\n  /** The name of the navigation node */\n  name: string;\n\n  /** The nav node */\n  value: NavigationFlowState;\n}\n\nexport interface TransitionOptions {\n  /** Ignore any validations or other signals preventing the transition from taking place  */\n  force?: boolean;\n}\nexport type TransitionFunction = (\n  name: string,\n  options?: TransitionOptions,\n) => void;\n\n/** The Content navigation state machine */\nexport class FlowInstance {\n  private flow: NavigationFlow;\n  private log?: Logger;\n  private history: string[];\n  private isTransitioning = false;\n  private flowPromise?: DeferredPromise<NavigationFlowEndState>;\n  public readonly id: string;\n  public currentState?: NamedState;\n  public readonly hooks = {\n    beforeStart: new SyncBailHook<[NavigationFlow], NavigationFlow>(),\n\n    /** A callback when the onStart node was present */\n    onStart: new SyncHook<[any]>(),\n\n    /** A callback when the onEnd node was present */\n    onEnd: new SyncHook<[any]>(),\n\n    /** A hook to intercept and block a transition */\n    skipTransition: new SyncBailHook<\n      [NamedState | undefined],\n      boolean | undefined\n    >(),\n\n    /** A chance to manipulate the flow-node used to calculate the given transition used  */\n    beforeTransition: new SyncWaterfallHook<\n      [Exclude<NavigationFlowState, NavigationFlowEndState>, string]\n    >(),\n\n    /** A chance to manipulate the flow-node calculated after a transition */\n    resolveTransitionNode: new SyncWaterfallHook<[NavigationFlowState]>(),\n\n    /** A callback when a transition from 1 state to another was made */\n    transition: new SyncHook<[NamedState | undefined, NamedState]>(),\n\n    /** A callback to run actions after a transition occurs */\n    afterTransition: new SyncHook<[FlowInstance]>(),\n  };\n\n  constructor(\n    id: string,\n    flow: NavigationFlow,\n    options?: {\n      /** Logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState: NamedState) => {\n        const newState = nextState.value;\n\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      },\n    );\n  }\n\n  /** Start the state machine */\n  public async start(): Promise<NavigationFlowEndState> {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n\n      return this.flowPromise.promise;\n    }\n\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n\n    const initialState = this.flow.startState;\n\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n\n    return this.flowPromise.promise;\n  }\n\n  public transition(transitionValue: string, options?: TransitionOptions) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`,\n      );\n    }\n\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`,\n      );\n\n      return;\n    }\n\n    if (this.currentState === undefined) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`,\n        );\n        return;\n      }\n    }\n\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue,\n    );\n\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n\n    if (nextState === undefined) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`,\n      );\n\n      return;\n    }\n\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `,\n    );\n\n    return this.pushHistory(nextState, options);\n  }\n\n  private pushHistory(stateName: string, options?: TransitionOptions) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n\n    let nextState = this.flow[stateName];\n\n    if (\n      !this.flow[stateName] ||\n      typeof nextState !== \"object\" ||\n      !(\"state_type\" in nextState)\n    ) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n\n      return;\n    }\n\n    const prevState = this.currentState;\n\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n\n    const newCurrentState = {\n      name: stateName,\n      value: nextState,\n    } as NamedState;\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n\n    // If the new state is an END state call the `onEnd` if it exists\n\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState,\n    });\n\n    this.isTransitioning = false;\n\n    this.hooks.afterTransition.call(this);\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { Navigation, NavigationFlowEndState } from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\nimport type { TransitionOptions } from \"./flow\";\nimport { FlowInstance } from \"./flow\";\n\n/** A manager for the navigation section of a Content blob */\nexport class FlowController {\n  public readonly hooks = {\n    flow: new SyncHook<[FlowInstance]>(),\n  };\n\n  private readonly log?: Logger;\n  private navigation: Navigation;\n  private navStack: FlowInstance[];\n  public current?: FlowInstance;\n\n  constructor(\n    navigation: Navigation,\n    options?: {\n      /** A logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n\n  /** Navigate to another state in the state-machine */\n  public transition(stateTransition: string, options?: TransitionOptions) {\n    if (this.current === undefined) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n\n    this.current.transition(stateTransition, options);\n  }\n\n  private addNewFlow(flow: FlowInstance) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n\n  private async run(startState: string): Promise<NavigationFlowEndState> {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n\n    const startFlow = this.navigation[startState];\n\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`),\n      );\n    }\n\n    this.log?.debug(`Starting flow: ${startState}`);\n\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`,\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n\n    const end = await flow.start();\n    this.navStack.pop();\n\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n\n    return end;\n  }\n\n  public async start(): Promise<NavigationFlowEndState> {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n\n    return this.run(this.navigation.BEGIN);\n  }\n}\n","import type { Validation } from \"@player-ui/types\";\nimport type { ViewPlugin, Resolver, Node, ViewInstance } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport type {\n  BindingInstance,\n  BindingLike,\n  BindingFactory,\n} from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ValidationResponse } from \"../../validator\";\n\nconst CONTEXT = \"validation-binding-tracker\";\n\nexport interface BindingTracker {\n  /** Get the bindings currently being tracked for validation */\n  getBindings(): Set<BindingInstance>;\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance): void;\n}\ninterface Options {\n  /** Parse a binding from a view */\n  parseBinding: BindingFactory;\n\n  /** Callbacks when events happen */\n  callbacks?: {\n    /** Called when a binding is encountered for the first time in a view */\n    onAdd?: (binding: BindingInstance) => void;\n  };\n}\n\n/** A view plugin that manages bindings tracked across updates */\nexport class ValidationBindingTrackerViewPlugin\n  implements ViewPlugin, BindingTracker\n{\n  private options: Options;\n\n  private trackedBindings = new Set<BindingInstance>();\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  /** Fetch the tracked bindings in the current view */\n  getBindings(): Set<BindingInstance> {\n    return this.trackedBindings;\n  }\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver: Resolver) {\n    this.trackedBindings.clear();\n\n    /** Each node maps to a set of bindings that it directly tracks */\n    const tracked = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Each Node is a registered section or page that maps to a set of nodes in its section */\n    const sections = new Map<Node.Node, Set<Node.Node>>();\n\n    let lastViewUpdateChangeSet: Set<BindingInstance> | undefined;\n\n    /** Map of node to all bindings in children */\n    const lastComputedBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n    let currentBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of registered section nodes to bindings */\n    const lastSectionBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of resolved nodes to their original nodes. */\n    const resolvedNodeMap: Map<Node.Node, Node.Node> = new Map();\n\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter((b) =>\n          trackedBindingsForNode.has(b),\n        ),\n      );\n\n      return intersection.size === 0;\n    });\n\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === undefined) {\n        return options;\n      }\n\n      // Clear out any old tracked bindings for this node since we're re-compiling it\n      tracked.delete(node);\n\n      /** Validation callback to track a binding */\n      const track = (binding: BindingLike) => {\n        const parsed = isBinding(binding)\n          ? binding\n          : this.options.parseBinding(binding);\n\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, new Set([parsed]));\n        }\n\n        /** find first parent registered as section and add self to its list */\n        let { parent } = node;\n\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            const eows = options.validation\n              ?._getValidationForBinding(binding)\n              ?.getAll(getOptions);\n\n            const firstFieldEOW = eows?.find(\n              (eow) =>\n                eow.displayTarget === \"field\" ||\n                eow.displayTarget === undefined,\n            );\n\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            return (\n              options.validation\n                ?._getValidationForBinding(binding)\n                ?.getAll(getOptions) ?? []\n            );\n          },\n          getChildren: (type?: Validation.DisplayTarget) => {\n            const validations = new Array<ValidationResponse>();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && (type === undefined || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array<ValidationResponse>();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, new Set());\n              }\n            }\n          },\n          track,\n        },\n      };\n    });\n\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        // Compute the new tree for this node\n        // If it's not-updated, use the last known value\n\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === NodeType.MultiNode) {\n            resolvedNode.values.forEach((value) =>\n              currentBindingTree\n                .get(value)\n                ?.forEach((b) => newlyComputed.add(b)),\n            );\n          }\n\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree\n                .get(child.value)\n                ?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? new Set(),\n          );\n        }\n\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = new Set<BindingInstance>();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = new Map();\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport type { View, NavigationFlowViewState } from \"@player-ui/types\";\n\nimport { resolveDataRefsInString } from \"../../string-resolver\";\nimport type { Resolve, ViewPlugin } from \"../../view\";\nimport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  AssetTransformCorePlugin,\n  MultiNodePlugin,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TemplatePlugin,\n  toNodeResolveOptions,\n  ViewInstance,\n} from \"../../view\";\nimport type { Logger } from \"../../logger\";\nimport type { FlowInstance, FlowController } from \"../flow\";\nimport type { DataController } from \"../data/controller\";\nimport type { TransformRegistry } from \"./types\";\nimport type { BindingInstance } from \"../../binding\";\n\nexport interface ViewControllerOptions {\n  /** Where to get data from */\n  model: DataController;\n\n  /** Where to log data */\n  logger?: Logger;\n\n  /** A flow-controller instance to listen for view changes */\n  flowController: FlowController;\n}\n\nexport type ViewControllerHooks = {\n  /** Do any processing before the `View` instance is created */\n  resolveView: SyncWaterfallHook<\n    [View | undefined, string, NavigationFlowViewState]\n  >;\n\n  /** The hook right before the View starts resolving. Attach anything custom here */\n  view: SyncHook<[ViewInstance]>;\n};\n\n/** A controller to manage updating/switching views */\nexport class ViewController {\n  public readonly hooks: ViewControllerHooks = {\n    resolveView: new SyncWaterfallHook(),\n    view: new SyncHook(),\n  };\n\n  private readonly viewMap: Record<string, View>;\n  private readonly viewOptions: Resolve.ResolverOptions & ViewControllerOptions;\n  private pendingUpdate?: {\n    /** pending data binding changes */\n    changedBindings?: Set<BindingInstance>;\n    /** Whether we have a microtask queued to handle this pending update */\n    scheduled?: boolean;\n  };\n  private readonly viewPlugins: Array<ViewPlugin>;\n\n  public currentView?: ViewInstance;\n  public transformRegistry: TransformRegistry = new Registry();\n  public optimizeUpdates = true;\n\n  constructor(\n    initialViews: View[],\n    options: Resolve.ResolverOptions & ViewControllerOptions,\n  ) {\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce<Record<string, View>>(\n      (viewMap, view) => {\n        // eslint-disable-next-line no-param-reassign\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {},\n    );\n\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow: FlowInstance) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = undefined;\n          }\n        });\n      },\n    );\n\n    /** Trigger a view update */\n    const update = (updates: Set<BindingInstance>, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t) => t.binding)),\n          updateOptions?.silent ?? false,\n        );\n      },\n    );\n\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n\n      // Deleting an array item will trigger an update for the entire array\n      if (typeof property === \"number\" && parentBinding) {\n        update(new Set([parentBinding]));\n      } else {\n        update(new Set([binding]));\n      }\n    });\n\n    this.viewPlugins = this.createViewPlugins();\n  }\n\n  private queueUpdate(bindings: Set<BindingInstance>, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      // If there's already a pending update, just add to it don't worry about silent updates here yet\n      this.pendingUpdate.changedBindings = new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings,\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n\n    // If there's no pending update, schedule one only if this one isn't silent\n    // otherwise if this is silent, we'll just wait for the next non-silent update and make sure our bindings are included\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = undefined;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n\n  private getViewForRef(viewRef: string): View | undefined {\n    // First look for a 1:1 viewRef -> id mapping (this is most common)\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n\n    // The view ids saved may also contain model refs, resolve those and try again\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) =>\n        viewRef ===\n        resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate,\n        }),\n    );\n\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n\n  public onView(state: NavigationFlowViewState) {\n    const viewId = state.ref;\n\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state,\n    );\n\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n\n    // Give people a chance to attach their\n    // own listeners to the view before we resolve it\n    this.applyViewPlugins(view);\n    this.hooks.view.call(view);\n    view.update();\n  }\n\n  private applyViewPlugins(view: ViewInstance): void {\n    for (const plugin of this.viewPlugins) {\n      plugin.apply(view);\n    }\n  }\n\n  private createViewPlugins(): Array<ViewPlugin> {\n    const pluginOptions = toNodeResolveOptions(this.viewOptions);\n    return [\n      new AssetPlugin(),\n      new SwitchPlugin(pluginOptions),\n      new ApplicabilityPlugin(),\n      new AssetTransformCorePlugin(this.transformRegistry),\n      new StringResolverPlugin(),\n      new TemplatePlugin(pluginOptions),\n      new MultiNodePlugin(),\n    ];\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { DataController } from \".\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingLike } from \"../../binding\";\nimport type {\n  DataModelWithParser,\n  DataModelOptions,\n  Updates,\n} from \"../../data\";\n\n/** Wrapper for the Data Controller Class that prevents writes */\nexport class ReadOnlyDataController\n  implements DataModelWithParser<DataModelOptions>\n{\n  private controller: DataController;\n  private logger?: Logger;\n\n  constructor(controller: DataController, logger?: Logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n\n  get(binding: BindingLike, options?: DataModelOptions | undefined) {\n    return this.controller.get(binding, options);\n  }\n\n  set(\n    transaction: [BindingLike, any][],\n    options?: DataModelOptions | undefined,\n  ): Updates {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\",\n    );\n    return [];\n  }\n\n  delete(binding: BindingLike, options?: DataModelOptions | undefined): void {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\",\n    );\n  }\n}\n","import { SyncHook, SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { dequal } from \"dequal\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingParser, BindingLike } from \"../../binding\";\nimport { BindingInstance } from \"../../binding\";\nimport type {\n  BatchSetTransaction,\n  Updates,\n  DataModelOptions,\n  DataModelWithParser,\n  DataPipeline,\n  DataModelMiddleware,\n} from \"../../data\";\nimport { PipelinedDataModel, LocalModel } from \"../../data\";\nimport type { RawSetTransaction } from \"../../types\";\nimport { ReadOnlyDataController } from \"./utils\";\n\n/** The orchestrator for player data */\nexport class DataController implements DataModelWithParser<DataModelOptions> {\n  public hooks = {\n    resolve: new SyncWaterfallHook(),\n    resolveDataStages: new SyncWaterfallHook<[DataPipeline]>(),\n\n    // On any set or get of an undefined value, redirect the value to be the default\n    resolveDefaultValue: new SyncBailHook<[BindingInstance], any>(),\n\n    onDelete: new SyncHook<[any]>(),\n\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n\n    onGet: new SyncHook<[any, any]>(),\n\n    onUpdate: new SyncHook<[Updates, DataModelOptions | undefined]>(),\n\n    format: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    deformat: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    serialize: new SyncWaterfallHook<[any]>(),\n  };\n\n  private model?: PipelinedDataModel;\n  private trash: Set<BindingInstance>;\n  private pathResolver: BindingParser;\n  private baseMiddleware: Array<DataModelMiddleware>;\n  private logger?: Logger;\n\n  constructor(\n    model: Record<any, unknown> | undefined,\n    options: {\n      /** A means of parsing a raw binding to a Binding object */\n      pathResolver: BindingParser;\n\n      /** middleware to use. typically for validation */\n      middleware?: Array<DataModelMiddleware>;\n\n      /** A logger to use  */\n      logger?: Logger;\n    },\n  ) {\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n\n    this.trash = new Set();\n    this.pathResolver = options.pathResolver;\n  }\n\n  public getModel(): PipelinedDataModel {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n\n    return this.model;\n  }\n\n  private resolveDataValue(\n    binding: BindingInstance,\n    value: any,\n    deformat: boolean,\n  ) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n\n    return value;\n  }\n\n  public set(\n    transaction: RawSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    let normalizedTransaction: BatchSetTransaction = [];\n\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted)),\n        ];\n      }) as BatchSetTransaction;\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding: string) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted)),\n          ];\n        },\n      ) as BatchSetTransaction;\n    }\n\n    // Figure out what the base changes being applied are\n    const setUpdates = normalizedTransaction.reduce<Updates>(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal,\n        };\n\n        if (dequal(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`,\n          );\n        } else {\n          updates.push(update);\n\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`,\n          );\n        }\n\n        return updates;\n      },\n      [],\n    );\n\n    // Get the applied update\n    const result = this.getModel().set(normalizedTransaction, options);\n\n    // Add any extra bindings that were effected\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (\n        !setUpdateBindings.has(tr.binding) &&\n        (tr.force === true || !dequal(tr.oldValue, tr.newValue))\n      ) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${\n            tr.oldValue\n          } to: ${tr.newValue}`,\n        );\n        setUpdates.push(tr);\n      }\n    });\n\n    this.hooks.onSet.call(normalizedTransaction);\n\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n\n    return result;\n  }\n\n  private resolve(binding: BindingLike, readOnly: boolean): BindingInstance {\n    return Array.isArray(binding) || typeof binding === \"string\"\n      ? this.pathResolver.parse(binding, { readOnly })\n      : binding;\n  }\n\n  public get(binding: BindingLike, options?: DataModelOptions) {\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n\n    if (result === undefined && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n\n    this.hooks.onGet.call(binding, result);\n\n    return result;\n  }\n\n  public delete(binding: BindingLike, options?: DataModelOptions) {\n    if (\n      typeof binding !== \"string\" &&\n      !Array.isArray(binding) &&\n      !(binding instanceof BindingInstance)\n    ) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, false);\n\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n\n    const existedBeforeDelete =\n      typeof parentValue === \"object\" &&\n      parentValue !== null &&\n      Object.prototype.hasOwnProperty.call(parentValue, property);\n\n    this.getModel().delete(resolved, options);\n\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n\n    this.hooks.onDelete.call(resolved);\n  }\n\n  public serialize(): object {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n\n  public makeReadOnly(): ReadOnlyDataController {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n}\n","import { LocalModel } from \"../../data\";\nimport { BindingInstance } from \"../../binding\";\nimport { objectToBatchSet } from \"./utils\";\n\nexport interface ConstantsProvider {\n  /**\n   * Function to add constants to the providers store\n   * - @param data values to add to the constants store\n   */\n  addConstants(data: Record<string, any>, namespace: string): void;\n\n  /**\n   * Function to retrieve constants from the providers store\n   *  - @param key Key used for the store access\n   *  - @param namespace namespace values were loaded under (defined in the plugin)\n   *  - @param fallback Optional - if key doesn't exist in namespace what to return (will return unknown if not provided)\n   */\n  getConstants(key: any, namespace: string, fallback?: any): any;\n\n  /**\n   * Function to set values to temporarily override certain keys in the perminant store\n   * - @param data values to override store with\n   * - @param namespace namespace to override\n   */\n  setTemporaryValues(data: any, namespace: string): void;\n\n  /**\n   * Clears any temporary values that were previously set\n   */\n  clearTemporaryValues(): void;\n}\n\n/**\n * Key/Value store for constants and context for Player\n */\nexport class ConstantsController implements ConstantsProvider {\n  /**\n   * Data store is basically a map of namespaces to DataModels to provide some data isolation\n   */\n  private store: Map<string, LocalModel>;\n\n  /**\n   * Separate store for temporary flow specific overrides.\n   * They are kept in a separate data model to make clearing it easier between flows\n   * and so there is no confusion on what is static and what is temporary\n   */\n  private tempStore: Map<string, LocalModel>;\n\n  constructor() {\n    this.store = new Map();\n    this.tempStore = new Map();\n  }\n\n  addConstants(data: any, namespace: string): void {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n\n  getConstants(key: string, namespace: string, fallback?: any): any {\n    const path = new BindingInstance(key);\n\n    return (\n      this.tempStore.get(namespace)?.get(path) ??\n      this.store.get(namespace)?.get(path) ??\n      fallback\n    );\n  }\n\n  setTemporaryValues(data: any, namespace: string): void {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n\n  clearTemporaryValues(namespace?: string): void {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value: LocalModel) => {\n        value.reset();\n      });\n    }\n  }\n}\n","import type {\n  Expression,\n  ExpressionObject,\n  NavigationFlowState,\n} from \"@player-ui/types\";\nimport type { ExpressionEvaluator, ExpressionType } from \"../expressions\";\nimport type { FlowInstance } from \"../controllers\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/**\n * A plugin that taps into the flow controller to evaluate available expressions\n * Expressions can be exposed via lifecycle \"hooks\" in flow/state nodes\n * e.g: onStart, onEnd\n */\nexport class FlowExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let expressionEvaluator: ExpressionEvaluator | undefined;\n\n    /**\n     * Eval Helper\n     *\n     * @param exp - an expression to be evaluated\n     */\n    const handleEval = (exp: Expression | ExpressionObject) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp as ExpressionType);\n        }\n      }\n    };\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow: FlowInstance) => {\n        // Eval flow nodes\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        // Eval state nodes\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState: NavigationFlowState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          },\n        });\n      });\n    });\n  }\n}\n","import type { ExpressionHandler, ExpressionType } from \"../expressions\";\nimport type { SchemaController } from \"../schema\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/** Gets formatter for given formatName and formats value if found, returns value otherwise */\nconst createFormatFunction = (schema: SchemaController) => {\n  /**\n   * The generated handler for the given schema\n   */\n  const handler: ExpressionHandler<[unknown, string], any> = (\n    ctx,\n    value,\n    formatName,\n  ) => {\n    return (\n      schema.getFormatterForType({ type: formatName })?.format(value) ?? value\n    );\n  };\n\n  return handler;\n};\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let formatFunction: ExpressionHandler<[unknown, string]> | undefined;\n\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args: [ExpressionType]) => {\n          return ctx.evaluate(...args);\n        },\n      );\n    });\n  }\n}\n","import type { Asset, Flow, FlowResult } from \"@player-ui/types\";\nimport type { BindingParser, BindingLike } from \"./binding\";\nimport type { SchemaController } from \"./schema\";\nimport type { ExpressionEvaluator } from \"./expressions\";\nimport type { Logger } from \"./logger\";\nimport type {\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport type { ReadOnlyDataController } from \"./controllers/data/utils\";\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { ViewInstance } from \"./view\";\n\n/**\n * Public Player Hooks\n */\nexport interface PlayerHooks {\n  /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n  flowController: SyncHook<[FlowController], Record<string, any>>;\n  /** The hook that updates/handles views */\n  viewController: SyncHook<[ViewController], Record<string, any>>;\n  /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n  view: SyncHook<[ViewInstance], Record<string, any>>;\n  /** Called when an expression evaluator was created */\n  expressionEvaluator: SyncHook<[ExpressionEvaluator], Record<string, any>>;\n  /** The hook that creates and manages data */\n  dataController: SyncHook<[DataController], Record<string, any>>;\n  /** Called after the schema is created for a flow */\n  schema: SyncHook<[SchemaController], Record<string, any>>;\n  /** Manages validations (schema and x-field ) */\n  validationController: SyncHook<[ValidationController], Record<string, any>>;\n  /** Manages parsing binding */\n  bindingParser: SyncHook<[BindingParser], Record<string, any>>;\n  /** A that's called for state changes in the flow execution */\n  state: SyncHook<[PlayerFlowState], Record<string, any>>;\n  /** A hook to access the current flow */\n  onStart: SyncHook<[Flow<Asset<string>>], Record<string, any>>;\n  /** A hook for when the flow ends either in success or failure */\n  onEnd: SyncHook<[], Record<string, any>>;\n  /** Mutate the Content flow before starting */\n  resolveFlowContent: SyncWaterfallHook<\n    [Flow<Asset<string>>],\n    Record<string, any>\n  >;\n}\n\n/** The status for a flow's execution state */\nexport type PlayerFlowStatus =\n  | \"not-started\"\n  | \"in-progress\"\n  | \"completed\"\n  | \"error\";\n\n/** Common interface for the state of Player's flow execution */\nexport interface BaseFlowState<T extends PlayerFlowStatus> {\n  /** A unique reference for the life-cycle of a flow */\n  ref: symbol;\n\n  /** The status of the given flow */\n  status: T;\n}\n\n/** The beginning state of Player, before it's seen a flow  */\nexport type NotStartedState = BaseFlowState<\"not-started\">;\n\nexport const NOT_STARTED_STATE: NotStartedState = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\",\n};\n\n/** Shared properties for a flow in any state of execution (in-progress, completed successfully, or errored out) */\nexport interface PlayerFlowExecutionData {\n  /** The currently executing flow */\n  flow: Flow;\n}\n\nexport interface ControllerState {\n  /** The manager for data for a flow */\n  data: DataController;\n\n  /** The view manager for a flow */\n  view: ViewController;\n\n  /** The schema manager for a flow */\n  schema: SchemaController;\n\n  /** The validation manager for a flow */\n  validation: ValidationController;\n\n  /** The expression evaluator for a flow */\n  expression: ExpressionEvaluator;\n\n  /** The manager for parsing and resolving bindings */\n  binding: BindingParser;\n\n  /** the manager for the flow state machine */\n  flow: FlowController;\n}\n\n/** A flow is currently executing */\nexport type InProgressState = BaseFlowState<\"in-progress\"> &\n  PlayerFlowExecutionData & {\n    /** A promise that resolves when the flow is completed */\n    flowResult: Promise<FlowResult>;\n\n    /** The underlying state controllers for the current flow */\n    controllers: ControllerState;\n\n    /** Allow other platforms to abort the current flow with an error  */\n    fail: (error: Error) => void;\n\n    /**\n     * The Logger for the current player instance\n     */\n    logger: Logger;\n  };\n\n/** The flow completed properly */\nexport type CompletedState = BaseFlowState<\"completed\"> &\n  PlayerFlowExecutionData &\n  FlowResult & {\n    /** Readonly Player controllers to provide Player functionality after the flow has ended */\n    controllers: {\n      /** A read only instance of the Data Controller */\n      data: ReadOnlyDataController;\n    };\n  };\n\n/** The flow finished but not successfully */\nexport type ErrorState = BaseFlowState<\"error\"> & {\n  /** The currently executing flow */\n  flow: Flow;\n\n  /** The error associated with the failed flow */\n  error: Error;\n};\n\n/** Any Player state  */\nexport type PlayerFlowState =\n  | NotStartedState\n  | InProgressState\n  | CompletedState\n  | ErrorState;\n\n// Model\n\nexport type RawSetType = [BindingLike, any];\nexport type RawSetTransaction = Record<string, any> | RawSetType[];\n"]}