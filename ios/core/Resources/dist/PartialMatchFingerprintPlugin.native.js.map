{"version":3,"sources":["../../../../../../../../../../../../execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/plugins/partial-match-fingerprint/core/src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAQO,MAAM,gCAAN,MAA4D;AAAA,IAKjE,YAAY,UAAyB;AAJrC,kBAAO;AAKL,WAAK,WAAW;AAChB,WAAK,UAAU,oBAAI,IAAiB;AAAA,IACtC;AAAA,IAEA,MAAM,QAAgB;AACpB,aAAO,MAAM,eAAe,IAAI,KAAK,MAAM,CAAC,mBAAmB;AAC7D,uBAAe,MAAM,KAAK,IAAI,KAAK,MAAM,CAAC,SAAS;AACjD,eAAK,MAAM,SAAS,IAAI,KAAK,MAAM,CAAC,aAAa;AAC/C,qBAAS,MAAM,aAAa,IAAI,KAAK,MAAM,CAAC,UAAU,SAAS;AAC7D,kBACG,YAAY,QAAQ,KAAK,SAAS,WACnC,KAAK,SAAS,QACd;AACA,qBAAK,QAAQ;AAAA,kBACV,SAAmB;AAAA,kBACpB,KAAK,SAAS,IAAI,QAAiB;AAAA,gBACrC;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,IAEA,SAAS,OAAY,OAAY;AAC/B,WAAK,SAAS,IAAI,OAAO,KAAK;AAAA,IAChC;AAAA,IAEA,IAAI,SAAiB;AACnB,aAAO,KAAK,QAAQ,IAAI,OAAO;AAAA,IACjC;AAAA,EACF","sourcesContent":["import type { Player, PlayerPlugin, Asset } from \"@player-ui/player\";\nimport type { Registry } from \"@player-ui/partial-match-registry\";\n\n/**\n * A player plugin to manage partial-match-mappings by asset id\n * Automatically keeps track of all resolved asset id's and the value they match to in\n * the partial match registry\n */\nexport class PartialMatchFingerprintPlugin implements PlayerPlugin {\n  name = \"partial-match-fingerprint\";\n  private registry: Registry<any>;\n  private mapping: Map<string, any>;\n\n  constructor(registry: Registry<any>) {\n    this.registry = registry;\n    this.mapping = new Map<string, any>();\n  }\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        view.hooks.resolver.tap(this.name, (resolver) => {\n          resolver.hooks.afterResolve.tap(this.name, (resolved, node) => {\n            if (\n              (resolved && node && node.type === \"asset\") ||\n              node.type === \"view\"\n            ) {\n              this.mapping.set(\n                (resolved as Asset).id,\n                this.registry.get(resolved as Asset),\n              );\n            }\n          });\n        });\n      });\n    });\n  }\n\n  register(match: any, value: any) {\n    this.registry.set(match, value);\n  }\n\n  get(assetId: string) {\n    return this.mapping.get(assetId);\n  }\n}\n"]}