{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1783/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/beacon.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/symbols.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/symbols.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/metrics.ts"],"names":["MetricsPlugin","equalToOrIn","value","check","Array","isArray","includes","callTap","tap","args","ctx","context","callback","dlv_es_default","obj","key","def","p","undef","split","length","find","iter","tar","keys","dequal","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","from","entry","path","count","size","createBasicMatcher","seed","matcher","match","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","asArray","findInArray","array","findIndex","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","set","Error","options","transaction","map","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","NOOP_MODEL","createModelWithOptions","reduce","nextModel","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","forEach","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","push","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isObjectExpression","parse2","schema","parseQueue","shift","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","filter","b","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","createStatefulValidationObject","severity","state","isBlockingNavigation","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","all","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","insert","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","result","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","a","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","module","pDefer","deferred","promise","Promise","resolve","reject","require_queue_microtask","queueMicrotask","bind","window","global","then","catch","setTimeout","require_sorted_array","SortedArray","defclass","constructor","compare","compareDefault","element","high","low","pos","ordering","search","remove","splice","comparing","define","amd","src_exports","MetricsCorePlugin","MetricsCorePluginSymbol","MetricsViewBeaconPlugin","MetricsViewBeaconPluginContextSymbol","RequestTimeWebPlugin","defaultGetTime","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","AsyncSeriesWaterfallHook","import_ts_nested_error","import_timm","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","import_p_defer","import_queue_microtask","import_sorted_array","createSortedArray","Registry","initialSet","store","query","callbackfn","clear","isRegistryEmpty","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","parse","expected","whitespace","maybeNumber","Number","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","hooks","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","import_ts_nested_error2","actualValue","appendPathSegments","resolveNode","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","BINDING_BRACKETS_REGEX","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","BindingParser","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","NestedError2","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","normalized2","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","DependencyTracker","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","force","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","DependencyModel","rootModel","NOOPDataModel","ROOT_BINDING","PipelinedDataModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","handler","appliedTransaction","LocalModel","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","waitFor","_context","condition","ifTrue","ifFalse","resolution","resolveParams","andandOperator","ororOperator","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","ExpressionEvaluator","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","expressions","defaultHookOptions","_execAST","async","_resolveNodeAsync","_resolveNode","resolvedOpts","_nothing","_execString","evaluateAsync","addExpressionFunction","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","matched","storedAST","throwErrors","import_ts_nested_error3","NestedError3","_currentValue","expressionContext","resolvedAttributes","attr","expressionName","n","ele","operation","TapableLogger","trace","debug","info","warn","log","logHandlers","createHandler","logger","addHandler","logHandler","removeHandler","ProxyLogger","loggerProvider","proxiedLoggerProvider","identify","SchemaController","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","fns","addDataTypes","t2","getValidationsForBinding","typeDef","getApparentType","validation","vRef","trigger","normalizeBinding","cached","bindingArray","item","recordBinding","getType","schemaType","baseType","getTypeDefinition","dataType","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","import_timm2","setIn2","ValidationMiddleware","validator","shadowModelPaths","shouldIncludeInvalid","asModel","includeInvalid","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","import_timm3","setIn3","ValidatorRegistry","registry","register","EMPTY_NODE","Parser","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","currentValue","objToParse","children","localObj","objEntries","v","defaultValue","accumulation","current","value2","children2","localValue","newChildren","parentObj","import_timm5","setIn4","baseAst","child","unpackAndPush","initial","asset","withContext","Resolver","root","skipResolve","beforeUpdate","afterUpdate","beforeResolve","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm4","rawParent","cacheUpdate","partiallyResolvedParent","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","resolvedAST","isNestedMultiNode","update2","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","resolved","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","setIn5","rawParentToPassIn","newValues","mValue","mTree","bindingDep","scope","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","ViewInstance","onUpdate","resolver","onTemplatePluginCreated","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","templateSymbol","TemplatePlugin","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","node2","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","apply","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","propertiesToSkip","newNode","import_timm6","findBasePath","parentNode","original","StringResolverPlugin","propertiesToSkipCache","applyResolver","propsToSkip","plugins","stringResolver","nodePath","some","ApplicabilityPlugin","isApplicability","isApplicable","nodeType","parsedApplicability","import_timm7","omit2","applicabilityNode","applicability","SwitchPlugin","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","MultiNodePlugin","childVal","multiNode","AssetPlugin","assetAST","FlowInstance","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","transition","afterTransition","history","_oldState","nextState","newState","flowPromise","state_type","initialState","startState","import_p_defer2","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","FlowController","navigation","navStack","run","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","ValidationBindingTrackerViewPlugin","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","track","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","originalNode","newlyComputed","nodeSet","sectionNode","temp","SCHEMA_VALIDATION_PROVIDER_NAME","VIEW_VALIDATION_PROVIDER_NAME","VALIDATION_PROVIDER_NAME_SYMBOL","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","import_timm9","setIn6","dismissable","dismiss","newApplicableValidations","currentPhase","ValidationController","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","LocalStateStore","updateCallback","removeKey","useSharedState","getLocalStateFunction","countKey","localState","oldCount","findUp","AssetTransformCorePlugin","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","viewController","lastUpdatedNode","updateState","getStore","stepKey","storedState","useLocalState","transform","skip","isParentOfUpdated","isChildOfUpdated","ViewController","initialViews","resolveView","transformRegistry","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","ReadOnlyDataController","controller","DataController","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","ConstantsController","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","FlowExpPlugin","player","expressionEvaluator","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","expEvaluator","NOT_STARTED_STATE","DefaultViewPlugin","pluginOptions","PLAYER_VERSION","COMMIT","_Player","config","constantsController","dataController","validationController","bindingParser","resolveFlowContent","plugin","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","resolveStrings","transitionVal","computedTransitionVal","import_timm8","setIn7","param","constants","views","utils","pluginSymbol","endState","flowResult","finally","controllers","fail","payload","maybeUpdateState","endProps","errorState","BeaconPluginSymbol","_BeaconPlugin","beaconContext","buildBeacon","cancelBeacon","publishBeacon","beacon","playerState","vc","beaconedView","import_timm10","viewUpdate","action","_ctx","event","unresolvedData","defaultBeacon","hookArgs","shouldCancel","metaData","assetId","BeaconPlugin","performance","now","_MetricsViewBeaconPlugin","metricsPlugin","onRenderEnd","timing","completed","resolvePendingRenderTime","duration","beaconPlugin","buildContext","getRenderTime","renderTime","requestTime","getRequestTime","lastItem","getMetrics","timeline","render","metricsCorePlugin","resolveRequestTime","onFlowBegin","onFlowEnd","onInteractive","onNodeStart","onNodeEnd","onRenderStart","onUpdateStart","onUpdateEnd","metrics","trackRender","trackRenderTime","trackUpdate","trackUpdateTime","callOnUpdate","hookName","renderStart","startTime","renderInfo","renderEnd","interactive","endTime","time","prev","nodeMetrics","stateType"],"mappings":"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","sourcesContent":["\"use strict\";\nvar MetricsPlugin = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn9;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit3;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn9(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn9(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn9(a, path, nextVal);\n      }\n      function omit3(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn9,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit3,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length = array.length, index = 0;\n            while (index < length)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    MetricsCorePlugin: () => MetricsCorePlugin,\n    MetricsCorePluginSymbol: () => MetricsCorePluginSymbol,\n    MetricsViewBeaconPlugin: () => MetricsViewBeaconPlugin,\n    MetricsViewBeaconPluginContextSymbol: () => MetricsViewBeaconPluginContextSymbol,\n    RequestTimeWebPlugin: () => RequestTimeWebPlugin,\n    defaultGetTime: () => defaultGetTime\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n  var AsyncSeriesWaterfallHook = class extends Hook {\n    async call(...args) {\n      let [rtn, ...rest] = args;\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const tapValue = await callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n          if (tapValue !== void 0) {\n            rtn = tapValue;\n          }\n        }\n      } catch (e) {\n        this.interceptions.error(e);\n        throw e;\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_ts_nested_error = __toESM(require_nested_error(), 1);\n  var import_ts_nested_error2 = __toESM(require_nested_error(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm = __toESM(require_timm(), 1);\n  var import_ts_nested_error3 = __toESM(require_nested_error(), 1);\n  var import_timm2 = __toESM(require_timm(), 1);\n  var import_timm3 = __toESM(require_timm(), 1);\n  var import_timm4 = __toESM(require_timm(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm5 = __toESM(require_timm(), 1);\n  var import_timm6 = __toESM(require_timm(), 1);\n  var import_timm7 = __toESM(require_timm(), 1);\n  var import_timm8 = __toESM(require_timm(), 1);\n  var import_p_defer = __toESM(require_p_defer(), 1);\n  var import_p_defer2 = __toESM(require_p_defer(), 1);\n  var import_timm9 = __toESM(require_timm(), 1);\n  var import_queue_microtask = __toESM(require_queue_microtask(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var __defProp2 = Object.defineProperty;\n  var __export2 = (target, all) => {\n    for (var name in all)\n      __defProp2(target, name, { get: all[name], enumerable: true });\n  };\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n  var evaluator_functions_exports = {};\n  __export2(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal,\n    waitFor: () => waitFor\n  });\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const resolution = ctx.evaluate(condition);\n    if (resolution) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  var waitFor = async (ctx, promise) => {\n    return await promise;\n  };\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  var andandOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) && ctx.evaluate(b);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) || ctx.evaluate(b);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // eslint-disable-next-line\n    \"==\": (a, b) => a == b,\n    // eslint-disable-next-line\n    \"!=\": (a, b) => a != b,\n    \">\": (a, b) => a > b,\n    \">=\": (a, b) => a >= b,\n    \"<\": (a, b) => a < b,\n    \"<=\": (a, b) => a <= b,\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    \"!==\": (a, b) => a !== b,\n    \"===\": (a, b) => a === b,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": (a) => !a\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(\n          Object.entries(DEFAULT_BINARY_OPERATORS)\n        ),\n        unary: new Map(\n          Object.entries(DEFAULT_UNARY_OPERATORS)\n        ),\n        expressions: new Map([\n          ...Object.entries(evaluator_functions_exports),\n          [\"await\", waitFor]\n        ])\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n        if (options.async) {\n          return this._resolveNodeAsync(\n            result,\n            node,\n            options\n          );\n        }\n        return this._resolveNode(result, node, options);\n      });\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    evaluateAsync(expr, options) {\n      return this.evaluate(expr, { ...options, async: true });\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        const [, matched] = Array.from(matches);\n        if (matched) {\n          matchedExp = matched;\n        }\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            return operator(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right)\n            );\n          }\n          return operator(resolveNode(node.left), resolveNode(node.right));\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            return operator(\n              expressionContext,\n              operator.resolveParams === false ? node.argument : resolveNode(node.argument)\n            );\n          }\n          return operator(resolveNode(node.argument));\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        const { attributes } = node;\n        const resolvedAttributes = {};\n        attributes.forEach((attr) => {\n          const key = resolveNode(attr.key);\n          const value = resolveNode(attr.value);\n          resolvedAttributes[key] = value;\n        });\n        return resolvedAttributes;\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const result = resolveNode(node.test) ? node.consequent : node.alternate;\n        return resolveNode(result);\n      }\n      if (node.type === \"ArrayExpression\") {\n        return node.elements.map((ele) => resolveNode(ele));\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              newValue = operation(\n                expressionContext,\n                resolveNode(node.left),\n                resolveNode(node.right)\n              );\n            }\n          } else {\n            newValue = operation(resolveNode(node.left), resolveNode(node.right));\n          }\n          if (node.left.type === \"ModelRef\") {\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n    async _resolveNodeAsync(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            return operator(\n              expressionContext,\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n          return operator(\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            return operator(\n              expressionContext,\n              operator.resolveParams === false ? node.argument : await resolveNode(node.argument)\n            );\n          }\n          return operator(await resolveNode(node.argument));\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        const { attributes } = node;\n        const resolvedAttributes = {};\n        await Promise.all(\n          attributes.map(async (attr) => {\n            const key = await resolveNode(attr.key);\n            const value = await resolveNode(attr.value);\n            resolvedAttributes[key] = value;\n          })\n        );\n        return resolvedAttributes;\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = await Promise.all(\n          node.args.map(async (n) => await resolveNode(n))\n        );\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = await resolveNode(node.object);\n        const prop = await resolveNode(node.property);\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = await resolveNode(node.right);\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = await resolveNode(node.right);\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const result = await resolveNode(node.test) ? node.consequent : node.alternate;\n        return resolveNode(result);\n      }\n      if (node.type === \"ArrayExpression\") {\n        return Promise.all(\n          node.elements.map(async (ele) => await resolveNode(ele))\n        );\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              newValue = operation(\n                expressionContext,\n                await resolveNode(node.left),\n                await resolveNode(node.right)\n              );\n            }\n          } else {\n            newValue = operation(\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n          if (node.left.type === \"ModelRef\") {\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n      return this._resolveNode(_currentValue, node, options);\n    }\n  };\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n  var EMPTY_NODE = {\n    type: \"empty\"\n    /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(\n        value,\n        \"view\"\n        /* View */\n      );\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\", options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\",\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm5.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" || node.type === \"view\") {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\") {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm4.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\"\n        /* Empty */\n      };\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.type === \"multi-node\" && partiallyResolvedParent.type === \"value\";\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\") {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      resolvedAST.parent = partiallyResolvedParent;\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" && !childNode.override) {\n              const arr = (0, import_timm4.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm4.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm4.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\") {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        resolvedAST.values = newValues;\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        onTemplatePluginCreated: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n      this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n        this.templatePlugin = templatePlugin;\n      });\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n  };\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\", {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\",\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\") {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\") {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" || node.type === \"asset\") && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\",\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\") {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    }\n  };\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\") {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" || node.type === \"unknown\") {\n          return null;\n        }\n        if (node.type === \"value\" || node.type === \"asset\" || node.type === \"view\") {\n          let propsToSkip;\n          if (node.type === \"asset\" || node.type === \"view\") {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" && (node.parent?.parent?.type === \"asset\" || node.parent?.parent?.type === \"view\") && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\") {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\",\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\") {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\",\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\",\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\") {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\") {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\", options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\",\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\") {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\", options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer2.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\") {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm9.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(viewController) {\n      viewController.hooks.view.tap(\"asset-transform\", (view) => {\n        this.stateStore.clear();\n        view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n          let lastUpdatedNode;\n          const updateState = (node) => {\n            lastUpdatedNode = node;\n            view.update(/* @__PURE__ */ new Set());\n          };\n          const getStore = (node, stepKey) => {\n            let store;\n            const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n            const storedState = this.stateStore.get(node);\n            if (storedState) {\n              store = storedState;\n              store.removeKey(countKey);\n            } else {\n              store = new LocalStateStore(() => {\n                updateState(node);\n              });\n              this.stateStore.set(node, store);\n            }\n            return {\n              useSharedState: (key) => {\n                return store.useSharedState(key);\n              },\n              useLocalState: (initialState) => {\n                return store.getLocalStateFunction(\n                  stepKey,\n                  countKey\n                )(initialState);\n              }\n            };\n          };\n          resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n            if (node && (node.type === \"asset\" || node.type === \"view\")) {\n              const transform = this.registry.get(node.value);\n              if (transform?.beforeResolve) {\n                const store = getStore(\n                  options.node ?? node,\n                  this.beforeResolveSymbol\n                );\n                return transform.beforeResolve(node, options, store);\n              }\n            }\n            return node;\n          });\n          resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n            lastUpdatedNode = void 0;\n          });\n          resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n            if (!skip || !lastUpdatedNode) {\n              return skip;\n            }\n            const isParentOfUpdated = findUp(lastUpdatedNode, node);\n            const isChildOfUpdated = findUp(node, lastUpdatedNode);\n            return !isParentOfUpdated && !isChildOfUpdated;\n          });\n          resolver.hooks.afterResolve.tap(\n            \"asset-transform\",\n            (value, node, options) => {\n              if (node.type !== \"asset\" && node.type !== \"view\") {\n                return value;\n              }\n              const originalNode = resolver.getSourceNode(node);\n              if (!originalNode) {\n                return value;\n              }\n              const transform = this.registry.get(value);\n              if (transform?.resolve) {\n                const store = getStore(originalNode, this.resolveSymbol);\n                return transform?.resolve(value, options, store);\n              }\n              return value;\n            }\n          );\n        });\n      });\n    }\n  };\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        /** Do any processing before the `View` instance is created */\n        resolveView: new SyncWaterfallHook(),\n        // The hook right before the View starts resolving. Attach anything custom here\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.hooks.view.call(view);\n      view.update();\n    }\n  };\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n  var DefaultViewPlugin = class {\n    constructor() {\n      this.name = \"default-view-plugin\";\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (viewController) => {\n        viewController.hooks.view.tap(this.name, (view) => {\n          const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n          new AssetPlugin().apply(view);\n          new SwitchPlugin(pluginOptions).apply(view);\n          new ApplicabilityPlugin().apply(view);\n          new StringResolverPlugin().apply(view);\n          const templatePlugin = new TemplatePlugin(pluginOptions);\n          templatePlugin.apply(view);\n          view.hooks.onTemplatePluginCreated.call(templatePlugin);\n          new MultiNodePlugin().apply(view);\n        });\n      });\n    }\n  };\n  var PLAYER_VERSION = true ? \"0.10.5--canary.649.22815\" : \"__VERSION__\";\n  var COMMIT = true ? \"9f52e9693e724aaf5edc228683937f01e57101c9\" : \"__GIT_COMMIT__\";\n  var _Player = class _Player2 {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n        flowController: new SyncHook(),\n        /** The hook that updates/handles views */\n        viewController: new SyncHook(),\n        /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n        view: new SyncHook(),\n        /** Called when an expression evaluator was created */\n        expressionEvaluator: new SyncHook(),\n        /** The hook that creates and manages data */\n        dataController: new SyncHook(),\n        /** Called after the schema is created for a flow */\n        schema: new SyncHook(),\n        /** Manages validations (schema and x-field ) */\n        validationController: new SyncHook(),\n        /** Manages parsing binding */\n        bindingParser: new SyncHook(),\n        /** A that's called for state changes in the flow execution */\n        state: new SyncHook(),\n        /** A hook to access the current flow */\n        onStart: new SyncHook(),\n        /** A hook for when the flow ends either in success or failure */\n        onEnd: new SyncHook(),\n        /** Mutate the Content flow before starting */\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        new DefaultViewPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player2.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player2.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm8.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm8.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm8.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            try {\n              const result = await expressionEvaluator.evaluateAsync(exp);\n              flowController?.transition(String(result));\n            } catch (e) {\n              flowResultDeferred.reject(e);\n            }\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+beacon-plugin@0.0.0/node_modules/@player-ui/beacon-plugin/dist/index.mjs\n  var import_timm10 = __toESM(require_timm(), 1);\n  var BeaconPluginSymbol = Symbol.for(\"BeaconPlugin\");\n  var _BeaconPlugin = class _BeaconPlugin2 {\n    constructor(options) {\n      this.name = \"Beacon\";\n      this.symbol = _BeaconPlugin2.Symbol;\n      this.beaconContext = {\n        view: void 0\n      };\n      this.hooks = {\n        buildBeacon: new AsyncSeriesWaterfallHook(),\n        cancelBeacon: new SyncBailHook(),\n        publishBeacon: new SyncHook()\n      };\n      if (options?.plugins) {\n        options.plugins.forEach((plugin) => {\n          plugin.apply(this);\n        });\n      }\n      if (options?.callback) {\n        this.hooks.publishBeacon.tap(\"BeaconCallback\", (beacon) => {\n          if (options.callback) {\n            options.callback(beacon);\n          }\n        });\n      }\n    }\n    apply(player) {\n      this.player = player;\n      this.logger = player.logger;\n      player.hooks.state.tap(this.name, (playerState) => {\n        if (playerState.status === \"in-progress\") {\n          this.resolveDataRefs = (data) => resolveDataRefs(data, {\n            model: playerState.controllers.data,\n            evaluate: playerState.controllers.expression.evaluate\n          });\n        }\n      });\n      player.hooks.viewController.tap(this.name, (vc) => {\n        this.beaconContext = {\n          view: void 0\n        };\n        vc.hooks.view.tap(this.name, (view) => {\n          let beaconedView = false;\n          view.hooks.parser.tap(this.name, (parser) => {\n            parser.hooks.onCreateASTNode.tap(this.name, (obj) => {\n              if (obj?.type !== \"asset\" && obj?.type !== \"view\")\n                return void 0;\n              const propertiesToSkip = obj.plugins?.stringResolver?.propertiesToSkip ?? [];\n              if (propertiesToSkip.includes(\"beacon\"))\n                return void 0;\n              obj.plugins = (0, import_timm10.setIn)(\n                obj.plugins ?? {},\n                [\"stringResolver\", \"propertiesToSkip\"],\n                [\"beacon\", ...propertiesToSkip]\n              );\n              return obj;\n            });\n          });\n          view.hooks.onUpdate.tap(this.name, (viewUpdate) => {\n            this.beaconContext = {\n              view: viewUpdate\n            };\n            if (!beaconedView) {\n              this.beacon({\n                action: \"viewed\",\n                element: \"view\",\n                asset: viewUpdate,\n                view: viewUpdate\n              });\n              beaconedView = true;\n            }\n          });\n        });\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        evaluator.addExpressionFunction(\"beacon\", (_ctx, action, data) => {\n          const view = this.beaconContext.view || {};\n          this.beacon({\n            action,\n            data,\n            element: \"view\",\n            asset: view,\n            view\n          });\n        });\n      });\n    }\n    beacon(event) {\n      const { action, element, asset, view } = event;\n      const { view: currentView } = this.beaconContext;\n      setTimeout(async () => {\n        const unresolvedData = event?.data || event.asset?.metaData?.beacon;\n        const data = this.resolveDataRefs?.(unresolvedData) ?? unresolvedData;\n        const defaultBeacon = {\n          action,\n          element,\n          data,\n          assetId: asset?.id,\n          viewId: currentView?.id\n        };\n        const state = this.player?.getState();\n        const hookArgs = {\n          ...event,\n          data,\n          state,\n          view: view ?? currentView,\n          logger: this.logger\n        };\n        let beacon = await this.hooks.buildBeacon.call(defaultBeacon, hookArgs) || defaultBeacon;\n        if (beacon !== defaultBeacon && this.resolveDataRefs) {\n          beacon = this.resolveDataRefs(beacon);\n        }\n        const shouldCancel = this.hooks.cancelBeacon.call(hookArgs) || false;\n        if (!shouldCancel) {\n          this.logger?.debug(\"Sending beacon event\", beacon);\n          this.hooks.publishBeacon.call(beacon);\n        }\n      }, 0);\n    }\n  };\n  _BeaconPlugin.Symbol = BeaconPluginSymbol;\n  var BeaconPlugin = _BeaconPlugin;\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/symbols.ts\n  var MetricsCorePluginSymbol = Symbol.for(\"MetricsCorePlugin\");\n  var MetricsViewBeaconPluginContextSymbol = Symbol.for(\n    \"MetricsViewBeaconPluginContext\"\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/metrics/core/src/metrics.ts\n  var defaultGetTime = typeof performance === \"undefined\" ? () => Date.now() : () => performance.now();\n  var callbacks = [\n    \"onFlowBegin\",\n    \"onFlowEnd\",\n    \"onInteractive\",\n    \"onNodeStart\",\n    \"onNodeEnd\",\n    \"onRenderStart\",\n    \"onRenderEnd\",\n    \"onUpdateStart\",\n    \"onUpdateEnd\",\n    \"onUpdate\"\n  ];\n  var _MetricsViewBeaconPlugin = class _MetricsViewBeaconPlugin {\n    constructor(metricsPlugin) {\n      this.symbol = _MetricsViewBeaconPlugin.Symbol;\n      this.metricsPlugin = metricsPlugin;\n      this.metricsPlugin.hooks.onRenderEnd.tap(\n        \"MetricsViewBeaconPlugin\",\n        (timing) => {\n          if (timing.completed && this.resolvePendingRenderTime) {\n            this.resolvePendingRenderTime(timing.duration);\n            this.resolvePendingRenderTime = void 0;\n          }\n        }\n      );\n    }\n    apply(beaconPlugin) {\n      beaconPlugin.hooks.buildBeacon.intercept({\n        context: true,\n        call: (context, beacon) => {\n          if (context && beacon.action === \"viewed\") {\n            context[this.symbol] = this.buildContext();\n          }\n        }\n      });\n    }\n    async buildContext() {\n      return {\n        renderTime: await this.getRenderTime(),\n        requestTime: this.getRequestTime()\n      };\n    }\n    async getRenderTime() {\n      const { flow } = this.metricsPlugin.getMetrics();\n      if (flow) {\n        const lastItem = flow.timeline[flow.timeline.length - 1];\n        if (\"render\" in lastItem && lastItem.render.completed) {\n          return lastItem.render.duration;\n        }\n      }\n      return new Promise((resolve) => {\n        this.resolvePendingRenderTime = resolve;\n      });\n    }\n    getRequestTime() {\n      const { flow } = this.metricsPlugin.getMetrics();\n      return flow?.requestTime;\n    }\n  };\n  _MetricsViewBeaconPlugin.Symbol = MetricsViewBeaconPluginContextSymbol;\n  var MetricsViewBeaconPlugin = _MetricsViewBeaconPlugin;\n  var RequestTimeWebPlugin = class {\n    constructor(getRequestTime) {\n      this.name = \"RequestTimeWebPlugin\";\n      this.getRequestTime = getRequestTime;\n    }\n    apply(metricsCorePlugin) {\n      metricsCorePlugin.hooks.resolveRequestTime.tap(this.name, () => {\n        return this.getRequestTime();\n      });\n    }\n  };\n  var MetricsCorePlugin = class {\n    constructor(options) {\n      this.name = \"metrics\";\n      this.symbol = MetricsCorePluginSymbol;\n      this.hooks = {\n        resolveRequestTime: new SyncBailHook(),\n        onFlowBegin: new SyncHook(),\n        onFlowEnd: new SyncHook(),\n        onInteractive: new SyncHook(),\n        onNodeStart: new SyncHook(),\n        onNodeEnd: new SyncHook(),\n        onRenderStart: new SyncHook(),\n        onRenderEnd: new SyncHook(),\n        onUpdateStart: new SyncHook(),\n        onUpdateEnd: new SyncHook(),\n        onUpdate: new SyncHook()\n      };\n      this.metrics = {};\n      this.trackRender = options?.trackRenderTime ?? false;\n      this.trackUpdate = options?.trackUpdateTime ?? false;\n      this.getTime = options?.getTime ?? defaultGetTime;\n      const callOnUpdate = () => {\n        this.hooks.onUpdate.call(this.metrics);\n      };\n      this.hooks.onFlowBegin.tap(this.name, callOnUpdate);\n      this.hooks.onFlowEnd.tap(this.name, callOnUpdate);\n      this.hooks.onInteractive.tap(this.name, callOnUpdate);\n      this.hooks.onNodeStart.tap(this.name, callOnUpdate);\n      this.hooks.onNodeEnd.tap(this.name, callOnUpdate);\n      this.hooks.onRenderStart.tap(this.name, callOnUpdate);\n      this.hooks.onRenderEnd.tap(this.name, callOnUpdate);\n      this.hooks.onUpdateStart.tap(this.name, callOnUpdate);\n      this.hooks.onUpdateEnd.tap(this.name, callOnUpdate);\n      callbacks.forEach((hookName) => {\n        if (options?.[hookName] !== void 0) {\n          this.hooks[hookName].tap(\"options\", options?.[hookName]);\n        }\n      });\n    }\n    /**\n     * Fetch the metrics of the current flow\n     */\n    getMetrics() {\n      return this.metrics;\n    }\n    /** Called when the UI layer wishes to start a timer for rendering */\n    renderStart() {\n      const timeline = this.metrics.flow?.timeline;\n      if (!timeline || timeline.length === 0) {\n        return;\n      }\n      const lastItem = timeline[timeline.length - 1];\n      if (\"updates\" in lastItem) {\n        if (lastItem.updates.length > 0) {\n          const lastUpdate = lastItem.updates[lastItem.updates.length - 1];\n          if (lastUpdate.completed === false) {\n            return;\n          }\n        }\n        if (!lastItem.render.completed) {\n          return;\n        }\n        const update = {\n          completed: false,\n          startTime: defaultGetTime()\n        };\n        lastItem.updates.push(update);\n        this.hooks.onUpdateStart.call(update, lastItem, this.metrics);\n      } else {\n        const renderInfo = {\n          ...lastItem,\n          render: {\n            completed: false,\n            startTime: defaultGetTime()\n          },\n          updates: []\n        };\n        timeline[timeline.length - 1] = renderInfo;\n        this.hooks.onRenderStart.call(\n          renderInfo.render,\n          renderInfo,\n          this.metrics\n        );\n      }\n    }\n    /** Called when the UI layer wants to end the rendering timer */\n    renderEnd() {\n      if (!this.trackRender) {\n        throw new Error(\n          \"Must start the metrics-plugin with render tracking enabled\"\n        );\n      }\n      const { flow } = this.metrics;\n      if (!flow) {\n        return;\n      }\n      const { timeline, interactive } = flow;\n      if (!timeline || !interactive || timeline.length === 0) {\n        return;\n      }\n      const lastItem = timeline[timeline.length - 1];\n      if (!(\"render\" in lastItem)) {\n        return;\n      }\n      const endTime = defaultGetTime();\n      if (lastItem.render.completed) {\n        if (lastItem.updates.length === 0) {\n          return;\n        }\n        const lastUpdate = lastItem.updates[lastItem.updates.length - 1];\n        if (lastUpdate.completed === true) {\n          return;\n        }\n        const update = {\n          ...lastUpdate,\n          completed: true,\n          endTime,\n          duration: endTime - lastUpdate.startTime\n        };\n        lastItem.updates[lastItem.updates.length - 1] = update;\n        this.hooks.onUpdateEnd.call(update, lastItem, this.metrics);\n      } else {\n        lastItem.render = {\n          ...lastItem.render,\n          completed: true,\n          endTime,\n          duration: endTime - lastItem.startTime\n        };\n        this.hooks.onRenderEnd.call(lastItem.render, lastItem, this.metrics);\n        if (!interactive.completed) {\n          flow.interactive = {\n            ...interactive,\n            completed: true,\n            duration: endTime - interactive.startTime,\n            endTime\n          };\n          this.hooks.onInteractive.call(flow.interactive, this.metrics);\n        }\n      }\n    }\n    apply(player) {\n      player.hooks.onStart.tap(this.name, (flow) => {\n        const requestTime = this.hooks.resolveRequestTime.call();\n        const startTime = defaultGetTime();\n        this.metrics = {\n          flow: {\n            id: flow.id,\n            requestTime: requestTime ?? void 0,\n            timeline: [],\n            startTime,\n            completed: false,\n            interactive: {\n              completed: false,\n              startTime\n            }\n          }\n        };\n        this.hooks.onFlowBegin.call(this.metrics);\n      });\n      player.hooks.state.tap(this.name, (state) => {\n        if (state.status === \"completed\" || state.status === \"error\") {\n          const endTime = defaultGetTime();\n          const { flow } = this.metrics;\n          if (flow === void 0 || flow?.completed === true) {\n            return;\n          }\n          this.metrics = {\n            flow: {\n              ...flow,\n              completed: true,\n              endTime,\n              duration: endTime - flow.startTime\n            }\n          };\n          const lastUpdate = flow.timeline[flow.timeline.length - 1];\n          if (lastUpdate && !lastUpdate.completed) {\n            this.metrics.flow.timeline[flow.timeline.length - 1] = {\n              ...lastUpdate,\n              completed: true,\n              endTime,\n              duration: endTime - lastUpdate.startTime\n            };\n          }\n          this.hooks.onFlowEnd.call(this.metrics);\n        }\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (f) => {\n          f.hooks.transition.tap(this.name, (from, to) => {\n            const time = defaultGetTime();\n            const { flow } = this.metrics;\n            if (!flow) {\n              return;\n            }\n            const { timeline } = flow;\n            if (timeline.length > 0) {\n              const prev = timeline[timeline.length - 1];\n              if (prev.completed) {\n                throw new Error(\"Completing a state that's already done.\");\n              }\n              timeline[timeline.length - 1] = {\n                ...prev,\n                completed: true,\n                endTime: time,\n                duration: time - prev.startTime\n              };\n              this.hooks.onNodeEnd.call(timeline[timeline.length - 1]);\n            }\n            const nodeMetrics = {\n              completed: false,\n              startTime: time,\n              stateName: to.name,\n              stateType: to.value.state_type\n            };\n            timeline.push(nodeMetrics);\n            this.hooks.onNodeStart.call(nodeMetrics);\n          });\n        });\n      });\n      if (this.trackRender) {\n        player.hooks.view.tap(this.name, (v) => {\n          if (this.trackUpdate) {\n            v.hooks.onUpdate.tap(this.name, () => {\n              this.renderStart();\n            });\n          } else {\n            this.renderStart();\n          }\n        });\n        player.applyTo(\n          BeaconPlugin.Symbol,\n          (beaconPlugin) => new MetricsViewBeaconPlugin(this).apply(beaconPlugin)\n        );\n      }\n    }\n  };\n  MetricsCorePlugin.Symbol = MetricsCorePluginSymbol;\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/index.ts\nexport * from \"@player-ui/types\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError as NestedError2 } from \"ts-nested-error\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts\nvar toValue = (value) => ({\n  name: \"Value\",\n  value\n});\nvar toExpression = (value) => ({\n  name: \"Expression\",\n  value\n});\nvar toPath = (path) => ({\n  name: \"PathNode\",\n  path\n});\nvar toQuery = (key, value) => ({\n  name: \"Query\",\n  key,\n  value\n});\nvar toConcatenatedNode = (values) => {\n  if (values.length === 1) {\n    return values[0];\n  }\n  return {\n    name: \"Concatenated\",\n    value: values\n  };\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts\nvar SEGMENT_SEPARATOR = \".\";\nvar OPEN_CURL = \"{\";\nvar CLOSE_CURL = \"}\";\nvar OPEN_BRACKET = \"[\";\nvar CLOSE_BRACKET = \"]\";\nvar EQUALS = \"=\";\nvar SINGLE_QUOTE = \"'\";\nvar DOUBLE_QUOTE = '\"';\nvar BACK_TICK = \"`\";\nvar isIdentifierChar = (char) => {\n  if (!char) {\n    return false;\n  }\n  const charCode = char.charCodeAt(0);\n  const matches = charCode === 32 || // ' '\n  charCode === 34 || // \"\n  charCode === 39 || // '\n  charCode === 40 || // (\n  charCode === 41 || // )\n  charCode === 42 || // *\n  charCode === 46 || // .\n  charCode === 61 || // =\n  charCode === 91 || // [\n  charCode === 93 || // ]\n  charCode === 96 || // `\n  charCode === 123 || // {\n  charCode === 125;\n  return !matches;\n};\nvar parse = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n  const next = (expected) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n  const whitespace = () => {\n    while (ch === \" \") {\n      next();\n    }\n  };\n  const identifier = () => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n    let value = ch;\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n      value += ch;\n    }\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n  const expression = () => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n      let exp = ch;\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n        exp += ch;\n      }\n      next(BACK_TICK);\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n  const regex = (match) => {\n    if (!ch?.match(match)) {\n      return;\n    }\n    let value = ch;\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n      value += ch;\n    }\n    if (value) {\n      return toValue(value);\n    }\n  };\n  const nestedPath = () => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n  const segment = () => {\n    const segments = [];\n    let nextSegment = simpleSegment();\n    while (nextSegment !== void 0) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n    if (segments.length === 0) {\n      return void 0;\n    }\n    return toConcatenatedNode(segments);\n  };\n  const optionallyQuotedSegment = () => {\n    whitespace();\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n    return simpleSegment();\n  };\n  const equals = () => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n    while (ch === EQUALS) {\n      next();\n    }\n    return true;\n  };\n  const parseBracket = () => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value = optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n      return value;\n    }\n  };\n  const parseSegmentAndBrackets = () => {\n    const parsed = [];\n    const firstSegment = segment();\n    if (firstSegment) {\n      parsed.push(firstSegment);\n      let bracketSegment = parseBracket();\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n      }\n      while (bracketSegment !== void 0) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n    return parsed;\n  };\n  const parsePath = () => {\n    const parts = [];\n    let nextSegment = parseSegmentAndBrackets();\n    while (nextSegment !== void 0) {\n      parts.push(...nextSegment);\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n    return toPath(parts);\n  };\n  try {\n    const result = parsePath();\n    return {\n      status: true,\n      path: result\n    };\n  } catch (e) {\n    return {\n      status: false,\n      error: e.message\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts\nfunction isBinding(binding) {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\nfunction maybeConvertToNum(i) {\n  const asInt = parseInt(i, 10);\n  if (isNaN(asInt)) {\n    return i;\n  }\n  return asInt;\n}\nfunction getBindingSegments(binding) {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n  return binding.asArray();\n}\nfunction findInArray(array, key, value) {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      return obj[key] == value;\n    }\n    return false;\n  });\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts\nvar BindingInstance = class _BindingInstance {\n  constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n      const tryNum = Number(segment);\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n  asArray() {\n    return this.split;\n  }\n  asString() {\n    return this.joined;\n  }\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding) {\n    const bindingAsArray = binding.asArray();\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  relative(binding) {\n    return this.asArray().slice(binding.asArray().length);\n  }\n  parent() {\n    return this.factory(this.split.slice(0, -1));\n  }\n  key() {\n    return this.split[this.split.length - 1];\n  }\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative) {\n    const descendentSegments = getBindingSegments(relative);\n    return this.factory(this.split.concat(descendentSegments));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts\nimport { NestedError } from \"ts-nested-error\";\nfunction resolveBindingAST(bindingPathNode, options, hooks) {\n  const context = {\n    updates: {},\n    path: []\n  };\n  function getValueForNode(node) {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates\n        };\n      }\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path)\n        );\n      } catch (e) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e\n        );\n      }\n    }\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n        return options.convertToPath(actualValue);\n      } catch (e) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n  function appendPathSegments(segment) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n  function resolveNode(_node) {\n    const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n      case \"Query\": {\n        const objToQuery = options.getValue(context.path) ?? [];\n        const { key, value } = resolvedNode;\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n        if (index === void 0 || index === -1) {\n          context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n        break;\n      }\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n      default:\n        throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n    }\n  }\n  bindingPathNode.path.forEach(resolveNode);\n  return {\n    path: context.path,\n    updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n  };\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\nvar SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nvar BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nvar LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\nvar DEFAULT_OPTIONS = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  }\n};\nvar BindingParser = class {\n  constructor(options) {\n    this.hooks = {\n      skipOptimization: new SyncBailHook(),\n      beforeResolveNode: new SyncWaterfallHook()\n    };\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  normalizePath(path, resolveOptions) {\n    if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n      return { path: path.split(\".\"), updates: void 0 };\n    }\n    const ast = this.parseCache[path] ?? parse(path);\n    this.parseCache[path] = ast;\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n      );\n    }\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e) {\n      throw new NestedError2(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n  getBindingForNormalizedResult(normalized) {\n    const normalizedStr = normalized.path.join(\".\");\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse\n    );\n    this.cache[normalizedStr] = created;\n    return created;\n  }\n  parse(rawBinding, overrides = {}) {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n    const options = {\n      ...this.parserOptions,\n      ...overrides\n    };\n    let updates = {};\n    const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n    const normalizeConfig = {\n      getValue: (path) => {\n        const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n        return options.get(this.getBindingForNormalizedResult(normalized2));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path) => {\n        if (path === void 0) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\"\n          );\n        }\n        if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`\n          );\n        }\n        const normalized2 = this.normalizePath(String(path), normalizeConfig);\n        if (normalized2.updates) {\n          updates = {\n            ...updates,\n            ...normalized2.updates\n          };\n        }\n        const joinedNormalizedPath = normalized2.path.join(\".\");\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n        return joinedNormalizedPath;\n      }\n    };\n    const normalized = this.normalizePath(joined, normalizeConfig);\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates\n      };\n    }\n    const updateKeys = Object.keys(updates);\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding]\n        ]\n      );\n      options.set(updateTransaction);\n    }\n    return this.getBindingForNormalizedResult(normalized);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts\nvar DependencyTracker = class {\n  constructor() {\n    this.readDeps = /* @__PURE__ */ new Set();\n    this.writeDeps = /* @__PURE__ */ new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n  createSubset(name, force = false) {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: /* @__PURE__ */ new Set(),\n        writeDeps: /* @__PURE__ */ new Set()\n      };\n    }\n  }\n  /** Grab all of the bindings that this depended on */\n  getDependencies(name) {\n    if (name !== void 0) {\n      return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n    }\n    return this.readDeps;\n  }\n  trackSubset(name) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n  trackDefault() {\n    this.namedSet = \"core\";\n  }\n  /** Grab all of the bindings this wrote to */\n  getModified(name) {\n    if (name !== void 0) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n    }\n    return this.writeDeps;\n  }\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  readsBinding(binding) {\n    return this.readDeps.has(binding);\n  }\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  writesBinding(binding) {\n    return this.writeDeps.has(binding);\n  }\n  /** Reset all tracking of dependencies */\n  reset() {\n    this.readDeps = /* @__PURE__ */ new Set();\n    this.writeDeps = /* @__PURE__ */ new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n  addReadDep(binding, namedSet = this.namedSet) {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n    this.readDeps.add(binding);\n  }\n  addWriteDep(binding, namedSet = this.namedSet) {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n    this.writeDeps.add(binding);\n  }\n  addChildReadDep(binding) {\n    this.addReadDep(binding, \"children\");\n  }\n};\nvar DependencyMiddleware = class extends DependencyTracker {\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n  set(transaction, options, next) {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n    return next?.set(transaction, options) ?? [];\n  }\n  get(binding, options, next) {\n    this.addReadDep(binding);\n    return next?.get(binding, options);\n  }\n  delete(binding, options, next) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n};\nvar DependencyModel = class extends DependencyTracker {\n  constructor(rootModel) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n  set(transaction, options) {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n    return this.rootModel.set(transaction, options);\n  }\n  get(binding, options) {\n    this.addReadDep(binding);\n    return this.rootModel.get(binding, options);\n  }\n  delete(binding, options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts\nimport { SyncHook } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts\nvar NOOPDataModel = class {\n  get() {\n    return void 0;\n  }\n  set() {\n    return [];\n  }\n  delete() {\n  }\n};\nvar NOOP_MODEL = new NOOPDataModel();\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts\nvar ROOT_BINDING = new BindingInstance([]);\nfunction withParser(model, parseBinding) {\n  function maybeParse(binding, readOnly) {\n    const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n      get: model.get,\n      set: model.set,\n      readOnly\n    });\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n    return parsed;\n  }\n  return {\n    get(binding, options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options\n      );\n    },\n    delete(binding, options) {\n      return model.delete(maybeParse(binding, false), options);\n    }\n  };\n}\nfunction toModel(middleware, defaultOptions, next) {\n  if (!next) {\n    return middleware;\n  }\n  return {\n    get: (binding, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n      return next?.delete(binding, resolvedOptions);\n    }\n  };\n}\nfunction constructModelForPipeline(pipeline) {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n  function createModelWithOptions(options) {\n    const model = pipeline.reduce(\n      (nextModel, middleware) => toModel(middleware, options, nextModel),\n      void 0\n    ) ?? NOOP_MODEL;\n    return model;\n  }\n  return {\n    get: (binding, options) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    }\n  };\n}\nvar PipelinedDataModel = class {\n  constructor(pipeline = []) {\n    this.hooks = {\n      onSet: new SyncHook()\n    };\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n  setMiddleware(handlers) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n  addMiddleware(handler) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n  reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n    this.set([[ROOT_BINDING, model]]);\n  }\n  set(transaction, options) {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n  get(binding, options) {\n    return this.effectiveDataModel.get(binding, options);\n  }\n  delete(binding, options) {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts\nimport get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nvar LocalModel = class {\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n  reset(model = {}) {\n    this.model = model;\n  }\n  get(binding) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n    return get(this.model, binding.asArray());\n  }\n  set(transaction) {\n    const effectiveOperations = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value);\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n  delete(binding) {\n    const parentBinding = binding.parent();\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n      if (parentValue !== void 0) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key())\n          );\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key())\n          );\n        }\n      }\n    }\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\nimport { SyncWaterfallHook as SyncWaterfallHook2, SyncBailHook as SyncBailHook2 } from \"tapable-ts\";\nimport { NestedError as NestedError3 } from \"ts-nested-error\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts\nvar ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\nfunction isExpressionNode(x) {\n  return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts\nvar PERIOD_CODE = 46;\nvar COMMA_CODE = 44;\nvar SQUOTE_CODE = 39;\nvar DQUOTE_CODE = 34;\nvar OPAREN_CODE = 40;\nvar CPAREN_CODE = 41;\nvar OBRACK_CODE = 91;\nvar CBRACK_CODE = 93;\nvar QUMARK_CODE = 63;\nvar SEMCOL_CODE = 59;\nvar COLON_CODE = 58;\nvar OCURL_CODE = 123;\nvar CCURL_CODE = 125;\nvar t = true;\nvar unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\nvar binaryOps = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14\n};\nfunction throwError(message, index) {\n  const err = new Error(`${message} at character ${index}`);\n  err.index = index;\n  err.description = message;\n  throw err;\n}\nfunction createSpanningLocation(start, end) {\n  if (!start || !end) {\n    return;\n  }\n  return {\n    start: start.start,\n    end: end.end\n  };\n}\nfunction getMaxKeyLen(obj) {\n  let maxLen = 0;\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n  return maxLen;\n}\nvar maxUnopLen = getMaxKeyLen(unaryOps);\nvar maxBinopLen = getMaxKeyLen(binaryOps);\nvar literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0\n};\nvar thisStr = \"this\";\nfunction binaryPrecedence(opVal) {\n  return binaryOps[opVal] || 0;\n}\nfunction createBinaryExpression(operator, left, right, location) {\n  let type;\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location\n  };\n}\nfunction isDecimalDigit(ch) {\n  return ch >= 48 && ch <= 57;\n}\nfunction isIdentifierStart(ch) {\n  return ch === 36 || ch === 95 || // `$` and `_`\n  ch >= 65 && ch <= 90 || // A...Z\n  ch >= 97 && ch <= 122;\n}\nfunction isIdentifierPart(ch) {\n  return ch === 36 || ch === 95 || // `$` and `_`\n  ch >= 65 && ch <= 90 || // A...Z\n  ch >= 97 && ch <= 122 || // A...z\n  ch >= 48 && ch <= 57;\n}\nfunction isModelRefStart(ch0, ch1) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n}\nfunction parseExpression(expr, options) {\n  const strictMode = options?.strict ?? true;\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n  let index = 0;\n  const getLocation = (startChar) => {\n    return {\n      start: {\n        character: startChar\n      },\n      end: {\n        character: index\n      }\n    };\n  };\n  function exprI(i) {\n    return charAtFunc.call(expr, i);\n  }\n  function exprICode(i) {\n    return charCodeAtFunc.call(expr, i);\n  }\n  function gobbleObjects() {\n    const attributes = [];\n    let closed = false;\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n    ++index;\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      if (chCode === CCURL_CODE) {\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n        key = gobbleStringLiteral();\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n        shouldDefineKey = true;\n        key = void 0;\n        value = void 0;\n      }\n      chCode = exprICode(index);\n    }\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n  function gobbleExpression() {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      index++;\n      const consequent = gobbleExpression();\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n      gobbleSpaces();\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex)\n        };\n      }\n      throwError(\"Expected :\", index);\n    }\n    return test;\n  }\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n    return false;\n  }\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n    if (!biop) {\n      return left;\n    }\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n    const stack = [left, biopInfo, right];\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n      if (prec === 0) {\n        break;\n      }\n      biopInfo = { value: biop, prec };\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location)\n        );\n        stack.push(node);\n      }\n      node = gobbleToken();\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n    i = stack.length - 1;\n    node = stack[i];\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location)\n      );\n      i -= 2;\n    }\n    return node;\n  }\n  function gobbleToken() {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      return gobbleNumericLiteral();\n    }\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      return gobbleStringLiteral();\n    }\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      return gobbleVariable();\n    }\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex)\n        };\n      }\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n    return false;\n  }\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n    if (exprICode(index) === PERIOD_CODE) {\n      num += exprI(index++);\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      num += exprI(index++);\n      ch = exprI(index);\n      if (ch === \"+\" || ch === \"-\") {\n        num += exprI(index++);\n      }\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n    const chCode = exprICode(index);\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n    while (index < length) {\n      let ch = exprI(index++);\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n      ch = exprI(index++);\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\v\";\n          break;\n        default:\n      }\n    }\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n    index += 2;\n    while (index < length) {\n      const ch = exprI(index++);\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n    const identifier = expr.slice(start, index);\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: literals[identifier],\n        raw: identifier,\n        location: getLocation(start)\n      };\n    }\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start)\n      };\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start)\n    };\n  }\n  function gobbleArguments(termination) {\n    const args = [];\n    let charIndex;\n    let node;\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      if (charIndex === termination) {\n        index++;\n        break;\n      }\n      if (charIndex === COMMA_CODE) {\n        index++;\n        continue;\n      }\n      node = gobbleExpression();\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n      args.push(node);\n    }\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n    return args;\n  }\n  function gobbleVariable() {\n    let charIndex = exprICode(index);\n    let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n    while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n      index++;\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex)\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex)\n        };\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex)\n        };\n      }\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n    return node;\n  }\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n    throwError(\"Unclosed (\", index);\n  }\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex)\n    };\n  }\n  const nodes = [];\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++;\n        continue;\n      }\n      const node = gobbleExpression();\n      if (node) {\n        nodes.push(node);\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0)\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e\n    };\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts\nvar evaluator_functions_exports = {};\n__export(evaluator_functions_exports, {\n  conditional: () => conditional,\n  deleteDataVal: () => deleteDataVal,\n  getDataVal: () => getDataVal,\n  setDataVal: () => setDataVal,\n  waitFor: () => waitFor\n});\nvar setDataVal = (_context, binding, value) => {\n  _context.model.set([[binding, value]]);\n};\nvar getDataVal = (_context, binding) => {\n  return _context.model.get(binding);\n};\nvar deleteDataVal = (_context, binding) => {\n  return _context.model.delete(binding);\n};\nvar conditional = (ctx, condition, ifTrue, ifFalse) => {\n  const resolution = ctx.evaluate(condition);\n  if (resolution) {\n    return ctx.evaluate(ifTrue);\n  }\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n  return null;\n};\nconditional.resolveParams = false;\nvar waitFor = async (ctx, promise) => {\n  return await promise;\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts\nfunction withoutContext(fn) {\n  return (_context, ...args) => fn(...args);\n}\nfunction isInRange(position, location) {\n  return position.character >= location.start.character && position.character <= location.end.character;\n}\nfunction findClosestNodeAtPosition(node, position) {\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check = findClosestNodeAtPosition(node.left, position) ?? findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n      break;\n    }\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n      break;\n    }\n    case \"MemberExpression\": {\n      const checkObject = findClosestNodeAtPosition(node.object, position) ?? findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"ConditionalExpression\": {\n      const checkObject = findClosestNodeAtPosition(node.test, position) ?? findClosestNodeAtPosition(node.consequent, position) ?? findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements = node.type === \"ArrayExpression\" ? node.elements : node.body;\n      const anyElements = elements.find(\n        (e) => findClosestNodeAtPosition(e, position)\n      );\n      if (anyElements) {\n        return anyElements;\n      }\n      break;\n    }\n    case \"Object\": {\n      const checkObject = node.attributes.reduce(\n        (found, next) => {\n          return found ?? findClosestNodeAtPosition(next.key, position) ?? findClosestNodeAtPosition(next.value, position);\n        },\n        void 0\n      );\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"CallExpression\": {\n      const anyArgs = node.args.find((arg) => {\n        return findClosestNodeAtPosition(arg, position);\n      }) ?? findClosestNodeAtPosition(node.callTarget, position);\n      if (anyArgs) {\n        return anyArgs;\n      }\n      break;\n    }\n  }\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\nfunction isObjectExpression(expr) {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n  return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n}\nfunction isErrorWithLocation(error) {\n  return error.index !== void 0 && error.description !== void 0;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\nvar andandOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) && ctx.evaluate(b);\n};\nandandOperator.resolveParams = false;\nvar ororOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) || ctx.evaluate(b);\n};\nororOperator.resolveParams = false;\nvar DEFAULT_BINARY_OPERATORS = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a, b) => a + b,\n  \"-\": (a, b) => a - b,\n  \"*\": (a, b) => a * b,\n  \"/\": (a, b) => a / b,\n  \"%\": (a, b) => a % b,\n  // eslint-disable-next-line\n  \"==\": (a, b) => a == b,\n  // eslint-disable-next-line\n  \"!=\": (a, b) => a != b,\n  \">\": (a, b) => a > b,\n  \">=\": (a, b) => a >= b,\n  \"<\": (a, b) => a < b,\n  \"<=\": (a, b) => a <= b,\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n  \"!==\": (a, b) => a !== b,\n  \"===\": (a, b) => a === b,\n  // eslint-disable-next-line\n  \"|\": (a, b) => a | b,\n  // eslint-disable-next-line\n  \"&\": (a, b) => a & b,\n  \"+=\": (a, b) => a + b,\n  \"-=\": (a, b) => a - b,\n  // eslint-disable-next-line\n  \"&=\": (a, b) => a & b,\n  // eslint-disable-next-line\n  \"|=\": (a, b) => a | b\n};\nvar DEFAULT_UNARY_OPERATORS = {\n  \"-\": (a) => -a,\n  \"+\": (a) => Number(a),\n  \"!\": (a) => !a\n};\nvar ExpressionEvaluator = class {\n  constructor(defaultOptions) {\n    this.vars = {};\n    this.hooks = {\n      /** Resolve an AST node for an expression to a value */\n      resolve: new SyncWaterfallHook2(),\n      /** Gets the options that will be passed in calls to the resolve hook */\n      resolveOptions: new SyncWaterfallHook2(),\n      /** Allows users to change the expression to be evaluated before processing */\n      beforeEvaluate: new SyncWaterfallHook2(),\n      /**\n       * An optional means of handling an error in the expression execution\n       * Return true if handled, to stop propagation of the error\n       */\n      onError: new SyncBailHook2()\n    };\n    this.expressionsCache = /* @__PURE__ */ new Map();\n    this.operators = {\n      binary: new Map(\n        Object.entries(DEFAULT_BINARY_OPERATORS)\n      ),\n      unary: new Map(\n        Object.entries(DEFAULT_UNARY_OPERATORS)\n      ),\n      expressions: new Map([\n        ...Object.entries(evaluator_functions_exports),\n        [\"await\", waitFor]\n      ])\n    };\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n    };\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n      if (options.async) {\n        return this._resolveNodeAsync(\n          result,\n          node,\n          options\n        );\n      }\n      return this._resolveNode(result, node, options);\n    });\n    this.evaluate = this.evaluate.bind(this);\n  }\n  reset() {\n    this.expressionsCache.clear();\n  }\n  evaluate(expr, options) {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node) => this._execAST(node, resolvedOpts)\n    });\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n    if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n      return expression;\n    }\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null\n      );\n    }\n    return this._execString(String(expression), resolvedOpts);\n  }\n  evaluateAsync(expr, options) {\n    return this.evaluate(expr, { ...options, async: true });\n  }\n  addExpressionFunction(name, handler) {\n    this.operators.expressions.set(name, handler);\n  }\n  addBinaryOperator(operator, handler) {\n    this.operators.binary.set(operator, handler);\n  }\n  addUnaryOperator(operator, handler) {\n    this.operators.unary.set(operator, handler);\n  }\n  setExpressionVariable(name, value) {\n    this.vars[name] = value;\n  }\n  getExpressionVariable(name) {\n    return this.vars[name];\n  }\n  _execAST(node, options) {\n    return this.hooks.resolve.call(void 0, node, options);\n  }\n  _execString(exp, options) {\n    if (exp === \"\") {\n      return exp;\n    }\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n    if (matches) {\n      const [, matched] = Array.from(matches);\n      if (matched) {\n        matchedExp = matched;\n      }\n    }\n    let storedAST;\n    try {\n      storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        throw new NestedError3(`Error parsing expression: ${exp}`, e);\n      }\n      return;\n    }\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        throw new NestedError3(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n  _resolveNode(_currentValue, node, options) {\n    const { resolveNode, model } = options;\n    const expressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options)\n    };\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n          return operator(\n            expressionContext,\n            resolveNode(node.left),\n            resolveNode(node.right)\n          );\n        }\n        return operator(resolveNode(node.left), resolveNode(node.right));\n      }\n      return;\n    }\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          return operator(\n            expressionContext,\n            operator.resolveParams === false ? node.argument : resolveNode(node.argument)\n          );\n        }\n        return operator(resolveNode(node.argument));\n      }\n      return;\n    }\n    if (node.type === \"Object\") {\n      const { attributes } = node;\n      const resolvedAttributes = {};\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        resolvedAttributes[key] = value;\n      });\n      return resolvedAttributes;\n    }\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n      const operator = this.operators.expressions.get(expressionName);\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n      const args = node.args.map((n) => resolveNode(n));\n      return operator(expressionContext, ...args);\n    }\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n      return obj[prop];\n    }\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n        model.set([[node.left.ref, value]]);\n        return value;\n      }\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n        this.vars[node.left.name] = value;\n        return value;\n      }\n      return;\n    }\n    if (node.type === \"ConditionalExpression\") {\n      const result = resolveNode(node.test) ? node.consequent : node.alternate;\n      return resolveNode(result);\n    }\n    if (node.type === \"ArrayExpression\") {\n      return node.elements.map((ele) => resolveNode(ele));\n    }\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n      if (operation) {\n        let newValue;\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            newValue = operation(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right)\n            );\n          }\n        } else {\n          newValue = operation(resolveNode(node.left), resolveNode(node.right));\n        }\n        if (node.left.type === \"ModelRef\") {\n          model.set([[node.left.ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          this.vars[node.left.name] = newValue;\n        }\n        return newValue;\n      }\n      return resolveNode(node.left);\n    }\n  }\n  async _resolveNodeAsync(_currentValue, node, options) {\n    const { resolveNode, model } = options;\n    const expressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options)\n    };\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n          return operator(\n            expressionContext,\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        return operator(\n          await resolveNode(node.left),\n          await resolveNode(node.right)\n        );\n      }\n      return;\n    }\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          return operator(\n            expressionContext,\n            operator.resolveParams === false ? node.argument : await resolveNode(node.argument)\n          );\n        }\n        return operator(await resolveNode(node.argument));\n      }\n      return;\n    }\n    if (node.type === \"Object\") {\n      const { attributes } = node;\n      const resolvedAttributes = {};\n      await Promise.all(\n        attributes.map(async (attr) => {\n          const key = await resolveNode(attr.key);\n          const value = await resolveNode(attr.value);\n          resolvedAttributes[key] = value;\n        })\n      );\n      return resolvedAttributes;\n    }\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n      const operator = this.operators.expressions.get(expressionName);\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n      const args = await Promise.all(\n        node.args.map(async (n) => await resolveNode(n))\n      );\n      return operator(expressionContext, ...args);\n    }\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n    if (node.type === \"MemberExpression\") {\n      const obj = await resolveNode(node.object);\n      const prop = await resolveNode(node.property);\n      return obj[prop];\n    }\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = await resolveNode(node.right);\n        model.set([[node.left.ref, value]]);\n        return value;\n      }\n      if (node.left.type === \"Identifier\") {\n        const value = await resolveNode(node.right);\n        this.vars[node.left.name] = value;\n        return value;\n      }\n      return;\n    }\n    if (node.type === \"ConditionalExpression\") {\n      const result = await resolveNode(node.test) ? node.consequent : node.alternate;\n      return resolveNode(result);\n    }\n    if (node.type === \"ArrayExpression\") {\n      return Promise.all(\n        node.elements.map(async (ele) => await resolveNode(ele))\n      );\n    }\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n      if (operation) {\n        let newValue;\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            newValue = operation(\n              expressionContext,\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n        } else {\n          newValue = operation(\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        if (node.left.type === \"ModelRef\") {\n          model.set([[node.left.ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          this.vars[node.left.name] = newValue;\n        }\n        return newValue;\n      }\n      return resolveNode(node.left);\n    }\n    return this._resolveNode(_currentValue, node, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/types.ts\nvar severities = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/consoleLogger.ts\nvar ConsoleLogger = class {\n  constructor(severity = \"warn\", _console = console) {\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n    this.severity = severity;\n    this._console = _console;\n  }\n  setSeverity(severity) {\n    this.severity = severity;\n  }\n  getConsoleFn(severity) {\n    switch (severities.indexOf(severity)) {\n      case 0:\n      case 1:\n      case 2:\n        return this._console.log;\n      case 3:\n        return this._console.warn;\n      default:\n        return this._console.error;\n    }\n  }\n  createHandler(severity) {\n    return (...args) => {\n      const sevIndex = severities.indexOf(severity);\n      const sevConf = severities.indexOf(this.severity);\n      if (sevIndex >= sevConf) {\n        this.getConsoleFn(severity)(`player - ${severity} -`, ...args);\n      }\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/noopLogger.ts\nvar noop = () => {\n};\nvar NoopLogger = class {\n  constructor() {\n    this.trace = noop;\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts\nimport { SyncHook as SyncHook2 } from \"tapable-ts\";\nvar TapableLogger = class {\n  constructor() {\n    this.hooks = {\n      trace: new SyncHook2(),\n      debug: new SyncHook2(),\n      info: new SyncHook2(),\n      warn: new SyncHook2(),\n      error: new SyncHook2(),\n      log: new SyncHook2()\n    };\n    this.logHandlers = /* @__PURE__ */ new Set();\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n  }\n  createHandler(severity) {\n    return (...args) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n  addHandler(logHandler) {\n    this.logHandlers.add(logHandler);\n  }\n  removeHandler(logHandler) {\n    this.logHandlers.delete(logHandler);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts\nvar ProxyLogger = class {\n  constructor(loggerProvider) {\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n  createHandler(severity) {\n    return (...args) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts\nimport { SyncWaterfallHook as SyncWaterfallHook3 } from \"tapable-ts\";\nvar identify = (val) => val;\nfunction parse2(schema) {\n  const expandedPaths = /* @__PURE__ */ new Map();\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n  const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n    if (!next) {\n      break;\n    }\n    const { node, path, visited } = next;\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n      const nestedPathStr = nestedPath.join(\".\");\n      if (expandedPaths.has(nestedPathStr)) {\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\"\n        );\n      }\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n        );\n      }\n      expandedPaths.set(nestedPathStr, type);\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: /* @__PURE__ */ new Set([...visited, type.type])\n        });\n      }\n    });\n  }\n  return expandedPaths;\n}\nvar SchemaController = class {\n  constructor(schema) {\n    this.formatters = /* @__PURE__ */ new Map();\n    this.types = /* @__PURE__ */ new Map();\n    this.schema = /* @__PURE__ */ new Map();\n    this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n    this.hooks = {\n      resolveTypeForBinding: new SyncWaterfallHook3()\n    };\n    this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n  }\n  addFormatters(fns) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n  addDataTypes(types) {\n    types.forEach((t2) => {\n      this.types.set(t2.type, t2);\n    });\n  }\n  getValidationsForBinding(binding) {\n    const typeDef = this.getApparentType(binding);\n    if (!typeDef?.validation?.length) {\n      return void 0;\n    }\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef\n    }));\n  }\n  normalizeBinding(binding) {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n    return normalized;\n  }\n  getType(binding) {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding\n    );\n  }\n  getApparentType(binding) {\n    const schemaType = this.getType(binding);\n    if (schemaType === void 0) {\n      return void 0;\n    }\n    const baseType = this.getTypeDefinition(schemaType?.type);\n    if (baseType === void 0) {\n      return schemaType;\n    }\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...schemaType.validation ?? [],\n        ...baseType.validation ?? []\n      ]\n    };\n  }\n  getTypeDefinition(dataType) {\n    return this.types.get(dataType);\n  }\n  getFormatterForType(formatReference) {\n    const { type: formatType, ...options } = formatReference;\n    const formatter = this.formatters.get(formatType);\n    if (!formatter) {\n      return;\n    }\n    return {\n      format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n      deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n    };\n  }\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  getFormatter(binding) {\n    const type = this.getApparentType(binding);\n    if (!type?.format) {\n      return void 0;\n    }\n    return this.getFormatterForType(type.format);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts\nimport { setIn as setIn2 } from \"timm\";\nvar DOUBLE_OPEN_CURLY = \"{{\";\nvar DOUBLE_CLOSE_CURLY = \"}}\";\nfunction findNextExp(str) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n  if (expStart === -1) {\n    return void 0;\n  }\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n  while (count > 0 && workingString.length > 0) {\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n    if (nextCloseCurly === -1) {\n      break;\n    }\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n  return {\n    start: expStart,\n    end: offset\n  };\n}\nfunction resolveExpressionsInString(val, { evaluate }) {\n  if (!evaluate) {\n    return val;\n  }\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length\n    );\n    const expValue = evaluate(expString);\n    if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n      return expValue;\n    }\n    newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n    match = newVal.match(expMatch);\n  }\n  return newVal;\n}\nfunction resolveDataRefsInString(val, options) {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n  if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n    return workingString;\n  }\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n    if (!expLocation) {\n      return workingString;\n    }\n    const { start, end } = expLocation;\n    const binding = workingString.substring(\n      start + DOUBLE_OPEN_CURLY.length,\n      end - DOUBLE_OPEN_CURLY.length\n    ).trim();\n    const evaledVal = model.get(binding, { formatted });\n    if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n      return evaledVal;\n    }\n    workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n  return workingString;\n}\nfunction traverseObject(val, options) {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val, options);\n    }\n    case \"object\": {\n      if (!val)\n        return val;\n      const keys = Object.keys(val);\n      let newVal = val;\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn2(\n            newVal,\n            [key],\n            traverseObject(val[key], options)\n          );\n        });\n      }\n      return newVal;\n    }\n    default:\n      return val;\n  }\n}\nfunction resolveDataRefs(val, options) {\n  return traverseObject(val, options);\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\nimport { setIn as setIn3 } from \"timm\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts\nfunction removeBindingAndChildrenFromMap(sourceMap, binding) {\n  const targetMap = new Map(sourceMap);\n  const parentBinding = binding.parent();\n  const property = binding.key();\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n  if (typeof property === \"number\") {\n    const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n      if (parentBinding.contains(b)) {\n        const [childIndex] = b.relative(parentBinding);\n        return typeof childIndex === \"number\" && childIndex > property;\n      }\n      return false;\n    }).sort();\n    bindingsToRewrite.forEach((trackedBinding) => {\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n  return targetMap;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\nvar ValidationMiddleware = class {\n  constructor(validator, options) {\n    this.validator = validator;\n    this.shadowModelPaths = /* @__PURE__ */ new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n  set(transaction, options, next) {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction = [];\n    const includedBindings = /* @__PURE__ */ new Set();\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n    const invalidBindings = [];\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n      if (validations === void 0) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n        );\n      }\n    });\n    let validResults = [];\n    if (next && nextTransaction.length > 0) {\n      nextTransaction.forEach(\n        ([binding]) => this.shadowModelPaths.delete(binding)\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n      validResults = result;\n    }\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true\n      };\n    });\n    return [...validResults, ...invalidResults];\n  }\n  get(binding, options, next) {\n    let val = next?.get(binding, options);\n    if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n          return;\n        }\n        if (binding.contains(shadowBinding)) {\n          val = setIn3(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n    return val;\n  }\n  delete(binding, options, next) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding\n    );\n    return next?.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts\nvar ValidatorRegistry = class {\n  constructor() {\n    this.registry = /* @__PURE__ */ new Map();\n  }\n  /** Use the given validator name to fetch the handler */\n  get(name) {\n    return this.registry.get(name);\n  }\n  /** Register a new validator */\n  register(name, handler) {\n    this.registry.set(name, handler);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts\nimport { SyncHook as SyncHook4 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\nimport { SyncWaterfallHook as SyncWaterfallHook5, SyncHook as SyncHook3 } from \"tapable-ts\";\nimport { setIn as setIn5, addLast, clone } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\nimport { setIn as setIn4 } from \"timm\";\nimport { SyncBailHook as SyncBailHook3, SyncWaterfallHook as SyncWaterfallHook4 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/types.ts\nvar NodeType = /* @__PURE__ */ ((NodeType2) => {\n  NodeType2[\"Asset\"] = \"asset\";\n  NodeType2[\"View\"] = \"view\";\n  NodeType2[\"Applicability\"] = \"applicability\";\n  NodeType2[\"Template\"] = \"template\";\n  NodeType2[\"Value\"] = \"value\";\n  NodeType2[\"MultiNode\"] = \"multi-node\";\n  NodeType2[\"Switch\"] = \"switch\";\n  NodeType2[\"Async\"] = \"async\";\n  NodeType2[\"Unknown\"] = \"unknown\";\n  NodeType2[\"Empty\"] = \"empty\";\n  return NodeType2;\n})(NodeType || {});\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts\nfunction hasTemplateValues(obj, localKey) {\n  return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n}\nfunction hasSwitchKey(localKey) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\nfunction hasTemplateKey(localKey) {\n  return localKey === \"template\";\n}\nfunction getNodeID(node) {\n  if (!node) {\n    return;\n  }\n  if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n    return node.value.id;\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\nvar EMPTY_NODE = {\n  type: \"empty\" /* Empty */\n};\nvar Parser = class {\n  constructor() {\n    this.hooks = {\n      /**\n       * A hook to interact with an object _before_ parsing it into an AST\n       *\n       * @param value - The object we're are about to parse\n       * @returns - A new value to parse.\n       *  If undefined, the original value is used.\n       *  If null, we stop parsing this node.\n       */\n      onParseObject: new SyncWaterfallHook4(),\n      /**\n       * A callback to interact with an AST _after_ we parse it into the AST\n       *\n       * @param value - The object we parsed\n       * @param node - The AST node we generated\n       * @returns - A new AST node to use\n       *   If undefined, the original value is used.\n       *   If null, we ignore this node all together\n       */\n      onCreateASTNode: new SyncWaterfallHook4(),\n      parseNode: new SyncBailHook3()\n    };\n  }\n  parseView(value) {\n    const viewNode = this.parseObject(value, \"view\" /* View */);\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n    return viewNode;\n  }\n  createASTNode(node, value) {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n    if (tapped === void 0) {\n      return node;\n    }\n    return tapped;\n  }\n  parseObject(obj, type = \"value\" /* Value */, options = { templateDepth: 0 }) {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options\n    );\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n    const parseLocalObject = (currentValue, objToParse, path = []) => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n      if (!localObj) {\n        return currentValue;\n      }\n      const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n        ...Object.entries(localObj),\n        ...Object.getOwnPropertySymbols(localObj).map((s) => [\n          s,\n          localObj[s]\n        ])\n      ];\n      const defaultValue = {\n        children: [],\n        value: currentValue\n      };\n      const newValue = objEntries.reduce((accumulation, current) => {\n        let { value: value2 } = accumulation;\n        const { children: children2 } = accumulation;\n        const [localKey, localValue] = current;\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          \"value\" /* Value */,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj\n          }\n        );\n        if (newChildren) {\n          children2.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey\n          ]);\n          value2 = result.value;\n          children2.push(...result.children);\n        } else {\n          value2 = setIn4(accumulation.value, [...path, localKey], localValue);\n        }\n        return {\n          value: value2,\n          children: children2\n        };\n      }, defaultValue);\n      return newValue;\n    };\n    const { value, children } = parseLocalObject(void 0, obj);\n    const baseAst = value === void 0 && !children.length ? void 0 : {\n      type,\n      value\n    };\n    if (baseAst && children.length) {\n      const parent = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts\nfunction caresAboutDataChanges(dataChanges, dependencies) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n  return depArray.find(\n    (dep) => !!dataChangeArray.find(\n      (change) => change === dep || change.contains(dep) || dep.contains(change)\n    )\n  ) !== void 0;\n}\nfunction toNodeResolveOptions(resolverOptions) {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n        return value;\n      },\n      format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n        isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n        value\n      ) : value\n    },\n    evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n  };\n}\nfunction unpackAndPush(item, initial) {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\nvar withContext = (model) => {\n  return {\n    get: (binding, options) => {\n      return model.get(binding, {\n        context: { model },\n        ...options\n      });\n    },\n    set: (transaction, options) => {\n      return model.set(transaction, {\n        context: { model },\n        ...options\n      });\n    },\n    delete: (binding, options) => {\n      return model.delete(binding, {\n        context: { model },\n        ...options\n      });\n    }\n  };\n};\nvar Resolver = class {\n  constructor(root, options) {\n    this.hooks = {\n      /** A hook to allow skipping of the resolution tree for a specific node */\n      skipResolve: new SyncWaterfallHook5(),\n      /** An event emitted before calculating the next update */\n      beforeUpdate: new SyncHook3(),\n      /** An event emitted after calculating the next update */\n      afterUpdate: new SyncHook3(),\n      /** The options passed to a node to resolve it to an object */\n      resolveOptions: new SyncWaterfallHook5(),\n      /** A hook to transform the AST node into a new AST node before resolving it */\n      beforeResolve: new SyncWaterfallHook5(),\n      /**\n       * A hook to transform an AST node into it's resolved value.\n       * This runs _before_ any children are resolved\n       */\n      resolve: new SyncWaterfallHook5(),\n      /**\n       * A hook to transform the resolved value of an AST node.\n       * This runs _after_ all children nodes are resolved\n       */\n      afterResolve: new SyncWaterfallHook5(),\n      /** Called at the very end of a node's tree being updated */\n      afterNodeUpdate: new SyncHook3()\n    };\n    this.root = root;\n    this.options = options;\n    this.resolveCache = /* @__PURE__ */ new Map();\n    this.ASTMap = /* @__PURE__ */ new Map();\n    this.logger = options.logger;\n    this.idCache = /* @__PURE__ */ new Set();\n  }\n  getSourceNode(convertedAST) {\n    return this.ASTMap.get(convertedAST);\n  }\n  update(changes) {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = /* @__PURE__ */ new Map();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n    const updated = this.computeTree(\n      this.root,\n      void 0,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      void 0,\n      prevASTMap\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n  getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n  getPreviousResult(node) {\n    if (!node) {\n      return;\n    }\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n    if (id) {\n      if (this.idCache.has(id)) {\n        if (isFirstUpdate) {\n          if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n            );\n          } else if (node.type === \"value\" /* Value */) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n            );\n          }\n        }\n        return;\n      }\n      this.idCache.add(id);\n    }\n    return this.resolveCache.get(node);\n  }\n  cloneNode(node) {\n    const clonedNode = clone(node);\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\")\n        return;\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n    return clonedNode;\n  }\n  computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n    const dependencyModel = new DependencyModel(options.data.model);\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding)\n    );\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser\n        },\n        evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node\n      },\n      node\n    );\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions\n    );\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions\n    ) ?? {\n      type: \"empty\" /* Empty */\n    };\n    const isNestedMultiNode = resolvedAST.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent?.parent?.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent.type === \"value\" /* Value */;\n    if (previousResult && shouldUseLastValue) {\n      const update2 = {\n        ...previousResult,\n        updated: false\n      };\n      const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n        const handleChildNode = (childNode) => {\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult)\n            return;\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST\n          );\n        };\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(\n            ({ value: childAST }) => handleChildNode(childAST)\n          );\n        } else if (resolvedASTLocal.type === \"multi-node\" /* MultiNode */) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n      previousResult.node.parent = partiallyResolvedParent;\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n      return update2;\n    }\n    resolvedAST.parent = partiallyResolvedParent;\n    resolveOptions.node = resolvedAST;\n    this.ASTMap.set(resolvedAST, node);\n    let resolved = this.hooks.resolve.call(\n      void 0,\n      resolvedAST,\n      resolveOptions\n    );\n    let updated = !dequal(previousResult?.value, resolved);\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n    const childDependencies = /* @__PURE__ */ new Set();\n    dependencyModel.trackSubset(\"children\");\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue\n        } = computedChildTree;\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n        if (childValue) {\n          if (childNode.type === \"multi-node\" /* MultiNode */ && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path, []),\n              childValue\n            );\n            resolved = setIn5(resolved, child.path, arr);\n          } else {\n            resolved = setIn5(resolved, child.path, childValue);\n          }\n        }\n        updated = updated || childUpdated;\n        return { ...child, value: childNode };\n      });\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === \"multi-node\" /* MultiNode */) {\n      const childValue = [];\n      const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap\n        );\n        if (mTree.value !== void 0 && mTree.value !== null) {\n          if (mValue.type === \"async\" /* Async */ && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n        mTree.dependencies.forEach(\n          (bindingDep) => childDependencies.add(bindingDep)\n        );\n        updated = updated || mTree.updated;\n        return mTree.node;\n      });\n      resolvedAST.values = newValues;\n      resolved = childValue;\n    }\n    childDependencies.forEach(\n      (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n    );\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope) => dependencyModel.getDependencies(scope)\n    });\n    const update = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: /* @__PURE__ */ new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies\n      ])\n    };\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update\n    );\n    cacheUpdate.set(node, update);\n    return update;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts\nvar CrossfieldProvider = class {\n  constructor(initialView, parser, logger) {\n    this.allValidations = /* @__PURE__ */ new Set();\n    this.byBinding = /* @__PURE__ */ new Map();\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n  parse(contentView, parser) {\n    const xfieldRefs = contentView.validation;\n    if (xfieldRefs === void 0) {\n      return;\n    }\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n      );\n      return;\n    }\n    xfieldRefs.forEach((vRef) => {\n      const withDefaults = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef\n      };\n      this.allValidations.add(withDefaults);\n      const { ref } = vRef;\n      if (ref) {\n        const parsed = parser(ref);\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n  getValidationsForBinding(binding) {\n    return this.byBinding.get(binding);\n  }\n};\nvar ViewInstance = class {\n  constructor(initialView, resolverOptions) {\n    this.hooks = {\n      onUpdate: new SyncHook4(),\n      parser: new SyncHook4(),\n      resolver: new SyncHook4(),\n      onTemplatePluginCreated: new SyncHook4(),\n      templatePlugin: new SyncHook4()\n    };\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n    this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n      this.templatePlugin = templatePlugin;\n    });\n  }\n  updateAsync() {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n  update(changes) {\n    if (this.rootNode === void 0) {\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger\n      );\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\"\n        );\n      }\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser)\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n    const update = this.resolver?.update(changes);\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n    return update;\n  }\n  getValidationsForBinding(binding) {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/builder/index.ts\nvar Builder = class _Builder {\n  /**\n   * Creates an asset node\n   *\n   * @param value - the value to put in the asset node\n   */\n  static asset(value) {\n    return {\n      type: \"asset\" /* Asset */,\n      value\n    };\n  }\n  static assetWrapper(value) {\n    const valueNode = _Builder.value();\n    _Builder.addChild(valueNode, \"asset\", value);\n    return valueNode;\n  }\n  /**\n   * Creates a value node\n   *\n   * @param v - The object to put in the value node\n   */\n  static value(v) {\n    return {\n      type: \"value\" /* Value */,\n      value: v\n    };\n  }\n  /**\n   * Creates a multiNode and associates the multiNode as the parent\n   * of all the value nodes\n   *\n   * @param values - the value, applicability or async nodes to put in the multinode\n   */\n  static multiNode(...values) {\n    const m = {\n      type: \"multi-node\" /* MultiNode */,\n      override: true,\n      values\n    };\n    values.forEach((v) => {\n      v.parent = m;\n    });\n    return m;\n  }\n  /**\n   * Creates an async node\n   *\n   * @param id - the id of async node. It should be identical for each async node\n   */\n  static asyncNode(id, flatten2 = true) {\n    return {\n      id,\n      type: \"async\" /* Async */,\n      flatten: flatten2,\n      value: {\n        type: \"value\" /* Value */,\n        value: {\n          id\n        }\n      }\n    };\n  }\n  /**\n   * Adds a child node to a node\n   *\n   * @param node - The node to add a child to\n   * @param path - The path at which to add the child\n   * @param child - The child node\n   */\n  static addChild(node, path, child) {\n    child.parent = node;\n    const newChild = {\n      path: Array.isArray(path) ? path : [path],\n      value: child\n    };\n    node.children = node.children || [];\n    node.children.push(newChild);\n    return node;\n  }\n  /**\n   * Updates children of a node of the same path and preserves order\n   *\n   * @param node - The node to update children for\n   * @param pathToMatch - The path to match against child paths\n   * @param mapFn - Function to transform matching children\n   */\n  static updateChildrenByPath(node, pathToMatch, updateFn) {\n    if (!node.children)\n      return node;\n    const updatedChildren = node.children.map(\n      (child) => (\n        // Check if paths match exactly\n        child.path.join() === pathToMatch.join() ? { ...child, value: updateFn(child) } : child\n      )\n    );\n    return {\n      ...node,\n      children: updatedChildren\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts\nimport { SyncWaterfallHook as SyncWaterfallHook6 } from \"tapable-ts\";\nvar templateSymbol = Symbol(\"template\");\nvar TemplatePlugin = class {\n  constructor(options) {\n    this.hooks = {\n      resolveTemplateSubstitutions: new SyncWaterfallHook6()\n    };\n    this.options = options;\n  }\n  parseTemplate(parseObject, node, options) {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n    if (!data) {\n      return null;\n    }\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n    const values = [];\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n        [\n          {\n            expression: new RegExp(`_index${depth || \"\"}_`),\n            value: String(index)\n          }\n        ],\n        {\n          depth,\n          data: dataItem,\n          index\n        }\n      );\n      let templateStr = JSON.stringify(template);\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n      const parsed = parseObject(JSON.parse(templateStr), \"value\" /* Value */, {\n        templateDepth: node.depth + 1\n      });\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n    const result = {\n      type: \"multi-node\" /* MultiNode */,\n      override: false,\n      values\n    };\n    if (node.placement !== void 0) {\n      result[templateSymbol] = node.placement;\n    }\n    return result;\n  }\n  applyParser(parser) {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === \"template\" /* Template */ && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options\n        );\n      }\n      return node;\n    });\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node2) {\n        if (node2.type === \"multi-node\" /* MultiNode */) {\n          return node2[templateSymbol];\n        } else if (node2.type === \"template\" /* Template */) {\n          return node2.placement;\n        }\n        return void 0;\n      }\n      if (node && (node.type === \"view\" /* View */ || node.type === \"asset\" /* Asset */) && Array.isArray(node.children)) {\n        node.children = node.children.sort((a, b) => {\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n          const pathsEqual = aPath === bPath;\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n            if (aPlacement !== void 0 && bPlacement === void 0) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== void 0 && aPlacement === void 0) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n              if (aPlacement === bPlacement) {\n                return 0;\n              }\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n      return node;\n    });\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (obj, _nodeType, options, childOptions) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj.map((template) => {\n            const templateAST = parser.createASTNode(\n              {\n                type: \"template\" /* Template */,\n                depth: options.templateDepth ?? 0,\n                data: template.data,\n                template: template.value,\n                dynamic: template.dynamic ?? false,\n                placement: template.placement\n              },\n              template\n            );\n            if (!templateAST)\n              return;\n            if (templateAST.type === \"multi-node\" /* MultiNode */) {\n              templateAST.values.forEach((v) => {\n                v.parent = templateAST;\n              });\n            }\n            return {\n              path: [...childOptions.path, template.output],\n              value: templateAST\n            };\n          }).filter(Boolean);\n        }\n      }\n    );\n  }\n  applyResolverHooks(resolver) {\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === \"template\" /* Template */ && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n      return node;\n    });\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts\nimport { set } from \"timm\";\nvar createPatternMatcher = (start, end) => {\n  return (testStr) => {\n    const startLocation = testStr.indexOf(start);\n    if (startLocation === -1) {\n      return false;\n    }\n    const endLocation = testStr.indexOf(end);\n    if (endLocation === -1) {\n      return false;\n    }\n    return startLocation < endLocation;\n  };\n};\nvar bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nvar expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\nfunction hasSomethingToResolve(str) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\nfunction resolveString(str, resolveOptions) {\n  return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n    model: resolveOptions.data.model,\n    evaluate: resolveOptions.evaluate\n  }) : str;\n}\nfunction resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n  if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n    return node;\n  }\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n  let newNode = node;\n  Object.keys(node).forEach((key) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n    const val = node[key];\n    let newVal = val;\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n    if (newVal !== val) {\n      newNode = set(newNode, key, newVal);\n    }\n  });\n  return newNode;\n}\nvar findBasePath = (node, resolver) => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n  }\n  if (parentNode.type !== \"multi-node\" /* MultiNode */) {\n    return [];\n  }\n  return findBasePath(parentNode, resolver);\n};\nvar StringResolverPlugin = class {\n  constructor() {\n    this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n  }\n  applyResolver(resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === \"empty\" /* Empty */ || node.type === \"unknown\" /* Unknown */) {\n        return null;\n      }\n      if (node.type === \"value\" /* Value */ || node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n        let propsToSkip;\n        if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (node.parent?.type === \"multi-node\" /* MultiNode */ && (node.parent?.parent?.type === \"asset\" /* Asset */ || node.parent?.parent?.type === \"view\" /* View */) && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id\n          );\n        } else {\n          propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n        }\n        const nodePath = findBasePath(node, resolver);\n        if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n          return node.value;\n        }\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n      return value;\n    });\n  }\n  apply(view) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts\nimport { omit as omit2 } from \"timm\";\nvar ApplicabilityPlugin = class {\n  isApplicability(obj) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n  applyResolver(resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node, options) => {\n        let newNode = node;\n        if (node?.type === \"applicability\" /* Applicability */) {\n          const isApplicable = options.evaluate(node.expression);\n          if (isApplicable === false) {\n            return null;\n          }\n          newNode = node.value;\n        }\n        return newNode;\n      }\n    );\n  }\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (obj, nodeType, options, childOptions) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit2(obj, \"applicability\"),\n            nodeType,\n            options\n          );\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: \"applicability\" /* Applicability */,\n              expression: obj.applicability,\n              value: parsedApplicability\n            },\n            obj\n          );\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n          if (applicabilityNode.type === \"applicability\" /* Applicability */) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n          return childOptions ? [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: applicabilityNode\n            }\n          ] : applicabilityNode;\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts\nvar SwitchPlugin = class {\n  constructor(options) {\n    this.options = options;\n  }\n  resolveSwitch(node, options) {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n    return EMPTY_NODE;\n  }\n  isSwitch(obj) {\n    return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n  }\n  applyParser(parser) {\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === \"switch\" /* Switch */ && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n      return node;\n    });\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (obj, _nodeType, options, childOptions) => {\n        if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n          const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n          const cases = switchContent.map(\n            (switchCase) => {\n              const { case: switchCaseExpr, ...switchBody } = switchCase;\n              const value = parser.parseObject(\n                switchBody,\n                \"value\" /* Value */,\n                options\n              );\n              if (value) {\n                return {\n                  case: switchCaseExpr,\n                  value\n                };\n              }\n              return;\n            }\n          ).filter(Boolean);\n          const switchAST = parser.createASTNode(\n            {\n              type: \"switch\" /* Switch */,\n              dynamic,\n              cases\n            },\n            objToParse\n          );\n          if (!switchAST || switchAST.type === \"empty\" /* Empty */) {\n            return childOptions ? [] : null;\n          }\n          if (switchAST.type === \"switch\" /* Switch */) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value = switchAST;\n            if (switchAST.type === \"value\" /* Value */ && switchAST.children?.length === 1 && switchAST.value === void 0) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n            return [{ path, value }];\n          }\n          return switchAST;\n        }\n      }\n    );\n  }\n  applyResolver(resolver) {\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === \"switch\" /* Switch */ && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n      return node;\n    });\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts\nvar MultiNodePlugin = class {\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (obj, nodeType, options, childOptions) => {\n        if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n          const values = obj.map(\n            (childVal) => parser.parseObject(childVal, \"value\" /* Value */, options)\n          ).filter((child) => !!child);\n          if (!values.length) {\n            return [];\n          }\n          const multiNode = parser.createASTNode(\n            {\n              type: \"multi-node\" /* MultiNode */,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key\n              ),\n              values\n            },\n            obj\n          );\n          if (!multiNode) {\n            return [];\n          }\n          if (multiNode.type === \"multi-node\" /* MultiNode */) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode\n            }\n          ];\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts\nvar AssetPlugin = class {\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (obj, nodeType, options, childOptions) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, \"asset\" /* Asset */, options);\n          if (!assetAST) {\n            return [];\n          }\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST\n            }\n          ];\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\nimport { setIn as setIn7 } from \"timm\";\nimport deferred from \"p-defer\";\nimport { SyncHook as SyncHook10, SyncWaterfallHook as SyncWaterfallHook11 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts\nimport { SyncBailHook as SyncBailHook4, SyncHook as SyncHook5, SyncWaterfallHook as SyncWaterfallHook7 } from \"tapable-ts\";\nimport defer from \"p-defer\";\nvar FlowInstance = class {\n  constructor(id, flow, options) {\n    this.isTransitioning = false;\n    this.hooks = {\n      beforeStart: new SyncBailHook4(),\n      /** A callback when the onStart node was present */\n      onStart: new SyncHook5(),\n      /** A callback when the onEnd node was present */\n      onEnd: new SyncHook5(),\n      /** A hook to intercept and block a transition */\n      skipTransition: new SyncBailHook4(),\n      /** A chance to manipulate the flow-node used to calculate the given transition used  */\n      beforeTransition: new SyncWaterfallHook7(),\n      /** A chance to manipulate the flow-node calculated after a transition */\n      resolveTransitionNode: new SyncWaterfallHook7(),\n      /** A callback when a transition from 1 state to another was made */\n      transition: new SyncHook5(),\n      /** A callback to run actions after a transition occurs */\n      afterTransition: new SyncHook5()\n    };\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState) => {\n        const newState = nextState.value;\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      }\n    );\n  }\n  /** Start the state machine */\n  async start() {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n      return this.flowPromise.promise;\n    }\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n    const initialState = this.flow.startState;\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n    return this.flowPromise.promise;\n  }\n  transition(transitionValue, options) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n      );\n    }\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`\n      );\n      return;\n    }\n    if (this.currentState === void 0) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`\n        );\n        return;\n      }\n    }\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue\n    );\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n    if (nextState === void 0) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`\n      );\n      return;\n    }\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n    );\n    return this.pushHistory(nextState, options);\n  }\n  pushHistory(stateName, options) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n    let nextState = this.flow[stateName];\n    if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n      return;\n    }\n    const prevState = this.currentState;\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n    const newCurrentState = {\n      name: stateName,\n      value: nextState\n    };\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState\n    });\n    this.isTransitioning = false;\n    this.hooks.afterTransition.call(this);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts\nimport { SyncHook as SyncHook6 } from \"tapable-ts\";\nvar FlowController = class {\n  constructor(navigation, options) {\n    this.hooks = {\n      flow: new SyncHook6()\n    };\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n  /** Navigate to another state in the state-machine */\n  transition(stateTransition, options) {\n    if (this.current === void 0) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n    this.current.transition(stateTransition, options);\n  }\n  addNewFlow(flow) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n  async run(startState) {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n    const startFlow = this.navigation[startState];\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`)\n      );\n    }\n    this.log?.debug(`Starting flow: ${startState}`);\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n    const end = await flow.start();\n    this.navStack.pop();\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n    return end;\n  }\n  async start() {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n    return this.run(this.navigation.BEGIN);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\nimport { SyncHook as SyncHook7, SyncWaterfallHook as SyncWaterfallHook8 } from \"tapable-ts\";\nimport { setIn as setIn6 } from \"timm\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts\nvar ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\nfunction replaceParams(message, params) {\n  return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts\nvar CONTEXT = \"validation-binding-tracker\";\nvar ValidationBindingTrackerViewPlugin = class {\n  constructor(options) {\n    this.trackedBindings = /* @__PURE__ */ new Set();\n    this.options = options;\n  }\n  /** Fetch the tracked bindings in the current view */\n  getBindings() {\n    return this.trackedBindings;\n  }\n  /** Add a binding to the tracked set */\n  trackBinding(binding) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver) {\n    this.trackedBindings.clear();\n    const tracked = /* @__PURE__ */ new Map();\n    const sections = /* @__PURE__ */ new Map();\n    let lastViewUpdateChangeSet;\n    const lastComputedBindingTree = /* @__PURE__ */ new Map();\n    let currentBindingTree = /* @__PURE__ */ new Map();\n    const lastSectionBindingTree = /* @__PURE__ */ new Map();\n    const resolvedNodeMap = /* @__PURE__ */ new Map();\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter(\n          (b) => trackedBindingsForNode.has(b)\n        )\n      );\n      return intersection.size === 0;\n    });\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === void 0) {\n        return options;\n      }\n      tracked.delete(node);\n      const track = (binding) => {\n        const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n        }\n        let { parent } = node;\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n            const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n            const firstFieldEOW = eows?.find(\n              (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n            );\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n            return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n          },\n          getChildren: (type) => {\n            const validations = new Array();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation?._getValidationForBinding(binding)?.get();\n              if (eow && (type === void 0 || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation?._getValidationForBinding(binding)?.get();\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, /* @__PURE__ */ new Set());\n              }\n            }\n          },\n          track\n        }\n      };\n    });\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === \"multi-node\" /* MultiNode */) {\n            resolvedNode.values.forEach(\n              (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n            );\n          }\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n          );\n        }\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = /* @__PURE__ */ new Set();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = /* @__PURE__ */ new Map();\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\nvar SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nvar VIEW_VALIDATION_PROVIDER_NAME = \"view\";\nvar VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n  \"validation-provider-name\"\n);\nfunction isSubset(subset, containingSet) {\n  if (subset.size > containingSet.size)\n    return false;\n  for (const entry of subset)\n    if (!containingSet.has(entry))\n      return false;\n  return true;\n}\nfunction createStatefulValidationObject(obj) {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false\n  };\n}\nvar ValidatedBinding = class {\n  constructor(possibleValidations, onDismiss, log, weakBindings) {\n    this.applicableValidations = [];\n    this.validationsByState = {\n      load: [],\n      change: [],\n      navigation: []\n    };\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n  }\n  get allValidations() {\n    return Object.values(this.validationsByState).flat();\n  }\n  checkIfBlocking(statefulObj) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n    return false;\n  }\n  getAll() {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj)\n        });\n      }\n      return all;\n    }, []);\n  }\n  get() {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid)\n      };\n    }\n  }\n  runApplicableValidations(runner, canDismiss, phase) {\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          return originalValue;\n        }\n        const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n        const obj = setIn6(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking\n        );\n        const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n        if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj;\n            if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n              warn.dismissable = true;\n            }\n            return warn;\n          }\n        }\n        const response = runner(obj.value);\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response ? {\n            ...obj.value,\n            message: response.message ?? \"Something is broken\",\n            severity: obj.value.severity,\n            displayTarget: obj.value.displayTarget ?? \"field\"\n          } : void 0\n        };\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          newState.response.dismiss = () => {\n            newState.state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n        return newState;\n      }\n    );\n  }\n  update(phase, canDismiss, runner) {\n    const newApplicableValidations = [];\n    if (phase === \"load\" && this.currentPhase !== void 0) {\n      return;\n    }\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change\n      ];\n    } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n      this.applicableValidations.forEach((element) => {\n        if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n          newApplicableValidations.push(element);\n        }\n      });\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n      ];\n      this.currentPhase = \"navigation\";\n    }\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n};\nvar ValidationController = class {\n  constructor(schema, options) {\n    this.hooks = {\n      /** A hook called to tap into the validator registry for adding more validators */\n      createValidatorRegistry: new SyncHook7(),\n      /** A callback/event when a new validation is added to the view */\n      onAddValidation: new SyncWaterfallHook8(),\n      /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n      onRemoveValidation: new SyncWaterfallHook8(),\n      resolveValidationProviders: new SyncWaterfallHook8(),\n      /** A hook called when a binding is added to the tracker */\n      onTrackBinding: new SyncHook7()\n    };\n    this.validations = /* @__PURE__ */ new Map();\n    this.weakBindingTracker = /* @__PURE__ */ new Set();\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n  setOptions(options) {\n    this.options = options;\n  }\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  getDataMiddleware() {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding\n          );\n          return next?.delete(binding, options);\n        }\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n          const newInvalidBindings = /* @__PURE__ */ new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (caresAboutDataChanges(\n              /* @__PURE__ */ new Set([binding]),\n              weakValidation.weakBindings\n            ) && weakValidation?.get()?.severity === \"error\") {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false\n                  });\n                }\n              });\n            }\n          });\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) }\n      )\n    ];\n  }\n  getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (binding) => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding\n            );\n          },\n          getValidationsForView: () => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          }\n        }\n      }\n    ]);\n    return this.providers;\n  }\n  reset() {\n    this.validations.clear();\n    this.tracker = void 0;\n  }\n  onView(view) {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n            return;\n          }\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true\n          });\n          if (originalValue !== withoutDefault) {\n            this.options.model.set([[binding, originalValue]], {\n              silent: true\n            });\n          }\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(/* @__PURE__ */ new Set([binding]));\n            }\n          );\n          this.hooks.onTrackBinding.call(binding);\n        }\n      }\n    });\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n    bindingTrackerPlugin.apply(view);\n  }\n  updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n    const context = validationContext ?? this.options;\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n    if (trigger === \"load\") {\n      const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n        vals.push(\n          ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n            ...valObj,\n            [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n          })) ?? []\n        );\n        return vals;\n      }, []);\n      if (possibleValidations.length === 0) {\n        return;\n      }\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger\n        )\n      );\n    }\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n      if (this.weakBindingTracker.size > 0) {\n        const t2 = this.validations.get(binding);\n        this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n      }\n      return response ? { message: response.message } : void 0;\n    });\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context\n            );\n            return response ? { message: response.message } : void 0;\n          });\n        }\n      });\n    }\n  }\n  validationRunner(validationObj, binding, context = this.options) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n    const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n    const weakBindings = /* @__PURE__ */ new Set();\n    const model = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete\n    };\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding)\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\"\n      }),\n      validationObj\n    );\n    this.weakBindingTracker = weakBindings;\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n      return {\n        message\n      };\n    }\n  }\n  updateValidationsForView(trigger) {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n    const updateValidations = (dismissValidations) => {\n      this.getBindings().forEach((binding) => {\n        this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n          if (!this.options) {\n            return;\n          }\n          return this.validationRunner(obj, binding, this.options);\n        });\n      });\n    };\n    updateValidations(!isNavigationTrigger);\n    if (isNavigationTrigger) {\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n  get activeBindings() {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== void 0\n      )\n    );\n  }\n  getValidator(type) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n    return registry.get(type);\n  }\n  getBindings() {\n    return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n  }\n  trackBinding(binding) {\n    this.tracker?.trackBinding(binding);\n  }\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger = \"navigation\") {\n    this.updateValidationsForView(trigger);\n    const validations = /* @__PURE__ */ new Map();\n    let canTransition = true;\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v\n            )}`\n          );\n          canTransition = false;\n        }\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n    return {\n      canTransition,\n      validations: validations.size ? validations : void 0\n    };\n  }\n  /** Get the current tracked validation for the given binding */\n  getValidationForBinding(binding) {\n    return this.validations.get(binding);\n  }\n  forView(parser) {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding)\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return void 0;\n        }\n        const validationMapping = /* @__PURE__ */ new Map();\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n        return validationMapping.size === 0 ? void 0 : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\"\n        );\n      },\n      type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts\nvar LocalStateStore = class {\n  constructor(onUpdate) {\n    this.updateCallback = onUpdate;\n    this.state = /* @__PURE__ */ new Map();\n  }\n  removeKey(key) {\n    this.state.delete(key);\n  }\n  reset() {\n    this.state.clear();\n  }\n  useSharedState(key) {\n    return (initialState) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n      return [\n        this.state.get(key),\n        (newState) => {\n          const current = this.state.get(key);\n          this.state.set(key, newState);\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        }\n      ];\n    };\n  }\n  getLocalStateFunction(key, countKey) {\n    return (initialState) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n      this.state.set(countKey, oldCount + 1);\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n      const value = localState[oldCount];\n      return [\n        value,\n        (newState) => {\n          const oldValue = localState[oldCount];\n          localState[oldCount] = newState;\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        }\n      ];\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/asset-transform.ts\nfunction findUp(node, target) {\n  if (node === target) {\n    return true;\n  }\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n  return false;\n}\nvar AssetTransformCorePlugin = class {\n  constructor(registry) {\n    this.registry = registry;\n    this.stateStore = /* @__PURE__ */ new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n  apply(viewController) {\n    viewController.hooks.view.tap(\"asset-transform\", (view) => {\n      this.stateStore.clear();\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode;\n        const updateState = (node) => {\n          lastUpdatedNode = node;\n          view.update(/* @__PURE__ */ new Set());\n        };\n        const getStore = (node, stepKey) => {\n          let store;\n          const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n          const storedState = this.stateStore.get(node);\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n          return {\n            useSharedState: (key) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: (initialState) => {\n              return store.getLocalStateFunction(\n                stepKey,\n                countKey\n              )(initialState);\n            }\n          };\n        };\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol\n              );\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n          return node;\n        });\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = void 0;\n        });\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== \"asset\" /* Asset */ && node.type !== \"view\" /* View */) {\n              return value;\n            }\n            const originalNode = resolver.getSourceNode(node);\n            if (!originalNode) {\n              return value;\n            }\n            const transform = this.registry.get(value);\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n              return transform?.resolve(value, options, store);\n            }\n            return value;\n          }\n        );\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts\nimport { SyncHook as SyncHook8, SyncWaterfallHook as SyncWaterfallHook9 } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nvar ViewController = class {\n  constructor(initialViews, options) {\n    this.hooks = {\n      /** Do any processing before the `View` instance is created */\n      resolveView: new SyncWaterfallHook9(),\n      // The hook right before the View starts resolving. Attach anything custom here\n      view: new SyncHook8()\n    };\n    this.transformRegistry = new Registry();\n    this.optimizeUpdates = true;\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce(\n      (viewMap, view) => {\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {}\n    );\n    new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = void 0;\n          }\n        });\n      }\n    );\n    const update = (updates, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t2) => t2.binding)),\n          updateOptions?.silent ?? false\n        );\n      }\n    );\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n      if (typeof property === \"number\" && parentBinding) {\n        update(/* @__PURE__ */ new Set([parentBinding]));\n      } else {\n        update(/* @__PURE__ */ new Set([binding]));\n      }\n    });\n  }\n  queueUpdate(bindings, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = void 0;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n  getViewForRef(viewRef) {\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n        model: this.viewOptions.model,\n        evaluate: this.viewOptions.evaluator.evaluate\n      })\n    );\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n  onView(state) {\n    const viewId = state.ref;\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state\n    );\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n    this.hooks.view.call(view);\n    view.update();\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts\nimport { SyncHook as SyncHook9, SyncWaterfallHook as SyncWaterfallHook10, SyncBailHook as SyncBailHook5 } from \"tapable-ts\";\nimport { dequal as dequal2 } from \"dequal\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts\nvar ReadOnlyDataController = class {\n  constructor(controller, logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n  get(binding, options) {\n    return this.controller.get(binding, options);\n  }\n  set(transaction, options) {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\"\n    );\n    return [];\n  }\n  delete(binding, options) {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\"\n    );\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts\nvar DataController = class {\n  constructor(model, options) {\n    this.hooks = {\n      resolve: new SyncWaterfallHook10(),\n      resolveDataStages: new SyncWaterfallHook10(),\n      // On any set or get of an undefined value, redirect the value to be the default\n      resolveDefaultValue: new SyncBailHook5(),\n      onDelete: new SyncHook9(),\n      onSet: new SyncHook9(),\n      onGet: new SyncHook9(),\n      onUpdate: new SyncHook9(),\n      format: new SyncWaterfallHook10(),\n      deformat: new SyncWaterfallHook10(),\n      serialize: new SyncWaterfallHook10()\n    };\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n    this.trash = /* @__PURE__ */ new Set();\n    this.pathResolver = options.pathResolver;\n  }\n  getModel() {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n    return this.model;\n  }\n  resolveDataValue(binding, value, deformat) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n    return value;\n  }\n  set(transaction, options) {\n    let normalizedTransaction = [];\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n        ];\n      });\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n          ];\n        }\n      );\n    }\n    const setUpdates = normalizedTransaction.reduce(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal\n        };\n        if (dequal2(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n          );\n        } else {\n          updates.push(update);\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n          );\n        }\n        return updates;\n      },\n      []\n    );\n    const result = this.getModel().set(normalizedTransaction, options);\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal2(tr.oldValue, tr.newValue))) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n        );\n        setUpdates.push(tr);\n      }\n    });\n    this.hooks.onSet.call(normalizedTransaction);\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n    return result;\n  }\n  resolve(binding, readOnly) {\n    return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n  }\n  get(binding, options) {\n    const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n    if (result === void 0 && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n    this.hooks.onGet.call(binding, result);\n    return result;\n  }\n  delete(binding, options) {\n    if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n    const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n    const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n    this.getModel().delete(resolved, options);\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n    this.hooks.onDelete.call(resolved);\n  }\n  serialize() {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n  makeReadOnly() {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts\nfunction flatten(obj, roots = [], sep = \".\") {\n  return Object.keys(obj).reduce(\n    (memo, prop) => ({\n      // create a new object\n      // include previously returned object\n      ...memo,\n      ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n        // keep working if value is an object\n        flatten(obj[prop], roots.concat([prop]))\n      ) : (\n        // include current prop and value and prefix prop with the roots\n        { [roots.concat([prop]).join(sep)]: obj[prop] }\n      )\n    }),\n    {}\n  );\n}\nfunction objectToBatchSet(obj) {\n  const flattenedObj = flatten(obj);\n  const batchTxn = [];\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n  return batchTxn;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts\nvar ConstantsController = class {\n  constructor() {\n    this.store = /* @__PURE__ */ new Map();\n    this.tempStore = /* @__PURE__ */ new Map();\n  }\n  addConstants(data, namespace) {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n  getConstants(key, namespace, fallback) {\n    const path = new BindingInstance(key);\n    return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n  }\n  setTemporaryValues(data, namespace) {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n  clearTemporaryValues(namespace) {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value) => {\n        value.reset();\n      });\n    }\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts\nvar FlowExpPlugin = class {\n  constructor() {\n    this.name = \"flow-exp-plugin\";\n  }\n  apply(player) {\n    let expressionEvaluator;\n    const handleEval = (exp) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp);\n        }\n      }\n    };\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          }\n        });\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts\nvar createFormatFunction = (schema) => {\n  const handler = (ctx, value, formatName) => {\n    return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n  };\n  return handler;\n};\nvar DefaultExpPlugin = class {\n  constructor() {\n    this.name = \"flow-exp-plugin\";\n  }\n  apply(player) {\n    let formatFunction;\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args) => {\n          return ctx.evaluate(...args);\n        }\n      );\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts\nvar NOT_STARTED_STATE = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\"\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-view-plugin.ts\nvar DefaultViewPlugin = class {\n  constructor() {\n    this.name = \"default-view-plugin\";\n  }\n  apply(player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n        new AssetPlugin().apply(view);\n        new SwitchPlugin(pluginOptions).apply(view);\n        new ApplicabilityPlugin().apply(view);\n        new StringResolverPlugin().apply(view);\n        const templatePlugin = new TemplatePlugin(pluginOptions);\n        templatePlugin.apply(view);\n        view.hooks.onTemplatePluginCreated.call(templatePlugin);\n        new MultiNodePlugin().apply(view);\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\nvar PLAYER_VERSION = true ? \"0.10.5--canary.649.22815\" : \"__VERSION__\";\nvar COMMIT = true ? \"9f52e9693e724aaf5edc228683937f01e57101c9\" : \"__GIT_COMMIT__\";\nvar _Player = class _Player {\n  constructor(config) {\n    this.logger = new TapableLogger();\n    this.constantsController = new ConstantsController();\n    this.state = NOT_STARTED_STATE;\n    this.hooks = {\n      /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n      flowController: new SyncHook10(),\n      /** The hook that updates/handles views */\n      viewController: new SyncHook10(),\n      /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n      view: new SyncHook10(),\n      /** Called when an expression evaluator was created */\n      expressionEvaluator: new SyncHook10(),\n      /** The hook that creates and manages data */\n      dataController: new SyncHook10(),\n      /** Called after the schema is created for a flow */\n      schema: new SyncHook10(),\n      /** Manages validations (schema and x-field ) */\n      validationController: new SyncHook10(),\n      /** Manages parsing binding */\n      bindingParser: new SyncHook10(),\n      /** A that's called for state changes in the flow execution */\n      state: new SyncHook10(),\n      /** A hook to access the current flow */\n      onStart: new SyncHook10(),\n      /** A hook for when the flow ends either in success or failure */\n      onEnd: new SyncHook10(),\n      /** Mutate the Content flow before starting */\n      resolveFlowContent: new SyncWaterfallHook11()\n    };\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      new DefaultViewPlugin(),\n      ...this.config.plugins || [],\n      new FlowExpPlugin()\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n  /**  Returns currently registered plugins */\n  getPlugins() {\n    return this.config.plugins ?? [];\n  }\n  /** Find instance of [Plugin] that has been registered to Player */\n  findPlugin(symbol) {\n    return this.config.plugins?.find((el) => el.symbol === symbol);\n  }\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  applyTo(symbol, apply) {\n    const plugin = this.findPlugin(symbol);\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  registerPlugin(plugin) {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n  /** Returns the current version of the running player */\n  getVersion() {\n    return _Player.info.version;\n  }\n  /** Returns the git commit used to build Player version */\n  getCommit() {\n    return _Player.info.commit;\n  }\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  getState() {\n    return this.state;\n  }\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  setState(state) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n  /** Start Player with the given flow */\n  setupFlow(userContent) {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger\n    });\n    this.hooks.onStart.call(userFlow);\n    this.hooks.flowController.call(flowController);\n    let expressionEvaluator;\n    let dataController;\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      }\n    });\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred();\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n    const validationController = new ValidationController(schema);\n    this.hooks.validationController.call(validationController);\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger\n    });\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n      return formatter ? formatter.format(value) : value;\n    });\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n      return formatter ? formatter.deformat(value) : value;\n    });\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default\n    );\n    let viewController;\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger\n    });\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n      return true;\n    });\n    function resolveStrings(val, formatted) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted\n      });\n    }\n    flowController.hooks.flow.tap(\"player\", (flow) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd);\n          }\n        }\n        if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n          return state;\n        }\n        return setIn7(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal])\n        );\n      });\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } = validationController.validateView(\"navigation\");\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n            return true;\n          }\n        }\n        return void 0;\n      });\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n        if (\"ref\" in state) {\n          newState = setIn7(state, [\"ref\"], resolveStrings(state.ref));\n        }\n        if (\"param\" in state) {\n          newState = setIn7(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false)\n          );\n        }\n        return newState;\n      });\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n      flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          try {\n            const result = await expressionEvaluator.evaluateAsync(exp);\n            flowController?.transition(String(result));\n          } catch (e) {\n            flowResultDeferred.reject(e);\n          }\n        }\n        expressionEvaluator.reset();\n      });\n    });\n    this.hooks.dataController.call(dataController);\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController\n    });\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: (pluginSymbol) => {\n          return this.findPlugin(pluginSymbol);\n        }\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b))\n      },\n      constants: this.constantsController\n    });\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n    return {\n      start: () => {\n        flowController.start().then((endState) => {\n          const flowResult = {\n            endState: resolveStrings(endState, false),\n            data: dataController.serialize()\n          };\n          return flowResult;\n        }).then(flowResultDeferred.resolve).catch((e) => {\n          this.logger.error(`Something went wrong: ${e.message}`);\n          throw e;\n        }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger\n      }\n    };\n  }\n  async start(payload) {\n    const ref = Symbol(payload?.id ?? \"payload\");\n    const maybeUpdateState = (newState) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`\n        );\n        return newState;\n      }\n      this.setState(newState);\n      return newState;\n    };\n    this.setState({\n      status: \"not-started\",\n      ref\n    });\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state\n      });\n      start();\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly()\n        }\n      };\n      return maybeUpdateState({\n        ...await state.flowResult,\n        ...endProps\n      });\n    } catch (error) {\n      const errorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error\n      };\n      maybeUpdateState(errorState);\n      throw error;\n    }\n  }\n};\n_Player.info = {\n  version: PLAYER_VERSION,\n  commit: COMMIT\n};\nvar Player = _Player;\nexport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  AssetTransformCorePlugin,\n  BINDING_BRACKETS_REGEX,\n  BindingInstance,\n  BindingParser,\n  Builder,\n  ConsoleLogger,\n  ConstantsController,\n  DataController,\n  DependencyMiddleware,\n  DependencyModel,\n  DependencyTracker,\n  EMPTY_NODE,\n  ExpNodeOpaqueIdentifier,\n  ExpressionEvaluator,\n  FlowController,\n  FlowExpPlugin,\n  FlowInstance,\n  LocalModel,\n  LocalStateStore,\n  MultiNodePlugin,\n  NOOPDataModel,\n  NOOP_MODEL,\n  NOT_STARTED_STATE,\n  NodeType,\n  NoopLogger,\n  Parser,\n  PipelinedDataModel,\n  Player,\n  ProxyLogger,\n  ROOT_BINDING,\n  Resolver,\n  SCHEMA_VALIDATION_PROVIDER_NAME,\n  SIMPLE_BINDING_REGEX,\n  SchemaController,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TapableLogger,\n  TemplatePlugin,\n  VALIDATION_PROVIDER_NAME_SYMBOL,\n  VIEW_VALIDATION_PROVIDER_NAME,\n  ValidationBindingTrackerViewPlugin,\n  ValidationController,\n  ValidationMiddleware,\n  ValidatorRegistry,\n  ViewController,\n  ViewInstance,\n  caresAboutDataChanges,\n  constructModelForPipeline,\n  findClosestNodeAtPosition,\n  findInArray,\n  findNextExp,\n  getBindingSegments,\n  getNodeID,\n  hasSwitchKey,\n  hasTemplateKey,\n  hasTemplateValues,\n  isBinding,\n  isErrorWithLocation,\n  isExpressionNode,\n  isObjectExpression,\n  maybeConvertToNum,\n  parse2 as parse,\n  parseExpression,\n  removeBindingAndChildrenFromMap,\n  resolveDataRefs,\n  resolveDataRefsInString,\n  resolveExpressionsInString,\n  severities,\n  toModel,\n  toNodeResolveOptions,\n  unpackAndPush,\n  withParser,\n  withoutContext\n};\n//# sourceMappingURL=index.mjs.mapingURL=index.mjs.map","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","export * from \"./metrics\";\nexport * from \"./symbols\";\n","import { SyncBailHook, AsyncSeriesWaterfallHook, SyncHook } from \"tapable-ts\";\nimport type {\n  Player,\n  PlayerPlugin,\n  PlayerFlowState,\n  Logger,\n  Asset,\n  View,\n} from \"@player-ui/player\";\nimport { resolveDataRefs } from \"@player-ui/player\";\nimport { setIn } from \"timm\";\nimport { BeaconPluginSymbol } from \"./symbols\";\n\nexport type BeaconDataType = string | Record<string, any>;\n\nexport interface BeaconMetaData {\n  /** Additional data to send along with beacons */\n  beacon?: BeaconDataType;\n}\n\nexport interface AssetBeaconInfo {\n  /** Additional data about the asset */\n  metaData?: BeaconMetaData;\n}\n\nexport type AssetBeacon = Asset & AssetBeaconInfo;\nexport type ViewBeacon = View & AssetBeaconInfo;\n\nexport interface BeaconPluginPlugin {\n  /** Use this to tap into the beacon plugin hooks */\n  apply: (beaconPlugin: BeaconPlugin) => void;\n}\n\nexport interface BeaconPluginOptions {\n  /** Callback when a beacon is published */\n  callback?: (beacon: any) => void;\n  /** A set of plugins to load  */\n  plugins?: BeaconPluginPlugin[];\n}\n\ninterface BeaconContext {\n  /** The full current view */\n  view?: ViewBeacon;\n}\n\nexport interface BeaconArgs {\n  /** The action being performed */\n  action: string;\n  /** The specific element that the beacon originated from */\n  element: string;\n  /** The asset firing the beacon */\n  asset: AssetBeacon;\n  /** The current view */\n  view?: ViewBeacon;\n  /** Any additional data to attach to the event */\n  data?: any;\n}\n\nexport interface HookArgs extends BeaconArgs {\n  /** The current player state */\n  state?: PlayerFlowState;\n  /** The beacon plugin logger */\n  logger: Logger;\n}\n\n/**\n * A player plugin to manage beacon events.\n * It automatically keeps track of the current user's view, and adds additional metaData to each beacon event.\n */\nexport class BeaconPlugin implements PlayerPlugin {\n  name = \"Beacon\";\n\n  static Symbol = BeaconPluginSymbol;\n  public readonly symbol = BeaconPlugin.Symbol;\n\n  private player?: Player;\n  private logger?: Logger;\n\n  private beaconContext: BeaconContext = {\n    view: undefined,\n  };\n\n  private resolveDataRefs?: <T>(data: T) => T;\n\n  public hooks = {\n    buildBeacon: new AsyncSeriesWaterfallHook<[unknown, HookArgs]>(),\n    cancelBeacon: new SyncBailHook<[HookArgs], boolean>(),\n    publishBeacon: new SyncHook<[any]>(),\n  };\n\n  constructor(options?: BeaconPluginOptions) {\n    if (options?.plugins) {\n      options.plugins.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n\n    if (options?.callback) {\n      this.hooks.publishBeacon.tap(\"BeaconCallback\", (beacon: any) => {\n        if (options.callback) {\n          options.callback(beacon);\n        }\n      });\n    }\n  }\n\n  apply(player: Player) {\n    this.player = player;\n    this.logger = player.logger;\n\n    player.hooks.state.tap(this.name, (playerState) => {\n      if (playerState.status === \"in-progress\") {\n        this.resolveDataRefs = (data) =>\n          resolveDataRefs(data, {\n            model: playerState.controllers.data,\n            evaluate: playerState.controllers.expression.evaluate,\n          });\n      }\n    });\n\n    player.hooks.viewController.tap(this.name, (vc) => {\n      this.beaconContext = {\n        view: undefined,\n      };\n\n      vc.hooks.view.tap(this.name, (view) => {\n        let beaconedView = false;\n\n        view.hooks.parser.tap(this.name, (parser) => {\n          /* If there is a 'beacon' property in an asset or view, skip resolving as we\n             are doing this manually when beacon is fired. */\n          parser.hooks.onCreateASTNode.tap(this.name, (obj) => {\n            if (obj?.type !== \"asset\" && obj?.type !== \"view\") return undefined;\n\n            const propertiesToSkip =\n              obj.plugins?.stringResolver?.propertiesToSkip ?? [];\n\n            if (propertiesToSkip.includes(\"beacon\")) return undefined;\n\n            // eslint-disable-next-line no-param-reassign\n            obj.plugins = setIn(\n              obj.plugins ?? {},\n              [\"stringResolver\", \"propertiesToSkip\"],\n              [\"beacon\", ...propertiesToSkip],\n            ) as any;\n\n            return obj;\n          });\n        });\n\n        view.hooks.onUpdate.tap(this.name, (viewUpdate: ViewBeacon) => {\n          this.beaconContext = {\n            view: viewUpdate,\n          };\n\n          if (!beaconedView) {\n            this.beacon({\n              action: \"viewed\",\n              element: \"view\",\n              asset: viewUpdate,\n              view: viewUpdate,\n            });\n\n            beaconedView = true;\n          }\n        });\n      });\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      evaluator.addExpressionFunction(\"beacon\", (_ctx, action, data) => {\n        const view = this.beaconContext.view || ({} as ViewBeacon);\n        this.beacon({\n          action: action as string,\n          data: data as any,\n          element: \"view\",\n          asset: view,\n          view,\n        });\n      });\n    });\n  }\n\n  beacon(event: BeaconArgs) {\n    const { action, element, asset, view } = event;\n    const { view: currentView } = this.beaconContext;\n    setTimeout(async () => {\n      const unresolvedData = event?.data || event.asset?.metaData?.beacon;\n\n      const data = this.resolveDataRefs?.(unresolvedData) ?? unresolvedData;\n\n      const defaultBeacon = {\n        action,\n        element,\n        data,\n        assetId: asset?.id,\n        viewId: currentView?.id,\n      };\n      const state = this.player?.getState();\n      const hookArgs = {\n        ...event,\n        data,\n        state,\n        view: view ?? currentView,\n        logger: this.logger as Logger,\n      };\n      let beacon =\n        (await this.hooks.buildBeacon.call(defaultBeacon, hookArgs)) ||\n        defaultBeacon;\n\n      // Re-resolve data refs in case the hook modified the beacon and introduced more\n      if (beacon !== defaultBeacon && this.resolveDataRefs) {\n        beacon = this.resolveDataRefs(beacon);\n      }\n\n      const shouldCancel = this.hooks.cancelBeacon.call(hookArgs) || false;\n\n      if (!shouldCancel) {\n        this.logger?.debug(\"Sending beacon event\", beacon);\n        this.hooks.publishBeacon.call(beacon);\n      }\n    }, 0);\n  }\n}\n","export const BeaconPluginSymbol = Symbol.for(\"BeaconPlugin\");\n","export const MetricsCorePluginSymbol = Symbol.for(\"MetricsCorePlugin\");\nexport const MetricsViewBeaconPluginContextSymbol = Symbol.for(\n  \"MetricsViewBeaconPluginContext\",\n);\n","import type { Player, PlayerPlugin } from \"@player-ui/player\";\nimport { SyncHook, SyncBailHook } from \"tapable-ts\";\nimport type { BeaconPluginPlugin, BeaconArgs } from \"@player-ui/beacon-plugin\";\nimport { BeaconPlugin } from \"@player-ui/beacon-plugin\";\nimport {\n  MetricsCorePluginSymbol,\n  MetricsViewBeaconPluginContextSymbol,\n} from \"./symbols\";\n\n// Try to use performance.now() but fall back to Date.now() if you can't\nexport const defaultGetTime =\n  typeof performance === \"undefined\"\n    ? () => Date.now()\n    : () => performance.now();\n\nexport type Timing = {\n  /** Time this duration started (ms) */\n  startTime: number;\n} & (\n  | {\n      /** Flag set if this is currently in progress */\n      completed: false;\n    }\n  | {\n      /** The stopwatch has stopped */\n      completed: true;\n\n      /** The time in (ms) that the process ended */\n      endTime: number;\n\n      /** The elapsed time of this event (ms) */\n      duration: number;\n    }\n);\n\nexport type NodeMetrics = Timing & {\n  /** The type of the flow-state  */\n  stateType: string;\n\n  /** The name of the flow-state */\n  stateName: string;\n};\n\nexport type NodeRenderMetrics = NodeMetrics & {\n  /** Timing representing the initial render */\n  render: Timing;\n\n  /** An array of timings representing updates to the view */\n  updates: Array<Timing>;\n};\n\nexport interface PlayerFlowMetrics {\n  /** All metrics about a running flow */\n  flow?: {\n    /** The id of the flow these metrics are for */\n    id: string;\n\n    /** request time */\n    requestTime?: number;\n\n    /** A timeline of events for each node-state */\n    timeline: Array<NodeMetrics | NodeRenderMetrics>;\n\n    /** A timing measuring until the first interactive render */\n    interactive: Timing;\n  } & Timing;\n}\n\nconst callbacks = [\n  \"onFlowBegin\",\n  \"onFlowEnd\",\n  \"onInteractive\",\n  \"onNodeStart\",\n  \"onNodeEnd\",\n  \"onRenderStart\",\n  \"onRenderEnd\",\n  \"onUpdateStart\",\n  \"onUpdateEnd\",\n  \"onUpdate\",\n] as const;\n\n/** Context structure for 'viewed' beacons rendering metrics */\nexport interface MetricsViewBeaconPluginContext {\n  /** Represents the time taken before the view is first rendered */\n  renderTime?: number;\n  /** request time */\n  requestTime?: number;\n}\n\n/** Simple [BeaconPluginPlugin] that adds renderTime to 'viewed' beacons data */\nexport class MetricsViewBeaconPlugin implements BeaconPluginPlugin {\n  static Symbol = MetricsViewBeaconPluginContextSymbol;\n  public readonly symbol = MetricsViewBeaconPlugin.Symbol;\n\n  private metricsPlugin: MetricsCorePlugin;\n\n  private resolvePendingRenderTime: ((renderTime: number) => void) | undefined;\n\n  constructor(metricsPlugin: MetricsCorePlugin) {\n    this.metricsPlugin = metricsPlugin;\n    this.metricsPlugin.hooks.onRenderEnd.tap(\n      \"MetricsViewBeaconPlugin\",\n      (timing) => {\n        if (timing.completed && this.resolvePendingRenderTime) {\n          this.resolvePendingRenderTime(timing.duration);\n          this.resolvePendingRenderTime = undefined;\n        }\n      },\n    );\n  }\n\n  apply(beaconPlugin: BeaconPlugin) {\n    beaconPlugin.hooks.buildBeacon.intercept({\n      context: true,\n      call: (context: any, beacon) => {\n        if (context && (beacon as BeaconArgs).action === \"viewed\") {\n          context[this.symbol] = this.buildContext();\n        }\n      },\n    });\n  }\n\n  private async buildContext(): Promise<MetricsViewBeaconPluginContext> {\n    return {\n      renderTime: await this.getRenderTime(),\n      requestTime: this.getRequestTime(),\n    };\n  }\n\n  private async getRenderTime(): Promise<number> {\n    const { flow } = this.metricsPlugin.getMetrics();\n\n    if (flow) {\n      const lastItem = flow.timeline[flow.timeline.length - 1];\n\n      if (\"render\" in lastItem && lastItem.render.completed) {\n        return lastItem.render.duration;\n      }\n    }\n\n    return new Promise((resolve) => {\n      this.resolvePendingRenderTime = resolve;\n    });\n  }\n\n  private getRequestTime(): number | undefined {\n    const { flow } = this.metricsPlugin.getMetrics();\n\n    return flow?.requestTime;\n  }\n}\n\nexport interface MetricsWebPluginOptions {\n  /** Called when a flow starts */\n  onFlowBegin?: (update: PlayerFlowMetrics) => void;\n\n  /** Called when a flow ends */\n  onFlowEnd?: (update: PlayerFlowMetrics) => void;\n\n  /** Called when a flow becomes interactive for the first time */\n  onInteractive?: (timing: Timing, update: PlayerFlowMetrics) => void;\n\n  /** Called when a new node is started */\n  onNodeStart?: (\n    nodeMetrics: NodeMetrics | NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Called when a node is ended */\n  onNodeEnd?: (\n    nodeMetrics: NodeMetrics | NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Called when rendering for a node begins */\n  onRenderStart?: (\n    timing: Timing,\n    nodeMetrics: NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Called when rendering for a node ends */\n  onRenderEnd?: (\n    timing: Timing,\n    nodeMetrics: NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Called when an update for a node begins */\n  onUpdateStart?: (\n    timing: Timing,\n    nodeMetrics: NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Called when an update for a node ends */\n  onUpdateEnd?: (\n    timing: Timing,\n    nodeMetrics: NodeRenderMetrics,\n    update: PlayerFlowMetrics,\n  ) => void;\n\n  /** Callback to subscribe to updates for any metric */\n  onUpdate?: (metrics: PlayerFlowMetrics) => void;\n\n  /**\n   * A flag to set if you want to track render times for nodes\n   * This requires that the UI calls `renderEnd()` when the view is painted.\n   */\n  trackRenderTime?: boolean;\n\n  /**\n   * A flag to set if you want to track update times for nodes\n   * This requires that the UI calls `renderEnd()` when the view is painted.\n   */\n  trackUpdateTime?: boolean;\n\n  /** A function to get the current time (in ms) */\n  getTime?: () => number;\n}\n\n/**\n * A plugin that enables request time metrics\n */\nexport class RequestTimeWebPlugin {\n  getRequestTime: () => number | undefined;\n  name = \"RequestTimeWebPlugin\";\n\n  constructor(getRequestTime: () => number | undefined) {\n    this.getRequestTime = getRequestTime;\n  }\n\n  apply(metricsCorePlugin: MetricsCorePlugin) {\n    metricsCorePlugin.hooks.resolveRequestTime.tap(this.name, () => {\n      return this.getRequestTime();\n    });\n  }\n}\n\n/**\n * A plugin that enables gathering of render metrics\n */\nexport class MetricsCorePlugin implements PlayerPlugin {\n  name = \"metrics\";\n\n  static Symbol = MetricsCorePluginSymbol;\n  public readonly symbol = MetricsCorePluginSymbol;\n\n  protected trackRender: boolean;\n  protected trackUpdate: boolean;\n  protected getTime: () => number;\n\n  public readonly hooks = {\n    resolveRequestTime: new SyncBailHook<[], number>(),\n\n    onFlowBegin: new SyncHook<[PlayerFlowMetrics]>(),\n    onFlowEnd: new SyncHook<[PlayerFlowMetrics]>(),\n\n    onInteractive: new SyncHook<[Timing, PlayerFlowMetrics]>(),\n\n    onNodeStart: new SyncHook<[NodeMetrics | NodeRenderMetrics]>(),\n    onNodeEnd: new SyncHook<[NodeMetrics | NodeRenderMetrics]>(),\n\n    onRenderStart: new SyncHook<\n      [Timing, NodeRenderMetrics, PlayerFlowMetrics]\n    >(),\n    onRenderEnd: new SyncHook<[Timing, NodeRenderMetrics, PlayerFlowMetrics]>(),\n\n    onUpdateStart: new SyncHook<\n      [Timing, NodeRenderMetrics, PlayerFlowMetrics]\n    >(),\n    onUpdateEnd: new SyncHook<[Timing, NodeRenderMetrics, PlayerFlowMetrics]>(),\n\n    onUpdate: new SyncHook<[PlayerFlowMetrics]>(),\n  };\n\n  private metrics: PlayerFlowMetrics = {};\n\n  constructor(options?: MetricsWebPluginOptions) {\n    this.trackRender = options?.trackRenderTime ?? false;\n    this.trackUpdate = options?.trackUpdateTime ?? false;\n    this.getTime = options?.getTime ?? defaultGetTime;\n\n    /** fn to call the update hook */\n    const callOnUpdate = () => {\n      this.hooks.onUpdate.call(this.metrics);\n    };\n\n    this.hooks.onFlowBegin.tap(this.name, callOnUpdate);\n    this.hooks.onFlowEnd.tap(this.name, callOnUpdate);\n    this.hooks.onInteractive.tap(this.name, callOnUpdate);\n    this.hooks.onNodeStart.tap(this.name, callOnUpdate);\n    this.hooks.onNodeEnd.tap(this.name, callOnUpdate);\n\n    this.hooks.onRenderStart.tap(this.name, callOnUpdate);\n    this.hooks.onRenderEnd.tap(this.name, callOnUpdate);\n\n    this.hooks.onUpdateStart.tap(this.name, callOnUpdate);\n    this.hooks.onUpdateEnd.tap(this.name, callOnUpdate);\n\n    callbacks.forEach((hookName) => {\n      if (options?.[hookName] !== undefined) {\n        (this.hooks[hookName] as any).tap(\"options\", options?.[hookName]);\n      }\n    });\n  }\n\n  /**\n   * Fetch the metrics of the current flow\n   */\n  public getMetrics(): PlayerFlowMetrics {\n    return this.metrics;\n  }\n\n  /** Called when the UI layer wishes to start a timer for rendering */\n  private renderStart(): void {\n    // Grab the last update\n    const timeline = this.metrics.flow?.timeline;\n\n    if (!timeline || timeline.length === 0) {\n      return;\n    }\n\n    const lastItem = timeline[timeline.length - 1];\n\n    if (\"updates\" in lastItem) {\n      // Get the last update, make sure it's completed\n      if (lastItem.updates.length > 0) {\n        const lastUpdate = lastItem.updates[lastItem.updates.length - 1];\n\n        if (lastUpdate.completed === false) {\n          // Starting a new render before the last one was finished.\n          // Just ignore it and include as part of 1 render time\n          return;\n        }\n      }\n\n      if (!lastItem.render.completed) {\n        // Starting a new render before the last one was finished.\n        // Just ignore it and include as part of 1 render time\n        return;\n      }\n\n      const update: Timing = {\n        completed: false,\n        startTime: defaultGetTime(),\n      };\n\n      lastItem.updates.push(update);\n\n      this.hooks.onUpdateStart.call(update, lastItem, this.metrics);\n    } else {\n      const renderInfo = {\n        ...lastItem,\n        render: {\n          completed: false,\n          startTime: defaultGetTime(),\n        },\n        updates: [],\n      } as NodeRenderMetrics;\n\n      timeline[timeline.length - 1] = renderInfo;\n\n      this.hooks.onRenderStart.call(\n        renderInfo.render,\n        renderInfo,\n        this.metrics,\n      );\n    }\n  }\n\n  /** Called when the UI layer wants to end the rendering timer */\n  public renderEnd(): void {\n    if (!this.trackRender) {\n      throw new Error(\n        \"Must start the metrics-plugin with render tracking enabled\",\n      );\n    }\n\n    const { flow } = this.metrics;\n\n    if (!flow) {\n      return;\n    }\n\n    const { timeline, interactive } = flow;\n\n    if (!timeline || !interactive || timeline.length === 0) {\n      return;\n    }\n\n    const lastItem = timeline[timeline.length - 1];\n\n    if (!(\"render\" in lastItem)) {\n      return;\n    }\n\n    // Check if this is an update or render\n    const endTime = defaultGetTime();\n\n    if (lastItem.render.completed) {\n      // This is the end of an existing update\n\n      if (lastItem.updates.length === 0) {\n        // throw new Error(\"Trying to end an update that's not in progress\");\n        return;\n      }\n\n      const lastUpdate = lastItem.updates[lastItem.updates.length - 1];\n\n      if (lastUpdate.completed === true) {\n        // throw new Error(\"Trying to end an update that's not in progress\");\n        return;\n      }\n\n      const update = {\n        ...lastUpdate,\n        completed: true,\n        endTime,\n        duration: endTime - lastUpdate.startTime,\n      };\n\n      lastItem.updates[lastItem.updates.length - 1] = update;\n      this.hooks.onUpdateEnd.call(update, lastItem, this.metrics);\n    } else {\n      lastItem.render = {\n        ...lastItem.render,\n        completed: true,\n        endTime,\n        duration: endTime - lastItem.startTime,\n      };\n      this.hooks.onRenderEnd.call(lastItem.render, lastItem, this.metrics);\n\n      if (!interactive.completed) {\n        flow.interactive = {\n          ...interactive,\n          completed: true,\n          duration: endTime - interactive.startTime,\n          endTime,\n        };\n\n        this.hooks.onInteractive.call(flow.interactive, this.metrics);\n      }\n    }\n  }\n\n  apply(player: Player): void {\n    player.hooks.onStart.tap(this.name, (flow) => {\n      const requestTime = this.hooks.resolveRequestTime.call();\n      const startTime = defaultGetTime();\n      this.metrics = {\n        flow: {\n          id: flow.id,\n          requestTime: requestTime ?? undefined,\n          timeline: [],\n          startTime,\n          completed: false,\n          interactive: {\n            completed: false,\n            startTime,\n          },\n        },\n      };\n\n      this.hooks.onFlowBegin.call(this.metrics);\n    });\n\n    player.hooks.state.tap(this.name, (state) => {\n      if (state.status === \"completed\" || state.status === \"error\") {\n        const endTime = defaultGetTime();\n        const { flow } = this.metrics;\n\n        if (flow === undefined || flow?.completed === true) {\n          return;\n        }\n\n        this.metrics = {\n          flow: {\n            ...flow,\n            completed: true,\n            endTime,\n            duration: endTime - flow.startTime,\n          },\n        };\n\n        // get the last update\n\n        const lastUpdate = flow.timeline[flow.timeline.length - 1];\n\n        if (lastUpdate && !lastUpdate.completed) {\n          (this.metrics.flow as any).timeline[flow.timeline.length - 1] = {\n            ...lastUpdate,\n            completed: true,\n            endTime,\n            duration: endTime - lastUpdate.startTime,\n          };\n        }\n\n        this.hooks.onFlowEnd.call(this.metrics);\n      }\n    });\n\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (f) => {\n        f.hooks.transition.tap(this.name, (from, to) => {\n          const time = defaultGetTime();\n          const { flow } = this.metrics;\n\n          if (!flow) {\n            return;\n          }\n\n          const { timeline } = flow;\n\n          // End the last state, and start the next one\n\n          if (timeline.length > 0) {\n            const prev = timeline[timeline.length - 1];\n\n            if (prev.completed) {\n              throw new Error(\"Completing a state that's already done.\");\n            }\n\n            timeline[timeline.length - 1] = {\n              ...prev,\n              completed: true,\n              endTime: time,\n              duration: time - prev.startTime,\n            };\n\n            this.hooks.onNodeEnd.call(timeline[timeline.length - 1]);\n          }\n\n          const nodeMetrics = {\n            completed: false,\n            startTime: time,\n            stateName: to.name,\n            stateType: to.value.state_type,\n          } as const;\n\n          timeline.push(nodeMetrics);\n          this.hooks.onNodeStart.call(nodeMetrics);\n        });\n      });\n    });\n\n    if (this.trackRender) {\n      player.hooks.view.tap(this.name, (v) => {\n        if (this.trackUpdate) {\n          v.hooks.onUpdate.tap(this.name, () => {\n            this.renderStart();\n          });\n        } else {\n          this.renderStart();\n        }\n      });\n\n      player.applyTo<BeaconPlugin>(BeaconPlugin.Symbol, (beaconPlugin) =>\n        new MetricsViewBeaconPlugin(this).apply(beaconPlugin),\n      );\n    }\n  }\n}\n\nexport default MetricsCorePlugin;\n"]}