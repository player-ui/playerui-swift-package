{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/2193/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/asset-transform/core/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/asset-transform/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/action/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/input/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/info/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/image/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/choice/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/async-node/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/async-node/core/src/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/chat-message/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/plugin.ts"],"names":["ReferenceAssetsPlugin","dlv_es_default","obj","key","def","p","undef","split","length","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","Array","from","entry","path","value","count","size","createBasicMatcher","seed","matcher","match","composeTransforms","args","reverse","fn","fns","asset","options","store","reduce","prevValue","current","composeBefore","beforeResolve","compose","beforeResolveFns","resolveFns","arg","push","resolve","maybeCompose","maybeFn","cleanupTransformRegistry","maybeRegistry","isArray","wrappedTransforms","map","Registry","registry","forEach","set","isBackAction","action","equalToOrIn","check","includes","callTap","tap","ctx","context","callback","find","iter","tar","keys","dequal","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","asArray","findInArray","array","findIndex","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","Error","transaction","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","NOOP_MODEL","createModelWithOptions","nextModel","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isObjectExpression","parse2","schema","parseQueue","shift","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","filter","b","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","createStatefulValidationObject","severity","state","isBlockingNavigation","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","all","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_sorted_array","module","SortedArray","defclass","constructor","compare","compareDefault","insert","element","high","low","pos","ordering","search","remove","splice","comparing","a","define","amd","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","result","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","pDefer","deferred","promise","Promise","reject","require_queue_microtask","queueMicrotask","bind","window","global","then","catch","setTimeout","src_exports","actionTransform","chatMessageTransform","choiceTransform","expPropTransform","imageTransform","infoTransform","inputTransform","transform","includeInvalid","validation","track","dataType","import_sorted_array","createSortedArray","initialSet","query","callbackfn","clear","isRegistryEmpty","AssetTransformPlugin","transforms","apply","player","hooks","viewController","vc","transformRegistry","run","skipValidation","metaData","transition","force","backIconTransform","role","skipArray","plugins","stringResolver","propertiesToSkip","infoAsset","actions","segmentedActions","segmentedActionsArray","prev","getImageAlt","props","placeholder","accessibility","altText","newImage","items","assetHasBinding","currentValue","resetValue","transformedChoiceItems","item","select","unselect","clearSelection","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","import_ts_nested_error","import_timm","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","import_p_defer","import_queue_microtask","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","parse","expected","whitespace","maybeNumber","Number","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","import_ts_nested_error2","actualValue","appendPathSegments","resolveNode","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","BINDING_BRACKETS_REGEX","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","BindingParser","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","NestedError2","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","normalized2","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","DependencyTracker","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","DependencyModel","rootModel","NOOPDataModel","ROOT_BINDING","PipelinedDataModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","handler","appliedTransaction","LocalModel","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","waitFor","_context","condition","ifTrue","ifFalse","resolution","resolveParams","andandOperator","ororOperator","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","ExpressionEvaluator","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","expressions","defaultHookOptions","_execAST","async","_resolveNodeAsync","_resolveNode","resolvedOpts","_nothing","_execString","evaluateAsync","addExpressionFunction","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","matched","storedAST","throwErrors","import_ts_nested_error3","NestedError3","_currentValue","expressionContext","resolvedAttributes","attr","expressionName","n","ele","operation","TapableLogger","trace","debug","info","warn","log","logHandlers","createHandler","logger","addHandler","logHandler","removeHandler","ProxyLogger","loggerProvider","proxiedLoggerProvider","identify","SchemaController","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","addDataTypes","t2","getValidationsForBinding","typeDef","getApparentType","vRef","trigger","normalizeBinding","cached","bindingArray","recordBinding","getType","schemaType","baseType","getTypeDefinition","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","import_timm2","setIn2","ValidationMiddleware","validator","shadowModelPaths","shouldIncludeInvalid","asModel","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","import_timm3","setIn3","ValidatorRegistry","register","EMPTY_NODE","Parser","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","objToParse","children","localObj","objEntries","v","defaultValue","accumulation","value2","children2","localValue","newChildren","parentObj","import_timm5","setIn4","baseAst","child","unpackAndPush","initial","withContext","Resolver","root","skipResolve","beforeUpdate","afterUpdate","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm4","rawParent","cacheUpdate","partiallyResolvedParent","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","resolvedAST","isNestedMultiNode","update2","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","resolved","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","setIn5","rawParentToPassIn","newValues","mValue","mTree","bindingDep","scope","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","ViewInstance","onUpdate","resolver","onTemplatePluginCreated","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","Builder","_Builder","assetWrapper","valueNode","addChild","multiNode","m","asyncNode","flatten2","newChild","updateChildrenByPath","pathToMatch","updateFn","updatedChildren","templateSymbol","TemplatePlugin","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","node2","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","newNode","import_timm6","findBasePath","parentNode","original","StringResolverPlugin","propertiesToSkipCache","applyResolver","propsToSkip","nodePath","some","ApplicabilityPlugin","isApplicability","isApplicable","nodeType","parsedApplicability","import_timm7","omit2","applicabilityNode","applicability","SwitchPlugin","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","MultiNodePlugin","childVal","AssetPlugin","assetAST","FlowInstance","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","afterTransition","history","_oldState","nextState","newState","flowPromise","state_type","initialState","startState","import_p_defer2","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","FlowController","navigation","navStack","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","ValidationBindingTrackerViewPlugin","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","originalNode","newlyComputed","nodeSet","sectionNode","temp","SCHEMA_VALIDATION_PROVIDER_NAME","VIEW_VALIDATION_PROVIDER_NAME","VALIDATION_PROVIDER_NAME_SYMBOL","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","import_timm9","setIn6","dismissable","dismiss","newApplicableValidations","currentPhase","ValidationController","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","LocalStateStore","updateCallback","removeKey","useSharedState","getLocalStateFunction","countKey","localState","oldCount","findUp","AssetTransformCorePlugin","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","lastUpdatedNode","updateState","getStore","stepKey","storedState","useLocalState","skip","isParentOfUpdated","isChildOfUpdated","ViewController","initialViews","resolveView","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","ReadOnlyDataController","controller","DataController","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","ConstantsController","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","FlowExpPlugin","expressionEvaluator","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","expEvaluator","NOT_STARTED_STATE","DefaultViewPlugin","pluginOptions","PLAYER_VERSION","COMMIT","_Player","config","constantsController","dataController","validationController","bindingParser","resolveFlowContent","plugin","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","resolveStrings","transitionVal","computedTransitionVal","import_timm8","setIn7","param","constants","views","utils","pluginSymbol","endState","flowResult","finally","controllers","fail","payload","maybeUpdateState","endProps","errorState","asyncTransform","assetId","wrapperAssetType","assetNode","wrapperAsset","newAsset"],"mappings":"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","sourcesContent":["\"use strict\";\nvar ReferenceAssetsPlugin = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length = array.length, index = 0;\n            while (index < length)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn8;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit4;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn8(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn8(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn8(a, path, nextVal);\n      }\n      function omit4(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn8,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit4,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    ReferenceAssetsPlugin: () => ReferenceAssetsPlugin,\n    actionTransform: () => actionTransform,\n    chatMessageTransform: () => chatMessageTransform,\n    choiceTransform: () => choiceTransform,\n    expPropTransform: () => expPropTransform,\n    imageTransform: () => imageTransform,\n    infoTransform: () => infoTransform,\n    inputTransform: () => inputTransform,\n    isBackAction: () => isBackAction,\n    transform: () => transform2\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/input/transform.ts\n  var inputTransform = (asset, options) => {\n    return {\n      ...asset,\n      format(val) {\n        if (asset.binding === void 0) {\n          return val;\n        }\n        return options.data.format(asset.binding, val);\n      },\n      set(val) {\n        if (asset.binding === void 0) {\n          return;\n        }\n        return options.data.model.set([[asset.binding, val]], {\n          formatted: true\n        });\n      },\n      value: asset.binding === void 0 ? \"\" : options.data.model.get(asset.binding, {\n        includeInvalid: true,\n        formatted: true\n      }),\n      validation: asset.binding === void 0 ? void 0 : options.validation?.get(asset.binding, { track: true }),\n      dataType: asset.binding === void 0 ? void 0 : options.validation?.type(asset.binding)\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+asset-transform-plugin@0.0.0/node_modules/@player-ui/asset-transform-plugin/dist/index.mjs\n  function composeTransforms(...args) {\n    const [fn, ...fns] = args.reverse();\n    return (asset, options, store) => {\n      const value = fn(asset, options, store);\n      if (!fns.length) {\n        return value;\n      }\n      return fns.reduce((prevValue, current) => {\n        return current(prevValue, options, store);\n      }, value);\n    };\n  }\n  function composeBefore(...args) {\n    return {\n      beforeResolve: composeTransforms(...args)\n    };\n  }\n  function compose(...args) {\n    const beforeResolveFns = [];\n    const resolveFns = [];\n    for (const arg of args) {\n      if (typeof arg === \"function\") {\n        resolveFns.push(arg);\n      } else {\n        if (arg?.resolve) {\n          resolveFns.push(arg.resolve);\n        }\n        if (arg?.beforeResolve) {\n          beforeResolveFns.push(arg.beforeResolve);\n        }\n      }\n    }\n    return {\n      beforeResolve: beforeResolveFns.length ? composeTransforms(...beforeResolveFns) : void 0,\n      resolve: resolveFns.length ? composeTransforms(...resolveFns) : void 0\n    };\n  }\n  function maybeCompose(maybeFn) {\n    if (typeof maybeFn === \"object\") {\n      return maybeFn;\n    }\n    return compose(maybeFn);\n  }\n  function cleanupTransformRegistry(maybeRegistry) {\n    if (Array.isArray(maybeRegistry)) {\n      const wrappedTransforms = maybeRegistry.map(([key, value]) => {\n        return [key, maybeCompose(value)];\n      });\n      return new Registry(wrappedTransforms);\n    }\n    const registry = new Registry();\n    maybeRegistry.forEach(({ key, value }) => {\n      registry.set(key, maybeCompose(value));\n    });\n    return registry;\n  }\n  var AssetTransformPlugin = class {\n    constructor(transforms) {\n      this.name = \"asset-transform\";\n      this.registry = cleanupTransformRegistry(transforms);\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (vc) => {\n        this.registry.forEach(\n          ({ key, value }) => vc.transformRegistry.set(key, maybeCompose(value))\n        );\n      });\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/action/transform.ts\n  function isBackAction(action) {\n    return action.value === \"Prev\";\n  }\n  var transform = (action, options) => {\n    return {\n      ...action,\n      run() {\n        if (action.exp) {\n          options.evaluate(action.exp);\n        }\n        if (action.value) {\n          const skipValidation = action.metaData?.skipValidation;\n          options.transition?.(action.value, { force: skipValidation });\n        }\n      }\n    };\n  };\n  var backIconTransform = (action) => {\n    if (isBackAction(action) && action?.metaData?.role === void 0) {\n      return {\n        ...action,\n        metaData: {\n          ...action?.metaData,\n          role: \"back\"\n        }\n      };\n    }\n    return action;\n  };\n  var expPropTransform = (asset) => {\n    const skipArray = asset.plugins?.stringResolver?.propertiesToSkip;\n    if (skipArray && skipArray.indexOf(\"exp\") > 1) {\n      return asset;\n    }\n    return {\n      ...asset,\n      plugins: {\n        ...asset.plugins,\n        stringResolver: {\n          ...asset?.plugins?.stringResolver,\n          propertiesToSkip: [\n            ...asset.plugins?.stringResolver?.propertiesToSkip ?? [],\n            \"exp\"\n          ]\n        }\n      }\n    };\n  };\n  var actionTransform = compose(\n    transform,\n    backIconTransform,\n    composeBefore(expPropTransform)\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/info/transform.ts\n  var infoTransform = (infoAsset) => {\n    const actions = infoAsset?.actions;\n    const segmentedActions = actions?.reduce(\n      (segmentedActionsArray, action) => {\n        segmentedActionsArray[isBackAction(action.asset) ? \"prev\" : \"next\"].push(action);\n        return segmentedActionsArray;\n      },\n      { next: [], prev: [] }\n    );\n    return {\n      ...infoAsset,\n      segmentedActions\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/image/transform.ts\n  var getImageAlt = (props) => {\n    const { metaData, placeholder } = props;\n    if (metaData.accessibility)\n      return metaData.accessibility;\n    if (placeholder)\n      return placeholder;\n    return \"Image\";\n  };\n  var imageTransform = (props) => {\n    const altText = getImageAlt(props);\n    const newImage = {\n      ...props,\n      altText\n    };\n    return newImage;\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/choice/transform.ts\n  var choiceTransform = (asset, options) => {\n    const { items, binding, ...rest } = asset;\n    const assetHasBinding = binding !== void 0;\n    const currentValue = assetHasBinding ? options.data.model.get(binding, {\n      includeInvalid: true\n    }) : void 0;\n    const resetValue = () => {\n      if (assetHasBinding) {\n        return options.data.model.set([[binding, null]]);\n      }\n    };\n    const transformedChoiceItems = (items || []).map(\n      (item, index) => ({\n        ...item,\n        id: item.id ?? `${asset.id}-choice-${index}`,\n        select() {\n          if (assetHasBinding) {\n            return options.data.model.set([[binding, item.value]]);\n          }\n        },\n        unselect: resetValue\n      })\n    );\n    return {\n      ...rest,\n      binding,\n      clearSelection: resetValue,\n      items: transformedChoiceItems,\n      value: currentValue,\n      validation: assetHasBinding ? options.validation?.get(binding, { track: true }) : void 0,\n      dataType: assetHasBinding ? options.validation?.type(binding) : void 0\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_ts_nested_error = __toESM(require_nested_error(), 1);\n  var import_ts_nested_error2 = __toESM(require_nested_error(), 1);\n  var import_timm = __toESM(require_timm(), 1);\n  var import_ts_nested_error3 = __toESM(require_nested_error(), 1);\n  var import_timm2 = __toESM(require_timm(), 1);\n  var import_timm3 = __toESM(require_timm(), 1);\n  var import_timm4 = __toESM(require_timm(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm5 = __toESM(require_timm(), 1);\n  var import_timm6 = __toESM(require_timm(), 1);\n  var import_timm7 = __toESM(require_timm(), 1);\n  var import_timm8 = __toESM(require_timm(), 1);\n  var import_p_defer = __toESM(require_p_defer(), 1);\n  var import_p_defer2 = __toESM(require_p_defer(), 1);\n  var import_timm9 = __toESM(require_timm(), 1);\n  var import_queue_microtask = __toESM(require_queue_microtask(), 1);\n  var __defProp2 = Object.defineProperty;\n  var __export2 = (target, all) => {\n    for (var name in all)\n      __defProp2(target, name, { get: all[name], enumerable: true });\n  };\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n  var evaluator_functions_exports = {};\n  __export2(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal,\n    waitFor: () => waitFor\n  });\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const resolution = ctx.evaluate(condition);\n    if (resolution) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  var waitFor = async (ctx, promise) => {\n    return await promise;\n  };\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  var andandOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) && ctx.evaluate(b);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) || ctx.evaluate(b);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // eslint-disable-next-line\n    \"==\": (a, b) => a == b,\n    // eslint-disable-next-line\n    \"!=\": (a, b) => a != b,\n    \">\": (a, b) => a > b,\n    \">=\": (a, b) => a >= b,\n    \"<\": (a, b) => a < b,\n    \"<=\": (a, b) => a <= b,\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    \"!==\": (a, b) => a !== b,\n    \"===\": (a, b) => a === b,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": (a) => !a\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(\n          Object.entries(DEFAULT_BINARY_OPERATORS)\n        ),\n        unary: new Map(\n          Object.entries(DEFAULT_UNARY_OPERATORS)\n        ),\n        expressions: new Map([\n          ...Object.entries(evaluator_functions_exports),\n          [\"await\", waitFor]\n        ])\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n        if (options.async) {\n          return this._resolveNodeAsync(\n            result,\n            node,\n            options\n          );\n        }\n        return this._resolveNode(result, node, options);\n      });\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    evaluateAsync(expr, options) {\n      return this.evaluate(expr, { ...options, async: true });\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        const [, matched] = Array.from(matches);\n        if (matched) {\n          matchedExp = matched;\n        }\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            return operator(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right)\n            );\n          }\n          return operator(resolveNode(node.left), resolveNode(node.right));\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            return operator(\n              expressionContext,\n              operator.resolveParams === false ? node.argument : resolveNode(node.argument)\n            );\n          }\n          return operator(resolveNode(node.argument));\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        const { attributes } = node;\n        const resolvedAttributes = {};\n        attributes.forEach((attr) => {\n          const key = resolveNode(attr.key);\n          const value = resolveNode(attr.value);\n          resolvedAttributes[key] = value;\n        });\n        return resolvedAttributes;\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const result = resolveNode(node.test) ? node.consequent : node.alternate;\n        return resolveNode(result);\n      }\n      if (node.type === \"ArrayExpression\") {\n        return node.elements.map((ele) => resolveNode(ele));\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              newValue = operation(\n                expressionContext,\n                resolveNode(node.left),\n                resolveNode(node.right)\n              );\n            }\n          } else {\n            newValue = operation(resolveNode(node.left), resolveNode(node.right));\n          }\n          if (node.left.type === \"ModelRef\") {\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n    async _resolveNodeAsync(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            return operator(\n              expressionContext,\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n          return operator(\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            return operator(\n              expressionContext,\n              operator.resolveParams === false ? node.argument : await resolveNode(node.argument)\n            );\n          }\n          return operator(await resolveNode(node.argument));\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        const { attributes } = node;\n        const resolvedAttributes = {};\n        await Promise.all(\n          attributes.map(async (attr) => {\n            const key = await resolveNode(attr.key);\n            const value = await resolveNode(attr.value);\n            resolvedAttributes[key] = value;\n          })\n        );\n        return resolvedAttributes;\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = await Promise.all(\n          node.args.map(async (n) => await resolveNode(n))\n        );\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = await resolveNode(node.object);\n        const prop = await resolveNode(node.property);\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = await resolveNode(node.right);\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = await resolveNode(node.right);\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const result = await resolveNode(node.test) ? node.consequent : node.alternate;\n        return resolveNode(result);\n      }\n      if (node.type === \"ArrayExpression\") {\n        return Promise.all(\n          node.elements.map(async (ele) => await resolveNode(ele))\n        );\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              newValue = operation(\n                expressionContext,\n                await resolveNode(node.left),\n                await resolveNode(node.right)\n              );\n            }\n          } else {\n            newValue = operation(\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n          if (node.left.type === \"ModelRef\") {\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n      return this._resolveNode(_currentValue, node, options);\n    }\n  };\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n  var EMPTY_NODE = {\n    type: \"empty\"\n    /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(\n        value,\n        \"view\"\n        /* View */\n      );\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\", options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\",\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm5.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" || node.type === \"view\") {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\") {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm4.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\"\n        /* Empty */\n      };\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.type === \"multi-node\" && partiallyResolvedParent.type === \"value\";\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\") {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      resolvedAST.parent = partiallyResolvedParent;\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" && !childNode.override) {\n              const arr = (0, import_timm4.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm4.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm4.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\") {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        resolvedAST.values = newValues;\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        onTemplatePluginCreated: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n      this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n        this.templatePlugin = templatePlugin;\n      });\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n  };\n  var Builder = class _Builder {\n    /**\n     * Creates an asset node\n     *\n     * @param value - the value to put in the asset node\n     */\n    static asset(value) {\n      return {\n        type: \"asset\",\n        value\n      };\n    }\n    static assetWrapper(value) {\n      const valueNode = _Builder.value();\n      _Builder.addChild(valueNode, \"asset\", value);\n      return valueNode;\n    }\n    /**\n     * Creates a value node\n     *\n     * @param v - The object to put in the value node\n     */\n    static value(v) {\n      return {\n        type: \"value\",\n        value: v\n      };\n    }\n    /**\n     * Creates a multiNode and associates the multiNode as the parent\n     * of all the value nodes\n     *\n     * @param values - the value, applicability or async nodes to put in the multinode\n     */\n    static multiNode(...values) {\n      const m = {\n        type: \"multi-node\",\n        override: true,\n        values\n      };\n      values.forEach((v) => {\n        v.parent = m;\n      });\n      return m;\n    }\n    /**\n     * Creates an async node\n     *\n     * @param id - the id of async node. It should be identical for each async node\n     */\n    static asyncNode(id, flatten2 = true) {\n      return {\n        id,\n        type: \"async\",\n        flatten: flatten2,\n        value: {\n          type: \"value\",\n          value: {\n            id\n          }\n        }\n      };\n    }\n    /**\n     * Adds a child node to a node\n     *\n     * @param node - The node to add a child to\n     * @param path - The path at which to add the child\n     * @param child - The child node\n     */\n    static addChild(node, path, child) {\n      child.parent = node;\n      const newChild = {\n        path: Array.isArray(path) ? path : [path],\n        value: child\n      };\n      node.children = node.children || [];\n      node.children.push(newChild);\n      return node;\n    }\n    /**\n     * Updates children of a node of the same path and preserves order\n     *\n     * @param node - The node to update children for\n     * @param pathToMatch - The path to match against child paths\n     * @param mapFn - Function to transform matching children\n     */\n    static updateChildrenByPath(node, pathToMatch, updateFn) {\n      if (!node.children)\n        return node;\n      const updatedChildren = node.children.map(\n        (child) => (\n          // Check if paths match exactly\n          child.path.join() === pathToMatch.join() ? { ...child, value: updateFn(child) } : child\n        )\n      );\n      return {\n        ...node,\n        children: updatedChildren\n      };\n    }\n  };\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\", {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\",\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\") {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\") {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" || node.type === \"asset\") && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\",\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\") {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    }\n  };\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\") {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" || node.type === \"unknown\") {\n          return null;\n        }\n        if (node.type === \"value\" || node.type === \"asset\" || node.type === \"view\") {\n          let propsToSkip;\n          if (node.type === \"asset\" || node.type === \"view\") {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" && (node.parent?.parent?.type === \"asset\" || node.parent?.parent?.type === \"view\") && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\") {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\",\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\") {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\",\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\",\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\") {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\") {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\", options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\",\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\") {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\", options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer2.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\") {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm9.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(viewController) {\n      viewController.hooks.view.tap(\"asset-transform\", (view) => {\n        this.stateStore.clear();\n        view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n          let lastUpdatedNode;\n          const updateState = (node) => {\n            lastUpdatedNode = node;\n            view.update(/* @__PURE__ */ new Set());\n          };\n          const getStore = (node, stepKey) => {\n            let store;\n            const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n            const storedState = this.stateStore.get(node);\n            if (storedState) {\n              store = storedState;\n              store.removeKey(countKey);\n            } else {\n              store = new LocalStateStore(() => {\n                updateState(node);\n              });\n              this.stateStore.set(node, store);\n            }\n            return {\n              useSharedState: (key) => {\n                return store.useSharedState(key);\n              },\n              useLocalState: (initialState) => {\n                return store.getLocalStateFunction(\n                  stepKey,\n                  countKey\n                )(initialState);\n              }\n            };\n          };\n          resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n            if (node && (node.type === \"asset\" || node.type === \"view\")) {\n              const transform3 = this.registry.get(node.value);\n              if (transform3?.beforeResolve) {\n                const store = getStore(\n                  options.node ?? node,\n                  this.beforeResolveSymbol\n                );\n                return transform3.beforeResolve(node, options, store);\n              }\n            }\n            return node;\n          });\n          resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n            lastUpdatedNode = void 0;\n          });\n          resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n            if (!skip || !lastUpdatedNode) {\n              return skip;\n            }\n            const isParentOfUpdated = findUp(lastUpdatedNode, node);\n            const isChildOfUpdated = findUp(node, lastUpdatedNode);\n            return !isParentOfUpdated && !isChildOfUpdated;\n          });\n          resolver.hooks.afterResolve.tap(\n            \"asset-transform\",\n            (value, node, options) => {\n              if (node.type !== \"asset\" && node.type !== \"view\") {\n                return value;\n              }\n              const originalNode = resolver.getSourceNode(node);\n              if (!originalNode) {\n                return value;\n              }\n              const transform3 = this.registry.get(value);\n              if (transform3?.resolve) {\n                const store = getStore(originalNode, this.resolveSymbol);\n                return transform3?.resolve(value, options, store);\n              }\n              return value;\n            }\n          );\n        });\n      });\n    }\n  };\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        /** Do any processing before the `View` instance is created */\n        resolveView: new SyncWaterfallHook(),\n        // The hook right before the View starts resolving. Attach anything custom here\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.hooks.view.call(view);\n      view.update();\n    }\n  };\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n  var DefaultViewPlugin = class {\n    constructor() {\n      this.name = \"default-view-plugin\";\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (viewController) => {\n        viewController.hooks.view.tap(this.name, (view) => {\n          const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n          new AssetPlugin().apply(view);\n          new SwitchPlugin(pluginOptions).apply(view);\n          new ApplicabilityPlugin().apply(view);\n          new StringResolverPlugin().apply(view);\n          const templatePlugin = new TemplatePlugin(pluginOptions);\n          templatePlugin.apply(view);\n          view.hooks.onTemplatePluginCreated.call(templatePlugin);\n          new MultiNodePlugin().apply(view);\n        });\n      });\n    }\n  };\n  var PLAYER_VERSION = true ? \"0.10.5--canary.649.22815\" : \"__VERSION__\";\n  var COMMIT = true ? \"9f52e9693e724aaf5edc228683937f01e57101c9\" : \"__GIT_COMMIT__\";\n  var _Player = class _Player2 {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n        flowController: new SyncHook(),\n        /** The hook that updates/handles views */\n        viewController: new SyncHook(),\n        /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n        view: new SyncHook(),\n        /** Called when an expression evaluator was created */\n        expressionEvaluator: new SyncHook(),\n        /** The hook that creates and manages data */\n        dataController: new SyncHook(),\n        /** Called after the schema is created for a flow */\n        schema: new SyncHook(),\n        /** Manages validations (schema and x-field ) */\n        validationController: new SyncHook(),\n        /** Manages parsing binding */\n        bindingParser: new SyncHook(),\n        /** A that's called for state changes in the flow execution */\n        state: new SyncHook(),\n        /** A hook to access the current flow */\n        onStart: new SyncHook(),\n        /** A hook for when the flow ends either in success or failure */\n        onEnd: new SyncHook(),\n        /** Mutate the Content flow before starting */\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        new DefaultViewPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player2.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player2.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm8.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm8.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm8.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            try {\n              const result = await expressionEvaluator.evaluateAsync(exp);\n              flowController?.transition(String(result));\n            } catch (e) {\n              flowResultDeferred.reject(e);\n            }\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+async-node-plugin@0.0.0/node_modules/@player-ui/async-node-plugin/dist/index.mjs\n  var import_queue_microtask2 = __toESM(require_queue_microtask(), 1);\n  var import_timm10 = __toESM(require_timm(), 1);\n  var asyncTransform = (assetId, wrapperAssetType, asset, flatten2) => {\n    const id = \"async-\" + assetId;\n    const asyncNode = Builder.asyncNode(id, flatten2);\n    let multiNode;\n    let assetNode;\n    if (asset) {\n      assetNode = Builder.assetWrapper(asset);\n      multiNode = Builder.multiNode(assetNode, asyncNode);\n    } else {\n      multiNode = Builder.multiNode(asyncNode);\n    }\n    const wrapperAsset = Builder.asset({\n      id: wrapperAssetType + \"-\" + id,\n      type: wrapperAssetType\n    });\n    Builder.addChild(wrapperAsset, [\"values\"], multiNode);\n    return wrapperAsset;\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/chat-message/transform.ts\n  var transform2 = (asset) => {\n    const newAsset = asset.children?.[0]?.value;\n    if (!newAsset) {\n      return asyncTransform(asset.value.id, \"collection\");\n    }\n    return asyncTransform(asset.value.id, \"collection\", newAsset);\n  };\n  var chatMessageTransform = compose(\n    composeBefore(transform2)\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/plugin.ts\n  var ReferenceAssetsPlugin = class {\n    constructor() {\n      this.name = \"reference-assets-transforms\";\n    }\n    apply(player) {\n      player.registerPlugin(\n        new AssetTransformPlugin([\n          [{ type: \"action\" }, actionTransform],\n          [{ type: \"input\" }, inputTransform],\n          [{ type: \"image\" }, imageTransform],\n          [{ type: \"info\" }, infoTransform],\n          [{ type: \"choice\" }, choiceTransform],\n          [{ type: \"chat-message\" }, chatMessageTransform]\n        ])\n      );\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","import type {\n  Resolve,\n  Store,\n  BeforeTransformFunction,\n  TransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\n\nfunction composeTransforms(\n  ...args: TransformFunction<any>[]\n): TransformFunction<any>;\n\nfunction composeTransforms(\n  ...args: BeforeTransformFunction<any>[]\n): BeforeTransformFunction<any>;\n\n/**\n * More closely resembles the `compose` function you may have used. Performs\n * right-to-left function evaluation, but leveraging the common signature for\n * Transform Functions. The `options` and `store` is unchanging for each\n * transform since only `value` is returned, allowing them to safely be passed\n * into each transform.\n */\nfunction composeTransforms(\n  ...args: TransformFunction<any>[] | BeforeTransformFunction<any>[]\n): TransformFunction<any> | BeforeTransformFunction<any> {\n  const [fn, ...fns] = args.reverse();\n\n  return (asset: any, options: Resolve.NodeResolveOptions, store: Store) => {\n    const value = fn(asset, options, store);\n\n    if (!fns.length) {\n      return value;\n    }\n\n    return fns.reduce((prevValue, current) => {\n      return current(prevValue, options, store);\n    }, value);\n  };\n}\n\n/**\n * Helper function to make it easier to create transforms that need to be ran in\n * the `beforeResolve` hook. Just like `compose`, functions are evaluated from\n * right-to-left.\n */\nexport function composeBefore(\n  ...args: BeforeTransformFunction<any>[]\n): TransformFunctions {\n  return {\n    beforeResolve: composeTransforms(...args),\n  };\n}\n\n/**\n * Performs right-to-left function evaluation of each transform function. Unlike\n * other compose functions, this does not require unary arguments for all but the\n * last function. The value returned from each function will be used as the value\n * for the next function.\n */\nexport function compose(\n  ...args: Array<TransformFunction<any> | TransformFunctions>\n): TransformFunctions {\n  const beforeResolveFns: BeforeTransformFunction<any>[] = [];\n  const resolveFns: TransformFunction<any>[] = [];\n\n  for (const arg of args) {\n    if (typeof arg === \"function\") {\n      resolveFns.push(arg);\n    } else {\n      if (arg?.resolve) {\n        resolveFns.push(arg.resolve);\n      }\n\n      if (arg?.beforeResolve) {\n        beforeResolveFns.push(arg.beforeResolve);\n      }\n    }\n  }\n\n  return {\n    beforeResolve: beforeResolveFns.length\n      ? composeTransforms(...beforeResolveFns)\n      : undefined,\n    resolve: resolveFns.length ? composeTransforms(...resolveFns) : undefined,\n  };\n}\n","import type {\n  Player,\n  PlayerPlugin,\n  TransformRegistry,\n  TransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport { compose } from \"./utils\";\n\nexport * from \"./utils\";\nexport * from \"./propertiesToSkip\";\n\nexport type TransformType = TransformFunction<any> | TransformFunctions;\nexport type TransformRegistryEntries = Array<[any, TransformType]>;\nexport type AssetTransformInit =\n  | Registry<TransformType>\n  | TransformRegistryEntries;\n\n/**\n * Normalize asset transform values so that they are all objects that contains\n * the resolve & beforeResolve functions.\n */\nfunction maybeCompose(maybeFn: any): TransformFunctions {\n  if (typeof maybeFn === \"object\") {\n    return maybeFn;\n  }\n\n  return compose(maybeFn);\n}\n\n/**\n * Standardize each variation of Asset Registry input into the same transform\n * registry shape.\n */\nfunction cleanupTransformRegistry(\n  maybeRegistry: AssetTransformInit,\n): TransformRegistry {\n  if (Array.isArray(maybeRegistry)) {\n    const wrappedTransforms = maybeRegistry.map(([key, value]) => {\n      return [key, maybeCompose(value)] as [any, TransformFunctions];\n    });\n\n    return new Registry(wrappedTransforms);\n  }\n\n  const registry = new Registry<TransformFunctions>();\n\n  maybeRegistry.forEach(({ key, value }) => {\n    registry.set(key, maybeCompose(value));\n  });\n\n  return registry;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport class AssetTransformPlugin implements PlayerPlugin {\n  name = \"asset-transform\";\n  public readonly registry: TransformRegistry;\n\n  constructor(transforms: AssetTransformInit) {\n    this.registry = cleanupTransformRegistry(transforms);\n  }\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (vc) => {\n      this.registry.forEach(({ key, value }) =>\n        vc.transformRegistry.set(key, maybeCompose(value)),\n      );\n    });\n  }\n}\n","import type {\n  Asset,\n  TransformFunction,\n  BeforeTransformFunction,\n} from \"@player-ui/player\";\nimport { compose, composeBefore } from \"@player-ui/asset-transform-plugin\";\nimport type { ActionAsset, TransformedAction } from \"./types\";\n\n/**\n * Function to find prev button\n */\nexport function isBackAction(action: ActionAsset): boolean {\n  return action.value === \"Prev\";\n}\n\n/**\n * Attaches the methods to execute an action to an action\n */\nconst transform: TransformFunction<ActionAsset, TransformedAction> = (\n  action,\n  options,\n) => {\n  return {\n    ...action,\n    run() {\n      if (action.exp) {\n        options.evaluate(action.exp);\n      }\n\n      if (action.value) {\n        const skipValidation = action.metaData?.skipValidation;\n        options.transition?.(action.value, { force: skipValidation });\n      }\n    },\n  };\n};\n\n/**\n * De couples back button from the back icon\n */\nconst backIconTransform: TransformFunction<ActionAsset, ActionAsset> = (\n  action,\n) => {\n  /** For previous versions of player, the back button would already have the back icon.\n   *  This ensures that the old functionality does not break and back button is still visible when they update the player.\n   */\n  if (isBackAction(action) && action?.metaData?.role === undefined) {\n    return {\n      ...action,\n      metaData: {\n        ...action?.metaData,\n        role: \"back\",\n      },\n    };\n  }\n\n  return action;\n};\n\n/**\n * Appends `exp` to the plugins.stringResolver.propertiesToSkip array or creates it if it doesn't exist\n *\n * @param asset - Asset to apply the transform to\n */\nexport const expPropTransform: BeforeTransformFunction<Asset> = (asset) => {\n  const skipArray = asset.plugins?.stringResolver?.propertiesToSkip;\n\n  if (skipArray && skipArray.indexOf(\"exp\") > 1) {\n    return asset;\n  }\n\n  return {\n    ...asset,\n    plugins: {\n      ...asset.plugins,\n      stringResolver: {\n        ...asset?.plugins?.stringResolver,\n        propertiesToSkip: [\n          ...(asset.plugins?.stringResolver?.propertiesToSkip ?? []),\n          \"exp\",\n        ],\n      },\n    },\n  };\n};\n\nexport const actionTransform = compose(\n  transform,\n  backIconTransform,\n  composeBefore(expPropTransform),\n);\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/index.ts\nexport * from \"@player-ui/types\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError as NestedError2 } from \"ts-nested-error\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts\nvar toValue = (value) => ({\n  name: \"Value\",\n  value\n});\nvar toExpression = (value) => ({\n  name: \"Expression\",\n  value\n});\nvar toPath = (path) => ({\n  name: \"PathNode\",\n  path\n});\nvar toQuery = (key, value) => ({\n  name: \"Query\",\n  key,\n  value\n});\nvar toConcatenatedNode = (values) => {\n  if (values.length === 1) {\n    return values[0];\n  }\n  return {\n    name: \"Concatenated\",\n    value: values\n  };\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts\nvar SEGMENT_SEPARATOR = \".\";\nvar OPEN_CURL = \"{\";\nvar CLOSE_CURL = \"}\";\nvar OPEN_BRACKET = \"[\";\nvar CLOSE_BRACKET = \"]\";\nvar EQUALS = \"=\";\nvar SINGLE_QUOTE = \"'\";\nvar DOUBLE_QUOTE = '\"';\nvar BACK_TICK = \"`\";\nvar isIdentifierChar = (char) => {\n  if (!char) {\n    return false;\n  }\n  const charCode = char.charCodeAt(0);\n  const matches = charCode === 32 || // ' '\n  charCode === 34 || // \"\n  charCode === 39 || // '\n  charCode === 40 || // (\n  charCode === 41 || // )\n  charCode === 42 || // *\n  charCode === 46 || // .\n  charCode === 61 || // =\n  charCode === 91 || // [\n  charCode === 93 || // ]\n  charCode === 96 || // `\n  charCode === 123 || // {\n  charCode === 125;\n  return !matches;\n};\nvar parse = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n  const next = (expected) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n  const whitespace = () => {\n    while (ch === \" \") {\n      next();\n    }\n  };\n  const identifier = () => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n    let value = ch;\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n      value += ch;\n    }\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n  const expression = () => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n      let exp = ch;\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n        exp += ch;\n      }\n      next(BACK_TICK);\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n  const regex = (match) => {\n    if (!ch?.match(match)) {\n      return;\n    }\n    let value = ch;\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n      value += ch;\n    }\n    if (value) {\n      return toValue(value);\n    }\n  };\n  const nestedPath = () => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n  const segment = () => {\n    const segments = [];\n    let nextSegment = simpleSegment();\n    while (nextSegment !== void 0) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n    if (segments.length === 0) {\n      return void 0;\n    }\n    return toConcatenatedNode(segments);\n  };\n  const optionallyQuotedSegment = () => {\n    whitespace();\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n    return simpleSegment();\n  };\n  const equals = () => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n    while (ch === EQUALS) {\n      next();\n    }\n    return true;\n  };\n  const parseBracket = () => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value = optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n      return value;\n    }\n  };\n  const parseSegmentAndBrackets = () => {\n    const parsed = [];\n    const firstSegment = segment();\n    if (firstSegment) {\n      parsed.push(firstSegment);\n      let bracketSegment = parseBracket();\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n      }\n      while (bracketSegment !== void 0) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n    return parsed;\n  };\n  const parsePath = () => {\n    const parts = [];\n    let nextSegment = parseSegmentAndBrackets();\n    while (nextSegment !== void 0) {\n      parts.push(...nextSegment);\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n    return toPath(parts);\n  };\n  try {\n    const result = parsePath();\n    return {\n      status: true,\n      path: result\n    };\n  } catch (e) {\n    return {\n      status: false,\n      error: e.message\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts\nfunction isBinding(binding) {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\nfunction maybeConvertToNum(i) {\n  const asInt = parseInt(i, 10);\n  if (isNaN(asInt)) {\n    return i;\n  }\n  return asInt;\n}\nfunction getBindingSegments(binding) {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n  return binding.asArray();\n}\nfunction findInArray(array, key, value) {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      return obj[key] == value;\n    }\n    return false;\n  });\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts\nvar BindingInstance = class _BindingInstance {\n  constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n      const tryNum = Number(segment);\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n  asArray() {\n    return this.split;\n  }\n  asString() {\n    return this.joined;\n  }\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding) {\n    const bindingAsArray = binding.asArray();\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  relative(binding) {\n    return this.asArray().slice(binding.asArray().length);\n  }\n  parent() {\n    return this.factory(this.split.slice(0, -1));\n  }\n  key() {\n    return this.split[this.split.length - 1];\n  }\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative) {\n    const descendentSegments = getBindingSegments(relative);\n    return this.factory(this.split.concat(descendentSegments));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts\nimport { NestedError } from \"ts-nested-error\";\nfunction resolveBindingAST(bindingPathNode, options, hooks) {\n  const context = {\n    updates: {},\n    path: []\n  };\n  function getValueForNode(node) {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates\n        };\n      }\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path)\n        );\n      } catch (e) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e\n        );\n      }\n    }\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n        return options.convertToPath(actualValue);\n      } catch (e) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n  function appendPathSegments(segment) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n  function resolveNode(_node) {\n    const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n      case \"Query\": {\n        const objToQuery = options.getValue(context.path) ?? [];\n        const { key, value } = resolvedNode;\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n        if (index === void 0 || index === -1) {\n          context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n        break;\n      }\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n      default:\n        throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n    }\n  }\n  bindingPathNode.path.forEach(resolveNode);\n  return {\n    path: context.path,\n    updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n  };\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts\nvar SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nvar BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nvar LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\nvar DEFAULT_OPTIONS = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  }\n};\nvar BindingParser = class {\n  constructor(options) {\n    this.hooks = {\n      skipOptimization: new SyncBailHook(),\n      beforeResolveNode: new SyncWaterfallHook()\n    };\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  normalizePath(path, resolveOptions) {\n    if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n      return { path: path.split(\".\"), updates: void 0 };\n    }\n    const ast = this.parseCache[path] ?? parse(path);\n    this.parseCache[path] = ast;\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n      );\n    }\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e) {\n      throw new NestedError2(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n  getBindingForNormalizedResult(normalized) {\n    const normalizedStr = normalized.path.join(\".\");\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse\n    );\n    this.cache[normalizedStr] = created;\n    return created;\n  }\n  parse(rawBinding, overrides = {}) {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n    const options = {\n      ...this.parserOptions,\n      ...overrides\n    };\n    let updates = {};\n    const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n    const normalizeConfig = {\n      getValue: (path) => {\n        const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n        return options.get(this.getBindingForNormalizedResult(normalized2));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path) => {\n        if (path === void 0) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\"\n          );\n        }\n        if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`\n          );\n        }\n        const normalized2 = this.normalizePath(String(path), normalizeConfig);\n        if (normalized2.updates) {\n          updates = {\n            ...updates,\n            ...normalized2.updates\n          };\n        }\n        const joinedNormalizedPath = normalized2.path.join(\".\");\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n        return joinedNormalizedPath;\n      }\n    };\n    const normalized = this.normalizePath(joined, normalizeConfig);\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates\n      };\n    }\n    const updateKeys = Object.keys(updates);\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding]\n        ]\n      );\n      options.set(updateTransaction);\n    }\n    return this.getBindingForNormalizedResult(normalized);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts\nvar DependencyTracker = class {\n  constructor() {\n    this.readDeps = /* @__PURE__ */ new Set();\n    this.writeDeps = /* @__PURE__ */ new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n  createSubset(name, force = false) {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: /* @__PURE__ */ new Set(),\n        writeDeps: /* @__PURE__ */ new Set()\n      };\n    }\n  }\n  /** Grab all of the bindings that this depended on */\n  getDependencies(name) {\n    if (name !== void 0) {\n      return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n    }\n    return this.readDeps;\n  }\n  trackSubset(name) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n  trackDefault() {\n    this.namedSet = \"core\";\n  }\n  /** Grab all of the bindings this wrote to */\n  getModified(name) {\n    if (name !== void 0) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n    }\n    return this.writeDeps;\n  }\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  readsBinding(binding) {\n    return this.readDeps.has(binding);\n  }\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  writesBinding(binding) {\n    return this.writeDeps.has(binding);\n  }\n  /** Reset all tracking of dependencies */\n  reset() {\n    this.readDeps = /* @__PURE__ */ new Set();\n    this.writeDeps = /* @__PURE__ */ new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n  addReadDep(binding, namedSet = this.namedSet) {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n    this.readDeps.add(binding);\n  }\n  addWriteDep(binding, namedSet = this.namedSet) {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n    this.writeDeps.add(binding);\n  }\n  addChildReadDep(binding) {\n    this.addReadDep(binding, \"children\");\n  }\n};\nvar DependencyMiddleware = class extends DependencyTracker {\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n  set(transaction, options, next) {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n    return next?.set(transaction, options) ?? [];\n  }\n  get(binding, options, next) {\n    this.addReadDep(binding);\n    return next?.get(binding, options);\n  }\n  delete(binding, options, next) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n};\nvar DependencyModel = class extends DependencyTracker {\n  constructor(rootModel) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n  set(transaction, options) {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n    return this.rootModel.set(transaction, options);\n  }\n  get(binding, options) {\n    this.addReadDep(binding);\n    return this.rootModel.get(binding, options);\n  }\n  delete(binding, options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts\nimport { SyncHook } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts\nvar NOOPDataModel = class {\n  get() {\n    return void 0;\n  }\n  set() {\n    return [];\n  }\n  delete() {\n  }\n};\nvar NOOP_MODEL = new NOOPDataModel();\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts\nvar ROOT_BINDING = new BindingInstance([]);\nfunction withParser(model, parseBinding) {\n  function maybeParse(binding, readOnly) {\n    const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n      get: model.get,\n      set: model.set,\n      readOnly\n    });\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n    return parsed;\n  }\n  return {\n    get(binding, options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options\n      );\n    },\n    delete(binding, options) {\n      return model.delete(maybeParse(binding, false), options);\n    }\n  };\n}\nfunction toModel(middleware, defaultOptions, next) {\n  if (!next) {\n    return middleware;\n  }\n  return {\n    get: (binding, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding, options) => {\n      const resolvedOptions = options ?? defaultOptions;\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n      return next?.delete(binding, resolvedOptions);\n    }\n  };\n}\nfunction constructModelForPipeline(pipeline) {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n  function createModelWithOptions(options) {\n    const model = pipeline.reduce(\n      (nextModel, middleware) => toModel(middleware, options, nextModel),\n      void 0\n    ) ?? NOOP_MODEL;\n    return model;\n  }\n  return {\n    get: (binding, options) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    }\n  };\n}\nvar PipelinedDataModel = class {\n  constructor(pipeline = []) {\n    this.hooks = {\n      onSet: new SyncHook()\n    };\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n  setMiddleware(handlers) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n  addMiddleware(handler) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n  reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n    this.set([[ROOT_BINDING, model]]);\n  }\n  set(transaction, options) {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n  get(binding, options) {\n    return this.effectiveDataModel.get(binding, options);\n  }\n  delete(binding, options) {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts\nimport get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nvar LocalModel = class {\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n  reset(model = {}) {\n    this.model = model;\n  }\n  get(binding) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n    return get(this.model, binding.asArray());\n  }\n  set(transaction) {\n    const effectiveOperations = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value);\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n  delete(binding) {\n    const parentBinding = binding.parent();\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n      if (parentValue !== void 0) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key())\n          );\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key())\n          );\n        }\n      }\n    }\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\nimport { SyncWaterfallHook as SyncWaterfallHook2, SyncBailHook as SyncBailHook2 } from \"tapable-ts\";\nimport { NestedError as NestedError3 } from \"ts-nested-error\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts\nvar ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\nfunction isExpressionNode(x) {\n  return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts\nvar PERIOD_CODE = 46;\nvar COMMA_CODE = 44;\nvar SQUOTE_CODE = 39;\nvar DQUOTE_CODE = 34;\nvar OPAREN_CODE = 40;\nvar CPAREN_CODE = 41;\nvar OBRACK_CODE = 91;\nvar CBRACK_CODE = 93;\nvar QUMARK_CODE = 63;\nvar SEMCOL_CODE = 59;\nvar COLON_CODE = 58;\nvar OCURL_CODE = 123;\nvar CCURL_CODE = 125;\nvar t = true;\nvar unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\nvar binaryOps = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14\n};\nfunction throwError(message, index) {\n  const err = new Error(`${message} at character ${index}`);\n  err.index = index;\n  err.description = message;\n  throw err;\n}\nfunction createSpanningLocation(start, end) {\n  if (!start || !end) {\n    return;\n  }\n  return {\n    start: start.start,\n    end: end.end\n  };\n}\nfunction getMaxKeyLen(obj) {\n  let maxLen = 0;\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n  return maxLen;\n}\nvar maxUnopLen = getMaxKeyLen(unaryOps);\nvar maxBinopLen = getMaxKeyLen(binaryOps);\nvar literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined: void 0\n};\nvar thisStr = \"this\";\nfunction binaryPrecedence(opVal) {\n  return binaryOps[opVal] || 0;\n}\nfunction createBinaryExpression(operator, left, right, location) {\n  let type;\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location\n  };\n}\nfunction isDecimalDigit(ch) {\n  return ch >= 48 && ch <= 57;\n}\nfunction isIdentifierStart(ch) {\n  return ch === 36 || ch === 95 || // `$` and `_`\n  ch >= 65 && ch <= 90 || // A...Z\n  ch >= 97 && ch <= 122;\n}\nfunction isIdentifierPart(ch) {\n  return ch === 36 || ch === 95 || // `$` and `_`\n  ch >= 65 && ch <= 90 || // A...Z\n  ch >= 97 && ch <= 122 || // A...z\n  ch >= 48 && ch <= 57;\n}\nfunction isModelRefStart(ch0, ch1) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n}\nfunction parseExpression(expr, options) {\n  const strictMode = options?.strict ?? true;\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n  let index = 0;\n  const getLocation = (startChar) => {\n    return {\n      start: {\n        character: startChar\n      },\n      end: {\n        character: index\n      }\n    };\n  };\n  function exprI(i) {\n    return charAtFunc.call(expr, i);\n  }\n  function exprICode(i) {\n    return charCodeAtFunc.call(expr, i);\n  }\n  function gobbleObjects() {\n    const attributes = [];\n    let closed = false;\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n    ++index;\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      if (chCode === CCURL_CODE) {\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n        key = gobbleStringLiteral();\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n        shouldDefineKey = true;\n        key = void 0;\n        value = void 0;\n      }\n      chCode = exprICode(index);\n    }\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n  function gobbleExpression() {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      index++;\n      const consequent = gobbleExpression();\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n      gobbleSpaces();\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex)\n        };\n      }\n      throwError(\"Expected :\", index);\n    }\n    return test;\n  }\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n    return false;\n  }\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n    if (!biop) {\n      return left;\n    }\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n    const stack = [left, biopInfo, right];\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n      if (prec === 0) {\n        break;\n      }\n      biopInfo = { value: biop, prec };\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location)\n        );\n        stack.push(node);\n      }\n      node = gobbleToken();\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n    i = stack.length - 1;\n    node = stack[i];\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location)\n      );\n      i -= 2;\n    }\n    return node;\n  }\n  function gobbleToken() {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      return gobbleNumericLiteral();\n    }\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      return gobbleStringLiteral();\n    }\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      return gobbleVariable();\n    }\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex)\n        };\n      }\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n    return false;\n  }\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n    if (exprICode(index) === PERIOD_CODE) {\n      num += exprI(index++);\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      num += exprI(index++);\n      ch = exprI(index);\n      if (ch === \"+\" || ch === \"-\") {\n        num += exprI(index++);\n      }\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n    const chCode = exprICode(index);\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n    while (index < length) {\n      let ch = exprI(index++);\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n      ch = exprI(index++);\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\v\";\n          break;\n        default:\n      }\n    }\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n    index += 2;\n    while (index < length) {\n      const ch = exprI(index++);\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex)\n    };\n  }\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n    const identifier = expr.slice(start, index);\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: literals[identifier],\n        raw: identifier,\n        location: getLocation(start)\n      };\n    }\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start)\n      };\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start)\n    };\n  }\n  function gobbleArguments(termination) {\n    const args = [];\n    let charIndex;\n    let node;\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      if (charIndex === termination) {\n        index++;\n        break;\n      }\n      if (charIndex === COMMA_CODE) {\n        index++;\n        continue;\n      }\n      node = gobbleExpression();\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n      args.push(node);\n    }\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n    return args;\n  }\n  function gobbleVariable() {\n    let charIndex = exprICode(index);\n    let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n    while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n      index++;\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex)\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex)\n        };\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex)\n        };\n      }\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n    return node;\n  }\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n    throwError(\"Unclosed (\", index);\n  }\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex)\n    };\n  }\n  const nodes = [];\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++;\n        continue;\n      }\n      const node = gobbleExpression();\n      if (node) {\n        nodes.push(node);\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0)\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e\n    };\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts\nvar evaluator_functions_exports = {};\n__export(evaluator_functions_exports, {\n  conditional: () => conditional,\n  deleteDataVal: () => deleteDataVal,\n  getDataVal: () => getDataVal,\n  setDataVal: () => setDataVal,\n  waitFor: () => waitFor\n});\nvar setDataVal = (_context, binding, value) => {\n  _context.model.set([[binding, value]]);\n};\nvar getDataVal = (_context, binding) => {\n  return _context.model.get(binding);\n};\nvar deleteDataVal = (_context, binding) => {\n  return _context.model.delete(binding);\n};\nvar conditional = (ctx, condition, ifTrue, ifFalse) => {\n  const resolution = ctx.evaluate(condition);\n  if (resolution) {\n    return ctx.evaluate(ifTrue);\n  }\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n  return null;\n};\nconditional.resolveParams = false;\nvar waitFor = async (ctx, promise) => {\n  return await promise;\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts\nfunction withoutContext(fn) {\n  return (_context, ...args) => fn(...args);\n}\nfunction isInRange(position, location) {\n  return position.character >= location.start.character && position.character <= location.end.character;\n}\nfunction findClosestNodeAtPosition(node, position) {\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check = findClosestNodeAtPosition(node.left, position) ?? findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n      break;\n    }\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n      break;\n    }\n    case \"MemberExpression\": {\n      const checkObject = findClosestNodeAtPosition(node.object, position) ?? findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"ConditionalExpression\": {\n      const checkObject = findClosestNodeAtPosition(node.test, position) ?? findClosestNodeAtPosition(node.consequent, position) ?? findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements = node.type === \"ArrayExpression\" ? node.elements : node.body;\n      const anyElements = elements.find(\n        (e) => findClosestNodeAtPosition(e, position)\n      );\n      if (anyElements) {\n        return anyElements;\n      }\n      break;\n    }\n    case \"Object\": {\n      const checkObject = node.attributes.reduce(\n        (found, next) => {\n          return found ?? findClosestNodeAtPosition(next.key, position) ?? findClosestNodeAtPosition(next.value, position);\n        },\n        void 0\n      );\n      if (checkObject) {\n        return checkObject;\n      }\n      break;\n    }\n    case \"CallExpression\": {\n      const anyArgs = node.args.find((arg) => {\n        return findClosestNodeAtPosition(arg, position);\n      }) ?? findClosestNodeAtPosition(node.callTarget, position);\n      if (anyArgs) {\n        return anyArgs;\n      }\n      break;\n    }\n  }\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\nfunction isObjectExpression(expr) {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n  return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n}\nfunction isErrorWithLocation(error) {\n  return error.index !== void 0 && error.description !== void 0;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts\nvar andandOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) && ctx.evaluate(b);\n};\nandandOperator.resolveParams = false;\nvar ororOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) || ctx.evaluate(b);\n};\nororOperator.resolveParams = false;\nvar DEFAULT_BINARY_OPERATORS = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a, b) => a + b,\n  \"-\": (a, b) => a - b,\n  \"*\": (a, b) => a * b,\n  \"/\": (a, b) => a / b,\n  \"%\": (a, b) => a % b,\n  // eslint-disable-next-line\n  \"==\": (a, b) => a == b,\n  // eslint-disable-next-line\n  \"!=\": (a, b) => a != b,\n  \">\": (a, b) => a > b,\n  \">=\": (a, b) => a >= b,\n  \"<\": (a, b) => a < b,\n  \"<=\": (a, b) => a <= b,\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n  \"!==\": (a, b) => a !== b,\n  \"===\": (a, b) => a === b,\n  // eslint-disable-next-line\n  \"|\": (a, b) => a | b,\n  // eslint-disable-next-line\n  \"&\": (a, b) => a & b,\n  \"+=\": (a, b) => a + b,\n  \"-=\": (a, b) => a - b,\n  // eslint-disable-next-line\n  \"&=\": (a, b) => a & b,\n  // eslint-disable-next-line\n  \"|=\": (a, b) => a | b\n};\nvar DEFAULT_UNARY_OPERATORS = {\n  \"-\": (a) => -a,\n  \"+\": (a) => Number(a),\n  \"!\": (a) => !a\n};\nvar ExpressionEvaluator = class {\n  constructor(defaultOptions) {\n    this.vars = {};\n    this.hooks = {\n      /** Resolve an AST node for an expression to a value */\n      resolve: new SyncWaterfallHook2(),\n      /** Gets the options that will be passed in calls to the resolve hook */\n      resolveOptions: new SyncWaterfallHook2(),\n      /** Allows users to change the expression to be evaluated before processing */\n      beforeEvaluate: new SyncWaterfallHook2(),\n      /**\n       * An optional means of handling an error in the expression execution\n       * Return true if handled, to stop propagation of the error\n       */\n      onError: new SyncBailHook2()\n    };\n    this.expressionsCache = /* @__PURE__ */ new Map();\n    this.operators = {\n      binary: new Map(\n        Object.entries(DEFAULT_BINARY_OPERATORS)\n      ),\n      unary: new Map(\n        Object.entries(DEFAULT_UNARY_OPERATORS)\n      ),\n      expressions: new Map([\n        ...Object.entries(evaluator_functions_exports),\n        [\"await\", waitFor]\n      ])\n    };\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n    };\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n      if (options.async) {\n        return this._resolveNodeAsync(\n          result,\n          node,\n          options\n        );\n      }\n      return this._resolveNode(result, node, options);\n    });\n    this.evaluate = this.evaluate.bind(this);\n  }\n  reset() {\n    this.expressionsCache.clear();\n  }\n  evaluate(expr, options) {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node) => this._execAST(node, resolvedOpts)\n    });\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n    if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n      return expression;\n    }\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null\n      );\n    }\n    return this._execString(String(expression), resolvedOpts);\n  }\n  evaluateAsync(expr, options) {\n    return this.evaluate(expr, { ...options, async: true });\n  }\n  addExpressionFunction(name, handler) {\n    this.operators.expressions.set(name, handler);\n  }\n  addBinaryOperator(operator, handler) {\n    this.operators.binary.set(operator, handler);\n  }\n  addUnaryOperator(operator, handler) {\n    this.operators.unary.set(operator, handler);\n  }\n  setExpressionVariable(name, value) {\n    this.vars[name] = value;\n  }\n  getExpressionVariable(name) {\n    return this.vars[name];\n  }\n  _execAST(node, options) {\n    return this.hooks.resolve.call(void 0, node, options);\n  }\n  _execString(exp, options) {\n    if (exp === \"\") {\n      return exp;\n    }\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n    if (matches) {\n      const [, matched] = Array.from(matches);\n      if (matched) {\n        matchedExp = matched;\n      }\n    }\n    let storedAST;\n    try {\n      storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        throw new NestedError3(`Error parsing expression: ${exp}`, e);\n      }\n      return;\n    }\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        throw new NestedError3(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n  _resolveNode(_currentValue, node, options) {\n    const { resolveNode, model } = options;\n    const expressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options)\n    };\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n          return operator(\n            expressionContext,\n            resolveNode(node.left),\n            resolveNode(node.right)\n          );\n        }\n        return operator(resolveNode(node.left), resolveNode(node.right));\n      }\n      return;\n    }\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          return operator(\n            expressionContext,\n            operator.resolveParams === false ? node.argument : resolveNode(node.argument)\n          );\n        }\n        return operator(resolveNode(node.argument));\n      }\n      return;\n    }\n    if (node.type === \"Object\") {\n      const { attributes } = node;\n      const resolvedAttributes = {};\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        resolvedAttributes[key] = value;\n      });\n      return resolvedAttributes;\n    }\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n      const operator = this.operators.expressions.get(expressionName);\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n      const args = node.args.map((n) => resolveNode(n));\n      return operator(expressionContext, ...args);\n    }\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n      return obj[prop];\n    }\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n        model.set([[node.left.ref, value]]);\n        return value;\n      }\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n        this.vars[node.left.name] = value;\n        return value;\n      }\n      return;\n    }\n    if (node.type === \"ConditionalExpression\") {\n      const result = resolveNode(node.test) ? node.consequent : node.alternate;\n      return resolveNode(result);\n    }\n    if (node.type === \"ArrayExpression\") {\n      return node.elements.map((ele) => resolveNode(ele));\n    }\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n      if (operation) {\n        let newValue;\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            newValue = operation(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right)\n            );\n          }\n        } else {\n          newValue = operation(resolveNode(node.left), resolveNode(node.right));\n        }\n        if (node.left.type === \"ModelRef\") {\n          model.set([[node.left.ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          this.vars[node.left.name] = newValue;\n        }\n        return newValue;\n      }\n      return resolveNode(node.left);\n    }\n  }\n  async _resolveNodeAsync(_currentValue, node, options) {\n    const { resolveNode, model } = options;\n    const expressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options)\n    };\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n          return operator(\n            expressionContext,\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        return operator(\n          await resolveNode(node.left),\n          await resolveNode(node.right)\n        );\n      }\n      return;\n    }\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          return operator(\n            expressionContext,\n            operator.resolveParams === false ? node.argument : await resolveNode(node.argument)\n          );\n        }\n        return operator(await resolveNode(node.argument));\n      }\n      return;\n    }\n    if (node.type === \"Object\") {\n      const { attributes } = node;\n      const resolvedAttributes = {};\n      await Promise.all(\n        attributes.map(async (attr) => {\n          const key = await resolveNode(attr.key);\n          const value = await resolveNode(attr.value);\n          resolvedAttributes[key] = value;\n        })\n      );\n      return resolvedAttributes;\n    }\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n      const operator = this.operators.expressions.get(expressionName);\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n      const args = await Promise.all(\n        node.args.map(async (n) => await resolveNode(n))\n      );\n      return operator(expressionContext, ...args);\n    }\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n    if (node.type === \"MemberExpression\") {\n      const obj = await resolveNode(node.object);\n      const prop = await resolveNode(node.property);\n      return obj[prop];\n    }\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = await resolveNode(node.right);\n        model.set([[node.left.ref, value]]);\n        return value;\n      }\n      if (node.left.type === \"Identifier\") {\n        const value = await resolveNode(node.right);\n        this.vars[node.left.name] = value;\n        return value;\n      }\n      return;\n    }\n    if (node.type === \"ConditionalExpression\") {\n      const result = await resolveNode(node.test) ? node.consequent : node.alternate;\n      return resolveNode(result);\n    }\n    if (node.type === \"ArrayExpression\") {\n      return Promise.all(\n        node.elements.map(async (ele) => await resolveNode(ele))\n      );\n    }\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n      if (operation) {\n        let newValue;\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            newValue = operation(\n              expressionContext,\n              await resolveNode(node.left),\n              await resolveNode(node.right)\n            );\n          }\n        } else {\n          newValue = operation(\n            await resolveNode(node.left),\n            await resolveNode(node.right)\n          );\n        }\n        if (node.left.type === \"ModelRef\") {\n          model.set([[node.left.ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          this.vars[node.left.name] = newValue;\n        }\n        return newValue;\n      }\n      return resolveNode(node.left);\n    }\n    return this._resolveNode(_currentValue, node, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/types.ts\nvar severities = [\"trace\", \"debug\", \"info\", \"warn\", \"error\"];\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/consoleLogger.ts\nvar ConsoleLogger = class {\n  constructor(severity = \"warn\", _console = console) {\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n    this.severity = severity;\n    this._console = _console;\n  }\n  setSeverity(severity) {\n    this.severity = severity;\n  }\n  getConsoleFn(severity) {\n    switch (severities.indexOf(severity)) {\n      case 0:\n      case 1:\n      case 2:\n        return this._console.log;\n      case 3:\n        return this._console.warn;\n      default:\n        return this._console.error;\n    }\n  }\n  createHandler(severity) {\n    return (...args) => {\n      const sevIndex = severities.indexOf(severity);\n      const sevConf = severities.indexOf(this.severity);\n      if (sevIndex >= sevConf) {\n        this.getConsoleFn(severity)(`player - ${severity} -`, ...args);\n      }\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/noopLogger.ts\nvar noop = () => {\n};\nvar NoopLogger = class {\n  constructor() {\n    this.trace = noop;\n    this.debug = noop;\n    this.info = noop;\n    this.warn = noop;\n    this.error = noop;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts\nimport { SyncHook as SyncHook2 } from \"tapable-ts\";\nvar TapableLogger = class {\n  constructor() {\n    this.hooks = {\n      trace: new SyncHook2(),\n      debug: new SyncHook2(),\n      info: new SyncHook2(),\n      warn: new SyncHook2(),\n      error: new SyncHook2(),\n      log: new SyncHook2()\n    };\n    this.logHandlers = /* @__PURE__ */ new Set();\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n  }\n  createHandler(severity) {\n    return (...args) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n  addHandler(logHandler) {\n    this.logHandlers.add(logHandler);\n  }\n  removeHandler(logHandler) {\n    this.logHandlers.delete(logHandler);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts\nvar ProxyLogger = class {\n  constructor(loggerProvider) {\n    this.trace = this.createHandler(\"trace\");\n    this.debug = this.createHandler(\"debug\");\n    this.info = this.createHandler(\"info\");\n    this.warn = this.createHandler(\"warn\");\n    this.error = this.createHandler(\"error\");\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n  createHandler(severity) {\n    return (...args) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts\nimport { SyncWaterfallHook as SyncWaterfallHook3 } from \"tapable-ts\";\nvar identify = (val) => val;\nfunction parse2(schema) {\n  const expandedPaths = /* @__PURE__ */ new Map();\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n  const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n    if (!next) {\n      break;\n    }\n    const { node, path, visited } = next;\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n      const nestedPathStr = nestedPath.join(\".\");\n      if (expandedPaths.has(nestedPathStr)) {\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\"\n        );\n      }\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n        );\n      }\n      expandedPaths.set(nestedPathStr, type);\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: /* @__PURE__ */ new Set([...visited, type.type])\n        });\n      }\n    });\n  }\n  return expandedPaths;\n}\nvar SchemaController = class {\n  constructor(schema) {\n    this.formatters = /* @__PURE__ */ new Map();\n    this.types = /* @__PURE__ */ new Map();\n    this.schema = /* @__PURE__ */ new Map();\n    this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n    this.hooks = {\n      resolveTypeForBinding: new SyncWaterfallHook3()\n    };\n    this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n  }\n  addFormatters(fns) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n  addDataTypes(types) {\n    types.forEach((t2) => {\n      this.types.set(t2.type, t2);\n    });\n  }\n  getValidationsForBinding(binding) {\n    const typeDef = this.getApparentType(binding);\n    if (!typeDef?.validation?.length) {\n      return void 0;\n    }\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef\n    }));\n  }\n  normalizeBinding(binding) {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n    return normalized;\n  }\n  getType(binding) {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding\n    );\n  }\n  getApparentType(binding) {\n    const schemaType = this.getType(binding);\n    if (schemaType === void 0) {\n      return void 0;\n    }\n    const baseType = this.getTypeDefinition(schemaType?.type);\n    if (baseType === void 0) {\n      return schemaType;\n    }\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...schemaType.validation ?? [],\n        ...baseType.validation ?? []\n      ]\n    };\n  }\n  getTypeDefinition(dataType) {\n    return this.types.get(dataType);\n  }\n  getFormatterForType(formatReference) {\n    const { type: formatType, ...options } = formatReference;\n    const formatter = this.formatters.get(formatType);\n    if (!formatter) {\n      return;\n    }\n    return {\n      format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n      deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n    };\n  }\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  getFormatter(binding) {\n    const type = this.getApparentType(binding);\n    if (!type?.format) {\n      return void 0;\n    }\n    return this.getFormatterForType(type.format);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts\nimport { setIn as setIn2 } from \"timm\";\nvar DOUBLE_OPEN_CURLY = \"{{\";\nvar DOUBLE_CLOSE_CURLY = \"}}\";\nfunction findNextExp(str) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n  if (expStart === -1) {\n    return void 0;\n  }\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n  while (count > 0 && workingString.length > 0) {\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n    if (nextCloseCurly === -1) {\n      break;\n    }\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n  return {\n    start: expStart,\n    end: offset\n  };\n}\nfunction resolveExpressionsInString(val, { evaluate }) {\n  if (!evaluate) {\n    return val;\n  }\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length\n    );\n    const expValue = evaluate(expString);\n    if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n      return expValue;\n    }\n    newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n    match = newVal.match(expMatch);\n  }\n  return newVal;\n}\nfunction resolveDataRefsInString(val, options) {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n  if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n    return workingString;\n  }\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n    if (!expLocation) {\n      return workingString;\n    }\n    const { start, end } = expLocation;\n    const binding = workingString.substring(\n      start + DOUBLE_OPEN_CURLY.length,\n      end - DOUBLE_OPEN_CURLY.length\n    ).trim();\n    const evaledVal = model.get(binding, { formatted });\n    if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n      return evaledVal;\n    }\n    workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n  return workingString;\n}\nfunction traverseObject(val, options) {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val, options);\n    }\n    case \"object\": {\n      if (!val)\n        return val;\n      const keys = Object.keys(val);\n      let newVal = val;\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn2(\n            newVal,\n            [key],\n            traverseObject(val[key], options)\n          );\n        });\n      }\n      return newVal;\n    }\n    default:\n      return val;\n  }\n}\nfunction resolveDataRefs(val, options) {\n  return traverseObject(val, options);\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\nimport { setIn as setIn3 } from \"timm\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts\nfunction removeBindingAndChildrenFromMap(sourceMap, binding) {\n  const targetMap = new Map(sourceMap);\n  const parentBinding = binding.parent();\n  const property = binding.key();\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n  if (typeof property === \"number\") {\n    const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n      if (parentBinding.contains(b)) {\n        const [childIndex] = b.relative(parentBinding);\n        return typeof childIndex === \"number\" && childIndex > property;\n      }\n      return false;\n    }).sort();\n    bindingsToRewrite.forEach((trackedBinding) => {\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n  return targetMap;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts\nvar ValidationMiddleware = class {\n  constructor(validator, options) {\n    this.validator = validator;\n    this.shadowModelPaths = /* @__PURE__ */ new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n  set(transaction, options, next) {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction = [];\n    const includedBindings = /* @__PURE__ */ new Set();\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n    const invalidBindings = [];\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n      if (validations === void 0) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n        );\n      }\n    });\n    let validResults = [];\n    if (next && nextTransaction.length > 0) {\n      nextTransaction.forEach(\n        ([binding]) => this.shadowModelPaths.delete(binding)\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n      validResults = result;\n    }\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true\n      };\n    });\n    return [...validResults, ...invalidResults];\n  }\n  get(binding, options, next) {\n    let val = next?.get(binding, options);\n    if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n          return;\n        }\n        if (binding.contains(shadowBinding)) {\n          val = setIn3(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n    return val;\n  }\n  delete(binding, options, next) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding\n    );\n    return next?.delete(binding, options);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts\nvar ValidatorRegistry = class {\n  constructor() {\n    this.registry = /* @__PURE__ */ new Map();\n  }\n  /** Use the given validator name to fetch the handler */\n  get(name) {\n    return this.registry.get(name);\n  }\n  /** Register a new validator */\n  register(name, handler) {\n    this.registry.set(name, handler);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts\nimport { SyncHook as SyncHook4 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\nimport { SyncWaterfallHook as SyncWaterfallHook5, SyncHook as SyncHook3 } from \"tapable-ts\";\nimport { setIn as setIn5, addLast, clone } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\nimport { setIn as setIn4 } from \"timm\";\nimport { SyncBailHook as SyncBailHook3, SyncWaterfallHook as SyncWaterfallHook4 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/types.ts\nvar NodeType = /* @__PURE__ */ ((NodeType2) => {\n  NodeType2[\"Asset\"] = \"asset\";\n  NodeType2[\"View\"] = \"view\";\n  NodeType2[\"Applicability\"] = \"applicability\";\n  NodeType2[\"Template\"] = \"template\";\n  NodeType2[\"Value\"] = \"value\";\n  NodeType2[\"MultiNode\"] = \"multi-node\";\n  NodeType2[\"Switch\"] = \"switch\";\n  NodeType2[\"Async\"] = \"async\";\n  NodeType2[\"Unknown\"] = \"unknown\";\n  NodeType2[\"Empty\"] = \"empty\";\n  return NodeType2;\n})(NodeType || {});\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts\nfunction hasTemplateValues(obj, localKey) {\n  return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n}\nfunction hasSwitchKey(localKey) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\nfunction hasTemplateKey(localKey) {\n  return localKey === \"template\";\n}\nfunction getNodeID(node) {\n  if (!node) {\n    return;\n  }\n  if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n    return node.value.id;\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts\nvar EMPTY_NODE = {\n  type: \"empty\" /* Empty */\n};\nvar Parser = class {\n  constructor() {\n    this.hooks = {\n      /**\n       * A hook to interact with an object _before_ parsing it into an AST\n       *\n       * @param value - The object we're are about to parse\n       * @returns - A new value to parse.\n       *  If undefined, the original value is used.\n       *  If null, we stop parsing this node.\n       */\n      onParseObject: new SyncWaterfallHook4(),\n      /**\n       * A callback to interact with an AST _after_ we parse it into the AST\n       *\n       * @param value - The object we parsed\n       * @param node - The AST node we generated\n       * @returns - A new AST node to use\n       *   If undefined, the original value is used.\n       *   If null, we ignore this node all together\n       */\n      onCreateASTNode: new SyncWaterfallHook4(),\n      parseNode: new SyncBailHook3()\n    };\n  }\n  parseView(value) {\n    const viewNode = this.parseObject(value, \"view\" /* View */);\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n    return viewNode;\n  }\n  createASTNode(node, value) {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n    if (tapped === void 0) {\n      return node;\n    }\n    return tapped;\n  }\n  parseObject(obj, type = \"value\" /* Value */, options = { templateDepth: 0 }) {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options\n    );\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n    const parseLocalObject = (currentValue, objToParse, path = []) => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n      if (!localObj) {\n        return currentValue;\n      }\n      const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n        ...Object.entries(localObj),\n        ...Object.getOwnPropertySymbols(localObj).map((s) => [\n          s,\n          localObj[s]\n        ])\n      ];\n      const defaultValue = {\n        children: [],\n        value: currentValue\n      };\n      const newValue = objEntries.reduce((accumulation, current) => {\n        let { value: value2 } = accumulation;\n        const { children: children2 } = accumulation;\n        const [localKey, localValue] = current;\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          \"value\" /* Value */,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj\n          }\n        );\n        if (newChildren) {\n          children2.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey\n          ]);\n          value2 = result.value;\n          children2.push(...result.children);\n        } else {\n          value2 = setIn4(accumulation.value, [...path, localKey], localValue);\n        }\n        return {\n          value: value2,\n          children: children2\n        };\n      }, defaultValue);\n      return newValue;\n    };\n    const { value, children } = parseLocalObject(void 0, obj);\n    const baseAst = value === void 0 && !children.length ? void 0 : {\n      type,\n      value\n    };\n    if (baseAst && children.length) {\n      const parent = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts\nfunction caresAboutDataChanges(dataChanges, dependencies) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n  return depArray.find(\n    (dep) => !!dataChangeArray.find(\n      (change) => change === dep || change.contains(dep) || dep.contains(change)\n    )\n  ) !== void 0;\n}\nfunction toNodeResolveOptions(resolverOptions) {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n        return value;\n      },\n      format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n        isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n        value\n      ) : value\n    },\n    evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n  };\n}\nfunction unpackAndPush(item, initial) {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts\nvar withContext = (model) => {\n  return {\n    get: (binding, options) => {\n      return model.get(binding, {\n        context: { model },\n        ...options\n      });\n    },\n    set: (transaction, options) => {\n      return model.set(transaction, {\n        context: { model },\n        ...options\n      });\n    },\n    delete: (binding, options) => {\n      return model.delete(binding, {\n        context: { model },\n        ...options\n      });\n    }\n  };\n};\nvar Resolver = class {\n  constructor(root, options) {\n    this.hooks = {\n      /** A hook to allow skipping of the resolution tree for a specific node */\n      skipResolve: new SyncWaterfallHook5(),\n      /** An event emitted before calculating the next update */\n      beforeUpdate: new SyncHook3(),\n      /** An event emitted after calculating the next update */\n      afterUpdate: new SyncHook3(),\n      /** The options passed to a node to resolve it to an object */\n      resolveOptions: new SyncWaterfallHook5(),\n      /** A hook to transform the AST node into a new AST node before resolving it */\n      beforeResolve: new SyncWaterfallHook5(),\n      /**\n       * A hook to transform an AST node into it's resolved value.\n       * This runs _before_ any children are resolved\n       */\n      resolve: new SyncWaterfallHook5(),\n      /**\n       * A hook to transform the resolved value of an AST node.\n       * This runs _after_ all children nodes are resolved\n       */\n      afterResolve: new SyncWaterfallHook5(),\n      /** Called at the very end of a node's tree being updated */\n      afterNodeUpdate: new SyncHook3()\n    };\n    this.root = root;\n    this.options = options;\n    this.resolveCache = /* @__PURE__ */ new Map();\n    this.ASTMap = /* @__PURE__ */ new Map();\n    this.logger = options.logger;\n    this.idCache = /* @__PURE__ */ new Set();\n  }\n  getSourceNode(convertedAST) {\n    return this.ASTMap.get(convertedAST);\n  }\n  update(changes) {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = /* @__PURE__ */ new Map();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n    const updated = this.computeTree(\n      this.root,\n      void 0,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      void 0,\n      prevASTMap\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n  getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n  getPreviousResult(node) {\n    if (!node) {\n      return;\n    }\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n    if (id) {\n      if (this.idCache.has(id)) {\n        if (isFirstUpdate) {\n          if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n            );\n          } else if (node.type === \"value\" /* Value */) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n            );\n          }\n        }\n        return;\n      }\n      this.idCache.add(id);\n    }\n    return this.resolveCache.get(node);\n  }\n  cloneNode(node) {\n    const clonedNode = clone(node);\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\")\n        return;\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n    return clonedNode;\n  }\n  computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n    const dependencyModel = new DependencyModel(options.data.model);\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding)\n    );\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser\n        },\n        evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node\n      },\n      node\n    );\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions\n    );\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions\n    ) ?? {\n      type: \"empty\" /* Empty */\n    };\n    const isNestedMultiNode = resolvedAST.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent?.parent?.type === \"multi-node\" /* MultiNode */ && partiallyResolvedParent.type === \"value\" /* Value */;\n    if (previousResult && shouldUseLastValue) {\n      const update2 = {\n        ...previousResult,\n        updated: false\n      };\n      const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n        const handleChildNode = (childNode) => {\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult)\n            return;\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST\n          );\n        };\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(\n            ({ value: childAST }) => handleChildNode(childAST)\n          );\n        } else if (resolvedASTLocal.type === \"multi-node\" /* MultiNode */) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n      previousResult.node.parent = partiallyResolvedParent;\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n      return update2;\n    }\n    resolvedAST.parent = partiallyResolvedParent;\n    resolveOptions.node = resolvedAST;\n    this.ASTMap.set(resolvedAST, node);\n    let resolved = this.hooks.resolve.call(\n      void 0,\n      resolvedAST,\n      resolveOptions\n    );\n    let updated = !dequal(previousResult?.value, resolved);\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n    const childDependencies = /* @__PURE__ */ new Set();\n    dependencyModel.trackSubset(\"children\");\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue\n        } = computedChildTree;\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n        if (childValue) {\n          if (childNode.type === \"multi-node\" /* MultiNode */ && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path, []),\n              childValue\n            );\n            resolved = setIn5(resolved, child.path, arr);\n          } else {\n            resolved = setIn5(resolved, child.path, childValue);\n          }\n        }\n        updated = updated || childUpdated;\n        return { ...child, value: childNode };\n      });\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === \"multi-node\" /* MultiNode */) {\n      const childValue = [];\n      const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap\n        );\n        if (mTree.value !== void 0 && mTree.value !== null) {\n          if (mValue.type === \"async\" /* Async */ && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n        mTree.dependencies.forEach(\n          (bindingDep) => childDependencies.add(bindingDep)\n        );\n        updated = updated || mTree.updated;\n        return mTree.node;\n      });\n      resolvedAST.values = newValues;\n      resolved = childValue;\n    }\n    childDependencies.forEach(\n      (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n    );\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope) => dependencyModel.getDependencies(scope)\n    });\n    const update = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: /* @__PURE__ */ new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies\n      ])\n    };\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update\n    );\n    cacheUpdate.set(node, update);\n    return update;\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts\nvar CrossfieldProvider = class {\n  constructor(initialView, parser, logger) {\n    this.allValidations = /* @__PURE__ */ new Set();\n    this.byBinding = /* @__PURE__ */ new Map();\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n  parse(contentView, parser) {\n    const xfieldRefs = contentView.validation;\n    if (xfieldRefs === void 0) {\n      return;\n    }\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n      );\n      return;\n    }\n    xfieldRefs.forEach((vRef) => {\n      const withDefaults = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef\n      };\n      this.allValidations.add(withDefaults);\n      const { ref } = vRef;\n      if (ref) {\n        const parsed = parser(ref);\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n  getValidationsForBinding(binding) {\n    return this.byBinding.get(binding);\n  }\n};\nvar ViewInstance = class {\n  constructor(initialView, resolverOptions) {\n    this.hooks = {\n      onUpdate: new SyncHook4(),\n      parser: new SyncHook4(),\n      resolver: new SyncHook4(),\n      onTemplatePluginCreated: new SyncHook4(),\n      templatePlugin: new SyncHook4()\n    };\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n    this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n      this.templatePlugin = templatePlugin;\n    });\n  }\n  updateAsync() {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n  update(changes) {\n    if (this.rootNode === void 0) {\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger\n      );\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\"\n        );\n      }\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser)\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n    const update = this.resolver?.update(changes);\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n    return update;\n  }\n  getValidationsForBinding(binding) {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/builder/index.ts\nvar Builder = class _Builder {\n  /**\n   * Creates an asset node\n   *\n   * @param value - the value to put in the asset node\n   */\n  static asset(value) {\n    return {\n      type: \"asset\" /* Asset */,\n      value\n    };\n  }\n  static assetWrapper(value) {\n    const valueNode = _Builder.value();\n    _Builder.addChild(valueNode, \"asset\", value);\n    return valueNode;\n  }\n  /**\n   * Creates a value node\n   *\n   * @param v - The object to put in the value node\n   */\n  static value(v) {\n    return {\n      type: \"value\" /* Value */,\n      value: v\n    };\n  }\n  /**\n   * Creates a multiNode and associates the multiNode as the parent\n   * of all the value nodes\n   *\n   * @param values - the value, applicability or async nodes to put in the multinode\n   */\n  static multiNode(...values) {\n    const m = {\n      type: \"multi-node\" /* MultiNode */,\n      override: true,\n      values\n    };\n    values.forEach((v) => {\n      v.parent = m;\n    });\n    return m;\n  }\n  /**\n   * Creates an async node\n   *\n   * @param id - the id of async node. It should be identical for each async node\n   */\n  static asyncNode(id, flatten2 = true) {\n    return {\n      id,\n      type: \"async\" /* Async */,\n      flatten: flatten2,\n      value: {\n        type: \"value\" /* Value */,\n        value: {\n          id\n        }\n      }\n    };\n  }\n  /**\n   * Adds a child node to a node\n   *\n   * @param node - The node to add a child to\n   * @param path - The path at which to add the child\n   * @param child - The child node\n   */\n  static addChild(node, path, child) {\n    child.parent = node;\n    const newChild = {\n      path: Array.isArray(path) ? path : [path],\n      value: child\n    };\n    node.children = node.children || [];\n    node.children.push(newChild);\n    return node;\n  }\n  /**\n   * Updates children of a node of the same path and preserves order\n   *\n   * @param node - The node to update children for\n   * @param pathToMatch - The path to match against child paths\n   * @param mapFn - Function to transform matching children\n   */\n  static updateChildrenByPath(node, pathToMatch, updateFn) {\n    if (!node.children)\n      return node;\n    const updatedChildren = node.children.map(\n      (child) => (\n        // Check if paths match exactly\n        child.path.join() === pathToMatch.join() ? { ...child, value: updateFn(child) } : child\n      )\n    );\n    return {\n      ...node,\n      children: updatedChildren\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts\nimport { SyncWaterfallHook as SyncWaterfallHook6 } from \"tapable-ts\";\nvar templateSymbol = Symbol(\"template\");\nvar TemplatePlugin = class {\n  constructor(options) {\n    this.hooks = {\n      resolveTemplateSubstitutions: new SyncWaterfallHook6()\n    };\n    this.options = options;\n  }\n  parseTemplate(parseObject, node, options) {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n    if (!data) {\n      return null;\n    }\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n    const values = [];\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n        [\n          {\n            expression: new RegExp(`_index${depth || \"\"}_`),\n            value: String(index)\n          }\n        ],\n        {\n          depth,\n          data: dataItem,\n          index\n        }\n      );\n      let templateStr = JSON.stringify(template);\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n      const parsed = parseObject(JSON.parse(templateStr), \"value\" /* Value */, {\n        templateDepth: node.depth + 1\n      });\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n    const result = {\n      type: \"multi-node\" /* MultiNode */,\n      override: false,\n      values\n    };\n    if (node.placement !== void 0) {\n      result[templateSymbol] = node.placement;\n    }\n    return result;\n  }\n  applyParser(parser) {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === \"template\" /* Template */ && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options\n        );\n      }\n      return node;\n    });\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node2) {\n        if (node2.type === \"multi-node\" /* MultiNode */) {\n          return node2[templateSymbol];\n        } else if (node2.type === \"template\" /* Template */) {\n          return node2.placement;\n        }\n        return void 0;\n      }\n      if (node && (node.type === \"view\" /* View */ || node.type === \"asset\" /* Asset */) && Array.isArray(node.children)) {\n        node.children = node.children.sort((a, b) => {\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n          const pathsEqual = aPath === bPath;\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n            if (aPlacement !== void 0 && bPlacement === void 0) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== void 0 && aPlacement === void 0) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n              if (aPlacement === bPlacement) {\n                return 0;\n              }\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n      return node;\n    });\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (obj, _nodeType, options, childOptions) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj.map((template) => {\n            const templateAST = parser.createASTNode(\n              {\n                type: \"template\" /* Template */,\n                depth: options.templateDepth ?? 0,\n                data: template.data,\n                template: template.value,\n                dynamic: template.dynamic ?? false,\n                placement: template.placement\n              },\n              template\n            );\n            if (!templateAST)\n              return;\n            if (templateAST.type === \"multi-node\" /* MultiNode */) {\n              templateAST.values.forEach((v) => {\n                v.parent = templateAST;\n              });\n            }\n            return {\n              path: [...childOptions.path, template.output],\n              value: templateAST\n            };\n          }).filter(Boolean);\n        }\n      }\n    );\n  }\n  applyResolverHooks(resolver) {\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === \"template\" /* Template */ && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n      return node;\n    });\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts\nimport { set } from \"timm\";\nvar createPatternMatcher = (start, end) => {\n  return (testStr) => {\n    const startLocation = testStr.indexOf(start);\n    if (startLocation === -1) {\n      return false;\n    }\n    const endLocation = testStr.indexOf(end);\n    if (endLocation === -1) {\n      return false;\n    }\n    return startLocation < endLocation;\n  };\n};\nvar bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nvar expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\nfunction hasSomethingToResolve(str) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\nfunction resolveString(str, resolveOptions) {\n  return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n    model: resolveOptions.data.model,\n    evaluate: resolveOptions.evaluate\n  }) : str;\n}\nfunction resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n  if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n    return node;\n  }\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n  let newNode = node;\n  Object.keys(node).forEach((key) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n    const val = node[key];\n    let newVal = val;\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n    if (newVal !== val) {\n      newNode = set(newNode, key, newVal);\n    }\n  });\n  return newNode;\n}\nvar findBasePath = (node, resolver) => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n  }\n  if (parentNode.type !== \"multi-node\" /* MultiNode */) {\n    return [];\n  }\n  return findBasePath(parentNode, resolver);\n};\nvar StringResolverPlugin = class {\n  constructor() {\n    this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n  }\n  applyResolver(resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === \"empty\" /* Empty */ || node.type === \"unknown\" /* Unknown */) {\n        return null;\n      }\n      if (node.type === \"value\" /* Value */ || node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n        let propsToSkip;\n        if (node.type === \"asset\" /* Asset */ || node.type === \"view\" /* View */) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (node.parent?.type === \"multi-node\" /* MultiNode */ && (node.parent?.parent?.type === \"asset\" /* Asset */ || node.parent?.parent?.type === \"view\" /* View */) && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id\n          );\n        } else {\n          propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n        }\n        const nodePath = findBasePath(node, resolver);\n        if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n          return node.value;\n        }\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n      return value;\n    });\n  }\n  apply(view) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts\nimport { omit as omit2 } from \"timm\";\nvar ApplicabilityPlugin = class {\n  isApplicability(obj) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n  applyResolver(resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node, options) => {\n        let newNode = node;\n        if (node?.type === \"applicability\" /* Applicability */) {\n          const isApplicable = options.evaluate(node.expression);\n          if (isApplicable === false) {\n            return null;\n          }\n          newNode = node.value;\n        }\n        return newNode;\n      }\n    );\n  }\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (obj, nodeType, options, childOptions) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit2(obj, \"applicability\"),\n            nodeType,\n            options\n          );\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: \"applicability\" /* Applicability */,\n              expression: obj.applicability,\n              value: parsedApplicability\n            },\n            obj\n          );\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n          if (applicabilityNode.type === \"applicability\" /* Applicability */) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n          return childOptions ? [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: applicabilityNode\n            }\n          ] : applicabilityNode;\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts\nvar SwitchPlugin = class {\n  constructor(options) {\n    this.options = options;\n  }\n  resolveSwitch(node, options) {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n    return EMPTY_NODE;\n  }\n  isSwitch(obj) {\n    return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n  }\n  applyParser(parser) {\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === \"switch\" /* Switch */ && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n      return node;\n    });\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (obj, _nodeType, options, childOptions) => {\n        if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n          const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n          const cases = switchContent.map(\n            (switchCase) => {\n              const { case: switchCaseExpr, ...switchBody } = switchCase;\n              const value = parser.parseObject(\n                switchBody,\n                \"value\" /* Value */,\n                options\n              );\n              if (value) {\n                return {\n                  case: switchCaseExpr,\n                  value\n                };\n              }\n              return;\n            }\n          ).filter(Boolean);\n          const switchAST = parser.createASTNode(\n            {\n              type: \"switch\" /* Switch */,\n              dynamic,\n              cases\n            },\n            objToParse\n          );\n          if (!switchAST || switchAST.type === \"empty\" /* Empty */) {\n            return childOptions ? [] : null;\n          }\n          if (switchAST.type === \"switch\" /* Switch */) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value = switchAST;\n            if (switchAST.type === \"value\" /* Value */ && switchAST.children?.length === 1 && switchAST.value === void 0) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n            return [{ path, value }];\n          }\n          return switchAST;\n        }\n      }\n    );\n  }\n  applyResolver(resolver) {\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === \"switch\" /* Switch */ && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n      return node;\n    });\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts\nvar MultiNodePlugin = class {\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (obj, nodeType, options, childOptions) => {\n        if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n          const values = obj.map(\n            (childVal) => parser.parseObject(childVal, \"value\" /* Value */, options)\n          ).filter((child) => !!child);\n          if (!values.length) {\n            return [];\n          }\n          const multiNode = parser.createASTNode(\n            {\n              type: \"multi-node\" /* MultiNode */,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key\n              ),\n              values\n            },\n            obj\n          );\n          if (!multiNode) {\n            return [];\n          }\n          if (multiNode.type === \"multi-node\" /* MultiNode */) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode\n            }\n          ];\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts\nvar AssetPlugin = class {\n  applyParser(parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (obj, nodeType, options, childOptions) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, \"asset\" /* Asset */, options);\n          if (!assetAST) {\n            return [];\n          }\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST\n            }\n          ];\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\nimport { setIn as setIn7 } from \"timm\";\nimport deferred from \"p-defer\";\nimport { SyncHook as SyncHook10, SyncWaterfallHook as SyncWaterfallHook11 } from \"tapable-ts\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts\nimport { SyncBailHook as SyncBailHook4, SyncHook as SyncHook5, SyncWaterfallHook as SyncWaterfallHook7 } from \"tapable-ts\";\nimport defer from \"p-defer\";\nvar FlowInstance = class {\n  constructor(id, flow, options) {\n    this.isTransitioning = false;\n    this.hooks = {\n      beforeStart: new SyncBailHook4(),\n      /** A callback when the onStart node was present */\n      onStart: new SyncHook5(),\n      /** A callback when the onEnd node was present */\n      onEnd: new SyncHook5(),\n      /** A hook to intercept and block a transition */\n      skipTransition: new SyncBailHook4(),\n      /** A chance to manipulate the flow-node used to calculate the given transition used  */\n      beforeTransition: new SyncWaterfallHook7(),\n      /** A chance to manipulate the flow-node calculated after a transition */\n      resolveTransitionNode: new SyncWaterfallHook7(),\n      /** A callback when a transition from 1 state to another was made */\n      transition: new SyncHook5(),\n      /** A callback to run actions after a transition occurs */\n      afterTransition: new SyncHook5()\n    };\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState) => {\n        const newState = nextState.value;\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      }\n    );\n  }\n  /** Start the state machine */\n  async start() {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n      return this.flowPromise.promise;\n    }\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n    const initialState = this.flow.startState;\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n    return this.flowPromise.promise;\n  }\n  transition(transitionValue, options) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n      );\n    }\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`\n      );\n      return;\n    }\n    if (this.currentState === void 0) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`\n        );\n        return;\n      }\n    }\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue\n    );\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n    if (nextState === void 0) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`\n      );\n      return;\n    }\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n    );\n    return this.pushHistory(nextState, options);\n  }\n  pushHistory(stateName, options) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n    let nextState = this.flow[stateName];\n    if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n      return;\n    }\n    const prevState = this.currentState;\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n    const newCurrentState = {\n      name: stateName,\n      value: nextState\n    };\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState\n    });\n    this.isTransitioning = false;\n    this.hooks.afterTransition.call(this);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts\nimport { SyncHook as SyncHook6 } from \"tapable-ts\";\nvar FlowController = class {\n  constructor(navigation, options) {\n    this.hooks = {\n      flow: new SyncHook6()\n    };\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n  /** Navigate to another state in the state-machine */\n  transition(stateTransition, options) {\n    if (this.current === void 0) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n    this.current.transition(stateTransition, options);\n  }\n  addNewFlow(flow) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n  async run(startState) {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n    const startFlow = this.navigation[startState];\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`)\n      );\n    }\n    this.log?.debug(`Starting flow: ${startState}`);\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n    const end = await flow.start();\n    this.navStack.pop();\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n    return end;\n  }\n  async start() {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n    return this.run(this.navigation.BEGIN);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\nimport { SyncHook as SyncHook7, SyncWaterfallHook as SyncWaterfallHook8 } from \"tapable-ts\";\nimport { setIn as setIn6 } from \"timm\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts\nvar ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\nfunction replaceParams(message, params) {\n  return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts\nvar CONTEXT = \"validation-binding-tracker\";\nvar ValidationBindingTrackerViewPlugin = class {\n  constructor(options) {\n    this.trackedBindings = /* @__PURE__ */ new Set();\n    this.options = options;\n  }\n  /** Fetch the tracked bindings in the current view */\n  getBindings() {\n    return this.trackedBindings;\n  }\n  /** Add a binding to the tracked set */\n  trackBinding(binding) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver) {\n    this.trackedBindings.clear();\n    const tracked = /* @__PURE__ */ new Map();\n    const sections = /* @__PURE__ */ new Map();\n    let lastViewUpdateChangeSet;\n    const lastComputedBindingTree = /* @__PURE__ */ new Map();\n    let currentBindingTree = /* @__PURE__ */ new Map();\n    const lastSectionBindingTree = /* @__PURE__ */ new Map();\n    const resolvedNodeMap = /* @__PURE__ */ new Map();\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter(\n          (b) => trackedBindingsForNode.has(b)\n        )\n      );\n      return intersection.size === 0;\n    });\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === void 0) {\n        return options;\n      }\n      tracked.delete(node);\n      const track = (binding) => {\n        const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n        }\n        let { parent } = node;\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n            const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n            const firstFieldEOW = eows?.find(\n              (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n            );\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n            return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n          },\n          getChildren: (type) => {\n            const validations = new Array();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation?._getValidationForBinding(binding)?.get();\n              if (eow && (type === void 0 || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation?._getValidationForBinding(binding)?.get();\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, /* @__PURE__ */ new Set());\n              }\n            }\n          },\n          track\n        }\n      };\n    });\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === \"multi-node\" /* MultiNode */) {\n            resolvedNode.values.forEach(\n              (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n            );\n          }\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n          );\n        }\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = /* @__PURE__ */ new Set();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = /* @__PURE__ */ new Map();\n        }\n      }\n    );\n  }\n  apply(view) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts\nvar SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nvar VIEW_VALIDATION_PROVIDER_NAME = \"view\";\nvar VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n  \"validation-provider-name\"\n);\nfunction isSubset(subset, containingSet) {\n  if (subset.size > containingSet.size)\n    return false;\n  for (const entry of subset)\n    if (!containingSet.has(entry))\n      return false;\n  return true;\n}\nfunction createStatefulValidationObject(obj) {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false\n  };\n}\nvar ValidatedBinding = class {\n  constructor(possibleValidations, onDismiss, log, weakBindings) {\n    this.applicableValidations = [];\n    this.validationsByState = {\n      load: [],\n      change: [],\n      navigation: []\n    };\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n  }\n  get allValidations() {\n    return Object.values(this.validationsByState).flat();\n  }\n  checkIfBlocking(statefulObj) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n    return false;\n  }\n  getAll() {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj)\n        });\n      }\n      return all;\n    }, []);\n  }\n  get() {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid)\n      };\n    }\n  }\n  runApplicableValidations(runner, canDismiss, phase) {\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          return originalValue;\n        }\n        const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n        const obj = setIn6(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking\n        );\n        const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n        if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj;\n            if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n              warn.dismissable = true;\n            }\n            return warn;\n          }\n        }\n        const response = runner(obj.value);\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response ? {\n            ...obj.value,\n            message: response.message ?? \"Something is broken\",\n            severity: obj.value.severity,\n            displayTarget: obj.value.displayTarget ?? \"field\"\n          } : void 0\n        };\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          newState.response.dismiss = () => {\n            newState.state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n        return newState;\n      }\n    );\n  }\n  update(phase, canDismiss, runner) {\n    const newApplicableValidations = [];\n    if (phase === \"load\" && this.currentPhase !== void 0) {\n      return;\n    }\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change\n      ];\n    } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n      this.applicableValidations.forEach((element) => {\n        if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n          newApplicableValidations.push(element);\n        }\n      });\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n      ];\n      this.currentPhase = \"navigation\";\n    }\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n};\nvar ValidationController = class {\n  constructor(schema, options) {\n    this.hooks = {\n      /** A hook called to tap into the validator registry for adding more validators */\n      createValidatorRegistry: new SyncHook7(),\n      /** A callback/event when a new validation is added to the view */\n      onAddValidation: new SyncWaterfallHook8(),\n      /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n      onRemoveValidation: new SyncWaterfallHook8(),\n      resolveValidationProviders: new SyncWaterfallHook8(),\n      /** A hook called when a binding is added to the tracker */\n      onTrackBinding: new SyncHook7()\n    };\n    this.validations = /* @__PURE__ */ new Map();\n    this.weakBindingTracker = /* @__PURE__ */ new Set();\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n  setOptions(options) {\n    this.options = options;\n  }\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  getDataMiddleware() {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding\n          );\n          return next?.delete(binding, options);\n        }\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n          const newInvalidBindings = /* @__PURE__ */ new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (caresAboutDataChanges(\n              /* @__PURE__ */ new Set([binding]),\n              weakValidation.weakBindings\n            ) && weakValidation?.get()?.severity === \"error\") {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false\n                  });\n                }\n              });\n            }\n          });\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) }\n      )\n    ];\n  }\n  getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (binding) => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding\n            );\n          },\n          getValidationsForView: () => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          }\n        }\n      }\n    ]);\n    return this.providers;\n  }\n  reset() {\n    this.validations.clear();\n    this.tracker = void 0;\n  }\n  onView(view) {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n            return;\n          }\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true\n          });\n          if (originalValue !== withoutDefault) {\n            this.options.model.set([[binding, originalValue]], {\n              silent: true\n            });\n          }\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(/* @__PURE__ */ new Set([binding]));\n            }\n          );\n          this.hooks.onTrackBinding.call(binding);\n        }\n      }\n    });\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n    bindingTrackerPlugin.apply(view);\n  }\n  updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n    const context = validationContext ?? this.options;\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n    if (trigger === \"load\") {\n      const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n        vals.push(\n          ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n            ...valObj,\n            [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n          })) ?? []\n        );\n        return vals;\n      }, []);\n      if (possibleValidations.length === 0) {\n        return;\n      }\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger\n        )\n      );\n    }\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n      if (this.weakBindingTracker.size > 0) {\n        const t2 = this.validations.get(binding);\n        this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n      }\n      return response ? { message: response.message } : void 0;\n    });\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context\n            );\n            return response ? { message: response.message } : void 0;\n          });\n        }\n      });\n    }\n  }\n  validationRunner(validationObj, binding, context = this.options) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n    const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n    const weakBindings = /* @__PURE__ */ new Set();\n    const model = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete\n    };\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding)\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\"\n      }),\n      validationObj\n    );\n    this.weakBindingTracker = weakBindings;\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n      return {\n        message\n      };\n    }\n  }\n  updateValidationsForView(trigger) {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n    const updateValidations = (dismissValidations) => {\n      this.getBindings().forEach((binding) => {\n        this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n          if (!this.options) {\n            return;\n          }\n          return this.validationRunner(obj, binding, this.options);\n        });\n      });\n    };\n    updateValidations(!isNavigationTrigger);\n    if (isNavigationTrigger) {\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n  get activeBindings() {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== void 0\n      )\n    );\n  }\n  getValidator(type) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n    return registry.get(type);\n  }\n  getBindings() {\n    return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n  }\n  trackBinding(binding) {\n    this.tracker?.trackBinding(binding);\n  }\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger = \"navigation\") {\n    this.updateValidationsForView(trigger);\n    const validations = /* @__PURE__ */ new Map();\n    let canTransition = true;\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v\n            )}`\n          );\n          canTransition = false;\n        }\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n    return {\n      canTransition,\n      validations: validations.size ? validations : void 0\n    };\n  }\n  /** Get the current tracked validation for the given binding */\n  getValidationForBinding(binding) {\n    return this.validations.get(binding);\n  }\n  forView(parser) {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding)\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return void 0;\n        }\n        const validationMapping = /* @__PURE__ */ new Map();\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n        return validationMapping.size === 0 ? void 0 : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\"\n        );\n      },\n      type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts\nvar LocalStateStore = class {\n  constructor(onUpdate) {\n    this.updateCallback = onUpdate;\n    this.state = /* @__PURE__ */ new Map();\n  }\n  removeKey(key) {\n    this.state.delete(key);\n  }\n  reset() {\n    this.state.clear();\n  }\n  useSharedState(key) {\n    return (initialState) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n      return [\n        this.state.get(key),\n        (newState) => {\n          const current = this.state.get(key);\n          this.state.set(key, newState);\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        }\n      ];\n    };\n  }\n  getLocalStateFunction(key, countKey) {\n    return (initialState) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n      this.state.set(countKey, oldCount + 1);\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n      const value = localState[oldCount];\n      return [\n        value,\n        (newState) => {\n          const oldValue = localState[oldCount];\n          localState[oldCount] = newState;\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        }\n      ];\n    };\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/asset-transform.ts\nfunction findUp(node, target) {\n  if (node === target) {\n    return true;\n  }\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n  return false;\n}\nvar AssetTransformCorePlugin = class {\n  constructor(registry) {\n    this.registry = registry;\n    this.stateStore = /* @__PURE__ */ new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n  apply(viewController) {\n    viewController.hooks.view.tap(\"asset-transform\", (view) => {\n      this.stateStore.clear();\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode;\n        const updateState = (node) => {\n          lastUpdatedNode = node;\n          view.update(/* @__PURE__ */ new Set());\n        };\n        const getStore = (node, stepKey) => {\n          let store;\n          const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n          const storedState = this.stateStore.get(node);\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n          return {\n            useSharedState: (key) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: (initialState) => {\n              return store.getLocalStateFunction(\n                stepKey,\n                countKey\n              )(initialState);\n            }\n          };\n        };\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol\n              );\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n          return node;\n        });\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = void 0;\n        });\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== \"asset\" /* Asset */ && node.type !== \"view\" /* View */) {\n              return value;\n            }\n            const originalNode = resolver.getSourceNode(node);\n            if (!originalNode) {\n              return value;\n            }\n            const transform = this.registry.get(value);\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n              return transform?.resolve(value, options, store);\n            }\n            return value;\n          }\n        );\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts\nimport { SyncHook as SyncHook8, SyncWaterfallHook as SyncWaterfallHook9 } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nvar ViewController = class {\n  constructor(initialViews, options) {\n    this.hooks = {\n      /** Do any processing before the `View` instance is created */\n      resolveView: new SyncWaterfallHook9(),\n      // The hook right before the View starts resolving. Attach anything custom here\n      view: new SyncHook8()\n    };\n    this.transformRegistry = new Registry();\n    this.optimizeUpdates = true;\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce(\n      (viewMap, view) => {\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {}\n    );\n    new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = void 0;\n          }\n        });\n      }\n    );\n    const update = (updates, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t2) => t2.binding)),\n          updateOptions?.silent ?? false\n        );\n      }\n    );\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n      if (typeof property === \"number\" && parentBinding) {\n        update(/* @__PURE__ */ new Set([parentBinding]));\n      } else {\n        update(/* @__PURE__ */ new Set([binding]));\n      }\n    });\n  }\n  queueUpdate(bindings, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = void 0;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n  getViewForRef(viewRef) {\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n        model: this.viewOptions.model,\n        evaluate: this.viewOptions.evaluator.evaluate\n      })\n    );\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n  onView(state) {\n    const viewId = state.ref;\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state\n    );\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n    this.hooks.view.call(view);\n    view.update();\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts\nimport { SyncHook as SyncHook9, SyncWaterfallHook as SyncWaterfallHook10, SyncBailHook as SyncBailHook5 } from \"tapable-ts\";\nimport { dequal as dequal2 } from \"dequal\";\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts\nvar ReadOnlyDataController = class {\n  constructor(controller, logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n  get(binding, options) {\n    return this.controller.get(binding, options);\n  }\n  set(transaction, options) {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\"\n    );\n    return [];\n  }\n  delete(binding, options) {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\"\n    );\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts\nvar DataController = class {\n  constructor(model, options) {\n    this.hooks = {\n      resolve: new SyncWaterfallHook10(),\n      resolveDataStages: new SyncWaterfallHook10(),\n      // On any set or get of an undefined value, redirect the value to be the default\n      resolveDefaultValue: new SyncBailHook5(),\n      onDelete: new SyncHook9(),\n      onSet: new SyncHook9(),\n      onGet: new SyncHook9(),\n      onUpdate: new SyncHook9(),\n      format: new SyncWaterfallHook10(),\n      deformat: new SyncWaterfallHook10(),\n      serialize: new SyncWaterfallHook10()\n    };\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n    this.trash = /* @__PURE__ */ new Set();\n    this.pathResolver = options.pathResolver;\n  }\n  getModel() {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n    return this.model;\n  }\n  resolveDataValue(binding, value, deformat) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n    return value;\n  }\n  set(transaction, options) {\n    let normalizedTransaction = [];\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n        ];\n      });\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n          ];\n        }\n      );\n    }\n    const setUpdates = normalizedTransaction.reduce(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal\n        };\n        if (dequal2(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n          );\n        } else {\n          updates.push(update);\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n          );\n        }\n        return updates;\n      },\n      []\n    );\n    const result = this.getModel().set(normalizedTransaction, options);\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal2(tr.oldValue, tr.newValue))) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n        );\n        setUpdates.push(tr);\n      }\n    });\n    this.hooks.onSet.call(normalizedTransaction);\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n    return result;\n  }\n  resolve(binding, readOnly) {\n    return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n  }\n  get(binding, options) {\n    const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n    if (result === void 0 && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n    this.hooks.onGet.call(binding, result);\n    return result;\n  }\n  delete(binding, options) {\n    if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n    const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n    const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n    this.getModel().delete(resolved, options);\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n    this.hooks.onDelete.call(resolved);\n  }\n  serialize() {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n  makeReadOnly() {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts\nfunction flatten(obj, roots = [], sep = \".\") {\n  return Object.keys(obj).reduce(\n    (memo, prop) => ({\n      // create a new object\n      // include previously returned object\n      ...memo,\n      ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n        // keep working if value is an object\n        flatten(obj[prop], roots.concat([prop]))\n      ) : (\n        // include current prop and value and prefix prop with the roots\n        { [roots.concat([prop]).join(sep)]: obj[prop] }\n      )\n    }),\n    {}\n  );\n}\nfunction objectToBatchSet(obj) {\n  const flattenedObj = flatten(obj);\n  const batchTxn = [];\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n  return batchTxn;\n}\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts\nvar ConstantsController = class {\n  constructor() {\n    this.store = /* @__PURE__ */ new Map();\n    this.tempStore = /* @__PURE__ */ new Map();\n  }\n  addConstants(data, namespace) {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n  getConstants(key, namespace, fallback) {\n    const path = new BindingInstance(key);\n    return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n  }\n  setTemporaryValues(data, namespace) {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n  clearTemporaryValues(namespace) {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value) => {\n        value.reset();\n      });\n    }\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts\nvar FlowExpPlugin = class {\n  constructor() {\n    this.name = \"flow-exp-plugin\";\n  }\n  apply(player) {\n    let expressionEvaluator;\n    const handleEval = (exp) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp);\n        }\n      }\n    };\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          }\n        });\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts\nvar createFormatFunction = (schema) => {\n  const handler = (ctx, value, formatName) => {\n    return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n  };\n  return handler;\n};\nvar DefaultExpPlugin = class {\n  constructor() {\n    this.name = \"flow-exp-plugin\";\n  }\n  apply(player) {\n    let formatFunction;\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args) => {\n          return ctx.evaluate(...args);\n        }\n      );\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts\nvar NOT_STARTED_STATE = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\"\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-view-plugin.ts\nvar DefaultViewPlugin = class {\n  constructor() {\n    this.name = \"default-view-plugin\";\n  }\n  apply(player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n        new AssetPlugin().apply(view);\n        new SwitchPlugin(pluginOptions).apply(view);\n        new ApplicabilityPlugin().apply(view);\n        new StringResolverPlugin().apply(view);\n        const templatePlugin = new TemplatePlugin(pluginOptions);\n        templatePlugin.apply(view);\n        view.hooks.onTemplatePluginCreated.call(templatePlugin);\n        new MultiNodePlugin().apply(view);\n      });\n    });\n  }\n};\n\n// ../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts\nvar PLAYER_VERSION = true ? \"0.10.5--canary.649.22815\" : \"__VERSION__\";\nvar COMMIT = true ? \"9f52e9693e724aaf5edc228683937f01e57101c9\" : \"__GIT_COMMIT__\";\nvar _Player = class _Player {\n  constructor(config) {\n    this.logger = new TapableLogger();\n    this.constantsController = new ConstantsController();\n    this.state = NOT_STARTED_STATE;\n    this.hooks = {\n      /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n      flowController: new SyncHook10(),\n      /** The hook that updates/handles views */\n      viewController: new SyncHook10(),\n      /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n      view: new SyncHook10(),\n      /** Called when an expression evaluator was created */\n      expressionEvaluator: new SyncHook10(),\n      /** The hook that creates and manages data */\n      dataController: new SyncHook10(),\n      /** Called after the schema is created for a flow */\n      schema: new SyncHook10(),\n      /** Manages validations (schema and x-field ) */\n      validationController: new SyncHook10(),\n      /** Manages parsing binding */\n      bindingParser: new SyncHook10(),\n      /** A that's called for state changes in the flow execution */\n      state: new SyncHook10(),\n      /** A hook to access the current flow */\n      onStart: new SyncHook10(),\n      /** A hook for when the flow ends either in success or failure */\n      onEnd: new SyncHook10(),\n      /** Mutate the Content flow before starting */\n      resolveFlowContent: new SyncWaterfallHook11()\n    };\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      new DefaultViewPlugin(),\n      ...this.config.plugins || [],\n      new FlowExpPlugin()\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n  /**  Returns currently registered plugins */\n  getPlugins() {\n    return this.config.plugins ?? [];\n  }\n  /** Find instance of [Plugin] that has been registered to Player */\n  findPlugin(symbol) {\n    return this.config.plugins?.find((el) => el.symbol === symbol);\n  }\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  applyTo(symbol, apply) {\n    const plugin = this.findPlugin(symbol);\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  registerPlugin(plugin) {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n  /** Returns the current version of the running player */\n  getVersion() {\n    return _Player.info.version;\n  }\n  /** Returns the git commit used to build Player version */\n  getCommit() {\n    return _Player.info.commit;\n  }\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  getState() {\n    return this.state;\n  }\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  setState(state) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n  /** Start Player with the given flow */\n  setupFlow(userContent) {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger\n    });\n    this.hooks.onStart.call(userFlow);\n    this.hooks.flowController.call(flowController);\n    let expressionEvaluator;\n    let dataController;\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      }\n    });\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred();\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n    const validationController = new ValidationController(schema);\n    this.hooks.validationController.call(validationController);\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger\n    });\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n      return formatter ? formatter.format(value) : value;\n    });\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n      return formatter ? formatter.deformat(value) : value;\n    });\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default\n    );\n    let viewController;\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger\n    });\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n      return true;\n    });\n    function resolveStrings(val, formatted) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted\n      });\n    }\n    flowController.hooks.flow.tap(\"player\", (flow) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd);\n          }\n        }\n        if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n          return state;\n        }\n        return setIn7(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal])\n        );\n      });\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } = validationController.validateView(\"navigation\");\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n            return true;\n          }\n        }\n        return void 0;\n      });\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n        if (\"ref\" in state) {\n          newState = setIn7(state, [\"ref\"], resolveStrings(state.ref));\n        }\n        if (\"param\" in state) {\n          newState = setIn7(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false)\n          );\n        }\n        return newState;\n      });\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n      flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          try {\n            const result = await expressionEvaluator.evaluateAsync(exp);\n            flowController?.transition(String(result));\n          } catch (e) {\n            flowResultDeferred.reject(e);\n          }\n        }\n        expressionEvaluator.reset();\n      });\n    });\n    this.hooks.dataController.call(dataController);\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController\n    });\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: (pluginSymbol) => {\n          return this.findPlugin(pluginSymbol);\n        }\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b))\n      },\n      constants: this.constantsController\n    });\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n    return {\n      start: () => {\n        flowController.start().then((endState) => {\n          const flowResult = {\n            endState: resolveStrings(endState, false),\n            data: dataController.serialize()\n          };\n          return flowResult;\n        }).then(flowResultDeferred.resolve).catch((e) => {\n          this.logger.error(`Something went wrong: ${e.message}`);\n          throw e;\n        }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger\n      }\n    };\n  }\n  async start(payload) {\n    const ref = Symbol(payload?.id ?? \"payload\");\n    const maybeUpdateState = (newState) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`\n        );\n        return newState;\n      }\n      this.setState(newState);\n      return newState;\n    };\n    this.setState({\n      status: \"not-started\",\n      ref\n    });\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state\n      });\n      start();\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly()\n        }\n      };\n      return maybeUpdateState({\n        ...await state.flowResult,\n        ...endProps\n      });\n    } catch (error) {\n      const errorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error\n      };\n      maybeUpdateState(errorState);\n      throw error;\n    }\n  }\n};\n_Player.info = {\n  version: PLAYER_VERSION,\n  commit: COMMIT\n};\nvar Player = _Player;\nexport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  AssetTransformCorePlugin,\n  BINDING_BRACKETS_REGEX,\n  BindingInstance,\n  BindingParser,\n  Builder,\n  ConsoleLogger,\n  ConstantsController,\n  DataController,\n  DependencyMiddleware,\n  DependencyModel,\n  DependencyTracker,\n  EMPTY_NODE,\n  ExpNodeOpaqueIdentifier,\n  ExpressionEvaluator,\n  FlowController,\n  FlowExpPlugin,\n  FlowInstance,\n  LocalModel,\n  LocalStateStore,\n  MultiNodePlugin,\n  NOOPDataModel,\n  NOOP_MODEL,\n  NOT_STARTED_STATE,\n  NodeType,\n  NoopLogger,\n  Parser,\n  PipelinedDataModel,\n  Player,\n  ProxyLogger,\n  ROOT_BINDING,\n  Resolver,\n  SCHEMA_VALIDATION_PROVIDER_NAME,\n  SIMPLE_BINDING_REGEX,\n  SchemaController,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TapableLogger,\n  TemplatePlugin,\n  VALIDATION_PROVIDER_NAME_SYMBOL,\n  VIEW_VALIDATION_PROVIDER_NAME,\n  ValidationBindingTrackerViewPlugin,\n  ValidationController,\n  ValidationMiddleware,\n  ValidatorRegistry,\n  ViewController,\n  ViewInstance,\n  caresAboutDataChanges,\n  constructModelForPipeline,\n  findClosestNodeAtPosition,\n  findInArray,\n  findNextExp,\n  getBindingSegments,\n  getNodeID,\n  hasSwitchKey,\n  hasTemplateKey,\n  hasTemplateValues,\n  isBinding,\n  isErrorWithLocation,\n  isExpressionNode,\n  isObjectExpression,\n  maybeConvertToNum,\n  parse2 as parse,\n  parseExpression,\n  removeBindingAndChildrenFromMap,\n  resolveDataRefs,\n  resolveDataRefsInString,\n  resolveExpressionsInString,\n  severities,\n  toModel,\n  toNodeResolveOptions,\n  unpackAndPush,\n  withParser,\n  withoutContext\n};\n//# sourceMappingURL=index.mjs.mapingURL=index.mjs.map","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","export * from \"./assets\";\nexport * from \"./plugin\";\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { InputAsset, TransformedInput } from \"./types\";\n\n/**\n * Docs about the asset transform\n */\nexport const inputTransform: TransformFunction<InputAsset, TransformedInput> = (\n  asset,\n  options,\n) => {\n  return {\n    ...asset,\n    format(val) {\n      if (asset.binding === undefined) {\n        return val;\n      }\n\n      return options.data.format(asset.binding, val);\n    },\n    set(val) {\n      if (asset.binding === undefined) {\n        return;\n      }\n\n      return options.data.model.set([[asset.binding, val]], {\n        formatted: true,\n      });\n    },\n    value:\n      asset.binding === undefined\n        ? \"\"\n        : options.data.model.get(asset.binding, {\n            includeInvalid: true,\n            formatted: true,\n          }),\n    validation:\n      asset.binding === undefined\n        ? undefined\n        : options.validation?.get(asset.binding, { track: true }),\n    dataType:\n      asset.binding === undefined\n        ? undefined\n        : options.validation?.type(asset.binding),\n  };\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { AssetWrapper } from \"@player-ui/player\";\nimport type { InfoAsset, InfoAssetTransform } from \"./types\";\nimport type { ActionAsset } from \"../action/types\";\nimport { isBackAction } from \"../action/transform\";\n\n/**\n * This transform should add segmentedActions to the info asset.\n * Segmented actions display side by side in larger viewports. Segmented Actions is an object of next and prev actions\n */\nexport const infoTransform: TransformFunction<InfoAsset, InfoAssetTransform> = (\n  infoAsset,\n) => {\n  const actions = infoAsset?.actions;\n  const segmentedActions = actions?.reduce(\n    (segmentedActionsArray, action) => {\n      segmentedActionsArray[\n        isBackAction(action.asset as ActionAsset) ? \"prev\" : \"next\"\n      ].push(action as AssetWrapper<ActionAsset>);\n      return segmentedActionsArray;\n    },\n    { next: [], prev: [] } as {\n      /**\n       * next is an array of next actions\n       */\n      next: Array<AssetWrapper<ActionAsset>>;\n      /**\n       * prev is an array of prev actions\n       */\n      prev: Array<AssetWrapper<ActionAsset>>;\n    },\n  );\n\n  return {\n    ...infoAsset,\n    segmentedActions,\n  };\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { ImageAsset, TransformedImage } from \"./types\";\n\n/**\n * Function to retrieve the desired alt text based on passed in props.\n * @param props Image props\n * @returns The alt text for the image asset\n */\nconst getImageAlt = (props: ImageAsset): string => {\n  const { metaData, placeholder } = props;\n  if (metaData.accessibility) return metaData.accessibility;\n\n  if (placeholder) return placeholder;\n\n  return \"Image\";\n};\n\n/**\n * Sets the Image's placeholder and accessibilty\n */\nexport const imageTransform: TransformFunction<ImageAsset, TransformedImage> = (\n  props,\n) => {\n  const altText = getImageAlt(props);\n\n  const newImage = {\n    ...props,\n    altText,\n  };\n\n  return newImage;\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type {\n  ChoiceAsset,\n  TransformedChoice,\n  TransformedChoiceItem,\n} from \"./types\";\n\n/**\n * Docs about the asset transform\n */\nexport const choiceTransform: TransformFunction<\n  ChoiceAsset,\n  TransformedChoice\n> = (asset, options) => {\n  const { items, binding, ...rest } = asset;\n\n  const assetHasBinding = binding !== undefined;\n\n  const currentValue = assetHasBinding\n    ? options.data.model.get(binding, {\n        includeInvalid: true,\n      })\n    : undefined;\n\n  const resetValue = () => {\n    if (assetHasBinding) {\n      return options.data.model.set([[binding, null]]);\n    }\n  };\n\n  const transformedChoiceItems: TransformedChoiceItem[] = (items || []).map(\n    (item, index) => ({\n      ...item,\n      id: item.id ?? `${asset.id}-choice-${index}`,\n      select() {\n        if (assetHasBinding) {\n          return options.data.model.set([[binding, item.value]]);\n        }\n      },\n      unselect: resetValue,\n    }),\n  );\n\n  return {\n    ...rest,\n    binding,\n    clearSelection: resetValue,\n    items: transformedChoiceItems,\n    value: currentValue,\n    validation: assetHasBinding\n      ? options.validation?.get(binding, { track: true })\n      : undefined,\n    dataType: assetHasBinding ? options.validation?.type(binding) : undefined,\n  };\n};\n","import { NodeType, getNodeID } from \"@player-ui/player\";\nimport type {\n  Player,\n  PlayerPlugin,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  ViewInstance,\n  Parser,\n  ViewPlugin,\n  Resolver,\n  Resolve,\n} from \"@player-ui/player\";\nimport { AsyncParallelBailHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { omit } from \"timm\";\n\nexport * from \"./types\";\nexport * from \"./transform\";\n\nexport interface AsyncNodePluginOptions {\n  /** A set of plugins to load  */\n  plugins?: AsyncNodeViewPlugin[];\n}\n\nexport interface AsyncNodeViewPlugin extends ViewPlugin {\n  /** Use this to tap into the async node plugin hooks */\n  applyPlugin: (asyncNodePlugin: AsyncNodePlugin) => void;\n\n  asyncNode: AsyncParallelBailHook<[Node.Async, (result: any) => void], any>;\n}\nexport type AsyncHandler = (\n  node: Node.Async,\n  callback?: (result: any) => void,\n) => Promise<any>;\n\n/**\n * Async node plugin used to resolve async nodes in the content\n * If an async node is present, allow users to provide a replacement node to be rendered when ready\n */\nexport class AsyncNodePlugin implements PlayerPlugin {\n  private plugins: AsyncNodeViewPlugin[] | undefined;\n\n  constructor(options: AsyncNodePluginOptions, asyncHandler?: AsyncHandler) {\n    if (options?.plugins) {\n      this.plugins = options.plugins;\n      options.plugins.forEach((plugin) => {\n        plugin.applyPlugin(this);\n      });\n    }\n\n    if (asyncHandler) {\n      this.hooks.onAsyncNode.tap(\n        \"async\",\n        async (node: Node.Async, callback) => {\n          return await asyncHandler(node, callback);\n        },\n      );\n    }\n  }\n\n  public readonly hooks = {\n    onAsyncNode: new AsyncParallelBailHook<\n      [Node.Async, (result: any) => void],\n      any\n    >(),\n  };\n\n  name = \"AsyncNode\";\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        this.plugins?.forEach((plugin) => {\n          plugin.apply(view);\n        });\n      });\n    });\n  }\n}\n\nexport class AsyncNodePluginPlugin implements AsyncNodeViewPlugin {\n  public asyncNode = new AsyncParallelBailHook<\n    [Node.Async, (result: any) => void],\n    any\n  >();\n  private basePlugin: AsyncNodePlugin | undefined;\n\n  name = \"AsyncNode\";\n\n  private resolvedMapping = new Map<string, any>();\n\n  private currentView: ViewInstance | undefined;\n\n  /**\n   * Updates the node asynchronously based on the result provided.\n   * This method is responsible for handling the update logic of asynchronous nodes.\n   * It checks if the node needs to be updated based on the new result and updates the mapping accordingly.\n   * If an update is necessary, it triggers an asynchronous update on the view.\n   * @param node The asynchronous node that might be updated.\n   * @param result The result obtained from resolving the async node. This could be any data structure or value.\n   * @param options Options provided for node resolution, including a potential parseNode function to process the result.\n   * @param view The view instance where the node resides. This can be undefined if the view is not currently active.\n   */\n  private handleAsyncUpdate(\n    node: Node.Async,\n    result: any,\n    options: Resolve.NodeResolveOptions,\n    view: ViewInstance | undefined,\n  ) {\n    const parsedNode =\n      options.parseNode && result ? options.parseNode(result) : undefined;\n\n    if (this.resolvedMapping.get(node.id) !== parsedNode) {\n      this.resolvedMapping.set(node.id, parsedNode ? parsedNode : node);\n      view?.updateAsync();\n    }\n  }\n\n  /**\n   * Handles the asynchronous API integration for resolving nodes.\n   * This method sets up a hook on the resolver's `beforeResolve` event to process async nodes.\n   * @param resolver The resolver instance to attach the hook to.\n   * @param view\n   */\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(this.name, (node, options) => {\n      let resolvedNode;\n      if (this.isAsync(node)) {\n        const mappedValue = this.resolvedMapping.get(node.id);\n        if (mappedValue) {\n          resolvedNode = mappedValue;\n        }\n      } else {\n        resolvedNode = null;\n      }\n\n      const newNode = resolvedNode || node;\n      if (!resolvedNode && node?.type === NodeType.Async) {\n        queueMicrotask(async () => {\n          const result = await this.basePlugin?.hooks.onAsyncNode.call(\n            node,\n            (result) => {\n              this.handleAsyncUpdate(node, result, options, this.currentView);\n            },\n          );\n          this.handleAsyncUpdate(node, result, options, this.currentView);\n        });\n\n        return node;\n      }\n      return newNode;\n    });\n  }\n\n  private isAsync(node: Node.Node | null): node is Node.Async {\n    return node?.type === NodeType.Async;\n  }\n\n  private isDeterminedAsync(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"async\");\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      this.name,\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isDeterminedAsync(obj)) {\n          const parsedAsync = parser.parseObject(\n            omit(obj, \"async\"),\n            nodeType,\n            options,\n          );\n          const parsedNodeId = getNodeID(parsedAsync);\n\n          if (parsedAsync === null || !parsedNodeId) {\n            return childOptions ? [] : null;\n          }\n\n          const asyncAST = parser.createASTNode(\n            {\n              id: parsedNodeId,\n              type: NodeType.Async,\n              value: parsedAsync,\n            },\n            obj,\n          );\n\n          if (childOptions) {\n            return asyncAST\n              ? [\n                  {\n                    path: [...childOptions.path, childOptions.key],\n                    value: asyncAST,\n                  },\n                ]\n              : [];\n          }\n\n          return asyncAST;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance): void {\n    this.currentView = view;\n    view.hooks.parser.tap(\"async\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"async\", this.applyResolver.bind(this));\n  }\n\n  applyPlugin(asyncNodePlugin: AsyncNodePlugin): void {\n    this.basePlugin = asyncNodePlugin;\n  }\n}\n","import { Builder } from \"@player-ui/player\";\nimport type { AsyncTransformFunc } from \"./types\";\n\n/**\n * Util function to generate transform function for async asset\n * @param asset - async asset to apply beforeResolve transform\n * @param transformedAssetType: transformed asset type for rendering\n * @param wrapperAssetType: container asset type\n * @param flatten: flatten the streamed in content\n * @returns - wrapper asset with children of transformed asset and async node\n */\n\nexport const asyncTransform: AsyncTransformFunc = (\n  assetId,\n  wrapperAssetType,\n  asset,\n  flatten,\n) => {\n  const id = \"async-\" + assetId;\n\n  const asyncNode = Builder.asyncNode(id, flatten);\n  let multiNode;\n  let assetNode;\n\n  if (asset) {\n    assetNode = Builder.assetWrapper(asset);\n    multiNode = Builder.multiNode(assetNode, asyncNode);\n  } else {\n    multiNode = Builder.multiNode(asyncNode);\n  }\n\n  const wrapperAsset = Builder.asset({\n    id: wrapperAssetType + \"-\" + id,\n    type: wrapperAssetType,\n  });\n\n  Builder.addChild(wrapperAsset, [\"values\"], multiNode);\n\n  return wrapperAsset;\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport type {\n  BeforeTransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\nimport { composeBefore, compose } from \"@player-ui/asset-transform-plugin\";\nimport { asyncTransform } from \"@player-ui/async-node-plugin\";\nimport { ChatMessageAsset } from \"./types\";\n/**\n * In beforeTransform function, pass in flatten marker and call beforeResolve function.\n * Flatten default value is true.\n * input: ChatMessageAsset\n * @param asset - Asset to apply the transform to\n * @returns - transformed asset with async node and asset node\n */\nexport const transform: BeforeTransformFunction<ChatMessageAsset> = (asset) => {\n  const newAsset = asset.children?.[0]?.value;\n\n  if (!newAsset) {\n    return asyncTransform(asset.value.id, \"collection\");\n  }\n  return asyncTransform(asset.value.id, \"collection\", newAsset);\n};\n\nexport const chatMessageTransform: TransformFunctions = compose(\n  composeBefore(transform),\n);\n","import type { Player, ExtendedPlayerPlugin } from \"@player-ui/player\";\nimport { AssetTransformPlugin } from \"@player-ui/asset-transform-plugin\";\nimport type {\n  ActionAsset,\n  InputAsset,\n  ImageAsset,\n  InfoAsset,\n  TextAsset,\n  CollectionAsset,\n  ChoiceAsset,\n  ChatMessageAsset,\n} from \"./assets\";\nimport {\n  inputTransform,\n  actionTransform,\n  imageTransform,\n  infoTransform,\n  choiceTransform,\n  chatMessageTransform,\n} from \"./assets\";\n\n/**\n * A plugin to add transforms for the reference assets\n */\nexport class ReferenceAssetsPlugin\n  implements\n    ExtendedPlayerPlugin<\n      [\n        ActionAsset,\n        InputAsset,\n        ImageAsset,\n        TextAsset,\n        CollectionAsset,\n        ChoiceAsset,\n        ChatMessageAsset,\n      ],\n      [InfoAsset]\n    >\n{\n  name = \"reference-assets-transforms\";\n\n  apply(player: Player) {\n    player.registerPlugin(\n      new AssetTransformPlugin([\n        [{ type: \"action\" }, actionTransform],\n        [{ type: \"input\" }, inputTransform],\n        [{ type: \"image\" }, imageTransform],\n        [{ type: \"info\" }, infoTransform],\n        [{ type: \"choice\" }, choiceTransform],\n        [{ type: \"chat-message\" }, chatMessageTransform],\n      ]),\n    );\n  }\n}\n"]}