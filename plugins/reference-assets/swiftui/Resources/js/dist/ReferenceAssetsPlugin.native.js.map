{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/2194/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/asset-transform/core/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/asset-transform/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/action/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/input/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/info/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/image/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/choice/transform.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/builder/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/asset-transform.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-view-plugin.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/async-node/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/async-node/core/src/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/chat-message/transform.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/plugin.ts"],"names":["ReferenceAssetsPlugin","dlv_es_default","obj","key","def","p","undef","split","length","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","Array","from","entry","path","value","count","size","createBasicMatcher","seed","matcher","match","composeTransforms","args","reverse","fn","fns","asset","options","store","reduce","prevValue","current","composeBefore","beforeResolve","compose","beforeResolveFns","resolveFns","arg","push","resolve","maybeCompose","maybeFn","cleanupTransformRegistry","maybeRegistry","isArray","wrappedTransforms","map","Registry","registry","forEach","set","isBackAction","action","equalToOrIn","check","includes","callTap","tap","ctx","context","callback","find","iter","tar","keys","dequal","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","asArray","findInArray","array","findIndex","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","Error","transaction","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","NOOP_MODEL","createModelWithOptions","nextModel","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isObjectExpression","isPromiselike","then","Promise","constructor","catch","finally","makePromiseAwareBinaryOp","operation","a","b","all","resolvedA","resolvedB","makePromiseAwareUnaryOp","resolved","handleConditionalBranching","testValue","getTrueBranch","getFalseBranch","resolveNode","branch","branchResult","parse","schema","parseQueue","shift","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","filter","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","unpackNode","item","unpacked","children","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","createStatefulValidationObject","severity","state","isBlockingNavigation","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_sorted_array","module","SortedArray","defclass","compare","compareDefault","insert","element","high","low","pos","ordering","search","remove","splice","comparing","define","amd","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","result","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","pDefer","deferred","promise","reject","require_queue_microtask","queueMicrotask","bind","window","global","setTimeout","src_exports","actionTransform","chatMessageTransform","choiceTransform","expPropTransform","imageTransform","infoTransform","inputTransform","transform","includeInvalid","validation","track","dataType","import_sorted_array","createSortedArray","initialSet","query","callbackfn","clear","isRegistryEmpty","AssetTransformPlugin","transforms","apply","player","hooks","viewController","vc","transformRegistry","run","skipValidation","metaData","transition","force","backIconTransform","role","skipArray","plugins","stringResolver","propertiesToSkip","infoAsset","actions","segmentedActions","segmentedActionsArray","prev","getImageAlt","props","placeholder","accessibility","altText","newImage","items","assetHasBinding","currentValue","resetValue","transformedChoiceItems","select","unselect","clearSelection","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","import_ts_nested_error","import_timm","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","import_p_defer","import_queue_microtask","__defProp2","__export2","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","expected","whitespace","maybeNumber","Number","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","import_ts_nested_error2","actualValue","appendPathSegments","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","BINDING_BRACKETS_REGEX","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","BindingParser","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","DependencyTracker","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","DependencyModel","rootModel","NOOPDataModel","ROOT_BINDING","PipelinedDataModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","handler","appliedTransaction","LocalModel","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","waitFor","_context","condition","ifTrue","ifFalse","testResult","resolvedTest","resolveParams","andandOperator","LogicalOperators","and","ororOperator","or","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","PromiseCollectionHandler","handleArray","hasPromises","some","handleObject","resolvedAttributes","promises","attr","keyPromise","valuePromise","leftNode","rightNode","leftResult","awaitedLeft","rightResult","ExpressionEvaluator","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","expressions","defaultHookOptions","_execAST","_resolveNode","resolvedOpts","_nothing","_execString","evaluateAsync","async","addExpressionFunction","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","matched","storedAST","throwErrors","_currentValue","expressionContext","leftVal","rightVal","argVal","expressionName","n","resolvedArgs","objVal","propVal","results","ele","TapableLogger","trace","debug","info","warn","log","logHandlers","createHandler","logger","addHandler","logHandler","removeHandler","ProxyLogger","loggerProvider","proxiedLoggerProvider","identify","SchemaController","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","addDataTypes","getValidationsForBinding","typeDef","getApparentType","vRef","trigger","normalizeBinding","cached","bindingArray","recordBinding","getType","schemaType","baseType","getTypeDefinition","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","ValidationMiddleware","validator","shadowModelPaths","shouldIncludeInvalid","asModel","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","ValidatorRegistry","register","EMPTY_NODE","Parser","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","objToParse","localObj","objEntries","v","defaultValue","accumulation","localValue","newChildren","parentObj","baseAst","child","withContext","Resolver","root","skipResolve","beforeUpdate","afterUpdate","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm4","rawParent","cacheUpdate","partiallyResolvedParent","resolvedAST","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","isNestedMultiNodeWithAsync","isNestedMultiNode","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","rawParentToPassIn","hasAsync","newValues","mValue","mTree","unpackAndPush","bindingDep","copy","scope","initial","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","ViewInstance","onUpdate","resolver","onTemplatePluginCreated","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","Builder","_Builder","assetWrapper","valueNode","addChild","multiNode","m","asyncNode","newChild","updateChildrenByPath","pathToMatch","updateFn","updatedChildren","templateSymbol","TemplatePlugin","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","newNode","import_timm6","findBasePath","parentNode","original","StringResolverPlugin","propertiesToSkipCache","applyResolver","propsToSkip","nodePath","ApplicabilityPlugin","isApplicability","isApplicable","nodeType","parsedApplicability","applicabilityNode","applicability","SwitchPlugin","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","MultiNodePlugin","childVal","AssetPlugin","assetAST","FlowInstance","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","afterTransition","history","_oldState","nextState","newState","flowPromise","state_type","initialState","startState","import_p_defer2","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","FlowController","navigation","navStack","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","ValidationBindingTrackerViewPlugin","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","originalNode","newlyComputed","nodeSet","sectionNode","temp","SCHEMA_VALIDATION_PROVIDER_NAME","VIEW_VALIDATION_PROVIDER_NAME","VALIDATION_PROVIDER_NAME_SYMBOL","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","dismissable","dismiss","newApplicableValidations","currentPhase","ValidationController","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","LocalStateStore","updateCallback","removeKey","useSharedState","getLocalStateFunction","countKey","localState","oldCount","findUp","AssetTransformCorePlugin","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","lastUpdatedNode","updateState","getStore","stepKey","storedState","useLocalState","skip","isParentOfUpdated","isChildOfUpdated","ViewController","initialViews","resolveView","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","ReadOnlyDataController","controller","DataController","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","ConstantsController","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","FlowExpPlugin","expressionEvaluator","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","expEvaluator","NOT_STARTED_STATE","DefaultViewPlugin","pluginOptions","PLAYER_VERSION","COMMIT","_Player","config","constantsController","dataController","validationController","bindingParser","resolveFlowContent","plugin","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","resolveStrings","transitionVal","computedTransitionVal","param","constants","views","utils","pluginSymbol","endState","flowResult","controllers","fail","payload","maybeUpdateState","endProps","errorState","asyncTransform","assetId","wrapperAssetType","assetNode","wrapperAsset","newAsset"],"mappings":"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","sourcesContent":["\"use strict\";\nvar ReferenceAssetsPlugin = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length = array.length, index = 0;\n            while (index < length)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn8;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit4;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn8(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn8(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn8(a, path, nextVal);\n      }\n      function omit4(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn8,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit4,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    ReferenceAssetsPlugin: () => ReferenceAssetsPlugin,\n    actionTransform: () => actionTransform,\n    chatMessageTransform: () => chatMessageTransform,\n    choiceTransform: () => choiceTransform,\n    expPropTransform: () => expPropTransform,\n    imageTransform: () => imageTransform,\n    infoTransform: () => infoTransform,\n    inputTransform: () => inputTransform,\n    isBackAction: () => isBackAction,\n    transform: () => transform2\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/input/transform.ts\n  var inputTransform = (asset, options) => {\n    return {\n      ...asset,\n      format(val) {\n        if (asset.binding === void 0) {\n          return val;\n        }\n        return options.data.format(asset.binding, val);\n      },\n      set(val) {\n        if (asset.binding === void 0) {\n          return;\n        }\n        return options.data.model.set([[asset.binding, val]], {\n          formatted: true\n        });\n      },\n      value: asset.binding === void 0 ? \"\" : options.data.model.get(asset.binding, {\n        includeInvalid: true,\n        formatted: true\n      }),\n      validation: asset.binding === void 0 ? void 0 : options.validation?.get(asset.binding, { track: true }),\n      dataType: asset.binding === void 0 ? void 0 : options.validation?.type(asset.binding)\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+asset-transform-plugin@0.0.0/node_modules/@player-ui/asset-transform-plugin/dist/index.mjs\n  function composeTransforms(...args) {\n    const [fn, ...fns] = args.reverse();\n    return (asset, options, store) => {\n      const value = fn(asset, options, store);\n      if (!fns.length) {\n        return value;\n      }\n      return fns.reduce((prevValue, current) => {\n        return current(prevValue, options, store);\n      }, value);\n    };\n  }\n  function composeBefore(...args) {\n    return {\n      beforeResolve: composeTransforms(...args)\n    };\n  }\n  function compose(...args) {\n    const beforeResolveFns = [];\n    const resolveFns = [];\n    for (const arg of args) {\n      if (typeof arg === \"function\") {\n        resolveFns.push(arg);\n      } else {\n        if (arg?.resolve) {\n          resolveFns.push(arg.resolve);\n        }\n        if (arg?.beforeResolve) {\n          beforeResolveFns.push(arg.beforeResolve);\n        }\n      }\n    }\n    return {\n      beforeResolve: beforeResolveFns.length ? composeTransforms(...beforeResolveFns) : void 0,\n      resolve: resolveFns.length ? composeTransforms(...resolveFns) : void 0\n    };\n  }\n  function maybeCompose(maybeFn) {\n    if (typeof maybeFn === \"object\") {\n      return maybeFn;\n    }\n    return compose(maybeFn);\n  }\n  function cleanupTransformRegistry(maybeRegistry) {\n    if (Array.isArray(maybeRegistry)) {\n      const wrappedTransforms = maybeRegistry.map(([key, value]) => {\n        return [key, maybeCompose(value)];\n      });\n      return new Registry(wrappedTransforms);\n    }\n    const registry = new Registry();\n    maybeRegistry.forEach(({ key, value }) => {\n      registry.set(key, maybeCompose(value));\n    });\n    return registry;\n  }\n  var AssetTransformPlugin = class {\n    constructor(transforms) {\n      this.name = \"asset-transform\";\n      this.registry = cleanupTransformRegistry(transforms);\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (vc) => {\n        this.registry.forEach(\n          ({ key, value }) => vc.transformRegistry.set(key, maybeCompose(value))\n        );\n      });\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/action/transform.ts\n  function isBackAction(action) {\n    return action.value === \"Prev\";\n  }\n  var transform = (action, options) => {\n    return {\n      ...action,\n      run() {\n        if (action.exp) {\n          options.evaluate(action.exp);\n        }\n        if (action.value) {\n          const skipValidation = action.metaData?.skipValidation;\n          options.transition?.(action.value, { force: skipValidation });\n        }\n      }\n    };\n  };\n  var backIconTransform = (action) => {\n    if (isBackAction(action) && action?.metaData?.role === void 0) {\n      return {\n        ...action,\n        metaData: {\n          ...action?.metaData,\n          role: \"back\"\n        }\n      };\n    }\n    return action;\n  };\n  var expPropTransform = (asset) => {\n    const skipArray = asset.plugins?.stringResolver?.propertiesToSkip;\n    if (skipArray && skipArray.indexOf(\"exp\") > 1) {\n      return asset;\n    }\n    return {\n      ...asset,\n      plugins: {\n        ...asset.plugins,\n        stringResolver: {\n          ...asset?.plugins?.stringResolver,\n          propertiesToSkip: [\n            ...asset.plugins?.stringResolver?.propertiesToSkip ?? [],\n            \"exp\"\n          ]\n        }\n      }\n    };\n  };\n  var actionTransform = compose(\n    transform,\n    backIconTransform,\n    composeBefore(expPropTransform)\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/info/transform.ts\n  var infoTransform = (infoAsset) => {\n    const actions = infoAsset?.actions;\n    const segmentedActions = actions?.reduce(\n      (segmentedActionsArray, action) => {\n        segmentedActionsArray[isBackAction(action.asset) ? \"prev\" : \"next\"].push(action);\n        return segmentedActionsArray;\n      },\n      { next: [], prev: [] }\n    );\n    return {\n      ...infoAsset,\n      segmentedActions\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/image/transform.ts\n  var getImageAlt = (props) => {\n    const { metaData, placeholder } = props;\n    if (metaData.accessibility)\n      return metaData.accessibility;\n    if (placeholder)\n      return placeholder;\n    return \"Image\";\n  };\n  var imageTransform = (props) => {\n    const altText = getImageAlt(props);\n    const newImage = {\n      ...props,\n      altText\n    };\n    return newImage;\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/choice/transform.ts\n  var choiceTransform = (asset, options) => {\n    const { items, binding, ...rest } = asset;\n    const assetHasBinding = binding !== void 0;\n    const currentValue = assetHasBinding ? options.data.model.get(binding, {\n      includeInvalid: true\n    }) : void 0;\n    const resetValue = () => {\n      if (assetHasBinding) {\n        return options.data.model.set([[binding, null]]);\n      }\n    };\n    const transformedChoiceItems = (items || []).map(\n      (item, index) => ({\n        ...item,\n        id: item.id ?? `${asset.id}-choice-${index}`,\n        select() {\n          if (assetHasBinding) {\n            return options.data.model.set([[binding, item.value]]);\n          }\n        },\n        unselect: resetValue\n      })\n    );\n    return {\n      ...rest,\n      binding,\n      clearSelection: resetValue,\n      items: transformedChoiceItems,\n      value: currentValue,\n      validation: assetHasBinding ? options.validation?.get(binding, { track: true }) : void 0,\n      dataType: assetHasBinding ? options.validation?.type(binding) : void 0\n    };\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_ts_nested_error = __toESM(require_nested_error(), 1);\n  var import_ts_nested_error2 = __toESM(require_nested_error(), 1);\n  var import_timm = __toESM(require_timm(), 1);\n  var import_ts_nested_error3 = __toESM(require_nested_error(), 1);\n  var import_timm2 = __toESM(require_timm(), 1);\n  var import_timm3 = __toESM(require_timm(), 1);\n  var import_timm4 = __toESM(require_timm(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm5 = __toESM(require_timm(), 1);\n  var import_timm6 = __toESM(require_timm(), 1);\n  var import_timm7 = __toESM(require_timm(), 1);\n  var import_timm8 = __toESM(require_timm(), 1);\n  var import_p_defer = __toESM(require_p_defer(), 1);\n  var import_p_defer2 = __toESM(require_p_defer(), 1);\n  var import_timm9 = __toESM(require_timm(), 1);\n  var import_queue_microtask = __toESM(require_queue_microtask(), 1);\n  var __defProp2 = Object.defineProperty;\n  var __export2 = (target, all) => {\n    for (var name in all)\n      __defProp2(target, name, { get: all[name], enumerable: true });\n  };\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n  var evaluator_functions_exports = {};\n  __export2(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal,\n    waitFor: () => waitFor\n  });\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const testResult = ctx.evaluate(condition);\n    if (testResult instanceof Promise) {\n      return testResult.then((resolvedTest) => {\n        if (resolvedTest) {\n          return ctx.evaluate(ifTrue);\n        }\n        if (ifFalse) {\n          return ctx.evaluate(ifFalse);\n        }\n        return null;\n      });\n    }\n    if (testResult) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  var waitFor = async (ctx, promise) => {\n    return await promise;\n  };\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  var andandOperator = (ctx, a, b) => {\n    return LogicalOperators.and(ctx, a, b);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b) => {\n    return LogicalOperators.or(ctx, a, b);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // Promise-aware comparison operators\n    // eslint-disable-next-line\n    \"==\": makePromiseAwareBinaryOp((a, b) => a == b),\n    // eslint-disable-next-line\n    \"!=\": makePromiseAwareBinaryOp((a, b) => a != b),\n    \">\": makePromiseAwareBinaryOp((a, b) => a > b),\n    \">=\": makePromiseAwareBinaryOp((a, b) => a >= b),\n    \"<\": makePromiseAwareBinaryOp((a, b) => a < b),\n    \"<=\": makePromiseAwareBinaryOp((a, b) => a <= b),\n    \"!==\": makePromiseAwareBinaryOp((a, b) => a !== b),\n    \"===\": makePromiseAwareBinaryOp((a, b) => a === b),\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": makePromiseAwareUnaryOp((a) => !a)\n  };\n  function isPromiselike(value) {\n    return value != null && typeof value === \"object\" && typeof value.then === \"function\" && // Additional safeguards against false positives\n    (value instanceof Promise || // Check for standard Promise constructor name\n    value.constructor?.name === \"Promise\" || // Verify it has other Promise-like methods to reduce false positives\n    typeof value.catch === \"function\" && typeof value.finally === \"function\");\n  }\n  function makePromiseAwareBinaryOp(operation) {\n    return (a, b) => {\n      if (isPromiselike(a) || isPromiselike(b)) {\n        return Promise.all([Promise.resolve(a), Promise.resolve(b)]).then(\n          ([resolvedA, resolvedB]) => operation(resolvedA, resolvedB)\n        );\n      }\n      return operation(a, b);\n    };\n  }\n  function makePromiseAwareUnaryOp(operation) {\n    return (a) => {\n      if (isPromiselike(a)) {\n        return a.then((resolved) => operation(resolved));\n      }\n      return operation(a);\n    };\n  }\n  function handleConditionalBranching(testValue, getTrueBranch, getFalseBranch, resolveNode) {\n    if (isPromiselike(testValue)) {\n      return testValue.then((resolved) => {\n        const branch2 = resolved ? getTrueBranch() : getFalseBranch();\n        const branchResult = resolveNode(branch2);\n        return isPromiselike(branchResult) ? branchResult : Promise.resolve(branchResult);\n      });\n    }\n    const branch = testValue ? getTrueBranch() : getFalseBranch();\n    return resolveNode(branch);\n  }\n  var PromiseCollectionHandler = {\n    /**\n     * Handle array with potential Promise elements\n     */\n    handleArray(items) {\n      const hasPromises = items.some((item) => isPromiselike(item));\n      return hasPromises ? Promise.all(items) : items;\n    },\n    /**\n     * Handle object with potential Promise keys/values\n     */\n    handleObject(attributes, resolveNode) {\n      const resolvedAttributes = {};\n      const promises = [];\n      let hasPromises = false;\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        if (isPromiselike(key) || isPromiselike(value)) {\n          hasPromises = true;\n          const keyPromise = Promise.resolve(key);\n          const valuePromise = Promise.resolve(value);\n          promises.push(\n            Promise.all([keyPromise, valuePromise]).then(\n              ([resolvedKey, resolvedValue]) => {\n                resolvedAttributes[resolvedKey] = resolvedValue;\n              }\n            )\n          );\n        } else {\n          resolvedAttributes[key] = value;\n        }\n      });\n      return hasPromises ? Promise.all(promises).then(() => resolvedAttributes) : resolvedAttributes;\n    }\n  };\n  var LogicalOperators = {\n    and: (ctx, leftNode, rightNode) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (isPromiselike(leftResult)) {\n        return leftResult.then((awaitedLeft) => {\n          if (!awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isPromiselike(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult && ctx.evaluate(rightNode);\n    },\n    or: (ctx, leftNode, rightNode) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (isPromiselike(leftResult)) {\n        return leftResult.then((awaitedLeft) => {\n          if (awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isPromiselike(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult || ctx.evaluate(rightNode);\n    }\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(\n          Object.entries(DEFAULT_BINARY_OPERATORS)\n        ),\n        unary: new Map(\n          Object.entries(DEFAULT_UNARY_OPERATORS)\n        ),\n        expressions: new Map([\n          ...Object.entries(evaluator_functions_exports),\n          [\"await\", waitFor]\n        ])\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n        return this._resolveNode(result, node, options);\n      });\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    evaluateAsync(expr, options) {\n      return this.evaluate(expr, { ...options, async: true });\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        const [, matched] = Array.from(matches);\n        if (matched) {\n          matchedExp = matched;\n        }\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            const left2 = resolveNode(node.left);\n            const right2 = resolveNode(node.right);\n            if (isPromiselike(left2) || isPromiselike(right2)) {\n              return Promise.all([left2, right2]).then(\n                ([leftVal, rightVal]) => operator(expressionContext, leftVal, rightVal)\n              );\n            }\n            return operator(expressionContext, left2, right2);\n          }\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n          if (isPromiselike(left) || isPromiselike(right)) {\n            return Promise.all([left, right]).then(\n              ([leftVal, rightVal]) => operator(leftVal, rightVal)\n            );\n          }\n          return operator(left, right);\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.argument);\n            }\n            const arg2 = resolveNode(node.argument);\n            if (isPromiselike(arg2)) {\n              return arg2.then((argVal) => operator(expressionContext, argVal));\n            }\n            return operator(expressionContext, arg2);\n          }\n          const arg = resolveNode(node.argument);\n          if (isPromiselike(arg)) {\n            return arg.then((argVal) => operator(argVal));\n          }\n          return operator(arg);\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        return PromiseCollectionHandler.handleObject(\n          node.attributes,\n          resolveNode\n        );\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        const hasPromises = args.some(isPromiselike);\n        if (hasPromises) {\n          return Promise.all(args).then(\n            (resolvedArgs) => operator(expressionContext, ...resolvedArgs)\n          );\n        }\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        if (isPromiselike(obj) || isPromiselike(prop)) {\n          return Promise.all([obj, prop]).then(\n            ([objVal, propVal]) => objVal[propVal]\n          );\n        }\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          if (isPromiselike(value)) {\n            return value.then((resolvedValue) => {\n              model.set([[node.left.ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          }\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          if (isPromiselike(value)) {\n            return value.then((resolvedValue) => {\n              this.vars[node.left.name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const testResult = resolveNode(node.test);\n        return handleConditionalBranching(\n          testResult,\n          () => node.consequent,\n          () => node.alternate,\n          resolveNode\n        );\n      }\n      if (node.type === \"ArrayExpression\") {\n        const results = node.elements.map((ele) => resolveNode(ele));\n        return PromiseCollectionHandler.handleArray(results);\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              const left = resolveNode(node.left);\n              const right = resolveNode(node.right);\n              if (isPromiselike(left) || isPromiselike(right)) {\n                newValue = Promise.all([left, right]).then(\n                  ([leftVal, rightVal]) => operation(expressionContext, leftVal, rightVal)\n                );\n              } else {\n                newValue = operation(expressionContext, left, right);\n              }\n            }\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n            if (isPromiselike(left) || isPromiselike(right)) {\n              newValue = Promise.all([left, right]).then(\n                ([leftVal, rightVal]) => operation(leftVal, rightVal)\n              );\n            } else {\n              newValue = operation(left, right);\n            }\n          }\n          if (node.left.type === \"ModelRef\") {\n            if (isPromiselike(newValue)) {\n              return newValue.then((resolvedValue) => {\n                model.set([[node.left.ref, resolvedValue]]);\n                return resolvedValue;\n              });\n            }\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            if (isPromiselike(newValue)) {\n              return newValue.then((resolvedValue) => {\n                this.vars[node.left.name] = resolvedValue;\n                return resolvedValue;\n              });\n            }\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n  };\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n  var EMPTY_NODE = {\n    type: \"empty\"\n    /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(\n        value,\n        \"view\"\n        /* View */\n      );\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\", options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\",\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm5.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" || node.type === \"view\") {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\") {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm4.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\"\n        /* Empty */\n      };\n      const isNestedMultiNodeWithAsync = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.parent?.type === \"multi-node\" && partiallyResolvedParent.parent.type === \"value\" && resolvedAST.parent?.type === \"asset\" && resolvedAST.parent.value.id.includes(\"async\");\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.type === \"multi-node\" && partiallyResolvedParent.type === \"value\";\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\") {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      if (isNestedMultiNodeWithAsync) {\n        resolvedAST.parent = partiallyResolvedParent.parent;\n      } else {\n        resolvedAST.parent = partiallyResolvedParent;\n      }\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" && !childNode.override) {\n              const arr = (0, import_timm4.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm4.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm4.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\") {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const hasAsync = resolvedAST.values.map((value, index) => value.type === \"async\" ? index : -1).filter((index) => index !== -1);\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        if (hasAsync.length > 0) {\n          const copy = newValues;\n          hasAsync.forEach((index) => {\n            if (copy[index])\n              copy.splice(index, 1, ...unpackNode(copy[index]));\n          });\n          resolvedAST.values = copy;\n        } else {\n          resolvedAST.values = newValues;\n        }\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  function unpackNode(item) {\n    const unpacked = [];\n    if (\"children\" in item && item.children?.[0]?.value.type === \"asset\" && (item.children?.[0]?.value).children) {\n      if ((item.children?.[0]?.value).children?.[0]?.value.type === \"multi-node\") {\n        ((item.children?.[0]?.value).children?.[0]?.value).values.forEach((value) => {\n          unpacked.push(value);\n        });\n      }\n    } else {\n      unpacked.push(item);\n    }\n    return unpacked;\n  }\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        onTemplatePluginCreated: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n      this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n        this.templatePlugin = templatePlugin;\n      });\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n  };\n  var Builder = class _Builder {\n    /**\n     * Creates an asset node\n     *\n     * @param value - the value to put in the asset node\n     */\n    static asset(value) {\n      return {\n        type: \"asset\",\n        value\n      };\n    }\n    static assetWrapper(value) {\n      const valueNode = _Builder.value();\n      _Builder.addChild(valueNode, \"asset\", value);\n      return valueNode;\n    }\n    /**\n     * Creates a value node\n     *\n     * @param v - The object to put in the value node\n     */\n    static value(v) {\n      return {\n        type: \"value\",\n        value: v\n      };\n    }\n    /**\n     * Creates a multiNode and associates the multiNode as the parent\n     * of all the value nodes\n     *\n     * @param values - the value, applicability or async nodes to put in the multinode\n     */\n    static multiNode(...values) {\n      const m = {\n        type: \"multi-node\",\n        override: true,\n        values\n      };\n      values.forEach((v) => {\n        v.parent = m;\n      });\n      return m;\n    }\n    /**\n     * Creates an async node\n     *\n     * @param id - the id of async node. It should be identical for each async node\n     */\n    static asyncNode(id, flatten2 = true) {\n      return {\n        id,\n        type: \"async\",\n        flatten: flatten2,\n        value: {\n          type: \"value\",\n          value: {\n            id\n          }\n        }\n      };\n    }\n    /**\n     * Adds a child node to a node\n     *\n     * @param node - The node to add a child to\n     * @param path - The path at which to add the child\n     * @param child - The child node\n     */\n    static addChild(node, path, child) {\n      child.parent = node;\n      const newChild = {\n        path: Array.isArray(path) ? path : [path],\n        value: child\n      };\n      node.children = node.children || [];\n      node.children.push(newChild);\n      return node;\n    }\n    /**\n     * Updates children of a node of the same path and preserves order\n     *\n     * @param node - The node to update children for\n     * @param pathToMatch - The path to match against child paths\n     * @param mapFn - Function to transform matching children\n     */\n    static updateChildrenByPath(node, pathToMatch, updateFn) {\n      if (!node.children)\n        return node;\n      const updatedChildren = node.children.map(\n        (child) => (\n          // Check if paths match exactly\n          child.path.join() === pathToMatch.join() ? { ...child, value: updateFn(child) } : child\n        )\n      );\n      return {\n        ...node,\n        children: updatedChildren\n      };\n    }\n  };\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\", {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\",\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\") {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\") {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" || node.type === \"asset\") && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\",\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\") {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    }\n  };\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\") {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" || node.type === \"unknown\") {\n          return null;\n        }\n        if (node.type === \"value\" || node.type === \"asset\" || node.type === \"view\") {\n          let propsToSkip;\n          if (node.type === \"asset\" || node.type === \"view\") {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" && (node.parent?.parent?.type === \"asset\" || node.parent?.parent?.type === \"view\") && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\") {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\",\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\") {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\",\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\",\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\") {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\") {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\", options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\",\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\") {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\", options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer2.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\") {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm9.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(viewController) {\n      viewController.hooks.view.tap(\"asset-transform\", (view) => {\n        this.stateStore.clear();\n        view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n          let lastUpdatedNode;\n          const updateState = (node) => {\n            lastUpdatedNode = node;\n            view.update(/* @__PURE__ */ new Set());\n          };\n          const getStore = (node, stepKey) => {\n            let store;\n            const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n            const storedState = this.stateStore.get(node);\n            if (storedState) {\n              store = storedState;\n              store.removeKey(countKey);\n            } else {\n              store = new LocalStateStore(() => {\n                updateState(node);\n              });\n              this.stateStore.set(node, store);\n            }\n            return {\n              useSharedState: (key) => {\n                return store.useSharedState(key);\n              },\n              useLocalState: (initialState) => {\n                return store.getLocalStateFunction(\n                  stepKey,\n                  countKey\n                )(initialState);\n              }\n            };\n          };\n          resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n            if (node && (node.type === \"asset\" || node.type === \"view\")) {\n              const transform3 = this.registry.get(node.value);\n              if (transform3?.beforeResolve) {\n                const store = getStore(\n                  options.node ?? node,\n                  this.beforeResolveSymbol\n                );\n                return transform3.beforeResolve(node, options, store);\n              }\n            }\n            return node;\n          });\n          resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n            lastUpdatedNode = void 0;\n          });\n          resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n            if (!skip || !lastUpdatedNode) {\n              return skip;\n            }\n            const isParentOfUpdated = findUp(lastUpdatedNode, node);\n            const isChildOfUpdated = findUp(node, lastUpdatedNode);\n            return !isParentOfUpdated && !isChildOfUpdated;\n          });\n          resolver.hooks.afterResolve.tap(\n            \"asset-transform\",\n            (value, node, options) => {\n              if (node.type !== \"asset\" && node.type !== \"view\") {\n                return value;\n              }\n              const originalNode = resolver.getSourceNode(node);\n              if (!originalNode) {\n                return value;\n              }\n              const transform3 = this.registry.get(value);\n              if (transform3?.resolve) {\n                const store = getStore(originalNode, this.resolveSymbol);\n                return transform3?.resolve(value, options, store);\n              }\n              return value;\n            }\n          );\n        });\n      });\n    }\n  };\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        /** Do any processing before the `View` instance is created */\n        resolveView: new SyncWaterfallHook(),\n        // The hook right before the View starts resolving. Attach anything custom here\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.hooks.view.call(view);\n      view.update();\n    }\n  };\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n  var DefaultViewPlugin = class {\n    constructor() {\n      this.name = \"default-view-plugin\";\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (viewController) => {\n        viewController.hooks.view.tap(this.name, (view) => {\n          const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n          new AssetPlugin().apply(view);\n          new SwitchPlugin(pluginOptions).apply(view);\n          new ApplicabilityPlugin().apply(view);\n          new StringResolverPlugin().apply(view);\n          const templatePlugin = new TemplatePlugin(pluginOptions);\n          templatePlugin.apply(view);\n          view.hooks.onTemplatePluginCreated.call(templatePlugin);\n          new MultiNodePlugin().apply(view);\n        });\n      });\n    }\n  };\n  var PLAYER_VERSION = \"__VERSION__\";\n  var COMMIT = \"__GIT_COMMIT__\";\n  var _Player = class _Player2 {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n        flowController: new SyncHook(),\n        /** The hook that updates/handles views */\n        viewController: new SyncHook(),\n        /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n        view: new SyncHook(),\n        /** Called when an expression evaluator was created */\n        expressionEvaluator: new SyncHook(),\n        /** The hook that creates and manages data */\n        dataController: new SyncHook(),\n        /** Called after the schema is created for a flow */\n        schema: new SyncHook(),\n        /** Manages validations (schema and x-field ) */\n        validationController: new SyncHook(),\n        /** Manages parsing binding */\n        bindingParser: new SyncHook(),\n        /** A that's called for state changes in the flow execution */\n        state: new SyncHook(),\n        /** A hook to access the current flow */\n        onStart: new SyncHook(),\n        /** A hook for when the flow ends either in success or failure */\n        onEnd: new SyncHook(),\n        /** Mutate the Content flow before starting */\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        new DefaultViewPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player2.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player2.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm8.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm8.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm8.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            try {\n              const result = await expressionEvaluator.evaluateAsync(exp);\n              flowController?.transition(String(result));\n            } catch (e) {\n              flowResultDeferred.reject(e);\n            }\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+async-node-plugin@0.0.0/node_modules/@player-ui/async-node-plugin/dist/index.mjs\n  var import_queue_microtask2 = __toESM(require_queue_microtask(), 1);\n  var import_timm10 = __toESM(require_timm(), 1);\n  var asyncTransform = (assetId, wrapperAssetType, asset, flatten2) => {\n    const id = \"async-\" + assetId;\n    const asyncNode = Builder.asyncNode(id, flatten2);\n    let multiNode;\n    let assetNode;\n    if (asset) {\n      assetNode = Builder.assetWrapper(asset);\n      multiNode = Builder.multiNode(assetNode, asyncNode);\n    } else {\n      multiNode = Builder.multiNode(asyncNode);\n    }\n    const wrapperAsset = Builder.asset({\n      id: wrapperAssetType + \"-\" + id,\n      type: wrapperAssetType\n    });\n    Builder.addChild(wrapperAsset, [\"values\"], multiNode);\n    return wrapperAsset;\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/assets/chat-message/transform.ts\n  var transform2 = (asset) => {\n    const newAsset = asset.children?.[0]?.value;\n    if (!newAsset) {\n      return asyncTransform(asset.value.id, \"collection\");\n    }\n    return asyncTransform(asset.value.id, \"collection\", newAsset);\n  };\n  var chatMessageTransform = compose(\n    composeBefore(transform2)\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/reference-assets/core/src/plugin.ts\n  var ReferenceAssetsPlugin = class {\n    constructor() {\n      this.name = \"reference-assets-transforms\";\n    }\n    apply(player) {\n      player.registerPlugin(\n        new AssetTransformPlugin([\n          [{ type: \"action\" }, actionTransform],\n          [{ type: \"input\" }, inputTransform],\n          [{ type: \"image\" }, imageTransform],\n          [{ type: \"info\" }, infoTransform],\n          [{ type: \"choice\" }, choiceTransform],\n          [{ type: \"chat-message\" }, chatMessageTransform]\n        ])\n      );\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","import type {\n  Resolve,\n  Store,\n  BeforeTransformFunction,\n  TransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\n\nfunction composeTransforms(\n  ...args: TransformFunction<any>[]\n): TransformFunction<any>;\n\nfunction composeTransforms(\n  ...args: BeforeTransformFunction<any>[]\n): BeforeTransformFunction<any>;\n\n/**\n * More closely resembles the `compose` function you may have used. Performs\n * right-to-left function evaluation, but leveraging the common signature for\n * Transform Functions. The `options` and `store` is unchanging for each\n * transform since only `value` is returned, allowing them to safely be passed\n * into each transform.\n */\nfunction composeTransforms(\n  ...args: TransformFunction<any>[] | BeforeTransformFunction<any>[]\n): TransformFunction<any> | BeforeTransformFunction<any> {\n  const [fn, ...fns] = args.reverse();\n\n  return (asset: any, options: Resolve.NodeResolveOptions, store: Store) => {\n    const value = fn(asset, options, store);\n\n    if (!fns.length) {\n      return value;\n    }\n\n    return fns.reduce((prevValue, current) => {\n      return current(prevValue, options, store);\n    }, value);\n  };\n}\n\n/**\n * Helper function to make it easier to create transforms that need to be ran in\n * the `beforeResolve` hook. Just like `compose`, functions are evaluated from\n * right-to-left.\n */\nexport function composeBefore(\n  ...args: BeforeTransformFunction<any>[]\n): TransformFunctions {\n  return {\n    beforeResolve: composeTransforms(...args),\n  };\n}\n\n/**\n * Performs right-to-left function evaluation of each transform function. Unlike\n * other compose functions, this does not require unary arguments for all but the\n * last function. The value returned from each function will be used as the value\n * for the next function.\n */\nexport function compose(\n  ...args: Array<TransformFunction<any> | TransformFunctions>\n): TransformFunctions {\n  const beforeResolveFns: BeforeTransformFunction<any>[] = [];\n  const resolveFns: TransformFunction<any>[] = [];\n\n  for (const arg of args) {\n    if (typeof arg === \"function\") {\n      resolveFns.push(arg);\n    } else {\n      if (arg?.resolve) {\n        resolveFns.push(arg.resolve);\n      }\n\n      if (arg?.beforeResolve) {\n        beforeResolveFns.push(arg.beforeResolve);\n      }\n    }\n  }\n\n  return {\n    beforeResolve: beforeResolveFns.length\n      ? composeTransforms(...beforeResolveFns)\n      : undefined,\n    resolve: resolveFns.length ? composeTransforms(...resolveFns) : undefined,\n  };\n}\n","import type {\n  Player,\n  PlayerPlugin,\n  TransformRegistry,\n  TransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport { compose } from \"./utils\";\n\nexport * from \"./utils\";\nexport * from \"./propertiesToSkip\";\n\nexport type TransformType = TransformFunction<any> | TransformFunctions;\nexport type TransformRegistryEntries = Array<[any, TransformType]>;\nexport type AssetTransformInit =\n  | Registry<TransformType>\n  | TransformRegistryEntries;\n\n/**\n * Normalize asset transform values so that they are all objects that contains\n * the resolve & beforeResolve functions.\n */\nfunction maybeCompose(maybeFn: any): TransformFunctions {\n  if (typeof maybeFn === \"object\") {\n    return maybeFn;\n  }\n\n  return compose(maybeFn);\n}\n\n/**\n * Standardize each variation of Asset Registry input into the same transform\n * registry shape.\n */\nfunction cleanupTransformRegistry(\n  maybeRegistry: AssetTransformInit,\n): TransformRegistry {\n  if (Array.isArray(maybeRegistry)) {\n    const wrappedTransforms = maybeRegistry.map(([key, value]) => {\n      return [key, maybeCompose(value)] as [any, TransformFunctions];\n    });\n\n    return new Registry(wrappedTransforms);\n  }\n\n  const registry = new Registry<TransformFunctions>();\n\n  maybeRegistry.forEach(({ key, value }) => {\n    registry.set(key, maybeCompose(value));\n  });\n\n  return registry;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport class AssetTransformPlugin implements PlayerPlugin {\n  name = \"asset-transform\";\n  public readonly registry: TransformRegistry;\n\n  constructor(transforms: AssetTransformInit) {\n    this.registry = cleanupTransformRegistry(transforms);\n  }\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (vc) => {\n      this.registry.forEach(({ key, value }) =>\n        vc.transformRegistry.set(key, maybeCompose(value)),\n      );\n    });\n  }\n}\n","import type {\n  Asset,\n  TransformFunction,\n  BeforeTransformFunction,\n} from \"@player-ui/player\";\nimport { compose, composeBefore } from \"@player-ui/asset-transform-plugin\";\nimport type { ActionAsset, TransformedAction } from \"./types\";\n\n/**\n * Function to find prev button\n */\nexport function isBackAction(action: ActionAsset): boolean {\n  return action.value === \"Prev\";\n}\n\n/**\n * Attaches the methods to execute an action to an action\n */\nconst transform: TransformFunction<ActionAsset, TransformedAction> = (\n  action,\n  options,\n) => {\n  return {\n    ...action,\n    run() {\n      if (action.exp) {\n        options.evaluate(action.exp);\n      }\n\n      if (action.value) {\n        const skipValidation = action.metaData?.skipValidation;\n        options.transition?.(action.value, { force: skipValidation });\n      }\n    },\n  };\n};\n\n/**\n * De couples back button from the back icon\n */\nconst backIconTransform: TransformFunction<ActionAsset, ActionAsset> = (\n  action,\n) => {\n  /** For previous versions of player, the back button would already have the back icon.\n   *  This ensures that the old functionality does not break and back button is still visible when they update the player.\n   */\n  if (isBackAction(action) && action?.metaData?.role === undefined) {\n    return {\n      ...action,\n      metaData: {\n        ...action?.metaData,\n        role: \"back\",\n      },\n    };\n  }\n\n  return action;\n};\n\n/**\n * Appends `exp` to the plugins.stringResolver.propertiesToSkip array or creates it if it doesn't exist\n *\n * @param asset - Asset to apply the transform to\n */\nexport const expPropTransform: BeforeTransformFunction<Asset> = (asset) => {\n  const skipArray = asset.plugins?.stringResolver?.propertiesToSkip;\n\n  if (skipArray && skipArray.indexOf(\"exp\") > 1) {\n    return asset;\n  }\n\n  return {\n    ...asset,\n    plugins: {\n      ...asset.plugins,\n      stringResolver: {\n        ...asset?.plugins?.stringResolver,\n        propertiesToSkip: [\n          ...(asset.plugins?.stringResolver?.propertiesToSkip ?? []),\n          \"exp\",\n        ],\n      },\n    },\n  };\n};\n\nexport const actionTransform = compose(\n  transform,\n  backIconTransform,\n  composeBefore(expPropTransform),\n);\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import type { BindingLike, BindingInstance } from \"./binding\";\n\n/** Check if the parameter representing a binding is already of the Binding class */\nexport function isBinding(binding: BindingLike): binding is BindingInstance {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\n\n/** Convert the string to an int if you can, otherwise just return the original string */\nexport function maybeConvertToNum(i: string): string | number {\n  const asInt = parseInt(i, 10);\n\n  if (isNaN(asInt)) {\n    return i;\n  }\n\n  return asInt;\n}\n\n/**\n * utility to convert binding into binding segments.\n */\nexport function getBindingSegments(\n  binding: BindingLike,\n): Array<string | number> {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n\n  return binding.asArray();\n}\n\n/** Like _.findIndex, but ignores types */\nexport function findInArray<T extends Record<string | number, object>>(\n  array: Array<T>,\n  key: string | number,\n  value: T,\n): number | undefined {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      // Intentional double-equals because we want '4' to be coerced to 4\n      // eslint-disable-next-line eqeqeq\n      return obj[key] == value;\n    }\n\n    return false;\n  });\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { BindingLike, BindingFactory } from \"../binding\";\nimport { BindingInstance, isBinding } from \"../binding\";\nimport { NOOP_MODEL } from \"./noop-model\";\n\nexport const ROOT_BINDING = new BindingInstance([]);\nexport type BatchSetTransaction = [BindingInstance, any][];\n\nexport type Updates = Array<{\n  /** The updated binding */\n  binding: BindingInstance;\n\n  /** The old value */\n  oldValue: any;\n\n  /** The new value */\n  newValue: any;\n\n  /** Force the Update to be included even if no data changed */\n  force?: boolean;\n}>;\n\n/** Options to use when getting or setting data */\nexport interface DataModelOptions {\n  /**\n   * The data (either to set or get) should represent a formatted value\n   * For setting data, the data will be de-formatted before continuing in the pipeline\n   * For getting data, the data will be formatted before returning\n   */\n  formatted?: boolean;\n\n  /**\n   * By default, fetching data will ignore any invalid data.\n   * You can choose to grab the queued invalid data if you'd like\n   * This is usually the case for user-inputs\n   */\n  includeInvalid?: boolean;\n\n  /**\n   * A flag to set to ignore any default value in the schema, and just use the raw value\n   */\n  ignoreDefaultValue?: boolean;\n\n  /**\n   * A flag to indicate that this update should happen silently\n   */\n  silent?: boolean;\n\n  /** Other context associated with this request */\n  context?: {\n    /** The data model to use when getting other data from the context of this request */\n    model: DataModelWithParser;\n  };\n}\n\nexport interface DataModelWithParser<Options = DataModelOptions> {\n  get(binding: BindingLike, options?: Options): any;\n  set(transaction: [BindingLike, any][], options?: Options): Updates;\n  delete(binding: BindingLike, options?: Options): void;\n}\n\nexport interface DataModelImpl<Options = DataModelOptions> {\n  get(binding: BindingInstance, options?: Options): any;\n  set(transaction: BatchSetTransaction, options?: Options): Updates;\n  delete(binding: BindingInstance, options?: Options): void;\n}\n\nexport interface DataModelMiddleware {\n  /** The name of the middleware */\n  name?: string;\n\n  set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates;\n\n  get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): any;\n\n  delete?(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): void;\n\n  reset?(): void;\n}\n\n/** Wrap the inputs of the DataModel with calls to parse raw binding inputs */\nexport function withParser<Options = unknown>(\n  model: DataModelImpl<Options>,\n  parseBinding: BindingFactory,\n): DataModelWithParser<Options> {\n  /** Parse something into a binding if it requires it */\n  function maybeParse(\n    binding: BindingLike,\n    readOnly: boolean,\n  ): BindingInstance {\n    const parsed = isBinding(binding)\n      ? binding\n      : parseBinding(binding, {\n          get: model.get,\n          set: model.set,\n          readOnly,\n        });\n\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n\n    return parsed;\n  }\n\n  return {\n    get(binding, options?: Options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options?: Options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options,\n      );\n    },\n    delete(binding, options?: Options) {\n      return model.delete(maybeParse(binding, false), options);\n    },\n  };\n}\n\n/** Wrap a middleware instance in a DataModel compliant API */\nexport function toModel(\n  middleware: DataModelMiddleware,\n  defaultOptions?: DataModelOptions,\n  next?: DataModelImpl,\n): DataModelImpl {\n  if (!next) {\n    return middleware as DataModelImpl;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction: BatchSetTransaction, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n\n      return next?.delete(binding, resolvedOptions);\n    },\n  };\n}\n\nexport type DataPipeline = Array<DataModelMiddleware | DataModelImpl>;\n\n/**\n * Given a set of steps in a pipeline, create the effective data-model\n */\nexport function constructModelForPipeline(\n  pipeline: DataPipeline,\n): DataModelImpl {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n\n  /** Default and propagate the options into the nested calls */\n  function createModelWithOptions(options?: DataModelOptions) {\n    const model: DataModelImpl =\n      pipeline.reduce<DataModelImpl | undefined>(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        undefined,\n      ) ?? NOOP_MODEL;\n\n    return model;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    },\n  };\n}\n\n/** A DataModel that manages middleware data handlers  */\nexport class PipelinedDataModel implements DataModelImpl {\n  private pipeline: DataPipeline;\n  private effectiveDataModel: DataModelImpl;\n\n  public readonly hooks = {\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n  };\n\n  constructor(pipeline: DataPipeline = []) {\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public setMiddleware(handlers: DataPipeline) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n\n  public addMiddleware(handler: DataModelMiddleware) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n\n    this.set([[ROOT_BINDING, model]]);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options,\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n\n  public get(binding: BindingInstance, options?: DataModelOptions): any {\n    return this.effectiveDataModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: DataModelOptions): void {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n}\n","import type { DataModelWithParser } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nexport type ExpressionObjectType = {\n  /** The expression to eval */\n  value: BasicExpressionTypes;\n};\n\nexport type ExpressionLiteralType =\n  | string\n  | number\n  | boolean\n  | undefined\n  | null;\n\nexport type BasicExpressionTypes =\n  | ExpressionLiteralType\n  | ExpressionObjectType\n  | Array<ExpressionLiteralType | ExpressionObjectType>;\n\nexport type ExpressionType = BasicExpressionTypes | ExpressionNode;\n\nexport interface OperatorProcessingOptions {\n  /**\n   * When set to a falsy value, the arguments passed to the handler will be raw AST Nodes\n   * This enables lazy evaluation of arguments\n   */\n  resolveParams: boolean;\n\n  /**\n   * Whether the expression should be allowed to be evaluated asynchronously\n   */\n  async?: boolean;\n}\n\nexport type BinaryOperatorBasic = (left: any, right: any) => unknown;\nexport type BinaryOperatorAdvanced = OperatorProcessingOptions &\n  ((ctx: ExpressionContext, left: any, right: any) => unknown);\n\nexport type BinaryOperator = BinaryOperatorAdvanced | BinaryOperatorBasic;\n\nexport type UnaryOperator =\n  | ((arg: any) => unknown)\n  | (((ctx: ExpressionContext, arg: any) => unknown) &\n      OperatorProcessingOptions);\n\nexport interface ExpressionContext {\n  /** A means of executing an expression */\n  evaluate: (expr: ExpressionType) => unknown;\n\n  /** The data model that expression handlers can use when fetching data */\n  model: DataModelWithParser;\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport type ExpressionHandler<\n  T extends readonly unknown[] = unknown[],\n  R = void,\n> = ((context: ExpressionContext, ...args: T) => R) &\n  Partial<OperatorProcessingOptions>;\n\nexport const ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n\n/** Checks if the input is an already processed Expression node */\nexport function isExpressionNode(x: any): x is ExpressionNode {\n  return (\n    typeof x === \"object\" &&\n    x !== null &&\n    !Array.isArray(x) &&\n    x.__id === ExpNodeOpaqueIdentifier\n  );\n}\n\nexport interface NodePosition {\n  /** The character location */\n  character: number;\n}\n\nexport interface NodeLocation {\n  // We only care about the character offset, not the line/column for now\n  // But making these objects allows us to add more (like line number) later\n\n  /** The start of the node */\n  start: NodePosition;\n\n  /** The end of the node */\n  end: NodePosition;\n}\n\nexport interface BaseNode<T> {\n  /** The thing to discriminate the AST type on */\n  type: T;\n\n  /** How to tell this apart from other objects */\n  __id: typeof ExpNodeOpaqueIdentifier;\n\n  /** The location of the node in the source expression string */\n  location?: NodeLocation;\n\n  /**\n   * The error that occurred while parsing this node\n   * This is only set if the parsing mode is set to non-strict\n   */\n  error?: Error;\n}\n\n/** A helper interface for nodes that container left and right children */\nexport interface DirectionalNode {\n  /** The left node. Often for the left hand side of an expression */\n  left: ExpressionNode;\n\n  /** The right child. Often for the right hand side of an expression */\n  right: ExpressionNode;\n}\n\nexport interface LiteralNode extends BaseNode<\"Literal\"> {\n  /** A node that holds a literal value */\n  value: string | number;\n\n  /** The unprocessed value */\n  raw?: any;\n}\n\nexport interface BinaryNode\n  extends BaseNode<\"BinaryExpression\">,\n    DirectionalNode {\n  /** The operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface LogicalNode\n  extends BaseNode<\"LogicalExpression\">,\n    DirectionalNode {\n  /** The logical operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface UnaryNode extends BaseNode<\"UnaryExpression\"> {\n  /** The operation to perform on the node */\n  operator: string;\n\n  /** The single argument that the operation should be performed on */\n  argument: ExpressionNode;\n}\n\nexport type ThisNode = BaseNode<\"ThisExpression\">;\n\nexport interface ModelRefNode extends BaseNode<\"ModelRef\"> {\n  /** The binding that the model reference points to */\n  ref: string;\n}\n\nexport interface ObjectNode extends BaseNode<\"Object\"> {\n  /**  */\n  attributes: Array<{\n    /** The property name of the object */\n    key: ExpressionNode;\n\n    /** the associated value */\n    value: ExpressionNode;\n  }>;\n}\n\nexport interface MemberExpressionNode extends BaseNode<\"MemberExpression\"> {\n  /** The object to be introspected */\n  object: ExpressionNode;\n\n  /** If the property uses . or open-bracket */\n  computed: boolean;\n\n  /** The property to access on the object */\n  property: ExpressionNode;\n}\n\nexport interface ConditionalExpressionNode\n  extends BaseNode<\"ConditionalExpression\"> {\n  /** The test for the ternary */\n  test: ExpressionNode;\n\n  /** The truthy case for the ternary */\n  consequent: ExpressionNode;\n\n  /** The falsy case for the ternary */\n  alternate: ExpressionNode;\n}\n\nexport interface CompoundNode extends BaseNode<\"Compound\"> {\n  /** The contents of the compound expression */\n  body: ExpressionNode[];\n}\n\nexport interface CallExpressionNode extends BaseNode<\"CallExpression\"> {\n  /** The arguments to the function */\n  args: ExpressionNode[];\n\n  /** The function name */\n  callTarget: IdentifierNode;\n}\n\nexport interface ArrayExpressionNode extends BaseNode<\"ArrayExpression\"> {\n  /** The items in an array */\n  elements: ExpressionNode[];\n}\n\nexport interface IdentifierNode extends BaseNode<\"Identifier\"> {\n  /** The variable name */\n  name: string;\n}\n\nexport type AssignmentNode = BaseNode<\"Assignment\"> & DirectionalNode;\n\nexport interface ModificationNode\n  extends BaseNode<\"Modification\">,\n    DirectionalNode {\n  /** The operator for the modification */\n  operator: string;\n}\n\nexport type ExpressionNode =\n  | LiteralNode\n  | BinaryNode\n  | LogicalNode\n  | UnaryNode\n  | ThisNode\n  | ModelRefNode\n  | MemberExpressionNode\n  | ConditionalExpressionNode\n  | CompoundNode\n  | CallExpressionNode\n  | ArrayExpressionNode\n  | IdentifierNode\n  | AssignmentNode\n  | ModificationNode\n  | ObjectNode;\n\nexport type ExpressionNodeType = ExpressionNode[\"type\"];\n\nexport interface ErrorWithLocation extends Error {\n  /** The place in the string where the error occurs */\n  index: number;\n\n  /** a helpful description */\n  description: string;\n}\n","/* eslint @typescript-eslint/no-use-before-define: 0 */\n/**\n * An expression to AST parser based on JSEP: http://jsep.from.so/\n */\nimport type {\n  ErrorWithLocation,\n  ExpressionNode,\n  ExpressionNodeType,\n  NodeLocation,\n} from \"./types\";\nimport { ExpNodeOpaqueIdentifier } from \"./types\";\n\nconst PERIOD_CODE = 46; // '.'\nconst COMMA_CODE = 44; // ','\nconst SQUOTE_CODE = 39; // Single quote\nconst DQUOTE_CODE = 34; // Double quotes\nconst OPAREN_CODE = 40; // (\nconst CPAREN_CODE = 41; // )\nconst OBRACK_CODE = 91; // [\nconst CBRACK_CODE = 93; // ]\nconst QUMARK_CODE = 63; // ?\nconst SEMCOL_CODE = 59; // ;\nconst COLON_CODE = 58; // :\nconst OCURL_CODE = 123; // {\nconst CCURL_CODE = 125; // }\n\n// Operations\n// ----------\n\n// Set `t` to `true` to save space (when minified, not gzipped)\nconst t = true;\n\n// Use a quickly-accessible map to store all of the unary operators\n// Values are set to `true` (it really doesn't matter)\nconst unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n\n// Also use a map for the binary operations but set their values to their\n// binary precedence for quick reference:\n// see [Operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\nconst binaryOps: Record<string, number> = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14,\n};\n\n/** Wrap the message and index in an error and throw it */\nfunction throwError(message: string, index: number): ErrorWithLocation {\n  const err = new Error(`${message} at character ${index}`);\n\n  (err as ErrorWithLocation).index = index;\n  (err as ErrorWithLocation).description = message;\n\n  throw err;\n}\n\n/** Create a new location marker that spans both nodes */\nfunction createSpanningLocation(start?: NodeLocation, end?: NodeLocation) {\n  if (!start || !end) {\n    return;\n  }\n\n  return {\n    start: start.start,\n    end: end.end,\n  };\n}\n\n/** Get return the longest key length of any object */\nfunction getMaxKeyLen(obj: object): number {\n  let maxLen = 0;\n\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n\n  return maxLen;\n}\n\nconst maxUnopLen = getMaxKeyLen(unaryOps);\nconst maxBinopLen = getMaxKeyLen(binaryOps);\n\n// Literals\n// ----------\n// Store the values to return for the various literals we may encounter\nconst literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined,\n} as const;\n\n// Except for `this`, which is special. This could be changed to something like `'self'` as well\nconst thisStr = \"this\";\n\n/** Returns the precedence of a binary operator or `0` if it isn't a binary operator */\nfunction binaryPrecedence(opVal: string): number {\n  return binaryOps[opVal] || 0;\n}\n\n/**\n * Utility function (gets called from multiple places)\n * Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n */\nfunction createBinaryExpression(\n  operator: string | boolean,\n  left: string,\n  right: string,\n  location?: NodeLocation,\n) {\n  let type: ExpressionNodeType;\n\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (\n    operator === \"+=\" ||\n    operator === \"-=\" ||\n    operator === \"&=\" ||\n    operator === \"|=\"\n  ) {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location,\n  };\n}\n\n/** `ch` is a character code in the next three functions */\nfunction isDecimalDigit(ch: number) {\n  return ch >= 48 && ch <= 57; // 0...9\n}\n\n/** Check if the char is the character code for the start of an identifier */\nfunction isIdentifierStart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122)\n  ); // A...z\n}\n\n/** Check if the char code is still a valid identifier portion */\nfunction isIdentifierPart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122) || // A...z\n    (ch >= 48 && ch <= 57)\n  ); // 0...9\n}\n\n/** Check if the 2 chars are the start of a model reference */\nfunction isModelRefStart(ch0: number, ch1: number) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE; // '{{'\n}\n\n/** Parse out an expression from the string */\nexport function parseExpression(\n  expr: string,\n  options?: {\n    /** If true (the default), will throw on invalid expressions */\n    strict?: boolean;\n  },\n): ExpressionNode {\n  const strictMode = options?.strict ?? true;\n\n  // `index` stores the character number we are currently at while `length` is a constant\n  // All of the gobbles below will modify `index` as we move along\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n\n  let index = 0;\n\n  /** Create a location object  */\n  const getLocation = (startChar: number) => {\n    return {\n      start: {\n        character: startChar,\n      },\n      end: {\n        character: index,\n      },\n    };\n  };\n\n  /** Grab the char at the index from the expression */\n  function exprI(i: number) {\n    return charAtFunc.call(expr, i);\n  }\n\n  /** Grab the unicode char at the index in the expression */\n  function exprICode(i: number) {\n    return charCodeAtFunc.call(expr, i);\n  }\n\n  /**\n   * Gobble an object and store the object in an attributes array\n   */\n  function gobbleObjects() {\n    const attributes: Array<{\n      /** The property name of the object */\n      key: any;\n\n      /** the associated value */\n      value: any;\n    }> = [];\n    let closed = false;\n\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n\n    // get rid of OCURL_CODE\n    ++index;\n\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      // check for end\n      if (chCode === CCURL_CODE) {\n        // if we are at the end but a key was defined\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        // check for key\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n\n        // get key\n        key = gobbleStringLiteral();\n        // remove spaces\n        gobbleSpaces();\n        // remove colon\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n\n        shouldDefineKey = true;\n        key = undefined;\n        value = undefined;\n      }\n\n      chCode = exprICode(index);\n    }\n\n    // throw error if object is not closed\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Push `index` up to the next non-space character\n   */\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    // Space or tab\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n\n  /**\n   * The main parsing function. Much of this code is dedicated to ternary expressions\n   */\n  function gobbleExpression(): ExpressionNode {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      // Ternary expression: test ? consequent : alternate\n      index++;\n      const consequent = gobbleExpression();\n\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n\n      gobbleSpaces();\n\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      throwError(\"Expected :\", index);\n    }\n\n    return test;\n  }\n\n  /**\n   * Search for the operation portion of the string (e.g. `+`, `===`)\n   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n   * and move down from 3 to 2 to 1 character until a matching binary operation is found\n   * then, return that binary operation\n   */\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * This function is responsible for gobbling an individual expression,\n   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n   */\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n\n    // First, try to get the leftmost thing\n    // Then, check to see if there's a binary operator operating on that leftmost thing\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n\n    // If there wasn't a binary operator, just return the leftmost node\n    if (!biop) {\n      return left;\n    }\n\n    // Otherwise, we need to start a stack to properly place the binary operations in their\n    // precedence structure\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n\n    const stack = [left, biopInfo, right];\n\n    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n\n      if (prec === 0) {\n        break;\n      }\n\n      biopInfo = { value: biop, prec };\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location),\n        );\n        stack.push(node);\n      }\n\n      node = gobbleToken();\n\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n\n    i = stack.length - 1;\n    node = stack[i];\n\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location),\n      );\n      i -= 2;\n    }\n\n    return node;\n  }\n\n  /**\n   * An individual part of a binary expression:\n   * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n   */\n  function gobbleToken(): any {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      // Char code 46 is a dot `.` which can start off a numeric literal\n      return gobbleNumericLiteral();\n    }\n\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      // Single or double quotes\n      return gobbleStringLiteral();\n    }\n\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      // Open parenthesis\n      // `foo`, `bar.baz`\n      return gobbleVariable();\n    }\n\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n\n    // not a double bracket: {{}} but if its a single {}\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n   * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n   */\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n\n    if (exprICode(index) === PERIOD_CODE) {\n      // Can start with a decimal marker\n      num += exprI(index++);\n\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      // Exponent marker\n      num += exprI(index++);\n      ch = exprI(index);\n\n      if (ch === \"+\" || ch === \"-\") {\n        // Exponent sign\n        num += exprI(index++);\n      }\n\n      while (isDecimalDigit(exprICode(index))) {\n        // Exponent itself\n        num += exprI(index++);\n      }\n\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n\n    const chCode = exprICode(index);\n    // Check to make sure this isn't a variable name that start with a number (123abc)\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index,\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Parses a string literal, staring with single or double quotes with basic support for escape codes\n   * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n   */\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n\n    while (index < length) {\n      let ch = exprI(index++);\n\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n\n      // Check for all of the common escape codes\n      ch = exprI(index++);\n\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\u000B\";\n          break;\n        default:\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Model refs are bindings wrapped in 2 sets of double curlys\n   * e.g. {{foo.bar.ref}}\n   */\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n\n    index += 2; // Skip the {{\n    while (index < length) {\n      const ch = exprI(index++);\n\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Gobbles only identifiers\n   * e.g.: `foo`, `_value`, `$x1`\n   * Also, this function checks if that identifier is a literal:\n   * (e.g. `true`, `false`, `null`) or `this`\n   */\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n\n    const identifier = expr.slice(start, index);\n\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: (literals as any)[identifier],\n        raw: identifier,\n        location: getLocation(start),\n      };\n    }\n\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start),\n      };\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start),\n    };\n  }\n\n  /**\n   * Gobbles a list of arguments within the context of a function call\n   * or array literal. This function also assumes that the opening character\n   * `(` or `[` has already been gobbled, and gobbles expressions and commas\n   * until the terminator character `)` or `]` is encountered.\n   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n   */\n  function gobbleArguments(termination: number) {\n    const args = [];\n    let charIndex;\n    let node;\n\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n\n      if (charIndex === termination) {\n        // Done parsing\n        index++;\n        break;\n      }\n\n      if (charIndex === COMMA_CODE) {\n        // Between expressions\n        index++;\n        continue;\n      }\n\n      node = gobbleExpression();\n\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n\n      args.push(node);\n    }\n\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n\n    return args;\n  }\n\n  /**\n   * Gobble a non-literal variable name. This variable name may include properties\n   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n   * It also gobbles function calls:\n   * e.g. `Math.acos(obj.angle)`\n   */\n  function gobbleVariable(): ExpressionNode {\n    let charIndex = exprICode(index);\n    let node: any =\n      charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n\n    while (\n      charIndex === PERIOD_CODE ||\n      charIndex === OBRACK_CODE ||\n      charIndex === OPAREN_CODE\n    ) {\n      index++;\n\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex),\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex),\n        };\n\n        gobbleSpaces();\n        charIndex = exprICode(index);\n\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        // A function call is being made; gobble all the arguments\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n\n    return node;\n  }\n\n  /**\n   * Responsible for parsing a group of things within parentheses `()`\n   * This function assumes that it needs to gobble the opening parenthesis\n   * and then tries to gobble everything within that parenthesis, assuming\n   * that the next thing it should see is the close parenthesis. If not,\n   * then the expression probably doesn't have a `)`\n   */\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n\n    throwError(\"Unclosed (\", index);\n  }\n\n  /**\n   * Responsible for parsing Array literals `[1, 2, 3]`\n   * This function assumes that it needs to gobble the opening bracket\n   * and then tries to gobble the expressions as arguments.\n   */\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  const nodes = [];\n\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n\n      // Expressions can be separated by semicolons, commas, or just inferred without any\n      // separators\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++; // ignore separators\n        continue;\n      }\n\n      const node = gobbleExpression();\n\n      // Try to gobble each expression individually\n      if (node) {\n        nodes.push(node);\n        // If we weren't able to find a binary expression and are out of room, then\n        // the expression passed in probably has too much\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n\n    // If there's only one expression just try returning the expression\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e,\n    };\n  }\n}\n","import { isExpressionNode } from \"./types\";\nimport type {\n  ErrorWithLocation,\n  ExpressionHandler,\n  ExpressionNode,\n  ExpressionObjectType,\n  ExpressionType,\n  NodeLocation,\n  NodePosition,\n} from \"./types\";\n\n/** Generates a function by removing the first context argument */\nexport function withoutContext<T extends unknown[], Return>(\n  fn: (...args: T) => Return,\n): ExpressionHandler<T, Return> {\n  return (_context, ...args) => fn(...args);\n}\n\n/** Checks if the location includes the target position  */\nfunction isInRange(position: NodePosition, location: NodeLocation) {\n  return (\n    position.character >= location.start.character &&\n    position.character <= location.end.character\n  );\n}\n\n/** Get the node in the expression that's closest to the desired position */\nexport function findClosestNodeAtPosition(\n  node: ExpressionNode,\n  position: NodePosition,\n): ExpressionNode | undefined {\n  // This is just mapping recursively over nodes in the tree\n\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check =\n        findClosestNodeAtPosition(node.left, position) ??\n        findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n\n      break;\n    }\n\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n\n      break;\n    }\n\n    case \"MemberExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.object, position) ??\n        findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ConditionalExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.test, position) ??\n        findClosestNodeAtPosition(node.consequent, position) ??\n        findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements =\n        node.type === \"ArrayExpression\" ? node.elements : node.body;\n\n      const anyElements = elements.find((e) =>\n        findClosestNodeAtPosition(e, position),\n      );\n\n      if (anyElements) {\n        return anyElements;\n      }\n\n      break;\n    }\n\n    case \"Object\": {\n      const checkObject = node.attributes.reduce<ExpressionNode | undefined>(\n        (found, next) => {\n          return (\n            found ??\n            findClosestNodeAtPosition(next.key, position) ??\n            findClosestNodeAtPosition(next.value, position)\n          );\n        },\n        undefined,\n      );\n\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"CallExpression\": {\n      const anyArgs =\n        node.args.find((arg) => {\n          return findClosestNodeAtPosition(arg, position);\n        }) ?? findClosestNodeAtPosition(node.callTarget, position);\n\n      if (anyArgs) {\n        return anyArgs;\n      }\n\n      break;\n    }\n  }\n\n  // Lastly check for yourself\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\n\n/** Checks if the expression is a simple type */\nexport function isObjectExpression(\n  expr: ExpressionType,\n): expr is ExpressionObjectType {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n\n  return (\n    typeof expr === \"object\" &&\n    expr !== null &&\n    !Array.isArray(expr) &&\n    \"value\" in expr\n  );\n}\n\n/**\n * Type guard for ErrorWithLocation\n */\nexport function isErrorWithLocation(error: Error): error is ErrorWithLocation {\n  return (\n    (error as ErrorWithLocation).index !== undefined &&\n    (error as ErrorWithLocation).description !== undefined\n  );\n}\n","import { SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport { parseExpression } from \"./parser\";\nimport * as DEFAULT_EXPRESSION_HANDLERS from \"./evaluator-functions\";\nimport { isExpressionNode } from \"./types\";\nimport { isObjectExpression } from \"./utils\";\nimport type {\n  ExpressionNode,\n  BinaryOperator,\n  UnaryOperator,\n  ExpressionType,\n  ExpressionContext,\n  ExpressionHandler,\n} from \"./types\";\n\n/** a && b -- but handles short cutting if the first value is false */\nconst andandOperator: BinaryOperator = (ctx, a, b) => {\n  return LogicalOperators.and(ctx, a, b);\n};\nandandOperator.resolveParams = false;\n\n/** a || b -- but with short cutting if first value is true */\nconst ororOperator: BinaryOperator = (ctx, a, b) => {\n  return LogicalOperators.or(ctx, a, b);\n};\nororOperator.resolveParams = false;\n\nconst DEFAULT_BINARY_OPERATORS: Record<string, BinaryOperator> = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a: any, b: any) => a + b,\n  \"-\": (a: any, b: any) => a - b,\n  \"*\": (a: any, b: any) => a * b,\n  \"/\": (a: any, b: any) => a / b,\n  \"%\": (a: any, b: any) => a % b,\n\n  // Promise-aware comparison operators\n  // eslint-disable-next-line\n  \"==\": makePromiseAwareBinaryOp((a: any, b: any) => a == b),\n  // eslint-disable-next-line\n  \"!=\": makePromiseAwareBinaryOp((a: any, b: any) => a != b),\n  \">\": makePromiseAwareBinaryOp((a: any, b: any) => a > b),\n  \">=\": makePromiseAwareBinaryOp((a: any, b: any) => a >= b),\n  \"<\": makePromiseAwareBinaryOp((a: any, b: any) => a < b),\n  \"<=\": makePromiseAwareBinaryOp((a: any, b: any) => a <= b),\n  \"!==\": makePromiseAwareBinaryOp((a: any, b: any) => a !== b),\n  \"===\": makePromiseAwareBinaryOp((a: any, b: any) => a === b),\n\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n\n  // eslint-disable-next-line\n  \"|\": (a: any, b: any) => a | b,\n\n  // eslint-disable-next-line\n  \"&\": (a: any, b: any) => a & b,\n  \"+=\": (a: any, b: any) => a + b,\n  \"-=\": (a: any, b: any) => a - b,\n\n  // eslint-disable-next-line\n  \"&=\": (a: any, b: any) => a & b,\n\n  // eslint-disable-next-line\n  \"|=\": (a: any, b: any) => a | b,\n};\n\nconst DEFAULT_UNARY_OPERATORS: Record<string, UnaryOperator> = {\n  \"-\": (a: any) => -a,\n  \"+\": (a: any) => Number(a),\n  \"!\": makePromiseAwareUnaryOp((a: any) => !a),\n};\n\n/**\n * Promise detection that handles various Promise implementations\n * and reduces false positives from objects with coincidental 'then' methods\n */\nfunction isPromiselike(value: any): value is Promise<any> {\n  return (\n    value != null &&\n    typeof value === \"object\" &&\n    typeof value.then === \"function\" &&\n    // Additional safeguards against false positives\n    (value instanceof Promise ||\n      // Check for standard Promise constructor name\n      value.constructor?.name === \"Promise\" ||\n      // Verify it has other Promise-like methods to reduce false positives\n      (typeof value.catch === \"function\" &&\n        typeof value.finally === \"function\"))\n  );\n}\n\n/**\n * Higher-order function that makes any binary operation Promise-aware\n */\nfunction makePromiseAwareBinaryOp<T>(\n  operation: (a: any, b: any) => T,\n): (a: any, b: any) => T | Promise<T> {\n  return (a: any, b: any) => {\n    if (isPromiselike(a) || isPromiselike(b)) {\n      return Promise.all([Promise.resolve(a), Promise.resolve(b)]).then(\n        ([resolvedA, resolvedB]) => operation(resolvedA, resolvedB),\n      );\n    }\n    return operation(a, b);\n  };\n}\n\n/**\n * Higher-order function that makes any unary operation Promise-aware\n */\nfunction makePromiseAwareUnaryOp<T>(\n  operation: (a: any) => T,\n): (a: any) => T | Promise<T> {\n  return (a: any) => {\n    if (isPromiselike(a)) {\n      return a.then((resolved: any) => operation(resolved));\n    }\n    return operation(a);\n  };\n}\n\n/**\n * Utility for handling conditional branching with Promises\n */\nfunction handleConditionalBranching(\n  testValue: any,\n  getTrueBranch: () => any,\n  getFalseBranch: () => any,\n  resolveNode: (node: any) => any,\n): any {\n  if (isPromiselike(testValue)) {\n    return testValue.then((resolved: boolean) => {\n      const branch = resolved ? getTrueBranch() : getFalseBranch();\n      const branchResult = resolveNode(branch);\n      return isPromiselike(branchResult)\n        ? branchResult\n        : Promise.resolve(branchResult);\n    });\n  }\n\n  // Sync handling\n  const branch = testValue ? getTrueBranch() : getFalseBranch();\n  return resolveNode(branch);\n}\n\n/**\n * Utility for handling collections (arrays/objects) with potential Promises\n */\nconst PromiseCollectionHandler = {\n  /**\n   * Handle array with potential Promise elements\n   */\n  handleArray<T>(items: T[]): T[] | Promise<T[]> {\n    const hasPromises = items.some((item) => isPromiselike(item));\n    return hasPromises ? Promise.all(items) : items;\n  },\n\n  /**\n   * Handle object with potential Promise keys/values\n   */\n  handleObject(\n    attributes: Array<{ key: any; value: any }>,\n    resolveNode: (node: any) => any,\n  ): Record<string, any> | Promise<Record<string, any>> {\n    const resolvedAttributes: Record<string, any> = {};\n    const promises: Promise<void>[] = [];\n    let hasPromises = false;\n\n    attributes.forEach((attr) => {\n      const key = resolveNode(attr.key);\n      const value = resolveNode(attr.value);\n\n      if (isPromiselike(key) || isPromiselike(value)) {\n        hasPromises = true;\n        const keyPromise = Promise.resolve(key);\n        const valuePromise = Promise.resolve(value);\n\n        promises.push(\n          Promise.all([keyPromise, valuePromise]).then(\n            ([resolvedKey, resolvedValue]) => {\n              resolvedAttributes[resolvedKey] = resolvedValue;\n            },\n          ),\n        );\n      } else {\n        resolvedAttributes[key] = value;\n      }\n    });\n\n    return hasPromises\n      ? Promise.all(promises).then(() => resolvedAttributes)\n      : resolvedAttributes;\n  },\n};\n\n/**\n * Smart logical operators that handle short-circuiting with Promises\n */\nconst LogicalOperators = {\n  and: (ctx: any, leftNode: any, rightNode: any) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (isPromiselike(leftResult)) {\n      return leftResult.then((awaitedLeft: any) => {\n        if (!awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isPromiselike(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult && ctx.evaluate(rightNode);\n  },\n\n  or: (ctx: any, leftNode: any, rightNode: any) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (isPromiselike(leftResult)) {\n      return leftResult.then((awaitedLeft: any) => {\n        if (awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isPromiselike(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult || ctx.evaluate(rightNode);\n  },\n};\n\nexport interface HookOptions extends ExpressionContext {\n  /** Given an expression node  */\n  resolveNode: (node: ExpressionNode) => any;\n\n  /** Enabling this flag skips calling the onError hook, and just throws errors back to the caller.\n   * The caller is responsible for handling the error.\n   */\n  throwErrors?: boolean;\n\n  /** Whether expressions should be parsed strictly or not */\n  strict?: boolean;\n\n  /** Whether the expression should be evaluated asynchronously */\n  async?: boolean;\n}\n\nexport type ExpressionEvaluatorOptions = Omit<\n  HookOptions,\n  \"resolveNode\" | \"evaluate\"\n>;\n\nexport type ExpressionEvaluatorFunction = (\n  exp: ExpressionType,\n  options?: ExpressionEvaluatorOptions,\n) => any;\n\n/**\n * The expression evaluator is responsible for parsing and executing anything in the custom expression language\n * */\nexport class ExpressionEvaluator {\n  private readonly vars: Record<string, any> = {};\n  public readonly hooks: {\n    resolve: SyncWaterfallHook<[any, ExpressionNode, HookOptions]>;\n    resolveOptions: SyncWaterfallHook<[HookOptions]>;\n    beforeEvaluate: SyncWaterfallHook<[ExpressionType, HookOptions]>;\n    onError: SyncBailHook<[Error], true>;\n  } = {\n    /** Resolve an AST node for an expression to a value */\n    resolve: new SyncWaterfallHook<[any, ExpressionNode, HookOptions]>(),\n    /** Gets the options that will be passed in calls to the resolve hook */\n    resolveOptions: new SyncWaterfallHook<[HookOptions]>(),\n    /** Allows users to change the expression to be evaluated before processing */\n    beforeEvaluate: new SyncWaterfallHook<[ExpressionType, HookOptions]>(),\n    /**\n     * An optional means of handling an error in the expression execution\n     * Return true if handled, to stop propagation of the error\n     */\n    onError: new SyncBailHook<[Error], true>(),\n  };\n\n  private readonly expressionsCache: Map<string, ExpressionNode> = new Map();\n\n  private readonly defaultHookOptions: HookOptions;\n\n  public readonly operators: {\n    binary: Map<string, BinaryOperator>;\n    unary: Map<string, UnaryOperator>;\n    expressions: Map<string, ExpressionHandler<any, any>>;\n  } = {\n    binary: new Map<string, BinaryOperator>(\n      Object.entries(DEFAULT_BINARY_OPERATORS),\n    ),\n    unary: new Map<string, UnaryOperator>(\n      Object.entries(DEFAULT_UNARY_OPERATORS),\n    ),\n    expressions: new Map<string, ExpressionHandler<any, any>>([\n      ...Object.entries(DEFAULT_EXPRESSION_HANDLERS),\n      [\"await\", DEFAULT_EXPRESSION_HANDLERS.waitFor],\n    ]),\n  };\n\n  public reset(): void {\n    this.expressionsCache.clear();\n  }\n\n  constructor(defaultOptions: ExpressionEvaluatorOptions) {\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node: ExpressionNode) =>\n        this._execAST(node, this.defaultHookOptions),\n    };\n\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n      return this._resolveNode(result, node, options);\n    });\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  public evaluate(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): any {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node: ExpressionNode) => this._execAST(node, resolvedOpts),\n    });\n\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n\n    // Unwrap any returned expression type\n    // Since this could also be an object type, we need to recurse through it until we find the end\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n\n    // Check for literals\n    if (\n      typeof expression === \"number\" ||\n      typeof expression === \"boolean\" ||\n      expression === undefined ||\n      expression === null\n    ) {\n      return expression;\n    }\n\n    // Skip doing anything with objects that are _actually_ just parsed expression nodes\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null,\n      );\n    }\n\n    return this._execString(String(expression), resolvedOpts);\n  }\n\n  public evaluateAsync(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): Promise<any> {\n    return this.evaluate(expr, { ...options, async: true } as any);\n  }\n\n  public addExpressionFunction<T extends readonly unknown[], R>(\n    name: string,\n    handler: ExpressionHandler<T, R>,\n  ): void {\n    this.operators.expressions.set(name, handler);\n  }\n\n  public addBinaryOperator(operator: string, handler: BinaryOperator): void {\n    this.operators.binary.set(operator, handler);\n  }\n\n  public addUnaryOperator(operator: string, handler: UnaryOperator): void {\n    this.operators.unary.set(operator, handler);\n  }\n\n  public setExpressionVariable(name: string, value: unknown): void {\n    this.vars[name] = value;\n  }\n\n  public getExpressionVariable(name: string): unknown {\n    return this.vars[name];\n  }\n\n  private _execAST(node: ExpressionNode, options: HookOptions): any {\n    return this.hooks.resolve.call(undefined, node, options);\n  }\n\n  private _execString(exp: string, options: HookOptions) {\n    if (exp === \"\") {\n      return exp;\n    }\n\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n    if (matches) {\n      const [, matched] = Array.from(matches); // In case the expression was surrounded by @[ ]@\n      if (matched) {\n        matchedExp = matched;\n      }\n    }\n\n    let storedAST: ExpressionNode;\n\n    try {\n      storedAST =\n        this.expressionsCache.get(matchedExp) ??\n        parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error parsing expression: ${exp}`, e);\n      }\n\n      return;\n    }\n\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n\n  private _resolveNode(\n    _currentValue: any,\n    node: ExpressionNode,\n    options: HookOptions,\n  ): unknown {\n    const { resolveNode, model } = options;\n\n    const expressionContext: ExpressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options),\n    };\n\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          // Handle promises in binary operations\n          if (isPromiselike(left) || isPromiselike(right)) {\n            return Promise.all([left, right]).then(([leftVal, rightVal]) =>\n              operator(expressionContext, leftVal, rightVal),\n            );\n          }\n\n          return operator(expressionContext, left, right);\n        }\n\n        const left = resolveNode(node.left);\n        const right = resolveNode(node.right);\n\n        if (isPromiselike(left) || isPromiselike(right)) {\n          return Promise.all([left, right]).then(([leftVal, rightVal]) =>\n            operator(leftVal, rightVal),\n          );\n        }\n\n        return operator(left, right);\n      }\n\n      return;\n    }\n\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.argument);\n          }\n\n          const arg = resolveNode(node.argument);\n\n          if (isPromiselike(arg)) {\n            return arg.then((argVal) => operator(expressionContext, argVal));\n          }\n\n          return operator(expressionContext, arg);\n        }\n\n        const arg = resolveNode(node.argument);\n\n        if (isPromiselike(arg)) {\n          return arg.then((argVal) => operator(argVal));\n        }\n\n        return operator(arg);\n      }\n\n      return;\n    }\n\n    if (node.type === \"Object\") {\n      return PromiseCollectionHandler.handleObject(\n        node.attributes,\n        resolveNode,\n      );\n    }\n\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n\n      const operator = this.operators.expressions.get(expressionName);\n\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n\n      const args = node.args.map((n) => resolveNode(n));\n\n      // Check if any arguments are promises\n      const hasPromises = args.some(isPromiselike);\n\n      if (hasPromises) {\n        return Promise.all(args).then((resolvedArgs) =>\n          operator(expressionContext, ...resolvedArgs),\n        );\n      }\n\n      return operator(expressionContext, ...args);\n    }\n\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n\n      if (isPromiselike(obj) || isPromiselike(prop)) {\n        return Promise.all([obj, prop]).then(\n          ([objVal, propVal]) => objVal[propVal],\n        );\n      }\n\n      return obj[prop];\n    }\n\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n\n        if (isPromiselike(value)) {\n          return value.then((resolvedValue) => {\n            model.set([[(node.left as any).ref, resolvedValue]]);\n            return resolvedValue;\n          });\n        }\n\n        model.set([[(node.left as any).ref, value]]);\n        return value;\n      }\n\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n\n        if (isPromiselike(value)) {\n          return value.then((resolvedValue) => {\n            this.vars[(node.left as any).name] = resolvedValue;\n            return resolvedValue;\n          });\n        }\n\n        this.vars[(node.left as any).name] = value;\n        return value;\n      }\n\n      return;\n    }\n\n    if (node.type === \"ConditionalExpression\") {\n      const testResult = resolveNode(node.test);\n\n      return handleConditionalBranching(\n        testResult,\n        () => node.consequent,\n        () => node.alternate,\n        resolveNode,\n      );\n    }\n\n    if (node.type === \"ArrayExpression\") {\n      const results = node.elements.map((ele) => resolveNode(ele));\n      return PromiseCollectionHandler.handleArray(results);\n    }\n\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n\n      if (operation) {\n        let newValue;\n\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n\n            if (isPromiselike(left) || isPromiselike(right)) {\n              newValue = Promise.all([left, right]).then(\n                ([leftVal, rightVal]) =>\n                  operation(expressionContext, leftVal, rightVal),\n              );\n            } else {\n              newValue = operation(expressionContext, left, right);\n            }\n          }\n        } else {\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          if (isPromiselike(left) || isPromiselike(right)) {\n            newValue = Promise.all([left, right]).then(([leftVal, rightVal]) =>\n              operation(leftVal, rightVal),\n            );\n          } else {\n            newValue = operation(left, right);\n          }\n        }\n\n        if (node.left.type === \"ModelRef\") {\n          if (isPromiselike(newValue)) {\n            return newValue.then((resolvedValue) => {\n              model.set([[(node.left as any).ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          }\n          model.set([[(node.left as any).ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          if (isPromiselike(newValue)) {\n            return newValue.then((resolvedValue) => {\n              this.vars[(node.left as any).name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[(node.left as any).name] = newValue;\n        }\n\n        return newValue;\n      }\n\n      return resolveNode(node.left);\n    }\n  }\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Schema as SchemaType, Formatting } from \"@player-ui/types\";\n\nimport type { BindingInstance } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { FormatDefinition, FormatOptions, FormatType } from \"./types\";\n\n/** A function that returns itself */\nconst identify = (val: any) => val;\n\n/** Expand the authored schema into a set of paths -> DataTypes */\nexport function parse(\n  schema: SchemaType.Schema,\n): Map<string, SchemaType.DataTypes> {\n  const expandedPaths = new Map<string, SchemaType.DataTypes>();\n\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n\n  const parseQueue: Array<{\n    /** The node to process */\n    node: SchemaType.Node;\n\n    /** The path in the data-model this node represents */\n    path: Array<string>;\n\n    /** A set of visited DataTypes to prevent loops */\n    visited: Set<string>;\n  }> = [{ node: schema.ROOT, path: [], visited: new Set() }];\n\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n\n    if (!next) {\n      break;\n    }\n\n    const { node, path, visited } = next;\n\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n\n      const nestedPathStr = nestedPath.join(\".\");\n\n      if (expandedPaths.has(nestedPathStr)) {\n        // We've gone in a loop. Panic\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\",\n        );\n      }\n\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`,\n        );\n      }\n\n      expandedPaths.set(nestedPathStr, type);\n\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: new Set([...visited, type.type]),\n        });\n      }\n    });\n  }\n\n  return expandedPaths;\n}\n\n/**\n * The Schema is the central hub for all data invariants, and metaData associated with the data-model itself\n * Outside of the types defined in the JSON payload, it doesn't manage or keep any state.\n * It simply servers as an orchestrator for other modules to interface w/ the schema.\n */\nexport class SchemaController implements ValidationProvider {\n  private formatters: Map<string, FormatType<any, any, FormatOptions>> =\n    new Map();\n\n  private types: Map<string, SchemaType.DataType<any>> = new Map();\n  public readonly schema: Map<string, SchemaType.DataTypes> = new Map();\n\n  private bindingSchemaNormalizedCache: Map<BindingInstance, string> =\n    new Map();\n\n  public readonly hooks = {\n    resolveTypeForBinding: new SyncWaterfallHook<\n      [SchemaType.DataTypes | undefined, BindingInstance]\n    >(),\n  };\n\n  constructor(schema?: SchemaType.Schema) {\n    this.schema = schema ? parse(schema) : new Map();\n  }\n\n  public addFormatters(fns: Array<FormatType<any, any, FormatOptions>>) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n\n  public addDataTypes(types: Array<SchemaType.DataType<any>>) {\n    types.forEach((t) => {\n      this.types.set(t.type, t);\n    });\n  }\n\n  getValidationsForBinding(\n    binding: BindingInstance,\n  ): Array<ValidationObject> | undefined {\n    const typeDef = this.getApparentType(binding);\n\n    if (!typeDef?.validation?.length) {\n      return undefined;\n    }\n\n    // Set the defaults for schema-level validations\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef,\n    }));\n  }\n\n  private normalizeBinding(binding: BindingInstance): string {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray\n      .map((p) => (typeof p === \"number\" ? \"[]\" : p))\n      .join(\".\");\n\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray\n        .map((p) => (p === item ? \"{}\" : p))\n        .join(\".\");\n\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n\n    return normalized;\n  }\n\n  public getType(binding: BindingInstance): SchemaType.DataTypes | undefined {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding,\n    );\n  }\n\n  public getApparentType(\n    binding: BindingInstance,\n  ): SchemaType.DataTypes | undefined {\n    const schemaType = this.getType(binding);\n\n    if (schemaType === undefined) {\n      return undefined;\n    }\n\n    const baseType = this.getTypeDefinition(schemaType?.type);\n\n    if (baseType === undefined) {\n      return schemaType;\n    }\n\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...(schemaType.validation ?? []),\n        ...(baseType.validation ?? []),\n      ],\n    };\n  }\n\n  public getTypeDefinition(dataType: string) {\n    return this.types.get(dataType);\n  }\n\n  public getFormatterForType(\n    formatReference: Formatting.Reference,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const { type: formatType, ...options } = formatReference;\n\n    const formatter = this.formatters.get(formatType);\n\n    if (!formatter) {\n      return;\n    }\n\n    return {\n      format: formatter.format\n        ? (val) => formatter.format?.(val, options)\n        : identify,\n      deformat: formatter.deformat\n        ? (val) => formatter.deformat?.(val, options)\n        : identify,\n    };\n  }\n\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  public getFormatter(\n    binding: BindingInstance,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const type = this.getApparentType(binding);\n\n    if (!type?.format) {\n      return undefined;\n    }\n\n    return this.getFormatterForType(type.format);\n  }\n}\n","import { setIn } from \"timm\";\nimport type { Expression } from \"@player-ui/types\";\nimport type { DataModelWithParser } from \"../data\";\n\nconst DOUBLE_OPEN_CURLY = \"{{\";\nconst DOUBLE_CLOSE_CURLY = \"}}\";\n\nexport interface Options {\n  /**\n   * The model to use when resolving refs\n   * Passing `false` will skip trying to resolve any direct model refs ({{foo}})\n   */\n  model: false | DataModelWithParser;\n\n  /**\n   * A function to evaluate an expression\n   * Passing `false` will skip trying to evaluate any expressions (@[ foo() ]@)\n   */\n  evaluate: false | ((exp: Expression) => any);\n\n  /**\n   * Optionaly resolve binding without formatting in case Type format applies\n   */\n  formatted?: boolean;\n}\n\n/** Search the given string for the coordinates of the next expression to resolve */\nexport function findNextExp(str: string) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n\n  if (expStart === -1) {\n    return undefined;\n  }\n\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n\n  while (count > 0 && workingString.length > 0) {\n    // Find the next open or close curly\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n\n    // We can't close anything, so there's no point in going on with life.\n    if (nextCloseCurly === -1) {\n      break;\n    }\n\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      // We've hit another open bracket before closing out the one we want\n      // Move everything over and bump our close count by 1\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length,\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      // We've hit another closing bracket\n      // Decrement our count and updates offsets\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length,\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n\n  return {\n    start: expStart,\n    end: offset,\n  };\n}\n\n/** Finds any subset of the string wrapped in @[]@ and evaluates it as an expression */\nexport function resolveExpressionsInString(\n  val: string,\n  { evaluate }: Options,\n): string {\n  if (!evaluate) {\n    return val;\n  }\n\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length,\n    );\n    const expValue = evaluate(expString);\n\n    // The string is only the expression, return the raw value.\n    if (\n      matchStart === 0 &&\n      expStrWithBrackets === val &&\n      typeof expValue !== \"string\"\n    ) {\n      return expValue;\n    }\n\n    newVal =\n      newVal.substr(0, matchStart) +\n      expValue +\n      newVal.substr(matchStart + expStrWithBrackets.length);\n    // remove the surrounding @[]@ to get the expression\n    match = newVal.match(expMatch);\n  }\n\n  return newVal;\n}\n\n/** Return a string with all data model references resolved */\nexport function resolveDataRefsInString(val: string, options: Options): string {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n\n  if (\n    !model ||\n    typeof workingString !== \"string\" ||\n    workingString.indexOf(DOUBLE_OPEN_CURLY) === -1\n  ) {\n    return workingString;\n  }\n\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n\n    if (!expLocation) {\n      return workingString;\n    }\n\n    const { start, end } = expLocation;\n\n    // Strip out the wrapping curlies from {{binding}} before passing to the model\n    const binding = workingString\n      .substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length,\n      )\n      .trim();\n\n    const evaledVal = model.get(binding, { formatted });\n\n    // Exit early if the string is _just_ a model lookup\n    // If the result is a string, we may need further processing for nested bindings\n    if (\n      start === 0 &&\n      end === workingString.length &&\n      typeof evaledVal !== \"string\"\n    ) {\n      return evaledVal;\n    }\n\n    workingString =\n      workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n\n  return workingString;\n}\n\n/** Traverse the thing and replace any model refs */\nfunction traverseObject<T>(val: T, options: Options): T {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val as string, options) as unknown as T;\n    }\n\n    case \"object\": {\n      if (!val) return val;\n      // TODO: Do we care refs in keys?\n      const keys = Object.keys(val);\n      let newVal = val;\n\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn(\n            newVal as any,\n            [key],\n            traverseObject((val as any)[key], options),\n          ) as any;\n        });\n      }\n\n      return newVal;\n    }\n\n    default:\n      return val;\n  }\n}\n\n/** Recursively resolve all model refs in whatever you pass in */\nexport function resolveDataRefs<T>(val: T, options: Options): T {\n  return traverseObject(val, options);\n}\n","import type { BindingInstance } from \"../binding\";\n\n/**\n * Remove a binding, and any children from from the map\n * If the binding is an array-item, then it will be spliced from the array and the others will be shifted down\n *\n * @param sourceMap - A map of bindings to values\n * @param binding - The binding to remove from the map\n */\nexport function removeBindingAndChildrenFromMap<T>(\n  sourceMap: Map<BindingInstance, T>,\n  binding: BindingInstance,\n): Map<BindingInstance, T> {\n  const targetMap = new Map(sourceMap);\n\n  const parentBinding = binding.parent();\n  const property = binding.key();\n\n  // Clear out any that are sub-bindings of this binding\n\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n\n  if (typeof property === \"number\") {\n    // Splice out this index from the rest\n\n    // Order matters here b/c we are shifting items in the array\n    // Start with the smallest index and work our way down\n    const bindingsToRewrite = Array.from(sourceMap.keys())\n      .filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n\n        return false;\n      })\n      .sort();\n\n    bindingsToRewrite.forEach((trackedBinding) => {\n      // If the tracked binding is a sub-binding of the parent binding, then we need to\n      // update the path to reflect the new index\n\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding) as T);\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n\n  return targetMap;\n}\n","import type { Node } from \"./types\";\n\n/**\n * Checks if there are templated values in the object\n *\n * @param obj - The Parsed Object to check to see if we have a template array type for\n * @param localKey - The key being checked\n */\nexport function hasTemplateValues(obj: any, localKey: string) {\n  return (\n    Object.hasOwnProperty.call(obj, \"template\") &&\n    Array.isArray(obj?.template) &&\n    obj.template.length &&\n    obj.template.find((tmpl: any) => tmpl.output === localKey)\n  );\n}\n\n/** Check to see if the string is a valid switch key */\nexport function hasSwitchKey(localKey: string) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\n\n/** Check to see if the string is a valid template key */\nexport function hasTemplateKey(localKey: string) {\n  return localKey === \"template\";\n}\n\n/** Get the ID of the Node if there is one */\nexport function getNodeID(node?: Node.Node | null): string | undefined {\n  if (!node) {\n    return;\n  }\n\n  if (\n    \"value\" in node &&\n    typeof node.value === \"object\" &&\n    typeof node.value?.id === \"string\"\n  ) {\n    return node.value.id;\n  }\n}\n","import type { BindingInstance, BindingLike } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ExpressionType } from \"../../expressions\";\nimport type { Resolve } from \"./types\";\n\n/** Check to see if and of the data-changes affect the given dependencies  */\nexport function caresAboutDataChanges(\n  dataChanges?: Set<BindingInstance>,\n  dependencies?: Set<BindingInstance>,\n) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n\n  return (\n    depArray.find(\n      (dep) =>\n        !!dataChangeArray.find(\n          (change) =>\n            change === dep || change.contains(dep) || dep.contains(change),\n        ),\n    ) !== undefined\n  );\n}\n\n/** Convert the options object for a resolver to one for a node */\nexport function toNodeResolveOptions(\n  resolverOptions: Resolve.ResolverOptions,\n): Resolve.NodeResolveOptions {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n\n        return value;\n      },\n      format: (bindingLike: BindingLike, value: any) =>\n        resolverOptions.format\n          ? resolverOptions.format(\n              isBinding(bindingLike)\n                ? bindingLike\n                : resolverOptions.parseBinding(bindingLike),\n              value,\n            )\n          : value,\n    },\n    evaluate: (exp: ExpressionType) =>\n      resolverOptions.evaluator.evaluate(exp, resolverOptions),\n  };\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { addLast, clone, setIn } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\nimport type { BindingInstance, BindingLike } from \"../../binding\";\nimport type {\n  DataModelOptions,\n  DataModelWithParser,\n  Updates,\n} from \"../../data\";\nimport { DependencyModel, withParser } from \"../../data\";\nimport type { Logger } from \"../../logger\";\nimport { Node, NodeType } from \"../parser\";\nimport { caresAboutDataChanges, toNodeResolveOptions } from \"./utils\";\nimport type { Resolve } from \"./types\";\nimport { getNodeID } from \"../parser/utils\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\ninterface NodeUpdate extends Resolve.ResolvedNode {\n  /** A flag to track if a node has changed since the last resolution */\n  updated: boolean;\n}\n\n/** Add model context to the data model */\nconst withContext = (model: DataModelWithParser): DataModelWithParser => {\n  return {\n    get: (binding: BindingLike, options?: DataModelOptions): any => {\n      return model.get(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    set: (\n      transaction: [BindingLike, any][],\n      options?: DataModelOptions,\n    ): Updates => {\n      return model.set(transaction, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    delete: (binding: BindingLike, options?: DataModelOptions): void => {\n      return model.delete(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n  };\n};\n\n/**\n * The Resolver is the way to take a parsed AST graph of a view and resolve it to a concrete representation of the current user state\n * It combines the ability to mutate ast nodes before resolving, as well as the mutating the resolved objects while parsing\n */\nexport class Resolver {\n  public readonly hooks = {\n    /** A hook to allow skipping of the resolution tree for a specific node */\n    skipResolve: new SyncWaterfallHook<\n      [boolean, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** An event emitted before calculating the next update */\n    beforeUpdate: new SyncHook<[Set<BindingInstance> | undefined]>(),\n\n    /** An event emitted after calculating the next update */\n    afterUpdate: new SyncHook<[any]>(),\n\n    /** The options passed to a node to resolve it to an object */\n    resolveOptions: new SyncWaterfallHook<\n      [Resolve.NodeResolveOptions, Node.Node]\n    >(),\n\n    /** A hook to transform the AST node into a new AST node before resolving it */\n    beforeResolve: new SyncWaterfallHook<\n      [Node.Node | null, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform an AST node into it's resolved value.\n     * This runs _before_ any children are resolved\n     */\n    resolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform the resolved value of an AST node.\n     * This runs _after_ all children nodes are resolved\n     */\n    afterResolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** Called at the very end of a node's tree being updated */\n    afterNodeUpdate: new SyncHook<\n      [Node.Node, Node.Node | undefined, NodeUpdate]\n    >(),\n  };\n\n  /**\n   * The AST tree after beforeResolve is ran mapped to the AST before beforeResolve is ran\n   */\n  private readonly ASTMap: Map<Node.Node, Node.Node>;\n  /**\n   * The root node in the AST tree we want to resolve\n   */\n  public readonly root: Node.Node;\n\n  /**\n   * The cache of the last resolved values when walking the tree.\n   * This gets recycled every update to avoid stale data if a node is unused in an update\n   */\n  private resolveCache: Map<Node.Node, Resolve.ResolvedNode>;\n\n  /**\n   * Cache of node IDs that have been processed to track if nodes have duplicate IDs\n   */\n  private idCache: Set<string>;\n\n  /**\n   * The parameters required to resolve AST nodes\n   */\n  private readonly options: Resolve.ResolverOptions;\n\n  /**\n   * Tapable logger for logging errors encountered during view resolution\n   */\n  private logger?: Logger;\n\n  constructor(root: Node.Node, options: Resolve.ResolverOptions) {\n    this.root = root;\n    this.options = options;\n    this.resolveCache = new Map();\n    this.ASTMap = new Map();\n    this.logger = options.logger;\n    this.idCache = new Set();\n  }\n\n  public getSourceNode(convertedAST: Node.Node) {\n    return this.ASTMap.get(convertedAST);\n  }\n\n  public update(changes?: Set<BindingInstance>): any {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = new Map<Node.Node, Resolve.ResolvedNode>();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n\n    const updated = this.computeTree(\n      this.root,\n      undefined,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      undefined,\n      prevASTMap,\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n\n  public getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n\n  private getPreviousResult(node: Node.Node): Resolve.ResolvedNode | undefined {\n    if (!node) {\n      return;\n    }\n\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n\n    if (id) {\n      if (this.idCache.has(id)) {\n        // Only log this conflict once to cut down on noise\n        // May want to swap this to logging when we first see the id -- which may not be the first render\n        if (isFirstUpdate) {\n          if (node.type === NodeType.Asset || node.type === NodeType.View) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`,\n            );\n          } else if (node.type === NodeType.Value) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`,\n            );\n          }\n        }\n\n        // Don't use anything from a prev result if there's a duplicate id detected\n        return;\n      }\n\n      this.idCache.add(id);\n    }\n\n    return this.resolveCache.get(node);\n  }\n\n  private cloneNode(node: any) {\n    const clonedNode = clone(node);\n\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\") return;\n\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n\n    return clonedNode;\n  }\n\n  private computeTree(\n    node: Node.Node,\n    rawParent: Node.Node | undefined,\n    dataChanges: Set<BindingInstance> | undefined,\n    cacheUpdate: Map<Node.Node, Resolve.ResolvedNode>,\n    options: Resolve.NodeResolveOptions,\n    partiallyResolvedParent: Node.Node | undefined,\n    prevASTMap: Map<Node.Node, Node.Node>,\n  ): NodeUpdate {\n    const dependencyModel = new DependencyModel(options.data.model);\n\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding),\n    );\n\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser,\n        },\n        evaluate: (exp) =>\n          this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node,\n      },\n      node,\n    );\n\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions,\n    );\n\n    // Shallow clone the node so that changes to it during the resolve steps don't impact the original.\n    // We are trusting that this becomes a deep clone once the whole node tree has been traversed.\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent,\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions,\n    ) ?? {\n      type: NodeType.Empty,\n    };\n\n    const isNestedMultiNodeWithAsync =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.parent.type === NodeType.Value &&\n      resolvedAST.parent?.type === NodeType.Asset &&\n      resolvedAST.parent.value.id.includes(\"async\");\n\n    const isNestedMultiNode =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.type === NodeType.Value;\n\n    if (previousResult && shouldUseLastValue) {\n      const update = {\n        ...previousResult,\n        updated: false,\n      };\n\n      /** Recursively repopulate the AST map given some AST Node and it's resolved AST representation */\n      const repopulateASTMapFromCache = (\n        resolvedNode: Resolve.ResolvedNode,\n        AST: Node.Node,\n        ASTParent: Node.Node | undefined,\n      ) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false,\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n\n        /** Helper function for recursing over child node */\n        const handleChildNode = (childNode: Node.Node) => {\n          // In order to get the correct results, we need to use the node references from the last update.\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult) return;\n\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST,\n          );\n        };\n\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(({ value: childAST }) =>\n            handleChildNode(childAST),\n          );\n        } else if (resolvedASTLocal.type === NodeType.MultiNode) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n\n      // Point the root of the cached node to the new resolved node.\n      previousResult.node.parent = partiallyResolvedParent;\n\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n\n      return update;\n    }\n\n    if (isNestedMultiNodeWithAsync) {\n      resolvedAST.parent = partiallyResolvedParent.parent;\n    } else {\n      resolvedAST.parent = partiallyResolvedParent;\n    }\n\n    resolveOptions.node = resolvedAST;\n\n    this.ASTMap.set(resolvedAST, node);\n\n    let resolved = this.hooks.resolve.call(\n      undefined,\n      resolvedAST,\n      resolveOptions,\n    );\n\n    let updated = !dequal(previousResult?.value, resolved);\n\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    const childDependencies = new Set<BindingInstance>();\n    dependencyModel.trackSubset(\"children\");\n\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue,\n        } = computedChildTree;\n\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n\n        if (childValue) {\n          if (childNode.type === NodeType.MultiNode && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path as any[], []),\n              childValue,\n            );\n            resolved = setIn(resolved, child.path, arr);\n          } else {\n            resolved = setIn(resolved, child.path, childValue);\n          }\n        }\n\n        updated = updated || childUpdated;\n\n        return { ...child, value: childNode };\n      });\n\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === NodeType.MultiNode) {\n      const childValue: any = [];\n      const rawParentToPassIn = isNestedMultiNode\n        ? partiallyResolvedParent?.parent\n        : node;\n\n      const hasAsync = resolvedAST.values\n        .map((value, index) => (value.type === NodeType.Async ? index : -1))\n        .filter((index) => index !== -1);\n\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n\n        if (mTree.value !== undefined && mTree.value !== null) {\n          /**\n           * async nodes' parent is a multi-node\n           * When the node to resolve is an async node and the flatten flag is true\n           * Add the content streamed in to the childValue of parent multi-node\n           * Array.isArray(mTree.value.asset.values) is the case when the content is an async asset\n           */\n          if (\n            mValue.type === NodeType.Async &&\n            mValue.flatten &&\n            mTree.value.asset &&\n            Array.isArray(mTree.value.asset.values)\n          ) {\n            // This flatten function only changed the values not node structure\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n\n        mTree.dependencies.forEach((bindingDep) =>\n          childDependencies.add(bindingDep),\n        );\n\n        updated = updated || mTree.updated;\n\n        return mTree.node;\n      });\n\n      if (hasAsync.length > 0) {\n        // this likely turned into a nested multinode, attempt to flatten in node structure\n        const copy = newValues;\n        hasAsync.forEach((index) => {\n          if (copy[index]) copy.splice(index, 1, ...unpackNode(copy[index]));\n        });\n        resolvedAST.values = copy;\n      } else {\n        resolvedAST.values = newValues;\n      }\n      resolved = childValue;\n    }\n\n    childDependencies.forEach((bindingDep) =>\n      dependencyModel.addChildReadDep(bindingDep),\n    );\n\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope?: \"core\" | \"children\") =>\n        dependencyModel.getDependencies(scope),\n    });\n\n    const update: NodeUpdate = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies,\n      ]),\n    };\n\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update,\n    );\n    cacheUpdate.set(node, update);\n\n    return update;\n  }\n}\n\n/**\n * helper function to flatten a potential nested array and combine with initial array\n */\nfunction unpackAndPush(item: any | any[], initial: any[]): void {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i: any) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n\nfunction unpackNode(item: Node.Node) {\n  const unpacked: Node.Node[] = [];\n  if (\n    \"children\" in item &&\n    item.children?.[0]?.value.type === NodeType.Asset &&\n    (item.children?.[0]?.value as Node.Asset).children\n  ) {\n    if (\n      (item.children?.[0]?.value as Node.Asset).children?.[0]?.value.type ===\n      NodeType.MultiNode\n    ) {\n      (\n        (item.children?.[0]?.value as Node.Asset).children?.[0]\n          ?.value as Node.MultiNode\n      ).values.forEach((value) => {\n        unpacked.push(value);\n      });\n    }\n  } else {\n    unpacked.push(item);\n  }\n  return unpacked;\n}\n","import { set } from \"timm\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type { Options } from \"./options\";\nimport type { Node } from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** Create a function that checks for a start/end sequence in a string */\nconst createPatternMatcher = (start: string, end: string) => {\n  return (testStr: string) => {\n    const startLocation = testStr.indexOf(start);\n\n    if (startLocation === -1) {\n      return false;\n    }\n\n    const endLocation = testStr.indexOf(end);\n\n    if (endLocation === -1) {\n      return false;\n    }\n\n    return startLocation < endLocation;\n  };\n};\n\nconst bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nconst expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n\n/** Check to see if a string contains a reference to dynamic content */\nfunction hasSomethingToResolve(str: string) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\n\n/** Resolve data refs in a string if necessary. */\nfunction resolveString(str: string, resolveOptions: Options) {\n  return hasSomethingToResolve(str)\n    ? resolveDataRefs(str, {\n        model: resolveOptions.data.model,\n        evaluate: resolveOptions.evaluate,\n      })\n    : str;\n}\n\n/** Recursively resolve all string references in an object or array */\nexport function resolveAllRefs(\n  node: any,\n  resolveOptions: Options,\n  propertiesToSkip: Set<string | number>,\n): any {\n  if (\n    node === null ||\n    node === undefined ||\n    (typeof node !== \"object\" && typeof node !== \"string\")\n  ) {\n    return node;\n  }\n\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n\n  let newNode = node;\n\n  Object.keys(node).forEach((key: string | number) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n\n    const val = node[key];\n\n    let newVal = val;\n\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n\n    if (newVal !== val) {\n      newNode = set(newNode, key as any, newVal);\n    }\n  });\n\n  return newNode;\n}\n\n/** Traverse up the node tree finding the first available 'path' */\nconst findBasePath = (\n  node: Node.Node,\n  resolver: Resolver,\n): Node.PathSegment[] => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return (\n      parentNode.children?.find((child) => child.value === original)?.path ?? []\n    );\n  }\n\n  if (parentNode.type !== NodeType.MultiNode) {\n    return [];\n  }\n\n  return findBasePath(parentNode, resolver);\n};\n\n/** A plugin that resolves all string references for each node */\nexport default class StringResolverPlugin implements ViewPlugin {\n  private propertiesToSkipCache: Map<string, Set<string>>;\n\n  constructor() {\n    this.propertiesToSkipCache = new Map();\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === NodeType.Empty || node.type === NodeType.Unknown) {\n        return null;\n      }\n\n      if (\n        node.type === NodeType.Value ||\n        node.type === NodeType.Asset ||\n        node.type === NodeType.View\n      ) {\n        /** Use specified properties to skip during string resolution, or default */\n        let propsToSkip: Set<string>;\n        if (node.type === NodeType.Asset || node.type === NodeType.View) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"],\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (\n          node.parent?.type === NodeType.MultiNode &&\n          (node.parent?.parent?.type === NodeType.Asset ||\n            node.parent?.parent?.type === NodeType.View) &&\n          node.parent.parent.value?.id &&\n          this.propertiesToSkipCache.has(node.parent.parent.value.id)\n        ) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id,\n          ) as Set<string>;\n        } else {\n          propsToSkip = new Set([\"exp\"]);\n        }\n\n        const nodePath = findBasePath(node, resolver);\n\n        /** If the path includes something that is supposed to be skipped, this node should be skipped too. */\n        if (\n          nodePath.length > 0 &&\n          nodePath.some((segment) => propsToSkip.has(segment.toString()))\n        ) {\n          return node.value;\n        }\n\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n\n      return value;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n}\n","const ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n\n/**\n * Replaces %num in message with the provided parameters in order.\n *\n * @param message - Parameterized string like \"This is a %1\"\n * @param params - Parameters to replace in message E.g. ['tax2021.amount']\n * @returns A message with the parameters replaced.\n */\nexport function replaceParams(\n  message: string,\n  params: Record<string, any>,\n): string {\n  return message\n    .slice()\n    .replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n","import type { Validation } from \"@player-ui/types\";\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { setIn } from \"timm\";\n\nimport type { BindingInstance, BindingFactory } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { DataModelWithParser, DataModelMiddleware } from \"../../data\";\nimport type { SchemaController } from \"../../schema\";\nimport type {\n  ErrorValidationResponse,\n  ValidationObject,\n  ValidationObjectWithHandler,\n  ValidatorContext,\n  ValidationProvider,\n  ValidationResponse,\n  WarningValidationResponse,\n  StrongOrWeakBinding,\n} from \"../../validator\";\nimport {\n  ValidationMiddleware,\n  ValidatorRegistry,\n  removeBindingAndChildrenFromMap,\n} from \"../../validator\";\nimport type { Logger } from \"../../logger\";\nimport { ProxyLogger } from \"../../logger\";\nimport type { Resolve, ViewInstance } from \"../../view\";\nimport { caresAboutDataChanges } from \"../../view\";\nimport { replaceParams } from \"../../utils\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type {\n  ExpressionEvaluatorOptions,\n  ExpressionType,\n} from \"../../expressions\";\nimport type { BindingTracker } from \"./binding-tracker\";\nimport { ValidationBindingTrackerViewPlugin } from \"./binding-tracker\";\n\nexport const SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nexport const VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n\nexport const VALIDATION_PROVIDER_NAME_SYMBOL: unique symbol = Symbol.for(\n  \"validation-provider-name\",\n);\n\nexport type ValidationObjectWithSource = ValidationObjectWithHandler & {\n  /** The name of the validation */\n  [VALIDATION_PROVIDER_NAME_SYMBOL]: string;\n};\n\ntype SimpleValidatorContext = Omit<\n  ValidatorContext,\n  \"validation\" | \"schemaType\"\n>;\n\ninterface BaseActiveValidation<T> {\n  /** The validation is being actively shown */\n  state: \"active\";\n\n  /** The validation response */\n  response: T;\n}\n\ntype ActiveWarning = BaseActiveValidation<WarningValidationResponse> & {\n  /** Warnings track if they can be dismissed automatically (by navigating) */\n  dismissable: boolean;\n};\ntype ActiveError = BaseActiveValidation<ErrorValidationResponse>;\n\n/**\n * warnings that keep track of their active state\n */\ntype StatefulWarning = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"warning\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** warnings start with no state, but can active or dismissed */\n      state: \"none\" | \"dismissed\";\n    }\n  | ActiveWarning\n);\n\n/** Errors that keep track of their state */\ntype StatefulError = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"error\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** Errors start with no state an can be activated */\n      state: \"none\";\n    }\n  | ActiveError\n);\n\nexport type StatefulValidationObject = StatefulWarning | StatefulError;\n\n/** Helper function to determin if the subset is within the containingSet */\nfunction isSubset<T>(subset: Set<T>, containingSet: Set<T>): boolean {\n  if (subset.size > containingSet.size) return false;\n  for (const entry of subset) if (!containingSet.has(entry)) return false;\n  return true;\n}\n\n/** Helper for initializing a validation object that tracks state */\nfunction createStatefulValidationObject(\n  obj: ValidationObjectWithSource,\n): StatefulValidationObject {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false,\n  };\n}\n\ntype ValidationRunner = (obj: ValidationObjectWithHandler) =>\n  | {\n      /** A validation message */\n      message: string;\n    }\n  | undefined;\n\n/** A class that manages validating bindings across phases */\nclass ValidatedBinding {\n  public currentPhase?: Validation.Trigger;\n  private applicableValidations: Array<StatefulValidationObject> = [];\n  private validationsByState: Record<\n    Validation.Trigger,\n    Array<StatefulValidationObject>\n  > = {\n    load: [],\n    change: [],\n    navigation: [],\n  };\n\n  public get allValidations(): Array<StatefulValidationObject> {\n    return Object.values(this.validationsByState).flat();\n  }\n\n  public weakBindings: Set<BindingInstance>;\n\n  private onDismiss?: () => void;\n\n  constructor(\n    possibleValidations: Array<ValidationObjectWithSource>,\n    onDismiss?: () => void,\n    log?: Logger,\n    weakBindings?: Set<BindingInstance>,\n  ) {\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? new Set();\n  }\n\n  private checkIfBlocking(statefulObj: StatefulValidationObject) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n\n    return false;\n  }\n\n  public getAll(): Array<ValidationResponse> {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj),\n        });\n      }\n\n      return all;\n    }, [] as Array<ValidationResponse>);\n  }\n\n  public get(): ValidationResponse | undefined {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid),\n      };\n    }\n  }\n\n  private runApplicableValidations(\n    runner: ValidationRunner,\n    canDismiss: boolean,\n    phase: Validation.Trigger,\n  ) {\n    // If the currentState is not load, skip those\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          // Don't rerun any dismissed warnings\n          return originalValue;\n        }\n\n        // treat all warnings the same and block it once (unless blocking is true)\n        const blocking =\n          originalValue.value.blocking ??\n          ((originalValue.value.severity === \"warning\" && \"once\") || true);\n\n        const obj = setIn(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking,\n        ) as StatefulValidationObject;\n\n        const isBlockingNavigation =\n          blocking === true || (blocking === \"once\" && !canDismiss);\n\n        if (\n          phase === \"navigation\" &&\n          obj.state === \"active\" &&\n          obj.value.blocking !== true\n        ) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj as ActiveWarning;\n            if (\n              warn.dismissable &&\n              warn.response.dismiss &&\n              (warn.response.blocking !== \"once\" || !warn.response.blocking)\n            ) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n\n              warn.dismissable = true;\n            }\n\n            return warn as StatefulValidationObject;\n          }\n        }\n\n        const response = runner(obj.value);\n\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable:\n            obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response\n            ? {\n                ...obj.value,\n                message: response.message ?? \"Something is broken\",\n                severity: obj.value.severity,\n                displayTarget: obj.value.displayTarget ?? \"field\",\n              }\n            : undefined,\n        } as StatefulValidationObject;\n\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          (newState.response as WarningValidationResponse).dismiss = () => {\n            (newState as StatefulWarning).state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n\n        return newState;\n      },\n    );\n  }\n\n  public update(\n    phase: Validation.Trigger,\n    canDismiss: boolean,\n    runner: ValidationRunner,\n  ) {\n    const newApplicableValidations: StatefulValidationObject[] = [];\n\n    if (phase === \"load\" && this.currentPhase !== undefined) {\n      // Tried to run the 'load' phase twice. Aborting\n      return;\n    }\n\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      // Already added all the types. No need to continue adding new validations\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      // The transition to the 'change' type can only come from a 'load' type\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change,\n      ];\n    } else if (\n      phase === \"navigation\" &&\n      (this.currentPhase === \"load\" || this.currentPhase === \"change\")\n    ) {\n      // Can transition to a nav state from a change or load\n\n      // if there is an non-blocking error that is active then remove the error from applicable validations so it can no longer be shown\n      // which is needed if there are additional warnings to become active for that binding after the error is shown\n      this.applicableValidations.forEach((element) => {\n        if (\n          !(\n            element.type === \"error\" &&\n            element.state === \"active\" &&\n            element.isBlockingNavigation === false\n          )\n        ) {\n          newApplicableValidations.push(element);\n        }\n      });\n\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...(this.currentPhase === \"load\" ? this.validationsByState.change : []),\n      ];\n      this.currentPhase = \"navigation\";\n    }\n\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n}\n\n/**\n * A controller for orchestrating validation within a running player\n *\n * The current validation flow is as follows:\n *\n *   - When a binding is first seen, gather all of the possible validations for it from the providers\n *     - Schema and Crossfield (view) are both providers of possible validations\n *     - Run all of the applicable validations for that binding for the `load` trigger\n *\n *   - When a change occurs, set the phase of the binding to `change`.\n *     - Run all of the `change` triggered validations for that binding.\n *\n *   - When a navigation event occurs, set the phase of the binding to `navigate`.\n *     - Run all `change` and `navigate` validations for each tracked binding.\n *     - For any warnings, also keep a state of `shown` or `dismissed`.\n *       - Set all non-dismissed warnings to `shown`.\n *       - Set all `shown` warnings to `dismissed`.\n *     - Allow navigation forward if there are no non-dismissed warnings and no valid errors.\n */\nexport class ValidationController implements BindingTracker {\n  public readonly hooks = {\n    /** A hook called to tap into the validator registry for adding more validators */\n    createValidatorRegistry: new SyncHook<[ValidatorRegistry]>(),\n\n    /** A callback/event when a new validation is added to the view */\n    onAddValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n    onRemoveValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    resolveValidationProviders: new SyncWaterfallHook<\n      [\n        Array<{\n          /** The name of the provider */\n          source: string;\n          /** The provider itself */\n          provider: ValidationProvider;\n        }>,\n      ],\n      {\n        /** The view this is triggered for  */\n        view?: ViewInstance;\n      }\n    >(),\n\n    /** A hook called when a binding is added to the tracker */\n    onTrackBinding: new SyncHook<[BindingInstance]>(),\n  };\n\n  private tracker: BindingTracker | undefined;\n  private validations = new Map<BindingInstance, ValidatedBinding>();\n  private validatorRegistry?: ValidatorRegistry;\n  private schema: SchemaController;\n\n  private providers:\n    | Array<{\n        /** The name of the provider */\n        source: string;\n        /** The provider itself */\n        provider: ValidationProvider;\n      }>\n    | undefined;\n\n  private viewValidationProvider?: ValidationProvider;\n  private options?: SimpleValidatorContext;\n  private weakBindingTracker = new Set<BindingInstance>();\n\n  constructor(schema: SchemaController, options?: SimpleValidatorContext) {\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n\n  setOptions(options: SimpleValidatorContext) {\n    this.options = options;\n  }\n\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  public getDataMiddleware(): Array<DataModelMiddleware> {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding,\n          );\n\n          return next?.delete(binding, options);\n        },\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n\n          // return validation issues directly on bindings first\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n\n          // if none, check to see any validations this binding may be a weak ref of and return\n          const newInvalidBindings: Set<StrongOrWeakBinding> = new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (\n              caresAboutDataChanges(\n                new Set([binding]),\n                weakValidation.weakBindings,\n              ) &&\n              weakValidation?.get()?.severity === \"error\"\n            ) {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true,\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false,\n                  });\n                }\n              });\n            }\n          });\n\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) },\n      ),\n    ];\n  }\n\n  private getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema,\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (\n            binding: BindingInstance,\n          ): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding,\n            );\n          },\n\n          getValidationsForView: (): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          },\n        },\n      },\n    ]);\n\n    return this.providers;\n  }\n\n  public reset() {\n    this.validations.clear();\n    this.tracker = undefined;\n  }\n\n  public onView(view: ViewInstance): void {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (\n            !this.options ||\n            this.getValidationForBinding(binding) !== undefined\n          ) {\n            return;\n          }\n\n          // Set the default value for the binding if we need to\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true,\n          });\n\n          if (originalValue !== withoutDefault) {\n            // Don't trigger updates when setting the default value\n            this.options.model.set([[binding, originalValue]], {\n              silent: true,\n            });\n          }\n\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(new Set([binding]));\n            },\n          );\n\n          this.hooks.onTrackBinding.call(binding);\n        },\n      },\n    });\n\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n\n    bindingTrackerPlugin.apply(view);\n  }\n\n  updateValidationsForBinding(\n    binding: BindingInstance,\n    trigger: Validation.Trigger,\n    validationContext?: SimpleValidatorContext,\n    onDismiss?: () => void,\n  ): void {\n    const context = validationContext ?? this.options;\n\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n\n    if (trigger === \"load\") {\n      // Get all of the validations from each provider\n      const possibleValidations = this.getValidationProviders().reduce<\n        Array<ValidationObjectWithSource>\n      >((vals, provider) => {\n        vals.push(\n          ...(provider.provider\n            .getValidationsForBinding?.(binding)\n            ?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source,\n            })) ?? []),\n        );\n\n        return vals;\n      }, []);\n\n      if (possibleValidations.length === 0) {\n        return;\n      }\n\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger,\n        ),\n      );\n    }\n\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n\n      if (this.weakBindingTracker.size > 0) {\n        const t = this.validations.get(binding) as ValidatedBinding;\n        this.weakBindingTracker.forEach((b) => t.weakBindings.add(b));\n      }\n\n      return response ? { message: response.message } : undefined;\n    });\n\n    // Also run any validations that binding or sub-binding is a weak binding of\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (\n          vBinding !== binding &&\n          caresAboutDataChanges(new Set([binding]), validation.weakBindings)\n        ) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context,\n            );\n            return response ? { message: response.message } : undefined;\n          });\n        }\n      });\n    }\n  }\n\n  validationRunner(\n    validationObj: ValidationObjectWithHandler,\n    binding: BindingInstance,\n    context: SimpleValidatorContext | undefined = this.options,\n  ) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n\n    const handler =\n      validationObj.handler ?? this.getValidator(validationObj.type);\n\n    const weakBindings = new Set<BindingInstance>();\n\n    // For any data-gets in the validation runner, default to using the _invalid_ value (since that's what we're testing against)\n    const model: DataModelWithParser = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete,\n    };\n\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (\n          exp: ExpressionType,\n          options: ExpressionEvaluatorOptions = { model },\n        ) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding),\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\",\n      }),\n      validationObj,\n    );\n\n    this.weakBindingTracker = weakBindings;\n\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate,\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n\n      return {\n        message,\n      };\n    }\n  }\n\n  private updateValidationsForView(trigger: Validation.Trigger): void {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n\n    /** Run validations for all bindings in view */\n    const updateValidations = (dismissValidations: boolean) => {\n      this.getBindings().forEach((binding) => {\n        this.validations\n          .get(binding)\n          ?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n\n            return this.validationRunner(obj, binding, this.options);\n          });\n      });\n    };\n\n    // Should dismiss for non-navigation triggers.\n    updateValidations(!isNavigationTrigger);\n\n    if (isNavigationTrigger) {\n      // If validations didn't change since last update, dismiss all dismissible validations.\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n\n  private get activeBindings(): Set<BindingInstance> {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== undefined,\n      ),\n    );\n  }\n\n  public getValidator(type: string) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n\n    return registry.get(type);\n  }\n\n  getBindings(): Set<BindingInstance> {\n    return this.tracker?.getBindings() ?? new Set();\n  }\n\n  trackBinding(binding: BindingInstance): void {\n    this.tracker?.trackBinding(binding);\n  }\n\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger: Validation.Trigger = \"navigation\"): {\n    /** Indicating if the view can proceed without error */\n    canTransition: boolean;\n\n    /** the validations that are preventing the view from continuing */\n    validations?: Map<BindingInstance, ValidationResponse>;\n  } {\n    this.updateValidationsForView(trigger);\n\n    const validations = new Map<BindingInstance, ValidationResponse>();\n\n    let canTransition = true;\n\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v,\n            )}`,\n          );\n\n          canTransition = false;\n        }\n\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n\n    return {\n      canTransition,\n      validations: validations.size ? validations : undefined,\n    };\n  }\n\n  /** Get the current tracked validation for the given binding */\n  public getValidationForBinding(\n    binding: BindingInstance,\n  ): ValidatedBinding | undefined {\n    return this.validations.get(binding);\n  }\n\n  forView(parser: BindingFactory): Resolve.Validation {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding),\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return undefined;\n        }\n\n        const validationMapping = new Map<\n          BindingInstance,\n          ValidationResponse\n        >();\n\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n\n        return validationMapping.size === 0 ? undefined : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\",\n        );\n      },\n      type: (binding) =>\n        this.schema.getType(isBinding(binding) ? binding : parser(binding)),\n    };\n  }\n}\n","import { BindingInstance } from \"../../binding\";\n\n/** Recursively flattens a nested object to be an object of depth 1 with keys being the full path in the orginal object */\nexport function flatten(obj: any, roots: [string][] = [], sep = \".\"): any {\n  return (\n    Object\n      // find props of given object\n      .keys(obj)\n      // return an object by iterating props\n      .reduce(\n        (memo, prop) => ({\n          // create a new object\n\n          // include previously returned object\n          ...memo,\n          ...(Object.prototype.toString.call(obj[prop]) === \"[object Object]\"\n            ? // keep working if value is an object\n              flatten(obj[prop], roots.concat([prop]))\n            : // include current prop and value and prefix prop with the roots\n              { [roots.concat([prop]).join(sep)]: obj[prop] }),\n        }),\n        {},\n      )\n  );\n}\n\n/** Converts an object into a list of binding/value tuples to use with a LocalModel object */\nexport function objectToBatchSet(obj: any): [BindingInstance, any][] {\n  const flattenedObj = flatten(obj);\n  const batchTxn: [BindingInstance, any][] = [];\n\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n\n  return batchTxn;\n}\n","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","export * from \"./assets\";\nexport * from \"./plugin\";\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { InputAsset, TransformedInput } from \"./types\";\n\n/**\n * Docs about the asset transform\n */\nexport const inputTransform: TransformFunction<InputAsset, TransformedInput> = (\n  asset,\n  options,\n) => {\n  return {\n    ...asset,\n    format(val) {\n      if (asset.binding === undefined) {\n        return val;\n      }\n\n      return options.data.format(asset.binding, val);\n    },\n    set(val) {\n      if (asset.binding === undefined) {\n        return;\n      }\n\n      return options.data.model.set([[asset.binding, val]], {\n        formatted: true,\n      });\n    },\n    value:\n      asset.binding === undefined\n        ? \"\"\n        : options.data.model.get(asset.binding, {\n            includeInvalid: true,\n            formatted: true,\n          }),\n    validation:\n      asset.binding === undefined\n        ? undefined\n        : options.validation?.get(asset.binding, { track: true }),\n    dataType:\n      asset.binding === undefined\n        ? undefined\n        : options.validation?.type(asset.binding),\n  };\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { AssetWrapper } from \"@player-ui/player\";\nimport type { InfoAsset, InfoAssetTransform } from \"./types\";\nimport type { ActionAsset } from \"../action/types\";\nimport { isBackAction } from \"../action/transform\";\n\n/**\n * This transform should add segmentedActions to the info asset.\n * Segmented actions display side by side in larger viewports. Segmented Actions is an object of next and prev actions\n */\nexport const infoTransform: TransformFunction<InfoAsset, InfoAssetTransform> = (\n  infoAsset,\n) => {\n  const actions = infoAsset?.actions;\n  const segmentedActions = actions?.reduce(\n    (segmentedActionsArray, action) => {\n      segmentedActionsArray[\n        isBackAction(action.asset as ActionAsset) ? \"prev\" : \"next\"\n      ].push(action as AssetWrapper<ActionAsset>);\n      return segmentedActionsArray;\n    },\n    { next: [], prev: [] } as {\n      /**\n       * next is an array of next actions\n       */\n      next: Array<AssetWrapper<ActionAsset>>;\n      /**\n       * prev is an array of prev actions\n       */\n      prev: Array<AssetWrapper<ActionAsset>>;\n    },\n  );\n\n  return {\n    ...infoAsset,\n    segmentedActions,\n  };\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type { ImageAsset, TransformedImage } from \"./types\";\n\n/**\n * Function to retrieve the desired alt text based on passed in props.\n * @param props Image props\n * @returns The alt text for the image asset\n */\nconst getImageAlt = (props: ImageAsset): string => {\n  const { metaData, placeholder } = props;\n  if (metaData.accessibility) return metaData.accessibility;\n\n  if (placeholder) return placeholder;\n\n  return \"Image\";\n};\n\n/**\n * Sets the Image's placeholder and accessibilty\n */\nexport const imageTransform: TransformFunction<ImageAsset, TransformedImage> = (\n  props,\n) => {\n  const altText = getImageAlt(props);\n\n  const newImage = {\n    ...props,\n    altText,\n  };\n\n  return newImage;\n};\n","import type { TransformFunction } from \"@player-ui/player\";\nimport type {\n  ChoiceAsset,\n  TransformedChoice,\n  TransformedChoiceItem,\n} from \"./types\";\n\n/**\n * Docs about the asset transform\n */\nexport const choiceTransform: TransformFunction<\n  ChoiceAsset,\n  TransformedChoice\n> = (asset, options) => {\n  const { items, binding, ...rest } = asset;\n\n  const assetHasBinding = binding !== undefined;\n\n  const currentValue = assetHasBinding\n    ? options.data.model.get(binding, {\n        includeInvalid: true,\n      })\n    : undefined;\n\n  const resetValue = () => {\n    if (assetHasBinding) {\n      return options.data.model.set([[binding, null]]);\n    }\n  };\n\n  const transformedChoiceItems: TransformedChoiceItem[] = (items || []).map(\n    (item, index) => ({\n      ...item,\n      id: item.id ?? `${asset.id}-choice-${index}`,\n      select() {\n        if (assetHasBinding) {\n          return options.data.model.set([[binding, item.value]]);\n        }\n      },\n      unselect: resetValue,\n    }),\n  );\n\n  return {\n    ...rest,\n    binding,\n    clearSelection: resetValue,\n    items: transformedChoiceItems,\n    value: currentValue,\n    validation: assetHasBinding\n      ? options.validation?.get(binding, { track: true })\n      : undefined,\n    dataType: assetHasBinding ? options.validation?.type(binding) : undefined,\n  };\n};\n","import { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport type { ParserResult, AnyNode } from \"../binding-grammar/index\";\nimport {\n  // We can swap this with whichever parser we want to use\n  parseCustom as parseBinding,\n} from \"../binding-grammar\";\nimport type { BindingParserOptions, BindingLike } from \"./binding\";\nimport { BindingInstance } from \"./binding\";\nimport { isBinding } from \"./utils\";\nimport type { NormalizedResult, ResolveBindingASTOptions } from \"./resolver\";\nimport { resolveBindingAST } from \"./resolver\";\n\nexport * from \"./utils\";\nexport * from \"./binding\";\n\nexport const SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nexport const BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nconst LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n\nconst DEFAULT_OPTIONS: BindingParserOptions = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  },\n};\n\ntype BeforeResolveNodeContext = Required<NormalizedResult> &\n  ResolveBindingASTOptions;\n\n/** A parser for creating bindings from a string */\nexport class BindingParser {\n  private cache: Record<string, BindingInstance>;\n  private parseCache: Record<string, ParserResult>;\n  private parserOptions: BindingParserOptions;\n\n  public hooks = {\n    skipOptimization: new SyncBailHook<[string], boolean>(),\n    beforeResolveNode: new SyncWaterfallHook<\n      [AnyNode, BeforeResolveNodeContext]\n    >(),\n  };\n\n  constructor(options?: Partial<BindingParserOptions>) {\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  private normalizePath(\n    path: string,\n    resolveOptions: ResolveBindingASTOptions,\n  ) {\n    /**\n     * Ensure no binding characters exist in path and the characters remaining\n     * look like a binding format.\n     */\n    if (\n      !BINDING_BRACKETS_REGEX.test(path) &&\n      LAZY_BINDING_REGEX.test(path) &&\n      this.hooks.skipOptimization.call(path) !== true\n    ) {\n      return { path: path.split(\".\"), updates: undefined } as NormalizedResult;\n    }\n\n    const ast = this.parseCache[path] ?? parseBinding(path);\n    this.parseCache[path] = ast;\n\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`,\n      );\n    }\n\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e: any) {\n      throw new NestedError(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n\n  private getBindingForNormalizedResult(\n    normalized: NormalizedResult,\n  ): BindingInstance {\n    const normalizedStr = normalized.path.join(\".\");\n\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse,\n    );\n    this.cache[normalizedStr] = created;\n\n    return created;\n  }\n\n  public parse(\n    rawBinding: BindingLike,\n    overrides: Partial<BindingParserOptions> = {},\n  ): BindingInstance {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n\n    const options = {\n      ...this.parserOptions,\n      ...overrides,\n    };\n\n    let updates: Record<string, any> = {};\n\n    const joined = Array.isArray(rawBinding)\n      ? rawBinding.join(\".\")\n      : String(rawBinding);\n\n    const normalizeConfig: ResolveBindingASTOptions = {\n      getValue: (path: Array<string | number>) => {\n        const normalized = this.normalizePath(path.join(\".\"), normalizeConfig);\n\n        return options.get(this.getBindingForNormalizedResult(normalized));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path: any) => {\n        if (path === undefined) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\",\n          );\n        }\n\n        if (\n          typeof path !== \"string\" &&\n          typeof path !== \"number\" &&\n          typeof path !== \"boolean\"\n        ) {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`,\n          );\n        }\n\n        const normalized = this.normalizePath(String(path), normalizeConfig);\n\n        if (normalized.updates) {\n          updates = {\n            ...updates,\n            ...normalized.updates,\n          };\n        }\n\n        const joinedNormalizedPath = normalized.path.join(\".\");\n\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n\n        return joinedNormalizedPath;\n      },\n    };\n\n    const normalized = this.normalizePath(joined, normalizeConfig);\n\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates,\n      };\n    }\n\n    const updateKeys = Object.keys(updates);\n\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map<[BindingInstance, any]>(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding],\n        ],\n      );\n\n      options.set(updateTransaction);\n    }\n\n    return this.getBindingForNormalizedResult(normalized);\n  }\n}\n","import { NestedError } from \"ts-nested-error\";\nimport type { SyncWaterfallHook } from \"tapable-ts\";\nimport type { PathNode, AnyNode } from \"../binding-grammar\";\nimport { findInArray, maybeConvertToNum } from \"./utils\";\n\nexport interface NormalizedResult {\n  /** The normalized path */\n  path: Array<string | number>;\n\n  /** Any new updates that need to happen for this binding to be resolved */\n  updates?: Record<string, any>;\n}\n\nexport interface ResolveBindingASTOptions {\n  /** Get the value of the model at the given path */\n  getValue: (path: Array<string | number>) => any;\n\n  /** Convert the value into valid path segments */\n  convertToPath: (value: any) => string;\n\n  /** Convert the value into valid path segments */\n  evaluate: (exp: string) => any;\n}\n\nexport interface ResolveBindingASTHooks {\n  /** A hook for transforming a node before fully resolving it */\n  beforeResolveNode: SyncWaterfallHook<\n    [AnyNode, Required<NormalizedResult> & ResolveBindingASTOptions]\n  >;\n}\n\n/** Given a binding AST, resolve it */\nexport function resolveBindingAST(\n  bindingPathNode: PathNode,\n  options: ResolveBindingASTOptions,\n  hooks?: ResolveBindingASTHooks,\n): NormalizedResult {\n  const context: Required<NormalizedResult> = {\n    updates: {},\n    path: [],\n  };\n\n  // let updates: Record<string, any> = {};\n  // const path: Array<string | number> = [];\n\n  /** Get the value for any child node */\n  function getValueForNode(node: AnyNode): any {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates,\n        };\n      }\n\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path),\n        );\n      } catch (e: any) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e,\n        );\n      }\n    }\n\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n\n        return options.convertToPath(actualValue);\n      } catch (e: any) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n\n  /** Handle when path segments are binding paths (foo.bar) or single segments (foo) */\n  function appendPathSegments(segment: string | number) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n\n  /** Compute the _actual_ binding val from the AST */\n  function resolveNode(_node: AnyNode) {\n    const resolvedNode =\n      hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n\n      case \"Query\": {\n        // Look for an object at the path with the given key/val criteria\n        const objToQuery: Record<string, any>[] =\n          options.getValue(context.path) ?? [];\n\n        const { key, value } = resolvedNode;\n\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n\n        if (index === undefined || index === -1) {\n          context.updates[\n            [...context.path, objToQuery.length, resolvedKey].join(\".\")\n          ] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n\n        break;\n      }\n\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n\n      default:\n        throw new Error(`Unsupported node type: ${(resolvedNode as any).name}`);\n    }\n  }\n\n  bindingPathNode.path.forEach(resolveNode);\n\n  return {\n    path: context.path,\n    updates:\n      Object.keys(context.updates ?? {}).length > 0\n        ? context.updates\n        : undefined,\n  };\n}\n","import get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type { BatchSetTransaction, DataModelImpl, Updates } from \"./model\";\n\n/**\n * A data model that stores data in an in-memory JS object\n */\nexport class LocalModel implements DataModelImpl {\n  public model: {\n    [key: string]: any;\n  };\n\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public reset(model = {}) {\n    this.model = model;\n  }\n\n  public get(binding?: BindingInstance) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n\n    return get(this.model, binding.asArray() as string[]);\n  }\n\n  public set(transaction: BatchSetTransaction) {\n    const effectiveOperations: Updates = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value) as any;\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n\n  public delete(binding: BindingInstance) {\n    const parentBinding = binding.parent();\n\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n\n      if (parentValue !== undefined) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key() as number),\n          ) as any;\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key() as string),\n          ) as any;\n        }\n      }\n    }\n  }\n}\n","import { setIn } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelOptions,\n  DataModelMiddleware,\n  Updates,\n} from \"../data\";\nimport { toModel } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nimport type { ValidationResponse } from \"./types\";\nimport { removeBindingAndChildrenFromMap } from \"./binding-map-splice\";\n\n/**\n * A BindingInstance with an indicator of whether or not it's a strong binding\n */\nexport type StrongOrWeakBinding = {\n  /** BindingInstance in question */\n  binding: BindingInstance;\n  /** Boolean indicating whether the relevant BindingInstance is a strong binding */\n  isStrong: boolean;\n};\n\n/**\n * Returns a validation object if the data is invalid or an set of BindingsInstances if the binding itself is a weak ref of another invalid validation\n */\nexport type MiddlewareChecker = (\n  binding: BindingInstance,\n  model: DataModelImpl,\n) => ValidationResponse | Set<StrongOrWeakBinding> | undefined;\n\n/**\n * Middleware for the data-model that caches the results of invalid data\n */\nexport class ValidationMiddleware implements DataModelMiddleware {\n  public validator: MiddlewareChecker;\n  public shadowModelPaths: Map<BindingInstance, any>;\n  private logger?: Logger;\n  private shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n\n  constructor(\n    validator: MiddlewareChecker,\n    options?: {\n      /** A logger instance */\n      logger?: Logger;\n      /** Optional function to include data staged in shadowModel */\n      shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n    },\n  ) {\n    this.validator = validator;\n    this.shadowModelPaths = new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction: BatchSetTransaction = [];\n\n    const includedBindings = new Set<BindingInstance>();\n\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n\n    const invalidBindings: Array<BindingInstance> = [];\n\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n\n      if (validations === undefined) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (\n            !validation.isStrong &&\n            validation.binding.asString() === binding.asString()\n          ) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${\n            validations.severity\n          } - ${validations.message}`,\n        );\n      }\n    });\n\n    let validResults: Updates = [];\n\n    if (next && nextTransaction.length > 0) {\n      // defer clearing the shadow model to prevent validations that are run twice due to weak binding refs still needing the data\n      nextTransaction.forEach(([binding]) =>\n        this.shadowModelPaths.delete(binding),\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n\n      validResults = result;\n    }\n\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true,\n      };\n    });\n\n    return [...validResults, ...invalidResults];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    let val = next?.get(binding, options);\n\n    if (\n      this.shouldIncludeInvalid?.(options) ??\n      options?.includeInvalid === true\n    ) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n\n          return;\n        }\n\n        if (binding.contains(shadowBinding)) {\n          val = setIn(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n\n    return val;\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding,\n    );\n\n    return next?.delete(binding, options);\n  }\n}\n","import { setIn } from \"timm\";\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { AnyAssetType, Node } from \"./types\";\nimport { NodeType } from \"./types\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\nexport const EMPTY_NODE: Node.Empty = {\n  type: NodeType.Empty,\n};\n\nexport interface ParseObjectOptions {\n  /** how nested the templated is */\n  templateDepth?: number;\n}\n\nexport interface ParseObjectChildOptions {\n  key: string;\n  path: Node.PathSegment[];\n  parentObj: object;\n}\n\ninterface NestedObj {\n  /** The values of a nested local object */\n  children: Node.Child[];\n\n  value: any;\n}\n/**\n * The Parser is the way to take an incoming view from the user and parse it into an AST.\n * It provides a few ways to interact with the parsing, including mutating an object before and after creation of an AST node\n */\nexport class Parser {\n  public readonly hooks = {\n    /**\n     * A hook to interact with an object _before_ parsing it into an AST\n     *\n     * @param value - The object we're are about to parse\n     * @returns - A new value to parse.\n     *  If undefined, the original value is used.\n     *  If null, we stop parsing this node.\n     */\n    onParseObject: new SyncWaterfallHook<[object, NodeType]>(),\n\n    /**\n     * A callback to interact with an AST _after_ we parse it into the AST\n     *\n     * @param value - The object we parsed\n     * @param node - The AST node we generated\n     * @returns - A new AST node to use\n     *   If undefined, the original value is used.\n     *   If null, we ignore this node all together\n     */\n    onCreateASTNode: new SyncWaterfallHook<\n      [Node.Node | undefined | null, object]\n    >(),\n\n    parseNode: new SyncBailHook<\n      [\n        obj: object,\n        nodeType: Node.ChildrenTypes,\n        parseOptions: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ],\n      Node.Node | Node.Child[]\n    >(),\n  };\n\n  public parseView(value: AnyAssetType): Node.View {\n    const viewNode = this.parseObject(value, NodeType.View);\n\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n\n    return viewNode as Node.View;\n  }\n\n  public createASTNode(node: Node.Node | null, value: any): Node.Node | null {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n\n    if (tapped === undefined) {\n      return node;\n    }\n\n    return tapped;\n  }\n\n  public parseObject(\n    obj: object,\n    type: Node.ChildrenTypes = NodeType.Value,\n    options: ParseObjectOptions = { templateDepth: 0 },\n  ): Node.Node | null {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options,\n    ) as Node.Node | null;\n\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n\n    const parseLocalObject = (\n      currentValue: any,\n      objToParse: unknown,\n      path: string[] = [],\n    ): NestedObj => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n\n      if (!localObj) {\n        return currentValue;\n      }\n\n      const objEntries = Array.isArray(localObj)\n        ? localObj.map((v, i) => [i, v])\n        : [\n            ...Object.entries(localObj),\n            ...Object.getOwnPropertySymbols(localObj).map((s) => [\n              s,\n              (localObj as any)[s],\n            ]),\n          ];\n\n      const defaultValue: NestedObj = {\n        children: [],\n        value: currentValue,\n      };\n\n      const newValue = objEntries.reduce((accumulation, current): NestedObj => {\n        let { value } = accumulation;\n        const { children } = accumulation;\n        const [localKey, localValue] = current;\n\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          NodeType.Value,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj,\n          },\n        ) as Node.Child[];\n\n        if (newChildren) {\n          children.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey,\n          ]);\n\n          value = result.value;\n          children.push(...result.children);\n        } else {\n          value = setIn(accumulation.value, [...path, localKey], localValue);\n        }\n\n        return {\n          value,\n          children,\n        };\n      }, defaultValue);\n\n      return newValue;\n    };\n\n    const { value, children } = parseLocalObject(undefined, obj);\n\n    const baseAst =\n      value === undefined && !children.length\n        ? undefined\n        : {\n            type,\n            value,\n          };\n\n    if (baseAst && children.length) {\n      const parent: Node.BaseWithChildren<any> = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n}\n","import { omit } from \"timm\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** A view plugin to remove inapplicable assets from the tree */\nexport default class ApplicabilityPlugin implements ViewPlugin {\n  private isApplicability(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node: Node.Node | null, options: Options) => {\n        let newNode = node;\n\n        if (node?.type === NodeType.Applicability) {\n          const isApplicable = options.evaluate(node.expression);\n\n          if (isApplicable === false) {\n            return null;\n          }\n\n          newNode = node.value;\n        }\n\n        return newNode;\n      },\n    );\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit(obj, \"applicability\"),\n            nodeType,\n            options,\n          );\n\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: NodeType.Applicability,\n              expression: (obj as any).applicability,\n              value: parsedApplicability,\n            },\n            obj,\n          );\n\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n\n          if (applicabilityNode.type === NodeType.Applicability) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n\n          return childOptions\n            ? [\n                {\n                  path: [...childOptions.path, childOptions.key],\n                  value: applicabilityNode,\n                },\n              ]\n            : applicabilityNode;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n}\n","import { setIn } from \"timm\";\nimport deferred from \"p-defer\";\nimport type { Flow as FlowType, FlowResult } from \"@player-ui/types\";\n\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { Logger } from \"./logger\";\nimport { TapableLogger } from \"./logger\";\nimport type { ExpressionType } from \"./expressions\";\nimport { ExpressionEvaluator } from \"./expressions\";\nimport { SchemaController } from \"./schema\";\nimport { BindingParser } from \"./binding\";\nimport type { ViewInstance } from \"./view\";\nimport { resolveDataRefs } from \"./string-resolver\";\nimport type { FlowInstance } from \"./controllers\";\nimport {\n  ConstantsController,\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport { FlowExpPlugin } from \"./plugins/flow-exp-plugin\";\nimport { DefaultExpPlugin } from \"./plugins/default-exp-plugin\";\nimport type {\n  PlayerFlowState,\n  InProgressState,\n  CompletedState,\n  ErrorState,\n} from \"./types\";\nimport { NOT_STARTED_STATE } from \"./types\";\nimport { DefaultViewPlugin } from \"./plugins/default-view-plugin\";\n\n// Variables injected at build time\nconst PLAYER_VERSION = \"__VERSION__\";\nconst COMMIT = \"__GIT_COMMIT__\";\n\nexport interface PlayerPlugin {\n  /**\n   * Unique identifier of the plugin.\n   * Enables the plugin to be retrievable from Player.\n   */\n  symbol?: symbol;\n\n  /** The name of the plugin */\n  name: string;\n\n  /**\n   * Use this to tap into Player hooks\n   */\n  apply: (player: Player) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ExtendedPlayerPlugin<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Assets = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Views = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Expressions = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTypes = void,\n> {}\n\nexport interface PlayerConfigOptions {\n  /** A set of plugins to load  */\n  plugins?: PlayerPlugin[];\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport interface PlayerInfo {\n  /** Version of the running player */\n  version: string;\n\n  /** Hash of the HEAD commit used to build the current version */\n  commit: string;\n}\n\n/**\n * This is it.\n */\nexport class Player {\n  public static readonly info: PlayerInfo = {\n    version: PLAYER_VERSION,\n    commit: COMMIT,\n  };\n\n  public readonly logger = new TapableLogger();\n  public readonly constantsController = new ConstantsController();\n  private config: PlayerConfigOptions;\n  private state: PlayerFlowState = NOT_STARTED_STATE;\n\n  public readonly hooks = {\n    /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n    flowController: new SyncHook<[FlowController]>(),\n\n    /** The hook that updates/handles views */\n    viewController: new SyncHook<[ViewController]>(),\n\n    /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n    view: new SyncHook<[ViewInstance]>(),\n\n    /** Called when an expression evaluator was created */\n    expressionEvaluator: new SyncHook<[ExpressionEvaluator]>(),\n\n    /** The hook that creates and manages data */\n    dataController: new SyncHook<[DataController]>(),\n\n    /** Called after the schema is created for a flow */\n    schema: new SyncHook<[SchemaController]>(),\n\n    /** Manages validations (schema and x-field ) */\n    validationController: new SyncHook<[ValidationController]>(),\n\n    /** Manages parsing binding */\n    bindingParser: new SyncHook<[BindingParser]>(),\n\n    /** A that's called for state changes in the flow execution */\n    state: new SyncHook<[PlayerFlowState]>(),\n\n    /** A hook to access the current flow */\n    onStart: new SyncHook<[FlowType]>(),\n\n    /** A hook for when the flow ends either in success or failure */\n    onEnd: new SyncHook<[]>(),\n    /** Mutate the Content flow before starting */\n    resolveFlowContent: new SyncWaterfallHook<[FlowType]>(),\n  };\n\n  constructor(config?: PlayerConfigOptions) {\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      new DefaultViewPlugin(),\n      ...(this.config.plugins || []),\n      new FlowExpPlugin(),\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n\n  /**  Returns currently registered plugins */\n  public getPlugins(): PlayerPlugin[] {\n    return this.config.plugins ?? [];\n  }\n\n  /** Find instance of [Plugin] that has been registered to Player */\n  public findPlugin<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n  ): Plugin | undefined {\n    return this.config.plugins?.find((el) => el.symbol === symbol) as Plugin;\n  }\n\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  public applyTo<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n    apply: (plugin: Plugin) => void,\n  ): void {\n    const plugin = this.findPlugin<Plugin>(symbol);\n\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  public registerPlugin(plugin: PlayerPlugin) {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n\n  /** Returns the current version of the running player */\n  public getVersion(): string {\n    return Player.info.version;\n  }\n\n  /** Returns the git commit used to build Player version */\n  public getCommit(): string {\n    return Player.info.commit;\n  }\n\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  public getState(): PlayerFlowState {\n    return this.state;\n  }\n\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  private setState(state: PlayerFlowState) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n\n  /** Start Player with the given flow */\n  private setupFlow(userContent: FlowType): {\n    /** a callback to _actually_ start the flow */\n    start: () => void;\n\n    /** the state object to kick if off */\n    state: Omit<InProgressState, \"ref\">;\n  } {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger,\n    });\n\n    this.hooks.onStart.call(userFlow);\n\n    this.hooks.flowController.call(flowController);\n\n    // eslint-disable-next-line prefer-const\n    let expressionEvaluator: ExpressionEvaluator;\n    // eslint-disable-next-line prefer-const\n    let dataController: DataController;\n\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      },\n    });\n\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred<FlowResult>();\n\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n\n    const validationController = new ValidationController(schema);\n\n    this.hooks.validationController.call(validationController);\n\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger,\n    });\n\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.format(value) : value;\n    });\n\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.deformat(value) : value;\n    });\n\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default,\n    );\n\n    // eslint-disable-next-line prefer-const\n    let viewController: ViewController;\n\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger,\n    });\n\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n\n      return true;\n    });\n\n    /** Resolve any data references in a string */\n    function resolveStrings<T>(val: T, formatted?: boolean) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted,\n      });\n    }\n\n    flowController.hooks.flow.tap(\"player\", (flow: FlowInstance) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        /** Checks to see if there are any transitions for a specific transition state (i.e. next, back). If not, it will default to * */\n        const computedTransitionVal = state.transitions[transitionVal]\n          ? transitionVal\n          : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd as ExpressionType);\n          }\n        }\n\n        /** If the transition does not exist, then do not resolve any expressions */\n        if (\n          !(\"transitions\" in state) ||\n          !state.transitions[computedTransitionVal]\n        ) {\n          return state;\n        }\n\n        /** resolves and sets the transition to the computed exp */\n        return setIn(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal]),\n        ) as any;\n      });\n\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } =\n            validationController.validateView(\"navigation\");\n\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n\n            return true;\n          }\n        }\n\n        return undefined;\n      });\n\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n\n        if (\"ref\" in state) {\n          newState = setIn(state, [\"ref\"], resolveStrings(state.ref)) as any;\n        }\n\n        if (\"param\" in state) {\n          newState = setIn(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false),\n          ) as any;\n        }\n\n        return newState;\n      });\n\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n\n      flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          try {\n            const result = await expressionEvaluator.evaluateAsync(exp);\n            flowController?.transition(String(result));\n          } catch (e) {\n            flowResultDeferred.reject(e);\n          }\n        }\n\n        expressionEvaluator.reset();\n      });\n    });\n\n    this.hooks.dataController.call(dataController);\n\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController,\n    });\n\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: <Plugin = unknown>(pluginSymbol: symbol) => {\n          return this.findPlugin(pluginSymbol) as unknown as Plugin;\n        },\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b)),\n      },\n      constants: this.constantsController,\n    });\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n\n    return {\n      start: () => {\n        flowController\n          .start()\n          .then((endState) => {\n            const flowResult: FlowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize(),\n            };\n\n            return flowResult;\n          })\n          .then(flowResultDeferred.resolve)\n          .catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          })\n          .catch(flowResultDeferred.reject)\n          .finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController,\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger,\n      },\n    };\n  }\n\n  public async start(payload: FlowType): Promise<CompletedState> {\n    const ref = Symbol(payload?.id ?? \"payload\");\n\n    /** A check to avoid updating the state for a flow that's not the current one */\n    const maybeUpdateState = <T extends PlayerFlowState>(newState: T) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`,\n        );\n\n        return newState;\n      }\n\n      this.setState(newState);\n\n      return newState;\n    };\n\n    this.setState({\n      status: \"not-started\",\n      ref,\n    });\n\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state,\n      });\n\n      start();\n\n      // common data for the end state\n      // make sure to use the same ref as the starting one\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly(),\n        },\n      } as const;\n\n      return maybeUpdateState({\n        ...(await state.flowResult),\n        ...endProps,\n      });\n    } catch (error: any) {\n      const errorState: ErrorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error,\n      };\n\n      maybeUpdateState(errorState);\n\n      throw error;\n    }\n  }\n}\n","import { SyncBailHook, SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { DeferredPromise } from \"p-defer\";\nimport defer from \"p-defer\";\nimport type {\n  NavigationFlow,\n  NavigationFlowState,\n  NavigationFlowEndState,\n} from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\n\nexport interface NamedState {\n  /** The name of the navigation node */\n  name: string;\n\n  /** The nav node */\n  value: NavigationFlowState;\n}\n\nexport interface TransitionOptions {\n  /** Ignore any validations or other signals preventing the transition from taking place  */\n  force?: boolean;\n}\nexport type TransitionFunction = (\n  name: string,\n  options?: TransitionOptions,\n) => void;\n\n/** The Content navigation state machine */\nexport class FlowInstance {\n  private flow: NavigationFlow;\n  private log?: Logger;\n  private history: string[];\n  private isTransitioning = false;\n  private flowPromise?: DeferredPromise<NavigationFlowEndState>;\n  public readonly id: string;\n  public currentState?: NamedState;\n  public readonly hooks = {\n    beforeStart: new SyncBailHook<[NavigationFlow], NavigationFlow>(),\n\n    /** A callback when the onStart node was present */\n    onStart: new SyncHook<[any]>(),\n\n    /** A callback when the onEnd node was present */\n    onEnd: new SyncHook<[any]>(),\n\n    /** A hook to intercept and block a transition */\n    skipTransition: new SyncBailHook<\n      [NamedState | undefined],\n      boolean | undefined\n    >(),\n\n    /** A chance to manipulate the flow-node used to calculate the given transition used  */\n    beforeTransition: new SyncWaterfallHook<\n      [Exclude<NavigationFlowState, NavigationFlowEndState>, string]\n    >(),\n\n    /** A chance to manipulate the flow-node calculated after a transition */\n    resolveTransitionNode: new SyncWaterfallHook<[NavigationFlowState]>(),\n\n    /** A callback when a transition from 1 state to another was made */\n    transition: new SyncHook<[NamedState | undefined, NamedState]>(),\n\n    /** A callback to run actions after a transition occurs */\n    afterTransition: new SyncHook<[FlowInstance]>(),\n  };\n\n  constructor(\n    id: string,\n    flow: NavigationFlow,\n    options?: {\n      /** Logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState: NamedState) => {\n        const newState = nextState.value;\n\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      },\n    );\n  }\n\n  /** Start the state machine */\n  public async start(): Promise<NavigationFlowEndState> {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n\n      return this.flowPromise.promise;\n    }\n\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n\n    const initialState = this.flow.startState;\n\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n\n    return this.flowPromise.promise;\n  }\n\n  public transition(transitionValue: string, options?: TransitionOptions) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`,\n      );\n    }\n\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`,\n      );\n\n      return;\n    }\n\n    if (this.currentState === undefined) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`,\n        );\n        return;\n      }\n    }\n\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue,\n    );\n\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n\n    if (nextState === undefined) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`,\n      );\n\n      return;\n    }\n\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `,\n    );\n\n    return this.pushHistory(nextState, options);\n  }\n\n  private pushHistory(stateName: string, options?: TransitionOptions) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n\n    let nextState = this.flow[stateName];\n\n    if (\n      !this.flow[stateName] ||\n      typeof nextState !== \"object\" ||\n      !(\"state_type\" in nextState)\n    ) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n\n      return;\n    }\n\n    const prevState = this.currentState;\n\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n\n    const newCurrentState = {\n      name: stateName,\n      value: nextState,\n    } as NamedState;\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n\n    // If the new state is an END state call the `onEnd` if it exists\n\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState,\n    });\n\n    this.isTransitioning = false;\n\n    this.hooks.afterTransition.call(this);\n  }\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport type { View, NavigationFlowViewState } from \"@player-ui/types\";\n\nimport { resolveDataRefsInString } from \"../../string-resolver\";\nimport type { Resolve } from \"../../view\";\nimport { ViewInstance } from \"../../view\";\nimport type { Logger } from \"../../logger\";\nimport type { FlowInstance, FlowController } from \"../flow\";\nimport type { DataController } from \"../data/controller\";\nimport { AssetTransformCorePlugin } from \"./asset-transform\";\nimport type { TransformRegistry } from \"./types\";\nimport type { BindingInstance } from \"../../binding\";\n\nexport interface ViewControllerOptions {\n  /** Where to get data from */\n  model: DataController;\n\n  /** Where to log data */\n  logger?: Logger;\n\n  /** A flow-controller instance to listen for view changes */\n  flowController: FlowController;\n}\n\n/** A controller to manage updating/switching views */\nexport class ViewController {\n  public readonly hooks = {\n    /** Do any processing before the `View` instance is created */\n    resolveView: new SyncWaterfallHook<\n      [View | undefined, string, NavigationFlowViewState]\n    >(),\n\n    // The hook right before the View starts resolving. Attach anything custom here\n    view: new SyncHook<[ViewInstance]>(),\n  };\n\n  private readonly viewMap: Record<string, View>;\n  private readonly viewOptions: Resolve.ResolverOptions & ViewControllerOptions;\n  private pendingUpdate?: {\n    /** pending data binding changes */\n    changedBindings?: Set<BindingInstance>;\n    /** Whether we have a microtask queued to handle this pending update */\n    scheduled?: boolean;\n  };\n\n  public currentView?: ViewInstance;\n  public transformRegistry: TransformRegistry = new Registry();\n  public optimizeUpdates = true;\n\n  constructor(\n    initialViews: View[],\n    options: Resolve.ResolverOptions & ViewControllerOptions,\n  ) {\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce<Record<string, View>>(\n      (viewMap, view) => {\n        // eslint-disable-next-line no-param-reassign\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {},\n    );\n\n    new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow: FlowInstance) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = undefined;\n          }\n        });\n      },\n    );\n\n    /** Trigger a view update */\n    const update = (updates: Set<BindingInstance>, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t) => t.binding)),\n          updateOptions?.silent ?? false,\n        );\n      },\n    );\n\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n\n      // Deleting an array item will trigger an update for the entire array\n      if (typeof property === \"number\" && parentBinding) {\n        update(new Set([parentBinding]));\n      } else {\n        update(new Set([binding]));\n      }\n    });\n  }\n\n  private queueUpdate(bindings: Set<BindingInstance>, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      // If there's already a pending update, just add to it don't worry about silent updates here yet\n      this.pendingUpdate.changedBindings = new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings,\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n\n    // If there's no pending update, schedule one only if this one isn't silent\n    // otherwise if this is silent, we'll just wait for the next non-silent update and make sure our bindings are included\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = undefined;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n\n  private getViewForRef(viewRef: string): View | undefined {\n    // First look for a 1:1 viewRef -> id mapping (this is most common)\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n\n    // The view ids saved may also contain model refs, resolve those and try again\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) =>\n        viewRef ===\n        resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate,\n        }),\n    );\n\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n\n  public onView(state: NavigationFlowViewState) {\n    const viewId = state.ref;\n\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state,\n    );\n\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n\n    // Give people a chance to attach their\n    // own listeners to the view before we resolve it\n    this.hooks.view.call(view);\n    view.update();\n  }\n}\n","export interface Node<T extends string> {\n  /** The basic node type */\n  name: T;\n}\n\n/**\n * An AST node that represents a nested path in the model\n * foo.{{bar}}.baz (this is {{bar}})\n */\nexport interface PathNode extends Node<\"PathNode\"> {\n  /** The path in the model that this node represents */\n  path: Array<AnyNode>;\n}\n\n/**\n * A segment representing a query\n * [foo=bar]\n */\nexport interface QueryNode extends Node<\"Query\"> {\n  /** The key to query */\n  key: AnyNode;\n\n  /** The target value */\n  value?: AnyNode;\n}\n\n/** A simple segment */\nexport interface ValueNode extends Node<\"Value\"> {\n  /** The segment value */\n  value: string | number;\n}\n\n/** A nested expression */\nexport interface ExpressionNode extends Node<\"Expression\"> {\n  /** The expression */\n  value: string;\n}\n\n/** Helper to create a value node */\nexport const toValue = (value: string | number): ValueNode => ({\n  name: \"Value\",\n  value,\n});\n\n/** Helper to create an expression node */\nexport const toExpression = (value: string): ExpressionNode => ({\n  name: \"Expression\",\n  value,\n});\n\n/** Helper to create a nested path node */\nexport const toPath = (path: Array<AnyNode>): PathNode => ({\n  name: \"PathNode\",\n  path,\n});\n\n/** Helper to create a query node */\nexport const toQuery = (key: AnyNode, value?: AnyNode): QueryNode => ({\n  name: \"Query\",\n  key,\n  value,\n});\n\n/** Create a concat node */\nexport const toConcatenatedNode = (\n  values: Array<PathNode | ValueNode | ExpressionNode>,\n): PathNode | ValueNode | ConcatenatedNode | ExpressionNode => {\n  if (values.length === 1) {\n    return values[0];\n  }\n\n  return {\n    name: \"Concatenated\",\n    value: values,\n  };\n};\n\n/**\n * A binding segment that's multiple smaller ones\n * {{foo}}_bar_{{baz}}\n */\nexport interface ConcatenatedNode extends Node<\"Concatenated\"> {\n  /** A list of nested paths, or value nodes to concat together to form a segment */\n  value: Array<PathNode | ValueNode | ExpressionNode>;\n}\n\nexport type AnyNode =\n  | PathNode\n  | QueryNode\n  | ValueNode\n  | ConcatenatedNode\n  | ExpressionNode;\nexport type Path = Array<AnyNode>;\n\nexport interface ParserSuccessResult {\n  /** A successful parse result */\n  status: true;\n\n  /** The path the binding represents */\n  path: PathNode;\n}\n\nexport interface ParserFailureResult {\n  /** A failed parse result */\n  status: false;\n\n  /** The message representing the reason the parse result failed */\n  error: string;\n}\n\nexport type ParserResult = ParserSuccessResult | ParserFailureResult;\n\nexport type Parser = (raw: string) => ParserResult;\n","import type {\n  Parser,\n  AnyNode,\n  PathNode,\n  ConcatenatedNode,\n  ValueNode,\n  QueryNode,\n  ExpressionNode,\n} from \"../ast\";\nimport {\n  toValue,\n  toPath,\n  toConcatenatedNode,\n  toQuery,\n  toExpression,\n} from \"../ast\";\n\nconst SEGMENT_SEPARATOR = \".\";\nconst OPEN_CURL = \"{\";\nconst CLOSE_CURL = \"}\";\nconst OPEN_BRACKET = \"[\";\nconst CLOSE_BRACKET = \"]\";\nconst EQUALS = \"=\";\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nconst BACK_TICK = \"`\";\n// const IDENTIFIER_REGEX = /[\\w\\-@]+/;\n\n/** A _faster_ way to match chars instead of a regex. */\nconst isIdentifierChar = (char?: string): boolean => {\n  if (!char) {\n    return false;\n  }\n\n  const charCode = char.charCodeAt(0);\n\n  const matches =\n    charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125; // }\n\n  return !matches;\n};\n\n/** Parse out a binding AST from a path */\nexport const parse: Parser = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n\n  /** get the next char in the string */\n  const next = (expected?: string) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n\n  /** gobble all whitespace */\n  const whitespace = () => {\n    /* eslint-disable no-unmodified-loop-condition */\n    while (ch === \" \") {\n      next();\n    }\n  };\n\n  /** get an identifier if you can */\n  const identifier = (): ValueNode | undefined => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n\n    let value: string | number = ch;\n\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n\n  /** get an expression node if you can */\n  const expression = (): ExpressionNode | undefined => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n\n      let exp = ch;\n\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n\n        exp += ch;\n      }\n\n      next(BACK_TICK);\n\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n\n  /** Grab a value using a regex */\n  const regex = (match: RegExp): ValueNode | undefined => {\n    if (!ch?.match(match)) {\n      return;\n    }\n\n    let value = ch;\n\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      return toValue(value);\n    }\n  };\n\n  /** parse out a nestedPath if you can */\n  const nestedPath = (): PathNode | undefined => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n\n      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n\n  /** get a simple segment node */\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n\n  /** Parse a segment */\n  const segment = ():\n    | ConcatenatedNode\n    | PathNode\n    | ValueNode\n    | ExpressionNode\n    | undefined => {\n    // Either a string, modelRef, or concatenated version (both)\n    const segments: Array<ValueNode | PathNode | ExpressionNode> = [];\n    let nextSegment = simpleSegment();\n\n    while (nextSegment !== undefined) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n\n    if (segments.length === 0) {\n      return undefined;\n    }\n\n    return toConcatenatedNode(segments);\n  };\n\n  /** get an optionally quoted block */\n  const optionallyQuotedSegment = ():\n    | ValueNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    whitespace();\n\n    // see if we have a quote\n\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n\n    return simpleSegment();\n  };\n\n  /** eat equals signs */\n  const equals = (): boolean => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n\n    while (ch === EQUALS) {\n      next();\n    }\n\n    return true;\n  };\n\n  /** Parse out a bracket */\n  const parseBracket = ():\n    | ValueNode\n    | QueryNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value: ValueNode | QueryNode | PathNode | ExpressionNode | undefined =\n        optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n\n      return value;\n    }\n  };\n\n  /** Parse a segment and any number of brackets following it */\n  const parseSegmentAndBrackets = (): Array<AnyNode> => {\n    // try to parse a segment first\n\n    const parsed: Array<AnyNode> = [];\n\n    const firstSegment = segment();\n\n    if (firstSegment) {\n      parsed.push(firstSegment);\n\n      let bracketSegment = parseBracket();\n\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value =\n          isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value\n            ? bracketSegment.value\n            : maybeNumber;\n      }\n\n      while (bracketSegment !== undefined) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n\n    return parsed;\n  };\n\n  /** Parse out a path segment */\n  const parsePath = (): PathNode => {\n    const parts: AnyNode[] = [];\n\n    let nextSegment = parseSegmentAndBrackets();\n\n    while (nextSegment !== undefined) {\n      parts.push(...nextSegment);\n\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n\n    return toPath(parts);\n  };\n\n  try {\n    const result = parsePath();\n\n    return {\n      status: true,\n      path: result,\n    };\n  } catch (e: any) {\n    return {\n      status: false,\n      error: e.message,\n    };\n  }\n};\n","import { getBindingSegments } from \"./utils\";\n\nexport interface BindingParserOptions {\n  /** Get the value for a specific binding */\n  get: (binding: BindingInstance) => any;\n\n  /**\n   * Set the values for bindings.\n   * This is used when the query syntax needs to modify an object\n   */\n  set: (transaction: Array<[BindingInstance, any]>) => void;\n\n  /**\n   * Get the result of evaluating an expression\n   */\n  evaluate: (exp: string) => any;\n\n  /**\n   * Without readOnly, if a binding such as this is used: arr[key='does not exist'],\n   * then an object with that key will be created.\n   * This is done to make assignment such as arr[key='abc'].val = 'foo' work smoothly.\n   * Setting readOnly to true will prevent this behavior, avoiding unintended data changes.\n   */\n  readOnly?: boolean;\n}\n\nexport type Getter = (path: BindingInstance) => any;\n\nexport type RawBindingSegment = number | string;\nexport type RawBinding = string | RawBindingSegment[];\nexport type BindingLike = RawBinding | BindingInstance;\nexport type BindingFactory = (\n  raw: RawBinding,\n  options?: Partial<BindingParserOptions>,\n) => BindingInstance;\n\n/**\n * A path in the data model\n */\nexport class BindingInstance {\n  private split: RawBindingSegment[];\n  private joined: string;\n  private factory: BindingFactory;\n\n  constructor(\n    raw: RawBinding,\n    factory = (rawBinding: RawBinding) => new BindingInstance(rawBinding),\n  ) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n\n      const tryNum = Number(segment);\n      // test to make sure turning a numerical string to a number doesn't change\n      // the actual value of the string by getting rid of a leading zero\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n\n  asArray(): RawBindingSegment[] {\n    return this.split;\n  }\n\n  asString(): string {\n    return this.joined;\n  }\n\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding: BindingInstance): boolean {\n    // need to account for partial key matches\n    // [foo, bar] !== [foo, ba]\n    const bindingAsArray = binding.asArray();\n\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n\n    // Check every overlapping index to make sure they're the same\n    // Intentionally use a for loop for speeeed\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  relative(binding: BindingInstance): RawBindingSegment[] {\n    return this.asArray().slice(binding.asArray().length);\n  }\n\n  parent(): BindingInstance {\n    return this.factory(this.split.slice(0, -1));\n  }\n\n  key(): RawBindingSegment {\n    return this.split[this.split.length - 1];\n  }\n\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative: BindingLike): BindingInstance {\n    const descendentSegments = getBindingSegments(relative);\n\n    return this.factory(this.split.concat(descendentSegments));\n  }\n}\n","import type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelMiddleware,\n  DataModelOptions,\n  Updates,\n} from \"./model\";\n\nexport type DependencySets = \"core\" | \"children\";\n\n/** A class to track usage of read/writes to/from a data model */\nexport class DependencyTracker {\n  protected readDeps: Set<BindingInstance>;\n  protected writeDeps: Set<BindingInstance>;\n  protected namedSet: DependencySets;\n\n  private namedDependencySets: Partial<\n    Record<\n      DependencySets,\n      {\n        /** readDeps */\n        readDeps: Set<BindingInstance>;\n        /** writeDeps */\n        writeDeps: Set<BindingInstance>;\n      }\n    >\n  >;\n\n  constructor() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n\n  protected createSubset(name: DependencySets, force = false): void {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: new Set(),\n        writeDeps: new Set(),\n      };\n    }\n  }\n\n  /** Grab all of the bindings that this depended on */\n  public getDependencies(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.readDeps ?? new Set();\n    }\n\n    return this.readDeps;\n  }\n\n  public trackSubset(name: DependencySets) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n\n  public trackDefault() {\n    this.namedSet = \"core\";\n  }\n\n  /** Grab all of the bindings this wrote to */\n  public getModified(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? new Set();\n    }\n\n    return this.writeDeps;\n  }\n\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  public readsBinding(binding: BindingInstance): boolean {\n    return this.readDeps.has(binding);\n  }\n\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  public writesBinding(binding: BindingInstance): boolean {\n    return this.writeDeps.has(binding);\n  }\n\n  /** Reset all tracking of dependencies */\n  public reset() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n\n  protected addReadDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n\n    this.readDeps.add(binding);\n  }\n\n  protected addWriteDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n\n    this.writeDeps.add(binding);\n  }\n\n  public addChildReadDep(binding: BindingInstance): void {\n    this.addReadDep(binding, \"children\");\n  }\n}\n\n/** Middleware that tracks dependencies of read/written data */\nexport class DependencyMiddleware\n  extends DependencyTracker\n  implements DataModelMiddleware\n{\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return next?.set(transaction, options) ?? [];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addReadDep(binding);\n\n    return next?.get(binding, options);\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n}\n\n/** A data-model that tracks dependencies of read/written data */\nexport class DependencyModel<Options = DataModelOptions>\n  extends DependencyTracker\n  implements DataModelImpl<Options>\n{\n  private readonly rootModel: DataModelImpl<Options>;\n\n  constructor(rootModel: DataModelImpl<Options>) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n\n  public set(transaction: BatchSetTransaction, options?: Options): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return this.rootModel.set(transaction, options);\n  }\n\n  public get(binding: BindingInstance, options?: Options) {\n    this.addReadDep(binding);\n\n    return this.rootModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: Options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n}\n","import type { DataModelImpl } from \"./model\";\n\n/**\n * A model that does nothing\n * Helpful for testing and other default DataModel applications\n */\nexport class NOOPDataModel implements DataModelImpl {\n  get() {\n    return undefined;\n  }\n\n  set() {\n    return [];\n  }\n\n  delete() {}\n}\n\n/** You only really need 1 instance of the NOOP model */\nexport const NOOP_MODEL = new NOOPDataModel();\n","import type { Binding } from \"@player-ui/types\";\n\nimport type { BindingLike } from \"../binding\";\nimport type {\n  ExpressionHandler,\n  ExpressionContext,\n  ExpressionNode,\n} from \"./types\";\n\n/** Sets a value to the data-model */\nexport const setDataVal: ExpressionHandler<[Binding, any], any> = (\n  _context: ExpressionContext,\n  binding,\n  value,\n) => {\n  _context.model.set([[binding as BindingLike, value]]);\n};\n\n/** Fetches a valid from the data-model */\nexport const getDataVal: ExpressionHandler<[Binding], unknown> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.get(binding as BindingLike);\n};\n\n/** Deletes a value from the model */\nexport const deleteDataVal: ExpressionHandler<[Binding], void> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.delete(binding);\n};\n\n/** Conditional expression handler */\nexport const conditional: ExpressionHandler<\n  [ExpressionNode, ExpressionNode, ExpressionNode?]\n> = (ctx, condition, ifTrue, ifFalse) => {\n  const testResult = ctx.evaluate(condition);\n\n  // Handle Promise case automatically (same pattern as ternary operator)\n  if (testResult instanceof Promise) {\n    return testResult.then((resolvedTest: any) => {\n      if (resolvedTest) {\n        return ctx.evaluate(ifTrue);\n      }\n      if (ifFalse) {\n        return ctx.evaluate(ifFalse);\n      }\n      return null;\n    });\n  }\n\n  // Handle sync case\n  if (testResult) {\n    return ctx.evaluate(ifTrue);\n  }\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n  return null;\n};\n\nconditional.resolveParams = false;\n\nexport const waitFor: ExpressionHandler<[Promise<any>], any> = async (\n  ctx,\n  promise,\n) => {\n  return await promise;\n};\n","import { SyncHook } from \"tapable-ts\";\nimport type { Logger, Severity } from \"./types\";\n\n/** A logger that has a tapable subscriptions to callbacks */\nexport default class TapableLogger implements Logger {\n  public readonly hooks = {\n    trace: new SyncHook<[Array<any>]>(),\n    debug: new SyncHook<[Array<any>]>(),\n    info: new SyncHook<[Array<any>]>(),\n    warn: new SyncHook<[Array<any>]>(),\n    error: new SyncHook<[Array<any>]>(),\n    log: new SyncHook<[Severity, Array<any>]>(),\n  };\n\n  private logHandlers: Set<Logger> = new Set();\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n\n  public addHandler(logHandler: Logger) {\n    this.logHandlers.add(logHandler);\n  }\n\n  public removeHandler(logHandler: Logger) {\n    this.logHandlers.delete(logHandler);\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { Logger, Severity, LoggerProvider } from \"./types\";\n\n/**\n * The ProxyLogger allows a user to log to another Logger instance that may not exist yet\n */\nexport default class ProxyLogger implements Logger {\n  private proxiedLoggerProvider: LoggerProvider;\n\n  constructor(loggerProvider: LoggerProvider) {\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { ValidatorFunction } from \"./types\";\n\n/** A registry that tracks validators  */\nexport class ValidatorRegistry {\n  private registry: Map<string, ValidatorFunction<any>>;\n\n  constructor() {\n    this.registry = new Map();\n  }\n\n  /** Use the given validator name to fetch the handler */\n  public get(name: string): ValidatorFunction | undefined {\n    return this.registry.get(name);\n  }\n\n  /** Register a new validator */\n  public register<T>(name: string, handler: ValidatorFunction<T>) {\n    this.registry.set(name, handler);\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { View as ViewType } from \"@player-ui/types\";\nimport type { BindingInstance, BindingFactory } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { Logger } from \"../logger\";\nimport type { Resolve } from \"./resolver\";\nimport { Resolver } from \"./resolver\";\nimport type { Node } from \"./parser\";\nimport { Parser } from \"./parser\";\nimport { TemplatePlugin } from \"./plugins\";\n\n/**\n * Manages the view level validations\n */\nclass CrossfieldProvider implements ValidationProvider {\n  private allValidations = new Set<ValidationObject>();\n  private byBinding = new Map<BindingInstance, Array<ValidationObject>>();\n  private logger?: Logger;\n\n  constructor(initialView: ViewType, parser: BindingFactory, logger?: Logger) {\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n\n  private parse(contentView: ViewType, parser: BindingFactory) {\n    const xfieldRefs = contentView.validation;\n\n    if (xfieldRefs === undefined) {\n      return;\n    }\n\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`,\n      );\n\n      return;\n    }\n\n    // Grab the validations from the view (as authored) and parse out the ones that have a _ref_ (to a binding)\n    // Group them all by binding to make it easier to return than later\n\n    xfieldRefs.forEach((vRef) => {\n      // x-field validations by default are triggered by navigating away from the page\n      // the reference can also override that _or_ the severity\n      const withDefaults: ValidationObject = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef,\n      };\n\n      this.allValidations.add(withDefaults);\n\n      // The validation reference contains a _ref_ (a binding)\n      const { ref } = vRef;\n\n      if (ref) {\n        /** Group together validations by binding */\n        const parsed = parser(ref);\n\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.byBinding.get(binding);\n  }\n}\n\n/** A stateful view instance from an content */\nexport class ViewInstance implements ValidationProvider {\n  public hooks = {\n    onUpdate: new SyncHook<[ViewType]>(),\n    parser: new SyncHook<[Parser]>(),\n    resolver: new SyncHook<[Resolver]>(),\n    onTemplatePluginCreated: new SyncHook<[TemplatePlugin]>(),\n    templatePlugin: new SyncHook<[TemplatePlugin]>(),\n  };\n\n  private resolver?: Resolver;\n  public readonly initialView: ViewType;\n  public readonly resolverOptions: Resolve.ResolverOptions;\n  private rootNode?: Node.Node;\n\n  private validationProvider?: CrossfieldProvider;\n\n  private templatePlugin: TemplatePlugin | undefined;\n\n  // TODO might want to add a version/timestamp to this to compare updates\n  public lastUpdate: Record<string, any> | undefined;\n\n  constructor(initialView: ViewType, resolverOptions: Resolve.ResolverOptions) {\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n    this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n      this.templatePlugin = templatePlugin;\n    });\n  }\n\n  public updateAsync() {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n\n  public update(changes?: Set<BindingInstance>) {\n    if (this.rootNode === undefined) {\n      /** On initialization of the view, also create a validation parser */\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger,\n      );\n\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\",\n        );\n      }\n\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser),\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n\n    const update = this.resolver?.update(changes);\n\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n\n    return update;\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n}\n\n/** A plugin for a view */\nexport interface ViewPlugin {\n  /** Called with a view instance */\n  apply(view: ViewInstance): void;\n}\n","import type { Node, AnyAssetType } from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/**\n * Functions for building AST nodes (relatively) easily\n */\nexport class Builder {\n  /**\n   * Creates an asset node\n   *\n   * @param value - the value to put in the asset node\n   */\n  static asset<T extends AnyAssetType>(value: T): Node.Asset<T> {\n    return {\n      type: NodeType.Asset,\n      value,\n    };\n  }\n\n  static assetWrapper<T extends Node.Node>(value: T): Node.Value {\n    const valueNode = Builder.value();\n    Builder.addChild(valueNode, \"asset\", value);\n    return valueNode;\n  }\n\n  /**\n   * Creates a value node\n   *\n   * @param v - The object to put in the value node\n   */\n  static value(v?: object): Node.Value {\n    return {\n      type: NodeType.Value,\n      value: v,\n    };\n  }\n\n  /**\n   * Creates a multiNode and associates the multiNode as the parent\n   * of all the value nodes\n   *\n   * @param values - the value, applicability or async nodes to put in the multinode\n   */\n  static multiNode(\n    ...values: (Node.Value | Node.Applicability | Node.Async)[]\n  ): Node.MultiNode {\n    const m: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: true,\n      values,\n    };\n\n    values.forEach((v) => {\n      v.parent = m;\n    });\n\n    return m;\n  }\n\n  /**\n   * Creates an async node\n   *\n   * @param id - the id of async node. It should be identical for each async node\n   */\n  static asyncNode(id: string, flatten = true): Node.Async {\n    return {\n      id,\n      type: NodeType.Async,\n      flatten: flatten,\n      value: {\n        type: NodeType.Value,\n        value: {\n          id,\n        },\n      },\n    };\n  }\n\n  /**\n   * Adds a child node to a node\n   *\n   * @param node - The node to add a child to\n   * @param path - The path at which to add the child\n   * @param child - The child node\n   */\n  static addChild<N extends Node.BaseWithChildren<NT>, NT extends NodeType>(\n    node: N,\n    path: Node.PathSegment | Node.PathSegment[],\n    child: Node.Node,\n  ): N {\n    child.parent = node as Node.Node;\n\n    const newChild: Node.Child = {\n      path: Array.isArray(path) ? path : [path],\n      value: child,\n    };\n\n    node.children = node.children || [];\n    node.children.push(newChild);\n\n    return node;\n  }\n\n  /**\n   * Updates children of a node of the same path and preserves order\n   *\n   * @param node - The node to update children for\n   * @param pathToMatch - The path to match against child paths\n   * @param mapFn - Function to transform matching children\n   */\n  static updateChildrenByPath<T extends Node.ViewOrAsset | Node.Value>(\n    node: T,\n    pathToMatch: Node.PathSegment[],\n    updateFn: (child: Node.Child) => Node.Node,\n  ): T {\n    if (!node.children) return node;\n\n    // Use map to preserve original order\n    const updatedChildren = node.children.map((child) =>\n      // Check if paths match exactly\n      child.path.join() === pathToMatch.join()\n        ? { ...child, value: updateFn(child) }\n        : child,\n    );\n\n    return {\n      ...node,\n      children: updatedChildren,\n    };\n  }\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Template } from \"@player-ui/types\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport { hasTemplateKey } from \"../parser/utils\";\n\nconst templateSymbol = Symbol(\"template\");\n\nexport interface TemplateItemInfo {\n  /** The index of the data for the current iteration of the template */\n  index: number;\n  /** The data for the current iteration of the template */\n  data: any;\n  /** The depth of the template node */\n  depth: number;\n}\n\nexport interface TemplateSubstitution {\n  /** Regular expression to find and replace. The global flag will be always be added to this expression. */\n  expression: string | RegExp;\n  /** The value to replace matches with. */\n  value: string;\n}\n\nexport type TemplateSubstitutionsFunc = (\n  baseSubstitutions: TemplateSubstitution[],\n  templateItemInfo: TemplateItemInfo,\n) => TemplateSubstitution[];\n\n/** A view plugin to resolve/manage templates */\nexport default class TemplatePlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  hooks: {\n    resolveTemplateSubstitutions: SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo],\n      Record<string, any>\n    >;\n  } = {\n    resolveTemplateSubstitutions: new SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo]\n    >(),\n  };\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private parseTemplate(\n    parseObject: any,\n    node: Node.Template,\n    options: Options,\n  ): Node.Node | null {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n\n    if (!data) {\n      return null;\n    }\n\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n\n    const values: Array<Node.Node> = [];\n\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions =\n        this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index),\n            },\n          ],\n          {\n            depth,\n            data: dataItem,\n            index,\n          },\n        );\n      let templateStr = JSON.stringify(template);\n\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n\n      const parsed = parseObject(JSON.parse(templateStr), NodeType.Value, {\n        templateDepth: node.depth + 1,\n      });\n\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n\n    const result: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: false,\n      values,\n    };\n\n    // Removes undefined Symbol property\n    if (node.placement !== undefined) {\n      (result as any)[templateSymbol] = node.placement;\n    }\n\n    return result;\n  }\n\n  applyParser(parser: Parser): void {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === NodeType.Template && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options,\n        );\n      }\n\n      return node;\n    });\n\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node: Node.Node): string | undefined {\n        if (node.type === NodeType.MultiNode) {\n          return (node as any)[templateSymbol];\n        } else if (node.type === NodeType.Template) {\n          return node.placement;\n        }\n        return undefined;\n      }\n\n      if (\n        node &&\n        (node.type === NodeType.View || node.type === NodeType.Asset) &&\n        Array.isArray(node.children)\n      ) {\n        node.children = node.children.sort((a, b) => {\n          // compare template output with static values\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n\n          const pathsEqual = aPath === bPath;\n\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n\n            if (aPlacement !== undefined && bPlacement === undefined) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== undefined && aPlacement === undefined) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== undefined && bPlacement !== undefined) {\n              // Both have placement values\n              if (aPlacement === bPlacement) {\n                return 0; // Same placement, no preference\n              }\n              // \"prepend\" should come before \"append\"\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n\n          // Trigger more sorting for nested assets\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj\n            .map((template: Template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: NodeType.Template,\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement,\n                },\n                template,\n              );\n\n              if (!templateAST) return;\n\n              if (templateAST.type === NodeType.MultiNode) {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST,\n              };\n            })\n            .filter(Boolean);\n        }\n      },\n    );\n  }\n\n  applyResolverHooks(resolver: Resolver): void {\n    // Transform dynamic templates into MultiNodes\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === NodeType.Template && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance): void {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { EMPTY_NODE, NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { hasSwitchKey } from \"../parser/utils\";\n\n/** A view plugin to resolve switches */\nexport default class SwitchPlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private resolveSwitch(node: Node.Switch, options: Options): Node.Node {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n\n    return EMPTY_NODE;\n  }\n\n  private isSwitch(obj: any) {\n    return (\n      obj &&\n      (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") ||\n        Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"))\n    );\n  }\n\n  applyParser(parser: Parser) {\n    /** Switches resolved during the parsing phase are static */\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === NodeType.Switch && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          this.isSwitch(obj) ||\n          (childOptions && hasSwitchKey(childOptions.key))\n        ) {\n          const objToParse =\n            childOptions && hasSwitchKey(childOptions.key)\n              ? { [childOptions.key]: obj }\n              : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic\n            ? objToParse.dynamicSwitch\n            : objToParse.staticSwitch;\n\n          const cases: Node.SwitchCase[] = switchContent\n            .map(\n              (switchCase: {\n                [x: string]: any;\n                /**\n                 *\n                 */\n                case: any;\n              }) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  NodeType.Value,\n                  options,\n                );\n\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value: value as Node.Value,\n                  };\n                }\n\n                return;\n              },\n            )\n            .filter(Boolean);\n\n          const switchAST = parser.createASTNode(\n            {\n              type: NodeType.Switch,\n              dynamic,\n              cases,\n            },\n            objToParse,\n          );\n\n          if (!switchAST || switchAST.type === NodeType.Empty) {\n            return childOptions ? [] : null;\n          }\n\n          if (switchAST.type === NodeType.Switch) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value: any = switchAST;\n\n            if (\n              switchAST.type === NodeType.Value &&\n              switchAST.children?.length === 1 &&\n              switchAST.value === undefined\n            ) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n\n            return [{ path, value }];\n          }\n\n          return switchAST;\n        }\n      },\n    );\n  }\n\n  applyResolver(resolver: Resolver) {\n    /** Switches resolved during the parsing phase are dynamic */\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === NodeType.Switch && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { hasTemplateValues, hasTemplateKey } from \"../parser/utils\";\n\n/** A view plugin to resolve multi nodes */\nexport default class MultiNodePlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          childOptions &&\n          !hasTemplateKey(childOptions.key) &&\n          Array.isArray(obj)\n        ) {\n          const values = obj\n            .map((childVal) =>\n              parser.parseObject(childVal, NodeType.Value, options),\n            )\n            .filter((child): child is Node.Node => !!child);\n\n          if (!values.length) {\n            return [];\n          }\n\n          const multiNode = parser.createASTNode(\n            {\n              type: NodeType.MultiNode,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key,\n              ),\n              values,\n            },\n            obj,\n          );\n\n          if (!multiNode) {\n            return [];\n          }\n\n          if (multiNode.type === NodeType.MultiNode) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/** A view plugin to resolve assets */\nexport default class AssetPlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, NodeType.Asset, options);\n\n          if (!assetAST) {\n            return [];\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { Navigation, NavigationFlowEndState } from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\nimport type { TransitionOptions } from \"./flow\";\nimport { FlowInstance } from \"./flow\";\n\n/** A manager for the navigation section of a Content blob */\nexport class FlowController {\n  public readonly hooks = {\n    flow: new SyncHook<[FlowInstance]>(),\n  };\n\n  private readonly log?: Logger;\n  private navigation: Navigation;\n  private navStack: FlowInstance[];\n  public current?: FlowInstance;\n\n  constructor(\n    navigation: Navigation,\n    options?: {\n      /** A logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n\n  /** Navigate to another state in the state-machine */\n  public transition(stateTransition: string, options?: TransitionOptions) {\n    if (this.current === undefined) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n\n    this.current.transition(stateTransition, options);\n  }\n\n  private addNewFlow(flow: FlowInstance) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n\n  private async run(startState: string): Promise<NavigationFlowEndState> {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n\n    const startFlow = this.navigation[startState];\n\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`),\n      );\n    }\n\n    this.log?.debug(`Starting flow: ${startState}`);\n\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`,\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n\n    const end = await flow.start();\n    this.navStack.pop();\n\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n\n    return end;\n  }\n\n  public async start(): Promise<NavigationFlowEndState> {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n\n    return this.run(this.navigation.BEGIN);\n  }\n}\n","import type { Validation } from \"@player-ui/types\";\nimport type { ViewPlugin, Resolver, Node, ViewInstance } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport type {\n  BindingInstance,\n  BindingLike,\n  BindingFactory,\n} from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ValidationResponse } from \"../../validator\";\n\nconst CONTEXT = \"validation-binding-tracker\";\n\nexport interface BindingTracker {\n  /** Get the bindings currently being tracked for validation */\n  getBindings(): Set<BindingInstance>;\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance): void;\n}\ninterface Options {\n  /** Parse a binding from a view */\n  parseBinding: BindingFactory;\n\n  /** Callbacks when events happen */\n  callbacks?: {\n    /** Called when a binding is encountered for the first time in a view */\n    onAdd?: (binding: BindingInstance) => void;\n  };\n}\n\n/** A view plugin that manages bindings tracked across updates */\nexport class ValidationBindingTrackerViewPlugin\n  implements ViewPlugin, BindingTracker\n{\n  private options: Options;\n\n  private trackedBindings = new Set<BindingInstance>();\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  /** Fetch the tracked bindings in the current view */\n  getBindings(): Set<BindingInstance> {\n    return this.trackedBindings;\n  }\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver: Resolver) {\n    this.trackedBindings.clear();\n\n    /** Each node maps to a set of bindings that it directly tracks */\n    const tracked = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Each Node is a registered section or page that maps to a set of nodes in its section */\n    const sections = new Map<Node.Node, Set<Node.Node>>();\n\n    let lastViewUpdateChangeSet: Set<BindingInstance> | undefined;\n\n    /** Map of node to all bindings in children */\n    const lastComputedBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n    let currentBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of registered section nodes to bindings */\n    const lastSectionBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of resolved nodes to their original nodes. */\n    const resolvedNodeMap: Map<Node.Node, Node.Node> = new Map();\n\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter((b) =>\n          trackedBindingsForNode.has(b),\n        ),\n      );\n\n      return intersection.size === 0;\n    });\n\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === undefined) {\n        return options;\n      }\n\n      // Clear out any old tracked bindings for this node since we're re-compiling it\n      tracked.delete(node);\n\n      /** Validation callback to track a binding */\n      const track = (binding: BindingLike) => {\n        const parsed = isBinding(binding)\n          ? binding\n          : this.options.parseBinding(binding);\n\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, new Set([parsed]));\n        }\n\n        /** find first parent registered as section and add self to its list */\n        let { parent } = node;\n\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            const eows = options.validation\n              ?._getValidationForBinding(binding)\n              ?.getAll(getOptions);\n\n            const firstFieldEOW = eows?.find(\n              (eow) =>\n                eow.displayTarget === \"field\" ||\n                eow.displayTarget === undefined,\n            );\n\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            return (\n              options.validation\n                ?._getValidationForBinding(binding)\n                ?.getAll(getOptions) ?? []\n            );\n          },\n          getChildren: (type?: Validation.DisplayTarget) => {\n            const validations = new Array<ValidationResponse>();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && (type === undefined || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array<ValidationResponse>();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, new Set());\n              }\n            }\n          },\n          track,\n        },\n      };\n    });\n\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        // Compute the new tree for this node\n        // If it's not-updated, use the last known value\n\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === NodeType.MultiNode) {\n            resolvedNode.values.forEach((value) =>\n              currentBindingTree\n                .get(value)\n                ?.forEach((b) => newlyComputed.add(b)),\n            );\n          }\n\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree\n                .get(child.value)\n                ?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? new Set(),\n          );\n        }\n\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = new Set<BindingInstance>();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = new Map();\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n}\n","export interface Store {\n  useLocalState<T>(initialState: T): readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\ninterface SharedStore {\n  getLocalStateFunction<T>(\n    key: string | symbol,\n    countKey: symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\n/** A store that holds on to state for a transform */\nexport class LocalStateStore implements SharedStore {\n  private state: Map<string | symbol, any>;\n\n  private updateCallback?: () => void;\n\n  constructor(onUpdate?: () => void) {\n    this.updateCallback = onUpdate;\n\n    this.state = new Map();\n  }\n\n  public removeKey(key: symbol | string) {\n    this.state.delete(key);\n  }\n\n  public reset() {\n    this.state.clear();\n  }\n\n  useSharedState<T>(key: string | symbol) {\n    return (initialState: T) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n\n      return [\n        this.state.get(key) as T,\n        (newState: T) => {\n          const current = this.state.get(key) as T;\n\n          this.state.set(key, newState);\n\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n\n  getLocalStateFunction<T>(key: symbol, countKey: symbol) {\n    return (initialState: T) => {\n      // initialize if not already created\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n\n      this.state.set(countKey, oldCount + 1);\n\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n\n      const value = localState[oldCount] as T;\n\n      return [\n        value,\n        (newState: T) => {\n          const oldValue = localState[oldCount] as T;\n          localState[oldCount] = newState;\n\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n}\n","import type { Node } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport { LocalStateStore } from \"./store\";\nimport type { TransformRegistry } from \"./types\";\nimport type { ViewController } from \"./controller\";\n\n/** Traverse up the nodes until the target is found */\nfunction findUp(node: Node.Node, target: Node.Node): boolean {\n  if (node === target) {\n    return true;\n  }\n\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n\n  return false;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport class AssetTransformCorePlugin {\n  public readonly stateStore: Map<Node.Node, LocalStateStore>;\n  private readonly registry: TransformRegistry;\n  private beforeResolveSymbol: symbol;\n  private resolveSymbol: symbol;\n  private beforeResolveCountSymbol: symbol;\n  private resolveCountSymbol: symbol;\n\n  constructor(registry: TransformRegistry) {\n    this.registry = registry;\n    this.stateStore = new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n\n  apply(viewController: ViewController) {\n    viewController.hooks.view.tap(\"asset-transform\", (view) => {\n      // Clear out everything when we create a new view\n      this.stateStore.clear();\n\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode: Node.Node | undefined;\n\n        /** A function to update the state and trigger a view re-compute */\n        const updateState = (node: Node.Node) => {\n          lastUpdatedNode = node;\n          view.update(new Set());\n        };\n\n        /** Given a node and a transform step, fetch a local store */\n        const getStore = (node: Node.Node, stepKey: symbol) => {\n          let store: LocalStateStore;\n          const countKey =\n            stepKey === this.resolveSymbol\n              ? this.resolveCountSymbol\n              : this.beforeResolveCountSymbol;\n\n          const storedState = this.stateStore.get(node);\n\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n\n          return {\n            useSharedState: (\n              key: string | symbol,\n            ): (<T>(initialState: T) => readonly [T, (value: T) => void]) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: <T>(initialState: T) => {\n              return store.getLocalStateFunction<T>(\n                stepKey,\n                countKey,\n              )(initialState);\n            },\n          };\n        };\n\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol,\n              );\n\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n\n          return node;\n        });\n\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = undefined;\n        });\n\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== NodeType.Asset && node.type !== NodeType.View) {\n              return value;\n            }\n\n            const originalNode = resolver.getSourceNode(node);\n\n            if (!originalNode) {\n              return value;\n            }\n\n            const transform = this.registry.get(value);\n\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n\n              return transform?.resolve(value, options, store);\n            }\n\n            return value;\n          },\n        );\n      });\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { DataController } from \".\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingLike } from \"../../binding\";\nimport type {\n  DataModelWithParser,\n  DataModelOptions,\n  Updates,\n} from \"../../data\";\n\n/** Wrapper for the Data Controller Class that prevents writes */\nexport class ReadOnlyDataController\n  implements DataModelWithParser<DataModelOptions>\n{\n  private controller: DataController;\n  private logger?: Logger;\n\n  constructor(controller: DataController, logger?: Logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n\n  get(binding: BindingLike, options?: DataModelOptions | undefined) {\n    return this.controller.get(binding, options);\n  }\n\n  set(\n    transaction: [BindingLike, any][],\n    options?: DataModelOptions | undefined,\n  ): Updates {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\",\n    );\n    return [];\n  }\n\n  delete(binding: BindingLike, options?: DataModelOptions | undefined): void {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\",\n    );\n  }\n}\n","import { SyncHook, SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { dequal } from \"dequal\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingParser, BindingLike } from \"../../binding\";\nimport { BindingInstance } from \"../../binding\";\nimport type {\n  BatchSetTransaction,\n  Updates,\n  DataModelOptions,\n  DataModelWithParser,\n  DataPipeline,\n  DataModelMiddleware,\n} from \"../../data\";\nimport { PipelinedDataModel, LocalModel } from \"../../data\";\nimport type { RawSetTransaction } from \"../../types\";\nimport { ReadOnlyDataController } from \"./utils\";\n\n/** The orchestrator for player data */\nexport class DataController implements DataModelWithParser<DataModelOptions> {\n  public hooks = {\n    resolve: new SyncWaterfallHook(),\n    resolveDataStages: new SyncWaterfallHook<[DataPipeline]>(),\n\n    // On any set or get of an undefined value, redirect the value to be the default\n    resolveDefaultValue: new SyncBailHook<[BindingInstance], any>(),\n\n    onDelete: new SyncHook<[any]>(),\n\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n\n    onGet: new SyncHook<[any, any]>(),\n\n    onUpdate: new SyncHook<[Updates, DataModelOptions | undefined]>(),\n\n    format: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    deformat: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    serialize: new SyncWaterfallHook<[any]>(),\n  };\n\n  private model?: PipelinedDataModel;\n  private trash: Set<BindingInstance>;\n  private pathResolver: BindingParser;\n  private baseMiddleware: Array<DataModelMiddleware>;\n  private logger?: Logger;\n\n  constructor(\n    model: Record<any, unknown> | undefined,\n    options: {\n      /** A means of parsing a raw binding to a Binding object */\n      pathResolver: BindingParser;\n\n      /** middleware to use. typically for validation */\n      middleware?: Array<DataModelMiddleware>;\n\n      /** A logger to use  */\n      logger?: Logger;\n    },\n  ) {\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n\n    this.trash = new Set();\n    this.pathResolver = options.pathResolver;\n  }\n\n  public getModel(): PipelinedDataModel {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n\n    return this.model;\n  }\n\n  private resolveDataValue(\n    binding: BindingInstance,\n    value: any,\n    deformat: boolean,\n  ) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n\n    return value;\n  }\n\n  public set(\n    transaction: RawSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    let normalizedTransaction: BatchSetTransaction = [];\n\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted)),\n        ];\n      }) as BatchSetTransaction;\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding: string) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted)),\n          ];\n        },\n      ) as BatchSetTransaction;\n    }\n\n    // Figure out what the base changes being applied are\n    const setUpdates = normalizedTransaction.reduce<Updates>(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal,\n        };\n\n        if (dequal(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`,\n          );\n        } else {\n          updates.push(update);\n\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`,\n          );\n        }\n\n        return updates;\n      },\n      [],\n    );\n\n    // Get the applied update\n    const result = this.getModel().set(normalizedTransaction, options);\n\n    // Add any extra bindings that were effected\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (\n        !setUpdateBindings.has(tr.binding) &&\n        (tr.force === true || !dequal(tr.oldValue, tr.newValue))\n      ) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${\n            tr.oldValue\n          } to: ${tr.newValue}`,\n        );\n        setUpdates.push(tr);\n      }\n    });\n\n    this.hooks.onSet.call(normalizedTransaction);\n\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n\n    return result;\n  }\n\n  private resolve(binding: BindingLike, readOnly: boolean): BindingInstance {\n    return Array.isArray(binding) || typeof binding === \"string\"\n      ? this.pathResolver.parse(binding, { readOnly })\n      : binding;\n  }\n\n  public get(binding: BindingLike, options?: DataModelOptions) {\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n\n    if (result === undefined && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n\n    this.hooks.onGet.call(binding, result);\n\n    return result;\n  }\n\n  public delete(binding: BindingLike, options?: DataModelOptions) {\n    if (\n      typeof binding !== \"string\" &&\n      !Array.isArray(binding) &&\n      !(binding instanceof BindingInstance)\n    ) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, false);\n\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n\n    const existedBeforeDelete =\n      typeof parentValue === \"object\" &&\n      parentValue !== null &&\n      Object.prototype.hasOwnProperty.call(parentValue, property);\n\n    this.getModel().delete(resolved, options);\n\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n\n    this.hooks.onDelete.call(resolved);\n  }\n\n  public serialize(): object {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n\n  public makeReadOnly(): ReadOnlyDataController {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n}\n","import { LocalModel } from \"../../data\";\nimport { BindingInstance } from \"../../binding\";\nimport { objectToBatchSet } from \"./utils\";\n\nexport interface ConstantsProvider {\n  /**\n   * Function to add constants to the providers store\n   * - @param data values to add to the constants store\n   */\n  addConstants(data: Record<string, any>, namespace: string): void;\n\n  /**\n   * Function to retrieve constants from the providers store\n   *  - @param key Key used for the store access\n   *  - @param namespace namespace values were loaded under (defined in the plugin)\n   *  - @param fallback Optional - if key doesn't exist in namespace what to return (will return unknown if not provided)\n   */\n  getConstants(key: any, namespace: string, fallback?: any): any;\n\n  /**\n   * Function to set values to temporarily override certain keys in the perminant store\n   * - @param data values to override store with\n   * - @param namespace namespace to override\n   */\n  setTemporaryValues(data: any, namespace: string): void;\n\n  /**\n   * Clears any temporary values that were previously set\n   */\n  clearTemporaryValues(): void;\n}\n\n/**\n * Key/Value store for constants and context for Player\n */\nexport class ConstantsController implements ConstantsProvider {\n  /**\n   * Data store is basically a map of namespaces to DataModels to provide some data isolation\n   */\n  private store: Map<string, LocalModel>;\n\n  /**\n   * Separate store for temporary flow specific overrides.\n   * They are kept in a separate data model to make clearing it easier between flows\n   * and so there is no confusion on what is static and what is temporary\n   */\n  private tempStore: Map<string, LocalModel>;\n\n  constructor() {\n    this.store = new Map();\n    this.tempStore = new Map();\n  }\n\n  addConstants(data: any, namespace: string): void {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n\n  getConstants(key: string, namespace: string, fallback?: any): any {\n    const path = new BindingInstance(key);\n\n    return (\n      this.tempStore.get(namespace)?.get(path) ??\n      this.store.get(namespace)?.get(path) ??\n      fallback\n    );\n  }\n\n  setTemporaryValues(data: any, namespace: string): void {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n\n  clearTemporaryValues(namespace?: string): void {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value: LocalModel) => {\n        value.reset();\n      });\n    }\n  }\n}\n","import type {\n  Expression,\n  ExpressionObject,\n  NavigationFlowState,\n} from \"@player-ui/types\";\nimport type { ExpressionEvaluator, ExpressionType } from \"../expressions\";\nimport type { FlowInstance } from \"../controllers\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/**\n * A plugin that taps into the flow controller to evaluate available expressions\n * Expressions can be exposed via lifecycle \"hooks\" in flow/state nodes\n * e.g: onStart, onEnd\n */\nexport class FlowExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let expressionEvaluator: ExpressionEvaluator | undefined;\n\n    /**\n     * Eval Helper\n     *\n     * @param exp - an expression to be evaluated\n     */\n    const handleEval = (exp: Expression | ExpressionObject) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp as ExpressionType);\n        }\n      }\n    };\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow: FlowInstance) => {\n        // Eval flow nodes\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        // Eval state nodes\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState: NavigationFlowState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          },\n        });\n      });\n    });\n  }\n}\n","import type { ExpressionHandler, ExpressionType } from \"../expressions\";\nimport type { SchemaController } from \"../schema\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/** Gets formatter for given formatName and formats value if found, returns value otherwise */\nconst createFormatFunction = (schema: SchemaController) => {\n  /**\n   * The generated handler for the given schema\n   */\n  const handler: ExpressionHandler<[unknown, string], any> = (\n    ctx,\n    value,\n    formatName,\n  ) => {\n    return (\n      schema.getFormatterForType({ type: formatName })?.format(value) ?? value\n    );\n  };\n\n  return handler;\n};\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let formatFunction: ExpressionHandler<[unknown, string]> | undefined;\n\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args: [ExpressionType]) => {\n          return ctx.evaluate(...args);\n        },\n      );\n    });\n  }\n}\n","import type { Flow, FlowResult } from \"@player-ui/types\";\nimport type { BindingParser, BindingLike } from \"./binding\";\nimport type { SchemaController } from \"./schema\";\nimport type { ExpressionEvaluator } from \"./expressions\";\nimport type { Logger } from \"./logger\";\nimport type {\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport type { ReadOnlyDataController } from \"./controllers/data/utils\";\n\n/** The status for a flow's execution state */\nexport type PlayerFlowStatus =\n  | \"not-started\"\n  | \"in-progress\"\n  | \"completed\"\n  | \"error\";\n\n/** Common interface for the state of Player's flow execution */\nexport interface BaseFlowState<T extends PlayerFlowStatus> {\n  /** A unique reference for the life-cycle of a flow */\n  ref: symbol;\n\n  /** The status of the given flow */\n  status: T;\n}\n\n/** The beginning state of Player, before it's seen a flow  */\nexport type NotStartedState = BaseFlowState<\"not-started\">;\n\nexport const NOT_STARTED_STATE: NotStartedState = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\",\n};\n\n/** Shared properties for a flow in any state of execution (in-progress, completed successfully, or errored out) */\nexport interface PlayerFlowExecutionData {\n  /** The currently executing flow */\n  flow: Flow;\n}\n\nexport interface ControllerState {\n  /** The manager for data for a flow */\n  data: DataController;\n\n  /** The view manager for a flow */\n  view: ViewController;\n\n  /** The schema manager for a flow */\n  schema: SchemaController;\n\n  /** The validation manager for a flow */\n  validation: ValidationController;\n\n  /** The expression evaluator for a flow */\n  expression: ExpressionEvaluator;\n\n  /** The manager for parsing and resolving bindings */\n  binding: BindingParser;\n\n  /** the manager for the flow state machine */\n  flow: FlowController;\n}\n\n/** A flow is currently executing */\nexport type InProgressState = BaseFlowState<\"in-progress\"> &\n  PlayerFlowExecutionData & {\n    /** A promise that resolves when the flow is completed */\n    flowResult: Promise<FlowResult>;\n\n    /** The underlying state controllers for the current flow */\n    controllers: ControllerState;\n\n    /** Allow other platforms to abort the current flow with an error  */\n    fail: (error: Error) => void;\n\n    /**\n     * The Logger for the current player instance\n     */\n    logger: Logger;\n  };\n\n/** The flow completed properly */\nexport type CompletedState = BaseFlowState<\"completed\"> &\n  PlayerFlowExecutionData &\n  FlowResult & {\n    /** Readonly Player controllers to provide Player functionality after the flow has ended */\n    controllers: {\n      /** A read only instance of the Data Controller */\n      data: ReadOnlyDataController;\n    };\n  };\n\n/** The flow finished but not successfully */\nexport type ErrorState = BaseFlowState<\"error\"> & {\n  /** The currently executing flow */\n  flow: Flow;\n\n  /** The error associated with the failed flow */\n  error: Error;\n};\n\n/** Any Player state  */\nexport type PlayerFlowState =\n  | NotStartedState\n  | InProgressState\n  | CompletedState\n  | ErrorState;\n\n// Model\n\nexport type RawSetType = [BindingLike, any];\nexport type RawSetTransaction = Record<string, any> | RawSetType[];\n","import type { Player, PlayerPlugin } from \"../player\";\nimport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  MultiNodePlugin,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TemplatePlugin,\n  toNodeResolveOptions,\n} from \"../view\";\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultViewPlugin implements PlayerPlugin {\n  name = \"default-view-plugin\";\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n        new AssetPlugin().apply(view);\n        new SwitchPlugin(pluginOptions).apply(view);\n        new ApplicabilityPlugin().apply(view);\n        new StringResolverPlugin().apply(view);\n        const templatePlugin = new TemplatePlugin(pluginOptions);\n        templatePlugin.apply(view);\n        view.hooks.onTemplatePluginCreated.call(templatePlugin);\n        new MultiNodePlugin().apply(view);\n      });\n    });\n  }\n}\n","import { NodeType, getNodeID } from \"@player-ui/player\";\nimport type {\n  Player,\n  PlayerPlugin,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  ViewInstance,\n  Parser,\n  ViewPlugin,\n  Resolver,\n  Resolve,\n} from \"@player-ui/player\";\nimport { AsyncParallelBailHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { omit } from \"timm\";\n\nexport * from \"./types\";\nexport * from \"./transform\";\n\nexport interface AsyncNodePluginOptions {\n  /** A set of plugins to load  */\n  plugins?: AsyncNodeViewPlugin[];\n}\n\nexport interface AsyncNodeViewPlugin extends ViewPlugin {\n  /** Use this to tap into the async node plugin hooks */\n  applyPlugin: (asyncNodePlugin: AsyncNodePlugin) => void;\n\n  asyncNode: AsyncParallelBailHook<[Node.Async, (result: any) => void], any>;\n}\nexport type AsyncHandler = (\n  node: Node.Async,\n  callback?: (result: any) => void,\n) => Promise<any>;\n\n/**\n * Async node plugin used to resolve async nodes in the content\n * If an async node is present, allow users to provide a replacement node to be rendered when ready\n */\nexport class AsyncNodePlugin implements PlayerPlugin {\n  private plugins: AsyncNodeViewPlugin[] | undefined;\n\n  constructor(options: AsyncNodePluginOptions, asyncHandler?: AsyncHandler) {\n    if (options?.plugins) {\n      this.plugins = options.plugins;\n      options.plugins.forEach((plugin) => {\n        plugin.applyPlugin(this);\n      });\n    }\n\n    if (asyncHandler) {\n      this.hooks.onAsyncNode.tap(\n        \"async\",\n        async (node: Node.Async, callback) => {\n          return await asyncHandler(node, callback);\n        },\n      );\n    }\n  }\n\n  public readonly hooks = {\n    onAsyncNode: new AsyncParallelBailHook<\n      [Node.Async, (result: any) => void],\n      any\n    >(),\n  };\n\n  name = \"AsyncNode\";\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        this.plugins?.forEach((plugin) => {\n          plugin.apply(view);\n        });\n      });\n    });\n  }\n}\n\nexport class AsyncNodePluginPlugin implements AsyncNodeViewPlugin {\n  public asyncNode = new AsyncParallelBailHook<\n    [Node.Async, (result: any) => void],\n    any\n  >();\n  private basePlugin: AsyncNodePlugin | undefined;\n\n  name = \"AsyncNode\";\n\n  private resolvedMapping = new Map<string, any>();\n\n  private currentView: ViewInstance | undefined;\n\n  /**\n   * Updates the node asynchronously based on the result provided.\n   * This method is responsible for handling the update logic of asynchronous nodes.\n   * It checks if the node needs to be updated based on the new result and updates the mapping accordingly.\n   * If an update is necessary, it triggers an asynchronous update on the view.\n   * @param node The asynchronous node that might be updated.\n   * @param result The result obtained from resolving the async node. This could be any data structure or value.\n   * @param options Options provided for node resolution, including a potential parseNode function to process the result.\n   * @param view The view instance where the node resides. This can be undefined if the view is not currently active.\n   */\n  private handleAsyncUpdate(\n    node: Node.Async,\n    result: any,\n    options: Resolve.NodeResolveOptions,\n    view: ViewInstance | undefined,\n  ) {\n    const parsedNode =\n      options.parseNode && result ? options.parseNode(result) : undefined;\n\n    if (this.resolvedMapping.get(node.id) !== parsedNode) {\n      this.resolvedMapping.set(node.id, parsedNode ? parsedNode : node);\n      view?.updateAsync();\n    }\n  }\n\n  /**\n   * Handles the asynchronous API integration for resolving nodes.\n   * This method sets up a hook on the resolver's `beforeResolve` event to process async nodes.\n   * @param resolver The resolver instance to attach the hook to.\n   * @param view\n   */\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(this.name, (node, options) => {\n      let resolvedNode;\n      if (this.isAsync(node)) {\n        const mappedValue = this.resolvedMapping.get(node.id);\n        if (mappedValue) {\n          resolvedNode = mappedValue;\n        }\n      } else {\n        resolvedNode = null;\n      }\n\n      const newNode = resolvedNode || node;\n      if (!resolvedNode && node?.type === NodeType.Async) {\n        queueMicrotask(async () => {\n          const result = await this.basePlugin?.hooks.onAsyncNode.call(\n            node,\n            (result) => {\n              this.handleAsyncUpdate(node, result, options, this.currentView);\n            },\n          );\n          this.handleAsyncUpdate(node, result, options, this.currentView);\n        });\n\n        return node;\n      }\n      return newNode;\n    });\n  }\n\n  private isAsync(node: Node.Node | null): node is Node.Async {\n    return node?.type === NodeType.Async;\n  }\n\n  private isDeterminedAsync(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"async\");\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      this.name,\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isDeterminedAsync(obj)) {\n          const parsedAsync = parser.parseObject(\n            omit(obj, \"async\"),\n            nodeType,\n            options,\n          );\n          const parsedNodeId = getNodeID(parsedAsync);\n\n          if (parsedAsync === null || !parsedNodeId) {\n            return childOptions ? [] : null;\n          }\n\n          const asyncAST = parser.createASTNode(\n            {\n              id: parsedNodeId,\n              type: NodeType.Async,\n              value: parsedAsync,\n            },\n            obj,\n          );\n\n          if (childOptions) {\n            return asyncAST\n              ? [\n                  {\n                    path: [...childOptions.path, childOptions.key],\n                    value: asyncAST,\n                  },\n                ]\n              : [];\n          }\n\n          return asyncAST;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance): void {\n    this.currentView = view;\n    view.hooks.parser.tap(\"async\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"async\", this.applyResolver.bind(this));\n  }\n\n  applyPlugin(asyncNodePlugin: AsyncNodePlugin): void {\n    this.basePlugin = asyncNodePlugin;\n  }\n}\n","import { Builder } from \"@player-ui/player\";\nimport type { AsyncTransformFunc } from \"./types\";\n\n/**\n * Util function to generate transform function for async asset\n * @param asset - async asset to apply beforeResolve transform\n * @param transformedAssetType: transformed asset type for rendering\n * @param wrapperAssetType: container asset type\n * @param flatten: flatten the streamed in content\n * @returns - wrapper asset with children of transformed asset and async node\n */\n\nexport const asyncTransform: AsyncTransformFunc = (\n  assetId,\n  wrapperAssetType,\n  asset,\n  flatten,\n) => {\n  const id = \"async-\" + assetId;\n\n  const asyncNode = Builder.asyncNode(id, flatten);\n  let multiNode;\n  let assetNode;\n\n  if (asset) {\n    assetNode = Builder.assetWrapper(asset);\n    multiNode = Builder.multiNode(assetNode, asyncNode);\n  } else {\n    multiNode = Builder.multiNode(asyncNode);\n  }\n\n  const wrapperAsset = Builder.asset({\n    id: wrapperAssetType + \"-\" + id,\n    type: wrapperAssetType,\n  });\n\n  Builder.addChild(wrapperAsset, [\"values\"], multiNode);\n\n  return wrapperAsset;\n};\n","/* eslint-disable @typescript-eslint/ban-ts-comment */\nimport type {\n  BeforeTransformFunction,\n  TransformFunctions,\n} from \"@player-ui/player\";\nimport { composeBefore, compose } from \"@player-ui/asset-transform-plugin\";\nimport { asyncTransform } from \"@player-ui/async-node-plugin\";\nimport { ChatMessageAsset } from \"./types\";\n/**\n * In beforeTransform function, pass in flatten marker and call beforeResolve function.\n * Flatten default value is true.\n * input: ChatMessageAsset\n * @param asset - Asset to apply the transform to\n * @returns - transformed asset with async node and asset node\n */\nexport const transform: BeforeTransformFunction<ChatMessageAsset> = (asset) => {\n  const newAsset = asset.children?.[0]?.value;\n\n  if (!newAsset) {\n    return asyncTransform(asset.value.id, \"collection\");\n  }\n  return asyncTransform(asset.value.id, \"collection\", newAsset);\n};\n\nexport const chatMessageTransform: TransformFunctions = compose(\n  composeBefore(transform),\n);\n","import type { Player, ExtendedPlayerPlugin } from \"@player-ui/player\";\nimport { AssetTransformPlugin } from \"@player-ui/asset-transform-plugin\";\nimport type {\n  ActionAsset,\n  InputAsset,\n  ImageAsset,\n  InfoAsset,\n  TextAsset,\n  CollectionAsset,\n  ChoiceAsset,\n  ChatMessageAsset,\n} from \"./assets\";\nimport {\n  inputTransform,\n  actionTransform,\n  imageTransform,\n  infoTransform,\n  choiceTransform,\n  chatMessageTransform,\n} from \"./assets\";\n\n/**\n * A plugin to add transforms for the reference assets\n */\nexport class ReferenceAssetsPlugin\n  implements\n    ExtendedPlayerPlugin<\n      [\n        ActionAsset,\n        InputAsset,\n        ImageAsset,\n        TextAsset,\n        CollectionAsset,\n        ChoiceAsset,\n        ChatMessageAsset,\n      ],\n      [InfoAsset]\n    >\n{\n  name = \"reference-assets-transforms\";\n\n  apply(player: Player) {\n    player.registerPlugin(\n      new AssetTransformPlugin([\n        [{ type: \"action\" }, actionTransform],\n        [{ type: \"input\" }, inputTransform],\n        [{ type: \"image\" }, imageTransform],\n        [{ type: \"info\" }, infoTransform],\n        [{ type: \"choice\" }, choiceTransform],\n        [{ type: \"chat-message\" }, chatMessageTransform],\n      ]),\n    );\n  }\n}\n"]}