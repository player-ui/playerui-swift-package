{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1766/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/asset-transform.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-view-plugin.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/beacon.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/symbols.ts"],"names":["BeaconPlugin","equalToOrIn","value","check","Array","isArray","includes","callTap","tap","args","ctx","context","callback","dlv_es_default","obj","key","def","p","undef","split","length","find","iter","tar","keys","dequal","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","from","entry","path","count","size","createBasicMatcher","seed","matcher","match","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","asArray","findInArray","array","findIndex","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","set","Error","options","transaction","map","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","NOOP_MODEL","createModelWithOptions","reduce","nextModel","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","forEach","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","push","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isObjectExpression","parse","schema","parseQueue","shift","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","filter","b","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","createStatefulValidationObject","severity","state","isBlockingNavigation","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","all","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","insert","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","result","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","a","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","module","pDefer","deferred","promise","Promise","resolve","reject","require_queue_microtask","queueMicrotask","bind","window","global","then","catch","setTimeout","require_sorted_array","SortedArray","defclass","constructor","compare","compareDefault","element","high","low","pos","ordering","search","remove","splice","comparing","define","amd","src_exports","BeaconPluginSymbol","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","AsyncSeriesWaterfallHook","import_ts_nested_error","import_timm","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","import_p_defer","import_queue_microtask","import_sorted_array","createSortedArray","Registry","initialSet","store","query","callbackfn","clear","isRegistryEmpty","__defProp2","__export2","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","expected","whitespace","maybeNumber","Number","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","hooks","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","import_ts_nested_error2","actualValue","appendPathSegments","resolveNode","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","BINDING_BRACKETS_REGEX","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","BindingParser","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","DependencyTracker","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","force","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","DependencyModel","rootModel","NOOPDataModel","ROOT_BINDING","PipelinedDataModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","handler","appliedTransaction","LocalModel","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","_context","condition","ifTrue","ifFalse","resolution","resolveParams","andandOperator","ororOperator","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","ExpressionEvaluator","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","expressions","defaultHookOptions","_execAST","_resolveNode","resolvedOpts","_nothing","_execString","addExpressionFunction","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","storedAST","throwErrors","_currentValue","expressionContext","resolvedAttributes","attr","expressionName","n","ele","operation","TapableLogger","trace","debug","info","warn","log","logHandlers","createHandler","logger","addHandler","logHandler","removeHandler","ProxyLogger","loggerProvider","proxiedLoggerProvider","identify","SchemaController","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","fns","addDataTypes","getValidationsForBinding","typeDef","getApparentType","validation","vRef","trigger","normalizeBinding","cached","bindingArray","item","recordBinding","getType","schemaType","baseType","getTypeDefinition","dataType","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","ValidationMiddleware","validator","shadowModelPaths","shouldIncludeInvalid","asModel","includeInvalid","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","ValidatorRegistry","registry","register","EMPTY_NODE","Parser","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","currentValue","objToParse","children","localObj","objEntries","v","defaultValue","accumulation","current","localValue","newChildren","parentObj","baseAst","child","unpackAndPush","initial","asset","withContext","Resolver","root","skipResolve","beforeUpdate","afterUpdate","beforeResolve","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm4","rawParent","cacheUpdate","partiallyResolvedParent","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","resolvedAST","isNestedMultiNode","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","resolved","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","rawParentToPassIn","newValues","mValue","mTree","bindingDep","scope","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","ViewInstance","onUpdate","resolver","onTemplatePluginCreated","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","templateSymbol","TemplatePlugin","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","apply","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","propertiesToSkip","newNode","import_timm6","findBasePath","parentNode","original","StringResolverPlugin","propertiesToSkipCache","applyResolver","propsToSkip","plugins","stringResolver","nodePath","some","ApplicabilityPlugin","isApplicability","isApplicable","nodeType","parsedApplicability","applicabilityNode","applicability","SwitchPlugin","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","MultiNodePlugin","childVal","multiNode","AssetPlugin","assetAST","FlowInstance","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","transition","afterTransition","history","_oldState","nextState","newState","flowPromise","state_type","initialState","startState","import_p_defer2","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","FlowController","navigation","navStack","run","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","ValidationBindingTrackerViewPlugin","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","track","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","originalNode","newlyComputed","nodeSet","sectionNode","temp","SCHEMA_VALIDATION_PROVIDER_NAME","VIEW_VALIDATION_PROVIDER_NAME","VALIDATION_PROVIDER_NAME_SYMBOL","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","dismissable","dismiss","newApplicableValidations","currentPhase","ValidationController","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","LocalStateStore","updateCallback","removeKey","useSharedState","getLocalStateFunction","countKey","localState","oldCount","findUp","AssetTransformCorePlugin","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","viewController","lastUpdatedNode","updateState","getStore","stepKey","storedState","useLocalState","transform","skip","isParentOfUpdated","isChildOfUpdated","ViewController","initialViews","resolveView","transformRegistry","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","ReadOnlyDataController","controller","DataController","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","ConstantsController","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","FlowExpPlugin","player","expressionEvaluator","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","expEvaluator","NOT_STARTED_STATE","DefaultViewPlugin","pluginOptions","PLAYER_VERSION","__VERSION__","COMMIT","__GIT_COMMIT__","_Player","config","constantsController","dataController","validationController","bindingParser","resolveFlowContent","plugin","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","resolveStrings","transitionVal","computedTransitionVal","param","constants","views","utils","pluginSymbol","endState","flowResult","finally","controllers","fail","payload","maybeUpdateState","endProps","errorState","_BeaconPlugin","beaconContext","buildBeacon","cancelBeacon","publishBeacon","beacon","playerState","vc","beaconedView","import_timm10","viewUpdate","action","_ctx","event","unresolvedData","defaultBeacon","hookArgs","shouldCancel","metaData","assetId"],"mappings":"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","sourcesContent":["\"use strict\";\nvar BeaconPlugin = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn9;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit3;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn9(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn9(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn9(a, path, nextVal);\n      }\n      function omit3(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn9,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit3,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length = array.length, index = 0;\n            while (index < length)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    BeaconPlugin: () => BeaconPlugin,\n    BeaconPluginSymbol: () => BeaconPluginSymbol\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n  var AsyncSeriesWaterfallHook = class extends Hook {\n    async call(...args) {\n      let [rtn, ...rest] = args;\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const tapValue = await callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n          if (tapValue !== void 0) {\n            rtn = tapValue;\n          }\n        }\n      } catch (e) {\n        this.interceptions.error(e);\n        throw e;\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_ts_nested_error = __toESM(require_nested_error(), 1);\n  var import_ts_nested_error2 = __toESM(require_nested_error(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm = __toESM(require_timm(), 1);\n  var import_ts_nested_error3 = __toESM(require_nested_error(), 1);\n  var import_timm2 = __toESM(require_timm(), 1);\n  var import_timm3 = __toESM(require_timm(), 1);\n  var import_timm4 = __toESM(require_timm(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm5 = __toESM(require_timm(), 1);\n  var import_timm6 = __toESM(require_timm(), 1);\n  var import_timm7 = __toESM(require_timm(), 1);\n  var import_timm8 = __toESM(require_timm(), 1);\n  var import_p_defer = __toESM(require_p_defer(), 1);\n  var import_p_defer2 = __toESM(require_p_defer(), 1);\n  var import_timm9 = __toESM(require_timm(), 1);\n  var import_queue_microtask = __toESM(require_queue_microtask(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var __defProp2 = Object.defineProperty;\n  var __export2 = (target, all) => {\n    for (var name in all)\n      __defProp2(target, name, { get: all[name], enumerable: true });\n  };\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n  var evaluator_functions_exports = {};\n  __export2(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal\n  });\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const resolution = ctx.evaluate(condition);\n    if (resolution) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  var andandOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) && ctx.evaluate(b);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b) => {\n    return ctx.evaluate(a) || ctx.evaluate(b);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // eslint-disable-next-line\n    \"==\": (a, b) => a == b,\n    // eslint-disable-next-line\n    \"!=\": (a, b) => a != b,\n    \">\": (a, b) => a > b,\n    \">=\": (a, b) => a >= b,\n    \"<\": (a, b) => a < b,\n    \"<=\": (a, b) => a <= b,\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    \"!==\": (a, b) => a !== b,\n    \"===\": (a, b) => a === b,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": (a) => !a\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(Object.entries(DEFAULT_BINARY_OPERATORS)),\n        unary: new Map(Object.entries(DEFAULT_UNARY_OPERATORS)),\n        expressions: new Map(\n          Object.entries(evaluator_functions_exports)\n        )\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", this._resolveNode.bind(this));\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        [, matchedExp] = Array.from(matches);\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right);\n            }\n            return operator(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right)\n            );\n          }\n          return operator(resolveNode(node.left), resolveNode(node.right));\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            return operator(\n              expressionContext,\n              operator.resolveParams === false ? node.argument : resolveNode(node.argument)\n            );\n          }\n          return operator(resolveNode(node.argument));\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        const { attributes } = node;\n        const resolvedAttributes = {};\n        attributes.forEach((attr) => {\n          const key = resolveNode(attr.key);\n          const value = resolveNode(attr.value);\n          resolvedAttributes[key] = value;\n        });\n        return resolvedAttributes;\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const result = resolveNode(node.test) ? node.consequent : node.alternate;\n        return resolveNode(result);\n      }\n      if (node.type === \"ArrayExpression\") {\n        return node.elements.map((ele) => resolveNode(ele));\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(expressionContext, node.left, node.right);\n            } else {\n              newValue = operation(\n                expressionContext,\n                resolveNode(node.left),\n                resolveNode(node.right)\n              );\n            }\n          } else {\n            newValue = operation(resolveNode(node.left), resolveNode(node.right));\n          }\n          if (node.left.type === \"ModelRef\") {\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n  };\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n  var EMPTY_NODE = {\n    type: \"empty\"\n    /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(\n        value,\n        \"view\"\n        /* View */\n      );\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\", options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\",\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm5.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" || node.type === \"view\") {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\") {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm4.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\"\n        /* Empty */\n      };\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.type === \"multi-node\" && partiallyResolvedParent.type === \"value\";\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\") {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      resolvedAST.parent = partiallyResolvedParent;\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" && !childNode.override) {\n              const arr = (0, import_timm4.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm4.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm4.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\") {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        resolvedAST.values = newValues;\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        onTemplatePluginCreated: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n      this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n        this.templatePlugin = templatePlugin;\n      });\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n  };\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\", {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\",\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\") {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\") {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" || node.type === \"asset\") && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\",\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\") {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    }\n  };\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\") {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" || node.type === \"unknown\") {\n          return null;\n        }\n        if (node.type === \"value\" || node.type === \"asset\" || node.type === \"view\") {\n          let propsToSkip;\n          if (node.type === \"asset\" || node.type === \"view\") {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" && (node.parent?.parent?.type === \"asset\" || node.parent?.parent?.type === \"view\") && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\") {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\",\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\") {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\",\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\",\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\") {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\") {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\", options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\",\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\") {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\", options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer2.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\") {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm9.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(viewController) {\n      viewController.hooks.view.tap(\"asset-transform\", (view) => {\n        this.stateStore.clear();\n        view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n          let lastUpdatedNode;\n          const updateState = (node) => {\n            lastUpdatedNode = node;\n            view.update(/* @__PURE__ */ new Set());\n          };\n          const getStore = (node, stepKey) => {\n            let store;\n            const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n            const storedState = this.stateStore.get(node);\n            if (storedState) {\n              store = storedState;\n              store.removeKey(countKey);\n            } else {\n              store = new LocalStateStore(() => {\n                updateState(node);\n              });\n              this.stateStore.set(node, store);\n            }\n            return {\n              useSharedState: (key) => {\n                return store.useSharedState(key);\n              },\n              useLocalState: (initialState) => {\n                return store.getLocalStateFunction(\n                  stepKey,\n                  countKey\n                )(initialState);\n              }\n            };\n          };\n          resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n            if (node && (node.type === \"asset\" || node.type === \"view\")) {\n              const transform = this.registry.get(node.value);\n              if (transform?.beforeResolve) {\n                const store = getStore(\n                  options.node ?? node,\n                  this.beforeResolveSymbol\n                );\n                return transform.beforeResolve(node, options, store);\n              }\n            }\n            return node;\n          });\n          resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n            lastUpdatedNode = void 0;\n          });\n          resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n            if (!skip || !lastUpdatedNode) {\n              return skip;\n            }\n            const isParentOfUpdated = findUp(lastUpdatedNode, node);\n            const isChildOfUpdated = findUp(node, lastUpdatedNode);\n            return !isParentOfUpdated && !isChildOfUpdated;\n          });\n          resolver.hooks.afterResolve.tap(\n            \"asset-transform\",\n            (value, node, options) => {\n              if (node.type !== \"asset\" && node.type !== \"view\") {\n                return value;\n              }\n              const originalNode = resolver.getSourceNode(node);\n              if (!originalNode) {\n                return value;\n              }\n              const transform = this.registry.get(value);\n              if (transform?.resolve) {\n                const store = getStore(originalNode, this.resolveSymbol);\n                return transform?.resolve(value, options, store);\n              }\n              return value;\n            }\n          );\n        });\n      });\n    }\n  };\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        /** Do any processing before the `View` instance is created */\n        resolveView: new SyncWaterfallHook(),\n        // The hook right before the View starts resolving. Attach anything custom here\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.hooks.view.call(view);\n      view.update();\n    }\n  };\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n  var DefaultViewPlugin = class {\n    constructor() {\n      this.name = \"default-view-plugin\";\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (viewController) => {\n        viewController.hooks.view.tap(this.name, (view) => {\n          const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n          new AssetPlugin().apply(view);\n          new SwitchPlugin(pluginOptions).apply(view);\n          new ApplicabilityPlugin().apply(view);\n          new StringResolverPlugin().apply(view);\n          const templatePlugin = new TemplatePlugin(pluginOptions);\n          templatePlugin.apply(view);\n          view.hooks.onTemplatePluginCreated.call(templatePlugin);\n          new MultiNodePlugin().apply(view);\n        });\n      });\n    }\n  };\n  var PLAYER_VERSION = typeof __VERSION__ !== \"undefined\" ? __VERSION__ : \"__VERSION__\";\n  var COMMIT = typeof __GIT_COMMIT__ !== \"undefined\" ? __GIT_COMMIT__ : \"__GIT_COMMIT__\";\n  var _Player = class _Player2 {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n        flowController: new SyncHook(),\n        /** The hook that updates/handles views */\n        viewController: new SyncHook(),\n        /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n        view: new SyncHook(),\n        /** Called when an expression evaluator was created */\n        expressionEvaluator: new SyncHook(),\n        /** The hook that creates and manages data */\n        dataController: new SyncHook(),\n        /** Called after the schema is created for a flow */\n        schema: new SyncHook(),\n        /** Manages validations (schema and x-field ) */\n        validationController: new SyncHook(),\n        /** Manages parsing binding */\n        bindingParser: new SyncHook(),\n        /** A that's called for state changes in the flow execution */\n        state: new SyncHook(),\n        /** A hook to access the current flow */\n        onStart: new SyncHook(),\n        /** A hook for when the flow ends either in success or failure */\n        onEnd: new SyncHook(),\n        /** Mutate the Content flow before starting */\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        new DefaultViewPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player2.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player2.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm8.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm8.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm8.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            flowController?.transition(\n              String(expressionEvaluator?.evaluate(exp))\n            );\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/beacon.ts\n  var import_timm10 = __toESM(require_timm());\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/symbols.ts\n  var BeaconPluginSymbol = Symbol.for(\"BeaconPlugin\");\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/beacon/core/src/beacon.ts\n  var _BeaconPlugin = class _BeaconPlugin {\n    constructor(options) {\n      this.name = \"Beacon\";\n      this.symbol = _BeaconPlugin.Symbol;\n      this.beaconContext = {\n        view: void 0\n      };\n      this.hooks = {\n        buildBeacon: new AsyncSeriesWaterfallHook(),\n        cancelBeacon: new SyncBailHook(),\n        publishBeacon: new SyncHook()\n      };\n      if (options?.plugins) {\n        options.plugins.forEach((plugin) => {\n          plugin.apply(this);\n        });\n      }\n      if (options?.callback) {\n        this.hooks.publishBeacon.tap(\"BeaconCallback\", (beacon) => {\n          if (options.callback) {\n            options.callback(beacon);\n          }\n        });\n      }\n    }\n    apply(player) {\n      this.player = player;\n      this.logger = player.logger;\n      player.hooks.state.tap(this.name, (playerState) => {\n        if (playerState.status === \"in-progress\") {\n          this.resolveDataRefs = (data) => resolveDataRefs(data, {\n            model: playerState.controllers.data,\n            evaluate: playerState.controllers.expression.evaluate\n          });\n        }\n      });\n      player.hooks.viewController.tap(this.name, (vc) => {\n        this.beaconContext = {\n          view: void 0\n        };\n        vc.hooks.view.tap(this.name, (view) => {\n          let beaconedView = false;\n          view.hooks.parser.tap(this.name, (parser) => {\n            parser.hooks.onCreateASTNode.tap(this.name, (obj) => {\n              if (obj?.type !== \"asset\" && obj?.type !== \"view\")\n                return void 0;\n              const propertiesToSkip = obj.plugins?.stringResolver?.propertiesToSkip ?? [];\n              if (propertiesToSkip.includes(\"beacon\"))\n                return void 0;\n              obj.plugins = (0, import_timm10.setIn)(\n                obj.plugins ?? {},\n                [\"stringResolver\", \"propertiesToSkip\"],\n                [\"beacon\", ...propertiesToSkip]\n              );\n              return obj;\n            });\n          });\n          view.hooks.onUpdate.tap(this.name, (viewUpdate) => {\n            this.beaconContext = {\n              view: viewUpdate\n            };\n            if (!beaconedView) {\n              this.beacon({\n                action: \"viewed\",\n                element: \"view\",\n                asset: viewUpdate,\n                view: viewUpdate\n              });\n              beaconedView = true;\n            }\n          });\n        });\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        evaluator.addExpressionFunction(\"beacon\", (_ctx, action, data) => {\n          const view = this.beaconContext.view || {};\n          this.beacon({\n            action,\n            data,\n            element: \"view\",\n            asset: view,\n            view\n          });\n        });\n      });\n    }\n    beacon(event) {\n      const { action, element, asset, view } = event;\n      const { view: currentView } = this.beaconContext;\n      setTimeout(async () => {\n        const unresolvedData = event?.data || event.asset?.metaData?.beacon;\n        const data = this.resolveDataRefs?.(unresolvedData) ?? unresolvedData;\n        const defaultBeacon = {\n          action,\n          element,\n          data,\n          assetId: asset?.id,\n          viewId: currentView?.id\n        };\n        const state = this.player?.getState();\n        const hookArgs = {\n          ...event,\n          data,\n          state,\n          view: view ?? currentView,\n          logger: this.logger\n        };\n        let beacon = await this.hooks.buildBeacon.call(defaultBeacon, hookArgs) || defaultBeacon;\n        if (beacon !== defaultBeacon && this.resolveDataRefs) {\n          beacon = this.resolveDataRefs(beacon);\n        }\n        const shouldCancel = this.hooks.cancelBeacon.call(hookArgs) || false;\n        if (!shouldCancel) {\n          this.logger?.debug(\"Sending beacon event\", beacon);\n          this.hooks.publishBeacon.call(beacon);\n        }\n      }, 0);\n    }\n  };\n  _BeaconPlugin.Symbol = BeaconPluginSymbol;\n  var BeaconPlugin = _BeaconPlugin;\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","import type { BindingLike, BindingInstance } from \"./binding\";\n\n/** Check if the parameter representing a binding is already of the Binding class */\nexport function isBinding(binding: BindingLike): binding is BindingInstance {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\n\n/** Convert the string to an int if you can, otherwise just return the original string */\nexport function maybeConvertToNum(i: string): string | number {\n  const asInt = parseInt(i, 10);\n\n  if (isNaN(asInt)) {\n    return i;\n  }\n\n  return asInt;\n}\n\n/**\n * utility to convert binding into binding segments.\n */\nexport function getBindingSegments(\n  binding: BindingLike,\n): Array<string | number> {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n\n  return binding.asArray();\n}\n\n/** Like _.findIndex, but ignores types */\nexport function findInArray<T extends Record<string | number, object>>(\n  array: Array<T>,\n  key: string | number,\n  value: T,\n): number | undefined {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      // Intentional double-equals because we want '4' to be coerced to 4\n      // eslint-disable-next-line eqeqeq\n      return obj[key] == value;\n    }\n\n    return false;\n  });\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { BindingLike, BindingFactory } from \"../binding\";\nimport { BindingInstance, isBinding } from \"../binding\";\nimport { NOOP_MODEL } from \"./noop-model\";\n\nexport const ROOT_BINDING = new BindingInstance([]);\nexport type BatchSetTransaction = [BindingInstance, any][];\n\nexport type Updates = Array<{\n  /** The updated binding */\n  binding: BindingInstance;\n\n  /** The old value */\n  oldValue: any;\n\n  /** The new value */\n  newValue: any;\n\n  /** Force the Update to be included even if no data changed */\n  force?: boolean;\n}>;\n\n/** Options to use when getting or setting data */\nexport interface DataModelOptions {\n  /**\n   * The data (either to set or get) should represent a formatted value\n   * For setting data, the data will be de-formatted before continuing in the pipeline\n   * For getting data, the data will be formatted before returning\n   */\n  formatted?: boolean;\n\n  /**\n   * By default, fetching data will ignore any invalid data.\n   * You can choose to grab the queued invalid data if you'd like\n   * This is usually the case for user-inputs\n   */\n  includeInvalid?: boolean;\n\n  /**\n   * A flag to set to ignore any default value in the schema, and just use the raw value\n   */\n  ignoreDefaultValue?: boolean;\n\n  /**\n   * A flag to indicate that this update should happen silently\n   */\n  silent?: boolean;\n\n  /** Other context associated with this request */\n  context?: {\n    /** The data model to use when getting other data from the context of this request */\n    model: DataModelWithParser;\n  };\n}\n\nexport interface DataModelWithParser<Options = DataModelOptions> {\n  get(binding: BindingLike, options?: Options): any;\n  set(transaction: [BindingLike, any][], options?: Options): Updates;\n  delete(binding: BindingLike, options?: Options): void;\n}\n\nexport interface DataModelImpl<Options = DataModelOptions> {\n  get(binding: BindingInstance, options?: Options): any;\n  set(transaction: BatchSetTransaction, options?: Options): Updates;\n  delete(binding: BindingInstance, options?: Options): void;\n}\n\nexport interface DataModelMiddleware {\n  /** The name of the middleware */\n  name?: string;\n\n  set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates;\n\n  get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): any;\n\n  delete?(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): void;\n\n  reset?(): void;\n}\n\n/** Wrap the inputs of the DataModel with calls to parse raw binding inputs */\nexport function withParser<Options = unknown>(\n  model: DataModelImpl<Options>,\n  parseBinding: BindingFactory,\n): DataModelWithParser<Options> {\n  /** Parse something into a binding if it requires it */\n  function maybeParse(\n    binding: BindingLike,\n    readOnly: boolean,\n  ): BindingInstance {\n    const parsed = isBinding(binding)\n      ? binding\n      : parseBinding(binding, {\n          get: model.get,\n          set: model.set,\n          readOnly,\n        });\n\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n\n    return parsed;\n  }\n\n  return {\n    get(binding, options?: Options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options?: Options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options,\n      );\n    },\n    delete(binding, options?: Options) {\n      return model.delete(maybeParse(binding, false), options);\n    },\n  };\n}\n\n/** Wrap a middleware instance in a DataModel compliant API */\nexport function toModel(\n  middleware: DataModelMiddleware,\n  defaultOptions?: DataModelOptions,\n  next?: DataModelImpl,\n): DataModelImpl {\n  if (!next) {\n    return middleware as DataModelImpl;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction: BatchSetTransaction, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n\n      return next?.delete(binding, resolvedOptions);\n    },\n  };\n}\n\nexport type DataPipeline = Array<DataModelMiddleware | DataModelImpl>;\n\n/**\n * Given a set of steps in a pipeline, create the effective data-model\n */\nexport function constructModelForPipeline(\n  pipeline: DataPipeline,\n): DataModelImpl {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n\n  /** Default and propagate the options into the nested calls */\n  function createModelWithOptions(options?: DataModelOptions) {\n    const model: DataModelImpl =\n      pipeline.reduce<DataModelImpl | undefined>(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        undefined,\n      ) ?? NOOP_MODEL;\n\n    return model;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    },\n  };\n}\n\n/** A DataModel that manages middleware data handlers  */\nexport class PipelinedDataModel implements DataModelImpl {\n  private pipeline: DataPipeline;\n  private effectiveDataModel: DataModelImpl;\n\n  public readonly hooks = {\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n  };\n\n  constructor(pipeline: DataPipeline = []) {\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public setMiddleware(handlers: DataPipeline) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n\n  public addMiddleware(handler: DataModelMiddleware) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n\n    this.set([[ROOT_BINDING, model]]);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options,\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n\n  public get(binding: BindingInstance, options?: DataModelOptions): any {\n    return this.effectiveDataModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: DataModelOptions): void {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n}\n","import type { DataModelWithParser } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nexport type ExpressionObjectType = {\n  /** The expression to eval */\n  value: BasicExpressionTypes;\n};\n\nexport type ExpressionLiteralType =\n  | string\n  | number\n  | boolean\n  | undefined\n  | null;\n\nexport type BasicExpressionTypes =\n  | ExpressionLiteralType\n  | ExpressionObjectType\n  | Array<ExpressionLiteralType | ExpressionObjectType>;\n\nexport type ExpressionType = BasicExpressionTypes | ExpressionNode;\n\nexport interface OperatorProcessingOptions {\n  /**\n   * When set to a falsy value, the arguments passed to the handler will be raw AST Nodes\n   * This enables lazy evaluation of arguments\n   */\n  resolveParams: boolean;\n}\n\nexport type BinaryOperatorBasic = (left: any, right: any) => unknown;\nexport type BinaryOperatorAdvanced = OperatorProcessingOptions &\n  ((ctx: ExpressionContext, left: any, right: any) => unknown);\n\nexport type BinaryOperator = BinaryOperatorAdvanced | BinaryOperatorBasic;\n\nexport type UnaryOperator =\n  | ((arg: any) => unknown)\n  | (((ctx: ExpressionContext, arg: any) => unknown) &\n      OperatorProcessingOptions);\n\nexport interface ExpressionContext {\n  /** A means of executing an expression */\n  evaluate: (expr: ExpressionType) => unknown;\n\n  /** The data model that expression handlers can use when fetching data */\n  model: DataModelWithParser;\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport type ExpressionHandler<\n  T extends readonly unknown[] = unknown[],\n  R = void,\n> = ((context: ExpressionContext, ...args: T) => R) &\n  Partial<OperatorProcessingOptions>;\n\nexport const ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n\n/** Checks if the input is an already processed Expression node */\nexport function isExpressionNode(x: any): x is ExpressionNode {\n  return (\n    typeof x === \"object\" &&\n    x !== null &&\n    !Array.isArray(x) &&\n    x.__id === ExpNodeOpaqueIdentifier\n  );\n}\n\nexport interface NodePosition {\n  /** The character location */\n  character: number;\n}\n\nexport interface NodeLocation {\n  // We only care about the character offset, not the line/column for now\n  // But making these objects allows us to add more (like line number) later\n\n  /** The start of the node */\n  start: NodePosition;\n\n  /** The end of the node */\n  end: NodePosition;\n}\n\nexport interface BaseNode<T> {\n  /** The thing to discriminate the AST type on */\n  type: T;\n\n  /** How to tell this apart from other objects */\n  __id: typeof ExpNodeOpaqueIdentifier;\n\n  /** The location of the node in the source expression string */\n  location?: NodeLocation;\n\n  /**\n   * The error that occurred while parsing this node\n   * This is only set if the parsing mode is set to non-strict\n   */\n  error?: Error;\n}\n\n/** A helper interface for nodes that container left and right children */\nexport interface DirectionalNode {\n  /** The left node. Often for the left hand side of an expression */\n  left: ExpressionNode;\n\n  /** The right child. Often for the right hand side of an expression */\n  right: ExpressionNode;\n}\n\nexport interface LiteralNode extends BaseNode<\"Literal\"> {\n  /** A node that holds a literal value */\n  value: string | number;\n\n  /** The unprocessed value */\n  raw?: any;\n}\n\nexport interface BinaryNode\n  extends BaseNode<\"BinaryExpression\">,\n    DirectionalNode {\n  /** The operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface LogicalNode\n  extends BaseNode<\"LogicalExpression\">,\n    DirectionalNode {\n  /** The logical operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface UnaryNode extends BaseNode<\"UnaryExpression\"> {\n  /** The operation to perform on the node */\n  operator: string;\n\n  /** The single argument that the operation should be performed on */\n  argument: ExpressionNode;\n}\n\nexport type ThisNode = BaseNode<\"ThisExpression\">;\n\nexport interface ModelRefNode extends BaseNode<\"ModelRef\"> {\n  /** The binding that the model reference points to */\n  ref: string;\n}\n\nexport interface ObjectNode extends BaseNode<\"Object\"> {\n  /**  */\n  attributes: Array<{\n    /** The property name of the object */\n    key: ExpressionNode;\n\n    /** the associated value */\n    value: ExpressionNode;\n  }>;\n}\n\nexport interface MemberExpressionNode extends BaseNode<\"MemberExpression\"> {\n  /** The object to be introspected */\n  object: ExpressionNode;\n\n  /** If the property uses . or open-bracket */\n  computed: boolean;\n\n  /** The property to access on the object */\n  property: ExpressionNode;\n}\n\nexport interface ConditionalExpressionNode\n  extends BaseNode<\"ConditionalExpression\"> {\n  /** The test for the ternary */\n  test: ExpressionNode;\n\n  /** The truthy case for the ternary */\n  consequent: ExpressionNode;\n\n  /** The falsy case for the ternary */\n  alternate: ExpressionNode;\n}\n\nexport interface CompoundNode extends BaseNode<\"Compound\"> {\n  /** The contents of the compound expression */\n  body: ExpressionNode[];\n}\n\nexport interface CallExpressionNode extends BaseNode<\"CallExpression\"> {\n  /** The arguments to the function */\n  args: ExpressionNode[];\n\n  /** The function name */\n  callTarget: IdentifierNode;\n}\n\nexport interface ArrayExpressionNode extends BaseNode<\"ArrayExpression\"> {\n  /** The items in an array */\n  elements: ExpressionNode[];\n}\n\nexport interface IdentifierNode extends BaseNode<\"Identifier\"> {\n  /** The variable name */\n  name: string;\n}\n\nexport type AssignmentNode = BaseNode<\"Assignment\"> & DirectionalNode;\n\nexport interface ModificationNode\n  extends BaseNode<\"Modification\">,\n    DirectionalNode {\n  /** The operator for the modification */\n  operator: string;\n}\n\nexport type ExpressionNode =\n  | LiteralNode\n  | BinaryNode\n  | LogicalNode\n  | UnaryNode\n  | ThisNode\n  | ModelRefNode\n  | MemberExpressionNode\n  | ConditionalExpressionNode\n  | CompoundNode\n  | CallExpressionNode\n  | ArrayExpressionNode\n  | IdentifierNode\n  | AssignmentNode\n  | ModificationNode\n  | ObjectNode;\n\nexport type ExpressionNodeType = ExpressionNode[\"type\"];\n\nexport interface ErrorWithLocation extends Error {\n  /** The place in the string where the error occurs */\n  index: number;\n\n  /** a helpful description */\n  description: string;\n}\n","/* eslint @typescript-eslint/no-use-before-define: 0 */\n/**\n * An expression to AST parser based on JSEP: http://jsep.from.so/\n */\nimport type {\n  ErrorWithLocation,\n  ExpressionNode,\n  ExpressionNodeType,\n  NodeLocation,\n} from \"./types\";\nimport { ExpNodeOpaqueIdentifier } from \"./types\";\n\nconst PERIOD_CODE = 46; // '.'\nconst COMMA_CODE = 44; // ','\nconst SQUOTE_CODE = 39; // Single quote\nconst DQUOTE_CODE = 34; // Double quotes\nconst OPAREN_CODE = 40; // (\nconst CPAREN_CODE = 41; // )\nconst OBRACK_CODE = 91; // [\nconst CBRACK_CODE = 93; // ]\nconst QUMARK_CODE = 63; // ?\nconst SEMCOL_CODE = 59; // ;\nconst COLON_CODE = 58; // :\nconst OCURL_CODE = 123; // {\nconst CCURL_CODE = 125; // }\n\n// Operations\n// ----------\n\n// Set `t` to `true` to save space (when minified, not gzipped)\nconst t = true;\n\n// Use a quickly-accessible map to store all of the unary operators\n// Values are set to `true` (it really doesn't matter)\nconst unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n\n// Also use a map for the binary operations but set their values to their\n// binary precedence for quick reference:\n// see [Operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\nconst binaryOps: Record<string, number> = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14,\n};\n\n/** Wrap the message and index in an error and throw it */\nfunction throwError(message: string, index: number): ErrorWithLocation {\n  const err = new Error(`${message} at character ${index}`);\n\n  (err as ErrorWithLocation).index = index;\n  (err as ErrorWithLocation).description = message;\n\n  throw err;\n}\n\n/** Create a new location marker that spans both nodes */\nfunction createSpanningLocation(start?: NodeLocation, end?: NodeLocation) {\n  if (!start || !end) {\n    return;\n  }\n\n  return {\n    start: start.start,\n    end: end.end,\n  };\n}\n\n/** Get return the longest key length of any object */\nfunction getMaxKeyLen(obj: object): number {\n  let maxLen = 0;\n\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n\n  return maxLen;\n}\n\nconst maxUnopLen = getMaxKeyLen(unaryOps);\nconst maxBinopLen = getMaxKeyLen(binaryOps);\n\n// Literals\n// ----------\n// Store the values to return for the various literals we may encounter\nconst literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined,\n} as const;\n\n// Except for `this`, which is special. This could be changed to something like `'self'` as well\nconst thisStr = \"this\";\n\n/** Returns the precedence of a binary operator or `0` if it isn't a binary operator */\nfunction binaryPrecedence(opVal: string): number {\n  return binaryOps[opVal] || 0;\n}\n\n/**\n * Utility function (gets called from multiple places)\n * Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n */\nfunction createBinaryExpression(\n  operator: string | boolean,\n  left: string,\n  right: string,\n  location?: NodeLocation,\n) {\n  let type: ExpressionNodeType;\n\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (\n    operator === \"+=\" ||\n    operator === \"-=\" ||\n    operator === \"&=\" ||\n    operator === \"|=\"\n  ) {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location,\n  };\n}\n\n/** `ch` is a character code in the next three functions */\nfunction isDecimalDigit(ch: number) {\n  return ch >= 48 && ch <= 57; // 0...9\n}\n\n/** Check if the char is the character code for the start of an identifier */\nfunction isIdentifierStart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122)\n  ); // A...z\n}\n\n/** Check if the char code is still a valid identifier portion */\nfunction isIdentifierPart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122) || // A...z\n    (ch >= 48 && ch <= 57)\n  ); // 0...9\n}\n\n/** Check if the 2 chars are the start of a model reference */\nfunction isModelRefStart(ch0: number, ch1: number) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE; // '{{'\n}\n\n/** Parse out an expression from the string */\nexport function parseExpression(\n  expr: string,\n  options?: {\n    /** If true (the default), will throw on invalid expressions */\n    strict?: boolean;\n  },\n): ExpressionNode {\n  const strictMode = options?.strict ?? true;\n\n  // `index` stores the character number we are currently at while `length` is a constant\n  // All of the gobbles below will modify `index` as we move along\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n\n  let index = 0;\n\n  /** Create a location object  */\n  const getLocation = (startChar: number) => {\n    return {\n      start: {\n        character: startChar,\n      },\n      end: {\n        character: index,\n      },\n    };\n  };\n\n  /** Grab the char at the index from the expression */\n  function exprI(i: number) {\n    return charAtFunc.call(expr, i);\n  }\n\n  /** Grab the unicode char at the index in the expression */\n  function exprICode(i: number) {\n    return charCodeAtFunc.call(expr, i);\n  }\n\n  /**\n   * Gobble an object and store the object in an attributes array\n   */\n  function gobbleObjects() {\n    const attributes: Array<{\n      /** The property name of the object */\n      key: any;\n\n      /** the associated value */\n      value: any;\n    }> = [];\n    let closed = false;\n\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n\n    // get rid of OCURL_CODE\n    ++index;\n\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      // check for end\n      if (chCode === CCURL_CODE) {\n        // if we are at the end but a key was defined\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        // check for key\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n\n        // get key\n        key = gobbleStringLiteral();\n        // remove spaces\n        gobbleSpaces();\n        // remove colon\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n\n        shouldDefineKey = true;\n        key = undefined;\n        value = undefined;\n      }\n\n      chCode = exprICode(index);\n    }\n\n    // throw error if object is not closed\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Push `index` up to the next non-space character\n   */\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    // Space or tab\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n\n  /**\n   * The main parsing function. Much of this code is dedicated to ternary expressions\n   */\n  function gobbleExpression(): ExpressionNode {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      // Ternary expression: test ? consequent : alternate\n      index++;\n      const consequent = gobbleExpression();\n\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n\n      gobbleSpaces();\n\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      throwError(\"Expected :\", index);\n    }\n\n    return test;\n  }\n\n  /**\n   * Search for the operation portion of the string (e.g. `+`, `===`)\n   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n   * and move down from 3 to 2 to 1 character until a matching binary operation is found\n   * then, return that binary operation\n   */\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * This function is responsible for gobbling an individual expression,\n   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n   */\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n\n    // First, try to get the leftmost thing\n    // Then, check to see if there's a binary operator operating on that leftmost thing\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n\n    // If there wasn't a binary operator, just return the leftmost node\n    if (!biop) {\n      return left;\n    }\n\n    // Otherwise, we need to start a stack to properly place the binary operations in their\n    // precedence structure\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n\n    const stack = [left, biopInfo, right];\n\n    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n\n      if (prec === 0) {\n        break;\n      }\n\n      biopInfo = { value: biop, prec };\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location),\n        );\n        stack.push(node);\n      }\n\n      node = gobbleToken();\n\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n\n    i = stack.length - 1;\n    node = stack[i];\n\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location),\n      );\n      i -= 2;\n    }\n\n    return node;\n  }\n\n  /**\n   * An individual part of a binary expression:\n   * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n   */\n  function gobbleToken(): any {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      // Char code 46 is a dot `.` which can start off a numeric literal\n      return gobbleNumericLiteral();\n    }\n\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      // Single or double quotes\n      return gobbleStringLiteral();\n    }\n\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      // Open parenthesis\n      // `foo`, `bar.baz`\n      return gobbleVariable();\n    }\n\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n\n    // not a double bracket: {{}} but if its a single {}\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n   * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n   */\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n\n    if (exprICode(index) === PERIOD_CODE) {\n      // Can start with a decimal marker\n      num += exprI(index++);\n\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      // Exponent marker\n      num += exprI(index++);\n      ch = exprI(index);\n\n      if (ch === \"+\" || ch === \"-\") {\n        // Exponent sign\n        num += exprI(index++);\n      }\n\n      while (isDecimalDigit(exprICode(index))) {\n        // Exponent itself\n        num += exprI(index++);\n      }\n\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n\n    const chCode = exprICode(index);\n    // Check to make sure this isn't a variable name that start with a number (123abc)\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index,\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Parses a string literal, staring with single or double quotes with basic support for escape codes\n   * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n   */\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n\n    while (index < length) {\n      let ch = exprI(index++);\n\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n\n      // Check for all of the common escape codes\n      ch = exprI(index++);\n\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\u000B\";\n          break;\n        default:\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Model refs are bindings wrapped in 2 sets of double curlys\n   * e.g. {{foo.bar.ref}}\n   */\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n\n    index += 2; // Skip the {{\n    while (index < length) {\n      const ch = exprI(index++);\n\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Gobbles only identifiers\n   * e.g.: `foo`, `_value`, `$x1`\n   * Also, this function checks if that identifier is a literal:\n   * (e.g. `true`, `false`, `null`) or `this`\n   */\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n\n    const identifier = expr.slice(start, index);\n\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: (literals as any)[identifier],\n        raw: identifier,\n        location: getLocation(start),\n      };\n    }\n\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start),\n      };\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start),\n    };\n  }\n\n  /**\n   * Gobbles a list of arguments within the context of a function call\n   * or array literal. This function also assumes that the opening character\n   * `(` or `[` has already been gobbled, and gobbles expressions and commas\n   * until the terminator character `)` or `]` is encountered.\n   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n   */\n  function gobbleArguments(termination: number) {\n    const args = [];\n    let charIndex;\n    let node;\n\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n\n      if (charIndex === termination) {\n        // Done parsing\n        index++;\n        break;\n      }\n\n      if (charIndex === COMMA_CODE) {\n        // Between expressions\n        index++;\n        continue;\n      }\n\n      node = gobbleExpression();\n\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n\n      args.push(node);\n    }\n\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n\n    return args;\n  }\n\n  /**\n   * Gobble a non-literal variable name. This variable name may include properties\n   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n   * It also gobbles function calls:\n   * e.g. `Math.acos(obj.angle)`\n   */\n  function gobbleVariable(): ExpressionNode {\n    let charIndex = exprICode(index);\n    let node: any =\n      charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n\n    while (\n      charIndex === PERIOD_CODE ||\n      charIndex === OBRACK_CODE ||\n      charIndex === OPAREN_CODE\n    ) {\n      index++;\n\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex),\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex),\n        };\n\n        gobbleSpaces();\n        charIndex = exprICode(index);\n\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        // A function call is being made; gobble all the arguments\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n\n    return node;\n  }\n\n  /**\n   * Responsible for parsing a group of things within parentheses `()`\n   * This function assumes that it needs to gobble the opening parenthesis\n   * and then tries to gobble everything within that parenthesis, assuming\n   * that the next thing it should see is the close parenthesis. If not,\n   * then the expression probably doesn't have a `)`\n   */\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n\n    throwError(\"Unclosed (\", index);\n  }\n\n  /**\n   * Responsible for parsing Array literals `[1, 2, 3]`\n   * This function assumes that it needs to gobble the opening bracket\n   * and then tries to gobble the expressions as arguments.\n   */\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  const nodes = [];\n\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n\n      // Expressions can be separated by semicolons, commas, or just inferred without any\n      // separators\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++; // ignore separators\n        continue;\n      }\n\n      const node = gobbleExpression();\n\n      // Try to gobble each expression individually\n      if (node) {\n        nodes.push(node);\n        // If we weren't able to find a binary expression and are out of room, then\n        // the expression passed in probably has too much\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n\n    // If there's only one expression just try returning the expression\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e,\n    };\n  }\n}\n","import { isExpressionNode } from \"./types\";\nimport type {\n  ErrorWithLocation,\n  ExpressionHandler,\n  ExpressionNode,\n  ExpressionObjectType,\n  ExpressionType,\n  NodeLocation,\n  NodePosition,\n} from \"./types\";\n\n/** Generates a function by removing the first context argument */\nexport function withoutContext<T extends unknown[], Return>(\n  fn: (...args: T) => Return,\n): ExpressionHandler<T, Return> {\n  return (_context, ...args) => fn(...args);\n}\n\n/** Checks if the location includes the target position  */\nfunction isInRange(position: NodePosition, location: NodeLocation) {\n  return (\n    position.character >= location.start.character &&\n    position.character <= location.end.character\n  );\n}\n\n/** Get the node in the expression that's closest to the desired position */\nexport function findClosestNodeAtPosition(\n  node: ExpressionNode,\n  position: NodePosition,\n): ExpressionNode | undefined {\n  // This is just mapping recursively over nodes in the tree\n\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check =\n        findClosestNodeAtPosition(node.left, position) ??\n        findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n\n      break;\n    }\n\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n\n      break;\n    }\n\n    case \"MemberExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.object, position) ??\n        findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ConditionalExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.test, position) ??\n        findClosestNodeAtPosition(node.consequent, position) ??\n        findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements =\n        node.type === \"ArrayExpression\" ? node.elements : node.body;\n\n      const anyElements = elements.find((e) =>\n        findClosestNodeAtPosition(e, position),\n      );\n\n      if (anyElements) {\n        return anyElements;\n      }\n\n      break;\n    }\n\n    case \"Object\": {\n      const checkObject = node.attributes.reduce<ExpressionNode | undefined>(\n        (found, next) => {\n          return (\n            found ??\n            findClosestNodeAtPosition(next.key, position) ??\n            findClosestNodeAtPosition(next.value, position)\n          );\n        },\n        undefined,\n      );\n\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"CallExpression\": {\n      const anyArgs =\n        node.args.find((arg) => {\n          return findClosestNodeAtPosition(arg, position);\n        }) ?? findClosestNodeAtPosition(node.callTarget, position);\n\n      if (anyArgs) {\n        return anyArgs;\n      }\n\n      break;\n    }\n  }\n\n  // Lastly check for yourself\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\n\n/** Checks if the expression is a simple type */\nexport function isObjectExpression(\n  expr: ExpressionType,\n): expr is ExpressionObjectType {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n\n  return (\n    typeof expr === \"object\" &&\n    expr !== null &&\n    !Array.isArray(expr) &&\n    \"value\" in expr\n  );\n}\n\n/**\n * Type guard for ErrorWithLocation\n */\nexport function isErrorWithLocation(error: Error): error is ErrorWithLocation {\n  return (\n    (error as ErrorWithLocation).index !== undefined &&\n    (error as ErrorWithLocation).description !== undefined\n  );\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Schema as SchemaType, Formatting } from \"@player-ui/types\";\n\nimport type { BindingInstance } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { FormatDefinition, FormatOptions, FormatType } from \"./types\";\n\n/** A function that returns itself */\nconst identify = (val: any) => val;\n\n/** Expand the authored schema into a set of paths -> DataTypes */\nexport function parse(\n  schema: SchemaType.Schema,\n): Map<string, SchemaType.DataTypes> {\n  const expandedPaths = new Map<string, SchemaType.DataTypes>();\n\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n\n  const parseQueue: Array<{\n    /** The node to process */\n    node: SchemaType.Node;\n\n    /** The path in the data-model this node represents */\n    path: Array<string>;\n\n    /** A set of visited DataTypes to prevent loops */\n    visited: Set<string>;\n  }> = [{ node: schema.ROOT, path: [], visited: new Set() }];\n\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n\n    if (!next) {\n      break;\n    }\n\n    const { node, path, visited } = next;\n\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n\n      const nestedPathStr = nestedPath.join(\".\");\n\n      if (expandedPaths.has(nestedPathStr)) {\n        // We've gone in a loop. Panic\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\",\n        );\n      }\n\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`,\n        );\n      }\n\n      expandedPaths.set(nestedPathStr, type);\n\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: new Set([...visited, type.type]),\n        });\n      }\n    });\n  }\n\n  return expandedPaths;\n}\n\n/**\n * The Schema is the central hub for all data invariants, and metaData associated with the data-model itself\n * Outside of the types defined in the JSON payload, it doesn't manage or keep any state.\n * It simply servers as an orchestrator for other modules to interface w/ the schema.\n */\nexport class SchemaController implements ValidationProvider {\n  private formatters: Map<string, FormatType<any, any, FormatOptions>> =\n    new Map();\n\n  private types: Map<string, SchemaType.DataType<any>> = new Map();\n  public readonly schema: Map<string, SchemaType.DataTypes> = new Map();\n\n  private bindingSchemaNormalizedCache: Map<BindingInstance, string> =\n    new Map();\n\n  public readonly hooks = {\n    resolveTypeForBinding: new SyncWaterfallHook<\n      [SchemaType.DataTypes | undefined, BindingInstance]\n    >(),\n  };\n\n  constructor(schema?: SchemaType.Schema) {\n    this.schema = schema ? parse(schema) : new Map();\n  }\n\n  public addFormatters(fns: Array<FormatType<any, any, FormatOptions>>) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n\n  public addDataTypes(types: Array<SchemaType.DataType<any>>) {\n    types.forEach((t) => {\n      this.types.set(t.type, t);\n    });\n  }\n\n  getValidationsForBinding(\n    binding: BindingInstance,\n  ): Array<ValidationObject> | undefined {\n    const typeDef = this.getApparentType(binding);\n\n    if (!typeDef?.validation?.length) {\n      return undefined;\n    }\n\n    // Set the defaults for schema-level validations\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef,\n    }));\n  }\n\n  private normalizeBinding(binding: BindingInstance): string {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray\n      .map((p) => (typeof p === \"number\" ? \"[]\" : p))\n      .join(\".\");\n\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray\n        .map((p) => (p === item ? \"{}\" : p))\n        .join(\".\");\n\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n\n    return normalized;\n  }\n\n  public getType(binding: BindingInstance): SchemaType.DataTypes | undefined {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding,\n    );\n  }\n\n  public getApparentType(\n    binding: BindingInstance,\n  ): SchemaType.DataTypes | undefined {\n    const schemaType = this.getType(binding);\n\n    if (schemaType === undefined) {\n      return undefined;\n    }\n\n    const baseType = this.getTypeDefinition(schemaType?.type);\n\n    if (baseType === undefined) {\n      return schemaType;\n    }\n\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...(schemaType.validation ?? []),\n        ...(baseType.validation ?? []),\n      ],\n    };\n  }\n\n  public getTypeDefinition(dataType: string) {\n    return this.types.get(dataType);\n  }\n\n  public getFormatterForType(\n    formatReference: Formatting.Reference,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const { type: formatType, ...options } = formatReference;\n\n    const formatter = this.formatters.get(formatType);\n\n    if (!formatter) {\n      return;\n    }\n\n    return {\n      format: formatter.format\n        ? (val) => formatter.format?.(val, options)\n        : identify,\n      deformat: formatter.deformat\n        ? (val) => formatter.deformat?.(val, options)\n        : identify,\n    };\n  }\n\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  public getFormatter(\n    binding: BindingInstance,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const type = this.getApparentType(binding);\n\n    if (!type?.format) {\n      return undefined;\n    }\n\n    return this.getFormatterForType(type.format);\n  }\n}\n","import { setIn } from \"timm\";\nimport type { Expression } from \"@player-ui/types\";\nimport type { DataModelWithParser } from \"../data\";\n\nconst DOUBLE_OPEN_CURLY = \"{{\";\nconst DOUBLE_CLOSE_CURLY = \"}}\";\n\nexport interface Options {\n  /**\n   * The model to use when resolving refs\n   * Passing `false` will skip trying to resolve any direct model refs ({{foo}})\n   */\n  model: false | DataModelWithParser;\n\n  /**\n   * A function to evaluate an expression\n   * Passing `false` will skip trying to evaluate any expressions (@[ foo() ]@)\n   */\n  evaluate: false | ((exp: Expression) => any);\n\n  /**\n   * Optionaly resolve binding without formatting in case Type format applies\n   */\n  formatted?: boolean;\n}\n\n/** Search the given string for the coordinates of the next expression to resolve */\nexport function findNextExp(str: string) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n\n  if (expStart === -1) {\n    return undefined;\n  }\n\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n\n  while (count > 0 && workingString.length > 0) {\n    // Find the next open or close curly\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n\n    // We can't close anything, so there's no point in going on with life.\n    if (nextCloseCurly === -1) {\n      break;\n    }\n\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      // We've hit another open bracket before closing out the one we want\n      // Move everything over and bump our close count by 1\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length,\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      // We've hit another closing bracket\n      // Decrement our count and updates offsets\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length,\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n\n  return {\n    start: expStart,\n    end: offset,\n  };\n}\n\n/** Finds any subset of the string wrapped in @[]@ and evaluates it as an expression */\nexport function resolveExpressionsInString(\n  val: string,\n  { evaluate }: Options,\n): string {\n  if (!evaluate) {\n    return val;\n  }\n\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length,\n    );\n    const expValue = evaluate(expString);\n\n    // The string is only the expression, return the raw value.\n    if (\n      matchStart === 0 &&\n      expStrWithBrackets === val &&\n      typeof expValue !== \"string\"\n    ) {\n      return expValue;\n    }\n\n    newVal =\n      newVal.substr(0, matchStart) +\n      expValue +\n      newVal.substr(matchStart + expStrWithBrackets.length);\n    // remove the surrounding @[]@ to get the expression\n    match = newVal.match(expMatch);\n  }\n\n  return newVal;\n}\n\n/** Return a string with all data model references resolved */\nexport function resolveDataRefsInString(val: string, options: Options): string {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n\n  if (\n    !model ||\n    typeof workingString !== \"string\" ||\n    workingString.indexOf(DOUBLE_OPEN_CURLY) === -1\n  ) {\n    return workingString;\n  }\n\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n\n    if (!expLocation) {\n      return workingString;\n    }\n\n    const { start, end } = expLocation;\n\n    // Strip out the wrapping curlies from {{binding}} before passing to the model\n    const binding = workingString\n      .substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length,\n      )\n      .trim();\n\n    const evaledVal = model.get(binding, { formatted });\n\n    // Exit early if the string is _just_ a model lookup\n    // If the result is a string, we may need further processing for nested bindings\n    if (\n      start === 0 &&\n      end === workingString.length &&\n      typeof evaledVal !== \"string\"\n    ) {\n      return evaledVal;\n    }\n\n    workingString =\n      workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n\n  return workingString;\n}\n\n/** Traverse the thing and replace any model refs */\nfunction traverseObject<T>(val: T, options: Options): T {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val as string, options) as unknown as T;\n    }\n\n    case \"object\": {\n      if (!val) return val;\n      // TODO: Do we care refs in keys?\n      const keys = Object.keys(val);\n      let newVal = val;\n\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn(\n            newVal as any,\n            [key],\n            traverseObject((val as any)[key], options),\n          ) as any;\n        });\n      }\n\n      return newVal;\n    }\n\n    default:\n      return val;\n  }\n}\n\n/** Recursively resolve all model refs in whatever you pass in */\nexport function resolveDataRefs<T>(val: T, options: Options): T {\n  return traverseObject(val, options);\n}\n","import type { BindingInstance } from \"../binding\";\n\n/**\n * Remove a binding, and any children from from the map\n * If the binding is an array-item, then it will be spliced from the array and the others will be shifted down\n *\n * @param sourceMap - A map of bindings to values\n * @param binding - The binding to remove from the map\n */\nexport function removeBindingAndChildrenFromMap<T>(\n  sourceMap: Map<BindingInstance, T>,\n  binding: BindingInstance,\n): Map<BindingInstance, T> {\n  const targetMap = new Map(sourceMap);\n\n  const parentBinding = binding.parent();\n  const property = binding.key();\n\n  // Clear out any that are sub-bindings of this binding\n\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n\n  if (typeof property === \"number\") {\n    // Splice out this index from the rest\n\n    // Order matters here b/c we are shifting items in the array\n    // Start with the smallest index and work our way down\n    const bindingsToRewrite = Array.from(sourceMap.keys())\n      .filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n\n        return false;\n      })\n      .sort();\n\n    bindingsToRewrite.forEach((trackedBinding) => {\n      // If the tracked binding is a sub-binding of the parent binding, then we need to\n      // update the path to reflect the new index\n\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding) as T);\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n\n  return targetMap;\n}\n","import type { Node } from \"./types\";\n\n/**\n * Checks if there are templated values in the object\n *\n * @param obj - The Parsed Object to check to see if we have a template array type for\n * @param localKey - The key being checked\n */\nexport function hasTemplateValues(obj: any, localKey: string) {\n  return (\n    Object.hasOwnProperty.call(obj, \"template\") &&\n    Array.isArray(obj?.template) &&\n    obj.template.length &&\n    obj.template.find((tmpl: any) => tmpl.output === localKey)\n  );\n}\n\n/** Check to see if the string is a valid switch key */\nexport function hasSwitchKey(localKey: string) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\n\n/** Check to see if the string is a valid template key */\nexport function hasTemplateKey(localKey: string) {\n  return localKey === \"template\";\n}\n\n/** Get the ID of the Node if there is one */\nexport function getNodeID(node?: Node.Node | null): string | undefined {\n  if (!node) {\n    return;\n  }\n\n  if (\n    \"value\" in node &&\n    typeof node.value === \"object\" &&\n    typeof node.value?.id === \"string\"\n  ) {\n    return node.value.id;\n  }\n}\n","import type { BindingInstance, BindingLike } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ExpressionType } from \"../../expressions\";\nimport type { Resolve } from \"./types\";\n\n/** Check to see if and of the data-changes affect the given dependencies  */\nexport function caresAboutDataChanges(\n  dataChanges?: Set<BindingInstance>,\n  dependencies?: Set<BindingInstance>,\n) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n\n  return (\n    depArray.find(\n      (dep) =>\n        !!dataChangeArray.find(\n          (change) =>\n            change === dep || change.contains(dep) || dep.contains(change),\n        ),\n    ) !== undefined\n  );\n}\n\n/** Convert the options object for a resolver to one for a node */\nexport function toNodeResolveOptions(\n  resolverOptions: Resolve.ResolverOptions,\n): Resolve.NodeResolveOptions {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n\n        return value;\n      },\n      format: (bindingLike: BindingLike, value: any) =>\n        resolverOptions.format\n          ? resolverOptions.format(\n              isBinding(bindingLike)\n                ? bindingLike\n                : resolverOptions.parseBinding(bindingLike),\n              value,\n            )\n          : value,\n    },\n    evaluate: (exp: ExpressionType) =>\n      resolverOptions.evaluator.evaluate(exp, resolverOptions),\n  };\n}\n\n/**\n * helper function to flatten a potential nested array and combine with initial array\n */\nexport function unpackAndPush(item: any | any[], initial: any[]) {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i: any) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n","import { set } from \"timm\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type { Options } from \"./options\";\nimport type { Node } from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** Create a function that checks for a start/end sequence in a string */\nconst createPatternMatcher = (start: string, end: string) => {\n  return (testStr: string) => {\n    const startLocation = testStr.indexOf(start);\n\n    if (startLocation === -1) {\n      return false;\n    }\n\n    const endLocation = testStr.indexOf(end);\n\n    if (endLocation === -1) {\n      return false;\n    }\n\n    return startLocation < endLocation;\n  };\n};\n\nconst bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nconst expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n\n/** Check to see if a string contains a reference to dynamic content */\nfunction hasSomethingToResolve(str: string) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\n\n/** Resolve data refs in a string if necessary. */\nfunction resolveString(str: string, resolveOptions: Options) {\n  return hasSomethingToResolve(str)\n    ? resolveDataRefs(str, {\n        model: resolveOptions.data.model,\n        evaluate: resolveOptions.evaluate,\n      })\n    : str;\n}\n\n/** Recursively resolve all string references in an object or array */\nexport function resolveAllRefs(\n  node: any,\n  resolveOptions: Options,\n  propertiesToSkip: Set<string | number>,\n): any {\n  if (\n    node === null ||\n    node === undefined ||\n    (typeof node !== \"object\" && typeof node !== \"string\")\n  ) {\n    return node;\n  }\n\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n\n  let newNode = node;\n\n  Object.keys(node).forEach((key: string | number) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n\n    const val = node[key];\n\n    let newVal = val;\n\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n\n    if (newVal !== val) {\n      newNode = set(newNode, key as any, newVal);\n    }\n  });\n\n  return newNode;\n}\n\n/** Traverse up the node tree finding the first available 'path' */\nconst findBasePath = (\n  node: Node.Node,\n  resolver: Resolver,\n): Node.PathSegment[] => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return (\n      parentNode.children?.find((child) => child.value === original)?.path ?? []\n    );\n  }\n\n  if (parentNode.type !== NodeType.MultiNode) {\n    return [];\n  }\n\n  return findBasePath(parentNode, resolver);\n};\n\n/** A plugin that resolves all string references for each node */\nexport default class StringResolverPlugin implements ViewPlugin {\n  private propertiesToSkipCache: Map<string, Set<string>>;\n\n  constructor() {\n    this.propertiesToSkipCache = new Map();\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === NodeType.Empty || node.type === NodeType.Unknown) {\n        return null;\n      }\n\n      if (\n        node.type === NodeType.Value ||\n        node.type === NodeType.Asset ||\n        node.type === NodeType.View\n      ) {\n        /** Use specified properties to skip during string resolution, or default */\n        let propsToSkip: Set<string>;\n        if (node.type === NodeType.Asset || node.type === NodeType.View) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"],\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (\n          node.parent?.type === NodeType.MultiNode &&\n          (node.parent?.parent?.type === NodeType.Asset ||\n            node.parent?.parent?.type === NodeType.View) &&\n          node.parent.parent.value?.id &&\n          this.propertiesToSkipCache.has(node.parent.parent.value.id)\n        ) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id,\n          ) as Set<string>;\n        } else {\n          propsToSkip = new Set([\"exp\"]);\n        }\n\n        const nodePath = findBasePath(node, resolver);\n\n        /** If the path includes something that is supposed to be skipped, this node should be skipped too. */\n        if (\n          nodePath.length > 0 &&\n          nodePath.some((segment) => propsToSkip.has(segment.toString()))\n        ) {\n          return node.value;\n        }\n\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n\n      return value;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n}\n","const ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n\n/**\n * Replaces %num in message with the provided parameters in order.\n *\n * @param message - Parameterized string like \"This is a %1\"\n * @param params - Parameters to replace in message E.g. ['tax2021.amount']\n * @returns A message with the parameters replaced.\n */\nexport function replaceParams(\n  message: string,\n  params: Record<string, any>,\n): string {\n  return message\n    .slice()\n    .replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n","import type { Validation } from \"@player-ui/types\";\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { setIn } from \"timm\";\n\nimport type { BindingInstance, BindingFactory } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { DataModelWithParser, DataModelMiddleware } from \"../../data\";\nimport type { SchemaController } from \"../../schema\";\nimport type {\n  ErrorValidationResponse,\n  ValidationObject,\n  ValidationObjectWithHandler,\n  ValidatorContext,\n  ValidationProvider,\n  ValidationResponse,\n  WarningValidationResponse,\n  StrongOrWeakBinding,\n} from \"../../validator\";\nimport {\n  ValidationMiddleware,\n  ValidatorRegistry,\n  removeBindingAndChildrenFromMap,\n} from \"../../validator\";\nimport type { Logger } from \"../../logger\";\nimport { ProxyLogger } from \"../../logger\";\nimport type { Resolve, ViewInstance } from \"../../view\";\nimport { caresAboutDataChanges } from \"../../view\";\nimport { replaceParams } from \"../../utils\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type {\n  ExpressionEvaluatorOptions,\n  ExpressionType,\n} from \"../../expressions\";\nimport type { BindingTracker } from \"./binding-tracker\";\nimport { ValidationBindingTrackerViewPlugin } from \"./binding-tracker\";\n\nexport const SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nexport const VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n\nexport const VALIDATION_PROVIDER_NAME_SYMBOL: unique symbol = Symbol.for(\n  \"validation-provider-name\",\n);\n\nexport type ValidationObjectWithSource = ValidationObjectWithHandler & {\n  /** The name of the validation */\n  [VALIDATION_PROVIDER_NAME_SYMBOL]: string;\n};\n\ntype SimpleValidatorContext = Omit<\n  ValidatorContext,\n  \"validation\" | \"schemaType\"\n>;\n\ninterface BaseActiveValidation<T> {\n  /** The validation is being actively shown */\n  state: \"active\";\n\n  /** The validation response */\n  response: T;\n}\n\ntype ActiveWarning = BaseActiveValidation<WarningValidationResponse> & {\n  /** Warnings track if they can be dismissed automatically (by navigating) */\n  dismissable: boolean;\n};\ntype ActiveError = BaseActiveValidation<ErrorValidationResponse>;\n\n/**\n * warnings that keep track of their active state\n */\ntype StatefulWarning = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"warning\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** warnings start with no state, but can active or dismissed */\n      state: \"none\" | \"dismissed\";\n    }\n  | ActiveWarning\n);\n\n/** Errors that keep track of their state */\ntype StatefulError = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"error\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** Errors start with no state an can be activated */\n      state: \"none\";\n    }\n  | ActiveError\n);\n\nexport type StatefulValidationObject = StatefulWarning | StatefulError;\n\n/** Helper function to determin if the subset is within the containingSet */\nfunction isSubset<T>(subset: Set<T>, containingSet: Set<T>): boolean {\n  if (subset.size > containingSet.size) return false;\n  for (const entry of subset) if (!containingSet.has(entry)) return false;\n  return true;\n}\n\n/** Helper for initializing a validation object that tracks state */\nfunction createStatefulValidationObject(\n  obj: ValidationObjectWithSource,\n): StatefulValidationObject {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false,\n  };\n}\n\ntype ValidationRunner = (obj: ValidationObjectWithHandler) =>\n  | {\n      /** A validation message */\n      message: string;\n    }\n  | undefined;\n\n/** A class that manages validating bindings across phases */\nclass ValidatedBinding {\n  public currentPhase?: Validation.Trigger;\n  private applicableValidations: Array<StatefulValidationObject> = [];\n  private validationsByState: Record<\n    Validation.Trigger,\n    Array<StatefulValidationObject>\n  > = {\n    load: [],\n    change: [],\n    navigation: [],\n  };\n\n  public get allValidations(): Array<StatefulValidationObject> {\n    return Object.values(this.validationsByState).flat();\n  }\n\n  public weakBindings: Set<BindingInstance>;\n\n  private onDismiss?: () => void;\n\n  constructor(\n    possibleValidations: Array<ValidationObjectWithSource>,\n    onDismiss?: () => void,\n    log?: Logger,\n    weakBindings?: Set<BindingInstance>,\n  ) {\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? new Set();\n  }\n\n  private checkIfBlocking(statefulObj: StatefulValidationObject) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n\n    return false;\n  }\n\n  public getAll(): Array<ValidationResponse> {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj),\n        });\n      }\n\n      return all;\n    }, [] as Array<ValidationResponse>);\n  }\n\n  public get(): ValidationResponse | undefined {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid),\n      };\n    }\n  }\n\n  private runApplicableValidations(\n    runner: ValidationRunner,\n    canDismiss: boolean,\n    phase: Validation.Trigger,\n  ) {\n    // If the currentState is not load, skip those\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          // Don't rerun any dismissed warnings\n          return originalValue;\n        }\n\n        // treat all warnings the same and block it once (unless blocking is true)\n        const blocking =\n          originalValue.value.blocking ??\n          ((originalValue.value.severity === \"warning\" && \"once\") || true);\n\n        const obj = setIn(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking,\n        ) as StatefulValidationObject;\n\n        const isBlockingNavigation =\n          blocking === true || (blocking === \"once\" && !canDismiss);\n\n        if (\n          phase === \"navigation\" &&\n          obj.state === \"active\" &&\n          obj.value.blocking !== true\n        ) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj as ActiveWarning;\n            if (\n              warn.dismissable &&\n              warn.response.dismiss &&\n              (warn.response.blocking !== \"once\" || !warn.response.blocking)\n            ) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n\n              warn.dismissable = true;\n            }\n\n            return warn as StatefulValidationObject;\n          }\n        }\n\n        const response = runner(obj.value);\n\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable:\n            obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response\n            ? {\n                ...obj.value,\n                message: response.message ?? \"Something is broken\",\n                severity: obj.value.severity,\n                displayTarget: obj.value.displayTarget ?? \"field\",\n              }\n            : undefined,\n        } as StatefulValidationObject;\n\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          (newState.response as WarningValidationResponse).dismiss = () => {\n            (newState as StatefulWarning).state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n\n        return newState;\n      },\n    );\n  }\n\n  public update(\n    phase: Validation.Trigger,\n    canDismiss: boolean,\n    runner: ValidationRunner,\n  ) {\n    const newApplicableValidations: StatefulValidationObject[] = [];\n\n    if (phase === \"load\" && this.currentPhase !== undefined) {\n      // Tried to run the 'load' phase twice. Aborting\n      return;\n    }\n\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      // Already added all the types. No need to continue adding new validations\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      // The transition to the 'change' type can only come from a 'load' type\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change,\n      ];\n    } else if (\n      phase === \"navigation\" &&\n      (this.currentPhase === \"load\" || this.currentPhase === \"change\")\n    ) {\n      // Can transition to a nav state from a change or load\n\n      // if there is an non-blocking error that is active then remove the error from applicable validations so it can no longer be shown\n      // which is needed if there are additional warnings to become active for that binding after the error is shown\n      this.applicableValidations.forEach((element) => {\n        if (\n          !(\n            element.type === \"error\" &&\n            element.state === \"active\" &&\n            element.isBlockingNavigation === false\n          )\n        ) {\n          newApplicableValidations.push(element);\n        }\n      });\n\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...(this.currentPhase === \"load\" ? this.validationsByState.change : []),\n      ];\n      this.currentPhase = \"navigation\";\n    }\n\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n}\n\n/**\n * A controller for orchestrating validation within a running player\n *\n * The current validation flow is as follows:\n *\n *   - When a binding is first seen, gather all of the possible validations for it from the providers\n *     - Schema and Crossfield (view) are both providers of possible validations\n *     - Run all of the applicable validations for that binding for the `load` trigger\n *\n *   - When a change occurs, set the phase of the binding to `change`.\n *     - Run all of the `change` triggered validations for that binding.\n *\n *   - When a navigation event occurs, set the phase of the binding to `navigate`.\n *     - Run all `change` and `navigate` validations for each tracked binding.\n *     - For any warnings, also keep a state of `shown` or `dismissed`.\n *       - Set all non-dismissed warnings to `shown`.\n *       - Set all `shown` warnings to `dismissed`.\n *     - Allow navigation forward if there are no non-dismissed warnings and no valid errors.\n */\nexport class ValidationController implements BindingTracker {\n  public readonly hooks = {\n    /** A hook called to tap into the validator registry for adding more validators */\n    createValidatorRegistry: new SyncHook<[ValidatorRegistry]>(),\n\n    /** A callback/event when a new validation is added to the view */\n    onAddValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n    onRemoveValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    resolveValidationProviders: new SyncWaterfallHook<\n      [\n        Array<{\n          /** The name of the provider */\n          source: string;\n          /** The provider itself */\n          provider: ValidationProvider;\n        }>,\n      ],\n      {\n        /** The view this is triggered for  */\n        view?: ViewInstance;\n      }\n    >(),\n\n    /** A hook called when a binding is added to the tracker */\n    onTrackBinding: new SyncHook<[BindingInstance]>(),\n  };\n\n  private tracker: BindingTracker | undefined;\n  private validations = new Map<BindingInstance, ValidatedBinding>();\n  private validatorRegistry?: ValidatorRegistry;\n  private schema: SchemaController;\n\n  private providers:\n    | Array<{\n        /** The name of the provider */\n        source: string;\n        /** The provider itself */\n        provider: ValidationProvider;\n      }>\n    | undefined;\n\n  private viewValidationProvider?: ValidationProvider;\n  private options?: SimpleValidatorContext;\n  private weakBindingTracker = new Set<BindingInstance>();\n\n  constructor(schema: SchemaController, options?: SimpleValidatorContext) {\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n\n  setOptions(options: SimpleValidatorContext) {\n    this.options = options;\n  }\n\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  public getDataMiddleware(): Array<DataModelMiddleware> {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding,\n          );\n\n          return next?.delete(binding, options);\n        },\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n\n          // return validation issues directly on bindings first\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n\n          // if none, check to see any validations this binding may be a weak ref of and return\n          const newInvalidBindings: Set<StrongOrWeakBinding> = new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (\n              caresAboutDataChanges(\n                new Set([binding]),\n                weakValidation.weakBindings,\n              ) &&\n              weakValidation?.get()?.severity === \"error\"\n            ) {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true,\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false,\n                  });\n                }\n              });\n            }\n          });\n\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) },\n      ),\n    ];\n  }\n\n  private getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema,\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (\n            binding: BindingInstance,\n          ): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding,\n            );\n          },\n\n          getValidationsForView: (): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          },\n        },\n      },\n    ]);\n\n    return this.providers;\n  }\n\n  public reset() {\n    this.validations.clear();\n    this.tracker = undefined;\n  }\n\n  public onView(view: ViewInstance): void {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (\n            !this.options ||\n            this.getValidationForBinding(binding) !== undefined\n          ) {\n            return;\n          }\n\n          // Set the default value for the binding if we need to\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true,\n          });\n\n          if (originalValue !== withoutDefault) {\n            // Don't trigger updates when setting the default value\n            this.options.model.set([[binding, originalValue]], {\n              silent: true,\n            });\n          }\n\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(new Set([binding]));\n            },\n          );\n\n          this.hooks.onTrackBinding.call(binding);\n        },\n      },\n    });\n\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n\n    bindingTrackerPlugin.apply(view);\n  }\n\n  updateValidationsForBinding(\n    binding: BindingInstance,\n    trigger: Validation.Trigger,\n    validationContext?: SimpleValidatorContext,\n    onDismiss?: () => void,\n  ): void {\n    const context = validationContext ?? this.options;\n\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n\n    if (trigger === \"load\") {\n      // Get all of the validations from each provider\n      const possibleValidations = this.getValidationProviders().reduce<\n        Array<ValidationObjectWithSource>\n      >((vals, provider) => {\n        vals.push(\n          ...(provider.provider\n            .getValidationsForBinding?.(binding)\n            ?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source,\n            })) ?? []),\n        );\n\n        return vals;\n      }, []);\n\n      if (possibleValidations.length === 0) {\n        return;\n      }\n\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger,\n        ),\n      );\n    }\n\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n\n      if (this.weakBindingTracker.size > 0) {\n        const t = this.validations.get(binding) as ValidatedBinding;\n        this.weakBindingTracker.forEach((b) => t.weakBindings.add(b));\n      }\n\n      return response ? { message: response.message } : undefined;\n    });\n\n    // Also run any validations that binding or sub-binding is a weak binding of\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (\n          vBinding !== binding &&\n          caresAboutDataChanges(new Set([binding]), validation.weakBindings)\n        ) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context,\n            );\n            return response ? { message: response.message } : undefined;\n          });\n        }\n      });\n    }\n  }\n\n  validationRunner(\n    validationObj: ValidationObjectWithHandler,\n    binding: BindingInstance,\n    context: SimpleValidatorContext | undefined = this.options,\n  ) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n\n    const handler =\n      validationObj.handler ?? this.getValidator(validationObj.type);\n\n    const weakBindings = new Set<BindingInstance>();\n\n    // For any data-gets in the validation runner, default to using the _invalid_ value (since that's what we're testing against)\n    const model: DataModelWithParser = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete,\n    };\n\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (\n          exp: ExpressionType,\n          options: ExpressionEvaluatorOptions = { model },\n        ) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding),\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\",\n      }),\n      validationObj,\n    );\n\n    this.weakBindingTracker = weakBindings;\n\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate,\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n\n      return {\n        message,\n      };\n    }\n  }\n\n  private updateValidationsForView(trigger: Validation.Trigger): void {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n\n    /** Run validations for all bindings in view */\n    const updateValidations = (dismissValidations: boolean) => {\n      this.getBindings().forEach((binding) => {\n        this.validations\n          .get(binding)\n          ?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n\n            return this.validationRunner(obj, binding, this.options);\n          });\n      });\n    };\n\n    // Should dismiss for non-navigation triggers.\n    updateValidations(!isNavigationTrigger);\n\n    if (isNavigationTrigger) {\n      // If validations didn't change since last update, dismiss all dismissible validations.\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n\n  private get activeBindings(): Set<BindingInstance> {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== undefined,\n      ),\n    );\n  }\n\n  public getValidator(type: string) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n\n    return registry.get(type);\n  }\n\n  getBindings(): Set<BindingInstance> {\n    return this.tracker?.getBindings() ?? new Set();\n  }\n\n  trackBinding(binding: BindingInstance): void {\n    this.tracker?.trackBinding(binding);\n  }\n\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger: Validation.Trigger = \"navigation\"): {\n    /** Indicating if the view can proceed without error */\n    canTransition: boolean;\n\n    /** the validations that are preventing the view from continuing */\n    validations?: Map<BindingInstance, ValidationResponse>;\n  } {\n    this.updateValidationsForView(trigger);\n\n    const validations = new Map<BindingInstance, ValidationResponse>();\n\n    let canTransition = true;\n\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v,\n            )}`,\n          );\n\n          canTransition = false;\n        }\n\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n\n    return {\n      canTransition,\n      validations: validations.size ? validations : undefined,\n    };\n  }\n\n  /** Get the current tracked validation for the given binding */\n  public getValidationForBinding(\n    binding: BindingInstance,\n  ): ValidatedBinding | undefined {\n    return this.validations.get(binding);\n  }\n\n  forView(parser: BindingFactory): Resolve.Validation {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding),\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return undefined;\n        }\n\n        const validationMapping = new Map<\n          BindingInstance,\n          ValidationResponse\n        >();\n\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n\n        return validationMapping.size === 0 ? undefined : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\",\n        );\n      },\n      type: (binding) =>\n        this.schema.getType(isBinding(binding) ? binding : parser(binding)),\n    };\n  }\n}\n","import { BindingInstance } from \"../../binding\";\n\n/** Recursively flattens a nested object to be an object of depth 1 with keys being the full path in the orginal object */\nexport function flatten(obj: any, roots: [string][] = [], sep = \".\"): any {\n  return (\n    Object\n      // find props of given object\n      .keys(obj)\n      // return an object by iterating props\n      .reduce(\n        (memo, prop) => ({\n          // create a new object\n\n          // include previously returned object\n          ...memo,\n          ...(Object.prototype.toString.call(obj[prop]) === \"[object Object]\"\n            ? // keep working if value is an object\n              flatten(obj[prop], roots.concat([prop]))\n            : // include current prop and value and prefix prop with the roots\n              { [roots.concat([prop]).join(sep)]: obj[prop] }),\n        }),\n        {},\n      )\n  );\n}\n\n/** Converts an object into a list of binding/value tuples to use with a LocalModel object */\nexport function objectToBatchSet(obj: any): [BindingInstance, any][] {\n  const flattenedObj = flatten(obj);\n  const batchTxn: [BindingInstance, any][] = [];\n\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n\n  return batchTxn;\n}\n","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","export * from \"./beacon\";\nexport * from \"./symbols\";\n","import { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport type { ParserResult, AnyNode } from \"../binding-grammar/index\";\nimport {\n  // We can swap this with whichever parser we want to use\n  parseCustom as parseBinding,\n} from \"../binding-grammar\";\nimport type { BindingParserOptions, BindingLike } from \"./binding\";\nimport { BindingInstance } from \"./binding\";\nimport { isBinding } from \"./utils\";\nimport type { NormalizedResult, ResolveBindingASTOptions } from \"./resolver\";\nimport { resolveBindingAST } from \"./resolver\";\n\nexport * from \"./utils\";\nexport * from \"./binding\";\n\nexport const SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nexport const BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nconst LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n\nconst DEFAULT_OPTIONS: BindingParserOptions = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  },\n};\n\ntype BeforeResolveNodeContext = Required<NormalizedResult> &\n  ResolveBindingASTOptions;\n\n/** A parser for creating bindings from a string */\nexport class BindingParser {\n  private cache: Record<string, BindingInstance>;\n  private parseCache: Record<string, ParserResult>;\n  private parserOptions: BindingParserOptions;\n\n  public hooks = {\n    skipOptimization: new SyncBailHook<[string], boolean>(),\n    beforeResolveNode: new SyncWaterfallHook<\n      [AnyNode, BeforeResolveNodeContext]\n    >(),\n  };\n\n  constructor(options?: Partial<BindingParserOptions>) {\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  private normalizePath(\n    path: string,\n    resolveOptions: ResolveBindingASTOptions,\n  ) {\n    /**\n     * Ensure no binding characters exist in path and the characters remaining\n     * look like a binding format.\n     */\n    if (\n      !BINDING_BRACKETS_REGEX.test(path) &&\n      LAZY_BINDING_REGEX.test(path) &&\n      this.hooks.skipOptimization.call(path) !== true\n    ) {\n      return { path: path.split(\".\"), updates: undefined } as NormalizedResult;\n    }\n\n    const ast = this.parseCache[path] ?? parseBinding(path);\n    this.parseCache[path] = ast;\n\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`,\n      );\n    }\n\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e: any) {\n      throw new NestedError(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n\n  private getBindingForNormalizedResult(\n    normalized: NormalizedResult,\n  ): BindingInstance {\n    const normalizedStr = normalized.path.join(\".\");\n\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse,\n    );\n    this.cache[normalizedStr] = created;\n\n    return created;\n  }\n\n  public parse(\n    rawBinding: BindingLike,\n    overrides: Partial<BindingParserOptions> = {},\n  ): BindingInstance {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n\n    const options = {\n      ...this.parserOptions,\n      ...overrides,\n    };\n\n    let updates: Record<string, any> = {};\n\n    const joined = Array.isArray(rawBinding)\n      ? rawBinding.join(\".\")\n      : String(rawBinding);\n\n    const normalizeConfig: ResolveBindingASTOptions = {\n      getValue: (path: Array<string | number>) => {\n        const normalized = this.normalizePath(path.join(\".\"), normalizeConfig);\n\n        return options.get(this.getBindingForNormalizedResult(normalized));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path: any) => {\n        if (path === undefined) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\",\n          );\n        }\n\n        if (\n          typeof path !== \"string\" &&\n          typeof path !== \"number\" &&\n          typeof path !== \"boolean\"\n        ) {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`,\n          );\n        }\n\n        const normalized = this.normalizePath(String(path), normalizeConfig);\n\n        if (normalized.updates) {\n          updates = {\n            ...updates,\n            ...normalized.updates,\n          };\n        }\n\n        const joinedNormalizedPath = normalized.path.join(\".\");\n\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n\n        return joinedNormalizedPath;\n      },\n    };\n\n    const normalized = this.normalizePath(joined, normalizeConfig);\n\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates,\n      };\n    }\n\n    const updateKeys = Object.keys(updates);\n\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map<[BindingInstance, any]>(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding],\n        ],\n      );\n\n      options.set(updateTransaction);\n    }\n\n    return this.getBindingForNormalizedResult(normalized);\n  }\n}\n","import { NestedError } from \"ts-nested-error\";\nimport type { SyncWaterfallHook } from \"tapable-ts\";\nimport type { PathNode, AnyNode } from \"../binding-grammar\";\nimport { findInArray, maybeConvertToNum } from \"./utils\";\n\nexport interface NormalizedResult {\n  /** The normalized path */\n  path: Array<string | number>;\n\n  /** Any new updates that need to happen for this binding to be resolved */\n  updates?: Record<string, any>;\n}\n\nexport interface ResolveBindingASTOptions {\n  /** Get the value of the model at the given path */\n  getValue: (path: Array<string | number>) => any;\n\n  /** Convert the value into valid path segments */\n  convertToPath: (value: any) => string;\n\n  /** Convert the value into valid path segments */\n  evaluate: (exp: string) => any;\n}\n\nexport interface ResolveBindingASTHooks {\n  /** A hook for transforming a node before fully resolving it */\n  beforeResolveNode: SyncWaterfallHook<\n    [AnyNode, Required<NormalizedResult> & ResolveBindingASTOptions]\n  >;\n}\n\n/** Given a binding AST, resolve it */\nexport function resolveBindingAST(\n  bindingPathNode: PathNode,\n  options: ResolveBindingASTOptions,\n  hooks?: ResolveBindingASTHooks,\n): NormalizedResult {\n  const context: Required<NormalizedResult> = {\n    updates: {},\n    path: [],\n  };\n\n  // let updates: Record<string, any> = {};\n  // const path: Array<string | number> = [];\n\n  /** Get the value for any child node */\n  function getValueForNode(node: AnyNode): any {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates,\n        };\n      }\n\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path),\n        );\n      } catch (e: any) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e,\n        );\n      }\n    }\n\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n\n        return options.convertToPath(actualValue);\n      } catch (e: any) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n\n  /** Handle when path segments are binding paths (foo.bar) or single segments (foo) */\n  function appendPathSegments(segment: string | number) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n\n  /** Compute the _actual_ binding val from the AST */\n  function resolveNode(_node: AnyNode) {\n    const resolvedNode =\n      hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n\n      case \"Query\": {\n        // Look for an object at the path with the given key/val criteria\n        const objToQuery: Record<string, any>[] =\n          options.getValue(context.path) ?? [];\n\n        const { key, value } = resolvedNode;\n\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n\n        if (index === undefined || index === -1) {\n          context.updates[\n            [...context.path, objToQuery.length, resolvedKey].join(\".\")\n          ] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n\n        break;\n      }\n\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n\n      default:\n        throw new Error(`Unsupported node type: ${(resolvedNode as any).name}`);\n    }\n  }\n\n  bindingPathNode.path.forEach(resolveNode);\n\n  return {\n    path: context.path,\n    updates:\n      Object.keys(context.updates ?? {}).length > 0\n        ? context.updates\n        : undefined,\n  };\n}\n","import get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type { BatchSetTransaction, DataModelImpl, Updates } from \"./model\";\n\n/**\n * A data model that stores data in an in-memory JS object\n */\nexport class LocalModel implements DataModelImpl {\n  public model: {\n    [key: string]: any;\n  };\n\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public reset(model = {}) {\n    this.model = model;\n  }\n\n  public get(binding?: BindingInstance) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n\n    return get(this.model, binding.asArray() as string[]);\n  }\n\n  public set(transaction: BatchSetTransaction) {\n    const effectiveOperations: Updates = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value) as any;\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n\n  public delete(binding: BindingInstance) {\n    const parentBinding = binding.parent();\n\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n\n      if (parentValue !== undefined) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key() as number),\n          ) as any;\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key() as string),\n          ) as any;\n        }\n      }\n    }\n  }\n}\n","import { SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport { parseExpression } from \"./parser\";\nimport * as DEFAULT_EXPRESSION_HANDLERS from \"./evaluator-functions\";\nimport { isExpressionNode } from \"./types\";\nimport { isObjectExpression } from \"./utils\";\nimport type {\n  ExpressionNode,\n  BinaryOperator,\n  UnaryOperator,\n  ExpressionType,\n  ExpressionContext,\n  ExpressionHandler,\n} from \"./types\";\n\n/** a && b -- but handles short cutting if the first value is false */\nconst andandOperator: BinaryOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) && ctx.evaluate(b);\n};\n\nandandOperator.resolveParams = false;\n\n/** a || b -- but with short cutting if first value is true */\nconst ororOperator: BinaryOperator = (ctx, a, b) => {\n  return ctx.evaluate(a) || ctx.evaluate(b);\n};\n\nororOperator.resolveParams = false;\n\nconst DEFAULT_BINARY_OPERATORS: Record<string, BinaryOperator> = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a: any, b: any) => a + b,\n  \"-\": (a: any, b: any) => a - b,\n  \"*\": (a: any, b: any) => a * b,\n  \"/\": (a: any, b: any) => a / b,\n  \"%\": (a: any, b: any) => a % b,\n\n  // eslint-disable-next-line\n  \"==\": (a: any, b: any) => a == b,\n\n  // eslint-disable-next-line\n  \"!=\": (a: any, b: any) => a != b,\n  \">\": (a: any, b: any) => a > b,\n  \">=\": (a: any, b: any) => a >= b,\n  \"<\": (a: any, b: any) => a < b,\n  \"<=\": (a: any, b: any) => a <= b,\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n  \"!==\": (a: any, b: any) => a !== b,\n  \"===\": (a: any, b: any) => a === b,\n\n  // eslint-disable-next-line\n  \"|\": (a: any, b: any) => a | b,\n\n  // eslint-disable-next-line\n  \"&\": (a: any, b: any) => a & b,\n  \"+=\": (a: any, b: any) => a + b,\n  \"-=\": (a: any, b: any) => a - b,\n\n  // eslint-disable-next-line\n  \"&=\": (a: any, b: any) => a & b,\n\n  // eslint-disable-next-line\n  \"|=\": (a: any, b: any) => a | b,\n};\n\nconst DEFAULT_UNARY_OPERATORS: Record<string, UnaryOperator> = {\n  \"-\": (a: any) => -a,\n  \"+\": (a: any) => Number(a),\n  \"!\": (a: any) => !a,\n};\n\nexport interface HookOptions extends ExpressionContext {\n  /** Given an expression node  */\n  resolveNode: (node: ExpressionNode) => any;\n\n  /** Enabling this flag skips calling the onError hook, and just throws errors back to the caller.\n   * The caller is responsible for handling the error.\n   */\n  throwErrors?: boolean;\n\n  /** Whether expressions should be parsed strictly or not */\n  strict?: boolean;\n}\n\nexport type ExpressionEvaluatorOptions = Omit<\n  HookOptions,\n  \"resolveNode\" | \"evaluate\"\n>;\n\nexport type ExpressionEvaluatorFunction = (\n  exp: ExpressionType,\n  options?: ExpressionEvaluatorOptions,\n) => any;\n\n/**\n * The expression evaluator is responsible for parsing and executing anything in the custom expression language\n * */\nexport class ExpressionEvaluator {\n  private readonly vars: Record<string, any> = {};\n  public readonly hooks = {\n    /** Resolve an AST node for an expression to a value */\n    resolve: new SyncWaterfallHook<[any, ExpressionNode, HookOptions]>(),\n\n    /** Gets the options that will be passed in calls to the resolve hook */\n    resolveOptions: new SyncWaterfallHook<[HookOptions]>(),\n\n    /** Allows users to change the expression to be evaluated before processing */\n    beforeEvaluate: new SyncWaterfallHook<[ExpressionType, HookOptions]>(),\n\n    /**\n     * An optional means of handling an error in the expression execution\n     * Return true if handled, to stop propagation of the error\n     */\n    onError: new SyncBailHook<[Error], true>(),\n  };\n\n  private readonly expressionsCache: Map<string, ExpressionNode> = new Map();\n\n  private readonly defaultHookOptions: HookOptions;\n\n  public readonly operators = {\n    binary: new Map(Object.entries(DEFAULT_BINARY_OPERATORS)),\n    unary: new Map(Object.entries(DEFAULT_UNARY_OPERATORS)),\n    expressions: new Map<string, ExpressionHandler<any, any>>(\n      Object.entries(DEFAULT_EXPRESSION_HANDLERS),\n    ),\n  };\n\n  public reset(): void {\n    this.expressionsCache.clear();\n  }\n\n  constructor(defaultOptions: ExpressionEvaluatorOptions) {\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node: ExpressionNode) =>\n        this._execAST(node, this.defaultHookOptions),\n    };\n\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", this._resolveNode.bind(this));\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  public evaluate(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): any {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node: ExpressionNode) => this._execAST(node, resolvedOpts),\n    });\n\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n\n    // Unwrap any returned expression type\n    // Since this could also be an object type, we need to recurse through it until we find the end\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n\n    // Check for literals\n    if (\n      typeof expression === \"number\" ||\n      typeof expression === \"boolean\" ||\n      expression === undefined ||\n      expression === null\n    ) {\n      return expression;\n    }\n\n    // Skip doing anything with objects that are _actually_ just parsed expression nodes\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null,\n      );\n    }\n\n    return this._execString(String(expression), resolvedOpts);\n  }\n\n  public addExpressionFunction<T extends readonly unknown[], R>(\n    name: string,\n    handler: ExpressionHandler<T, R>,\n  ): void {\n    this.operators.expressions.set(name, handler);\n  }\n\n  public addBinaryOperator(operator: string, handler: BinaryOperator) {\n    this.operators.binary.set(operator, handler);\n  }\n\n  public addUnaryOperator(operator: string, handler: UnaryOperator) {\n    this.operators.unary.set(operator, handler);\n  }\n\n  public setExpressionVariable(name: string, value: unknown) {\n    this.vars[name] = value;\n  }\n\n  public getExpressionVariable(name: string): unknown {\n    return this.vars[name];\n  }\n\n  private _execAST(node: ExpressionNode, options: HookOptions): any {\n    return this.hooks.resolve.call(undefined, node, options);\n  }\n\n  private _execString(exp: string, options: HookOptions) {\n    if (exp === \"\") {\n      return exp;\n    }\n\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n\n    if (matches) {\n      [, matchedExp] = Array.from(matches); // In case the expression was surrounded by @[ ]@\n    }\n\n    let storedAST: ExpressionNode;\n\n    try {\n      storedAST =\n        this.expressionsCache.get(matchedExp) ??\n        parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error parsing expression: ${exp}`, e);\n      }\n\n      return;\n    }\n\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n\n  private _resolveNode(\n    _currentValue: any,\n    node: ExpressionNode,\n    options: HookOptions,\n  ) {\n    const { resolveNode, model } = options;\n\n    const expressionContext: ExpressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options),\n    };\n\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right);\n          }\n\n          return operator(\n            expressionContext,\n            resolveNode(node.left),\n            resolveNode(node.right),\n          );\n        }\n\n        return operator(resolveNode(node.left), resolveNode(node.right));\n      }\n\n      return;\n    }\n\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          return operator(\n            expressionContext,\n            operator.resolveParams === false\n              ? node.argument\n              : resolveNode(node.argument),\n          );\n        }\n\n        return operator(resolveNode(node.argument));\n      }\n\n      return;\n    }\n\n    if (node.type === \"Object\") {\n      const { attributes } = node;\n      const resolvedAttributes: any = {};\n\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        resolvedAttributes[key] = value;\n      });\n\n      return resolvedAttributes;\n    }\n\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n\n      const operator = this.operators.expressions.get(expressionName);\n\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n\n      const args = node.args.map((n) => resolveNode(n));\n\n      return operator(expressionContext, ...args);\n    }\n\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n\n      return obj[prop];\n    }\n\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n        model.set([[node.left.ref, value]]);\n\n        return value;\n      }\n\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n        this.vars[node.left.name] = value;\n        return value;\n      }\n\n      return;\n    }\n\n    if (node.type === \"ConditionalExpression\") {\n      const result = resolveNode(node.test) ? node.consequent : node.alternate;\n\n      return resolveNode(result);\n    }\n\n    if (node.type === \"ArrayExpression\") {\n      return node.elements.map((ele) => resolveNode(ele));\n    }\n\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n\n      if (operation) {\n        let newValue;\n\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(expressionContext, node.left, node.right);\n          } else {\n            newValue = operation(\n              expressionContext,\n              resolveNode(node.left),\n              resolveNode(node.right),\n            );\n          }\n        } else {\n          newValue = operation(resolveNode(node.left), resolveNode(node.right));\n        }\n\n        if (node.left.type === \"ModelRef\") {\n          model.set([[node.left.ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          this.vars[node.left.name] = newValue;\n        }\n\n        return newValue;\n      }\n\n      return resolveNode(node.left);\n    }\n  }\n}\n","import { setIn } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelOptions,\n  DataModelMiddleware,\n  Updates,\n} from \"../data\";\nimport { toModel } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nimport type { ValidationResponse } from \"./types\";\nimport { removeBindingAndChildrenFromMap } from \"./binding-map-splice\";\n\n/**\n * A BindingInstance with an indicator of whether or not it's a strong binding\n */\nexport type StrongOrWeakBinding = {\n  /** BindingInstance in question */\n  binding: BindingInstance;\n  /** Boolean indicating whether the relevant BindingInstance is a strong binding */\n  isStrong: boolean;\n};\n\n/**\n * Returns a validation object if the data is invalid or an set of BindingsInstances if the binding itself is a weak ref of another invalid validation\n */\nexport type MiddlewareChecker = (\n  binding: BindingInstance,\n  model: DataModelImpl,\n) => ValidationResponse | Set<StrongOrWeakBinding> | undefined;\n\n/**\n * Middleware for the data-model that caches the results of invalid data\n */\nexport class ValidationMiddleware implements DataModelMiddleware {\n  public validator: MiddlewareChecker;\n  public shadowModelPaths: Map<BindingInstance, any>;\n  private logger?: Logger;\n  private shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n\n  constructor(\n    validator: MiddlewareChecker,\n    options?: {\n      /** A logger instance */\n      logger?: Logger;\n      /** Optional function to include data staged in shadowModel */\n      shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n    },\n  ) {\n    this.validator = validator;\n    this.shadowModelPaths = new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction: BatchSetTransaction = [];\n\n    const includedBindings = new Set<BindingInstance>();\n\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n\n    const invalidBindings: Array<BindingInstance> = [];\n\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n\n      if (validations === undefined) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (\n            !validation.isStrong &&\n            validation.binding.asString() === binding.asString()\n          ) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${\n            validations.severity\n          } - ${validations.message}`,\n        );\n      }\n    });\n\n    let validResults: Updates = [];\n\n    if (next && nextTransaction.length > 0) {\n      // defer clearing the shadow model to prevent validations that are run twice due to weak binding refs still needing the data\n      nextTransaction.forEach(([binding]) =>\n        this.shadowModelPaths.delete(binding),\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n\n      validResults = result;\n    }\n\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true,\n      };\n    });\n\n    return [...validResults, ...invalidResults];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    let val = next?.get(binding, options);\n\n    if (\n      this.shouldIncludeInvalid?.(options) ??\n      options?.includeInvalid === true\n    ) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n\n          return;\n        }\n\n        if (binding.contains(shadowBinding)) {\n          val = setIn(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n\n    return val;\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding,\n    );\n\n    return next?.delete(binding, options);\n  }\n}\n","import { SyncWaterfallHook, SyncHook } from \"tapable-ts\";\nimport { setIn, addLast, clone } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\nimport type { BindingInstance, BindingLike } from \"../../binding\";\nimport type {\n  DataModelOptions,\n  DataModelWithParser,\n  Updates,\n} from \"../../data\";\nimport { DependencyModel, withParser } from \"../../data\";\nimport type { Logger } from \"../../logger\";\nimport type { Node } from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport {\n  caresAboutDataChanges,\n  toNodeResolveOptions,\n  unpackAndPush,\n} from \"./utils\";\nimport type { Resolve } from \"./types\";\nimport { getNodeID } from \"../parser/utils\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\ninterface NodeUpdate extends Resolve.ResolvedNode {\n  /** A flag to track if a node has changed since the last resolution */\n  updated: boolean;\n}\n\n/** Add model context to the data model */\nconst withContext = (model: DataModelWithParser): DataModelWithParser => {\n  return {\n    get: (binding: BindingLike, options?: DataModelOptions): any => {\n      return model.get(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    set: (\n      transaction: [BindingLike, any][],\n      options?: DataModelOptions,\n    ): Updates => {\n      return model.set(transaction, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    delete: (binding: BindingLike, options?: DataModelOptions): void => {\n      return model.delete(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n  };\n};\n\n/**\n * The Resolver is the way to take a parsed AST graph of a view and resolve it to a concrete representation of the current user state\n * It combines the ability to mutate ast nodes before resolving, as well as the mutating the resolved objects while parsing\n */\nexport class Resolver {\n  public readonly hooks = {\n    /** A hook to allow skipping of the resolution tree for a specific node */\n    skipResolve: new SyncWaterfallHook<\n      [boolean, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** An event emitted before calculating the next update */\n    beforeUpdate: new SyncHook<[Set<BindingInstance> | undefined]>(),\n\n    /** An event emitted after calculating the next update */\n    afterUpdate: new SyncHook<[any]>(),\n\n    /** The options passed to a node to resolve it to an object */\n    resolveOptions: new SyncWaterfallHook<\n      [Resolve.NodeResolveOptions, Node.Node]\n    >(),\n\n    /** A hook to transform the AST node into a new AST node before resolving it */\n    beforeResolve: new SyncWaterfallHook<\n      [Node.Node | null, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform an AST node into it's resolved value.\n     * This runs _before_ any children are resolved\n     */\n    resolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform the resolved value of an AST node.\n     * This runs _after_ all children nodes are resolved\n     */\n    afterResolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** Called at the very end of a node's tree being updated */\n    afterNodeUpdate: new SyncHook<\n      [Node.Node, Node.Node | undefined, NodeUpdate]\n    >(),\n  };\n\n  /**\n   * The AST tree after beforeResolve is ran mapped to the AST before beforeResolve is ran\n   */\n  private readonly ASTMap: Map<Node.Node, Node.Node>;\n  /**\n   * The root node in the AST tree we want to resolve\n   */\n  public readonly root: Node.Node;\n\n  /**\n   * The cache of the last resolved values when walking the tree.\n   * This gets recycled every update to avoid stale data if a node is unused in an update\n   */\n  private resolveCache: Map<Node.Node, Resolve.ResolvedNode>;\n\n  /**\n   * Cache of node IDs that have been processed to track if nodes have duplicate IDs\n   */\n  private idCache: Set<string>;\n\n  /**\n   * The parameters required to resolve AST nodes\n   */\n  private readonly options: Resolve.ResolverOptions;\n\n  /**\n   * Tapable logger for logging errors encountered during view resolution\n   */\n  private logger?: Logger;\n\n  constructor(root: Node.Node, options: Resolve.ResolverOptions) {\n    this.root = root;\n    this.options = options;\n    this.resolveCache = new Map();\n    this.ASTMap = new Map();\n    this.logger = options.logger;\n    this.idCache = new Set();\n  }\n\n  public getSourceNode(convertedAST: Node.Node) {\n    return this.ASTMap.get(convertedAST);\n  }\n\n  public update(changes?: Set<BindingInstance>): any {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = new Map<Node.Node, Resolve.ResolvedNode>();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n\n    const updated = this.computeTree(\n      this.root,\n      undefined,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      undefined,\n      prevASTMap,\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n\n  public getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n\n  private getPreviousResult(node: Node.Node): Resolve.ResolvedNode | undefined {\n    if (!node) {\n      return;\n    }\n\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n\n    if (id) {\n      if (this.idCache.has(id)) {\n        // Only log this conflict once to cut down on noise\n        // May want to swap this to logging when we first see the id -- which may not be the first render\n        if (isFirstUpdate) {\n          if (node.type === NodeType.Asset || node.type === NodeType.View) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`,\n            );\n          } else if (node.type === NodeType.Value) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`,\n            );\n          }\n        }\n\n        // Don't use anything from a prev result if there's a duplicate id detected\n        return;\n      }\n\n      this.idCache.add(id);\n    }\n\n    return this.resolveCache.get(node);\n  }\n\n  private cloneNode(node: any) {\n    const clonedNode = clone(node);\n\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\") return;\n\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n\n    return clonedNode;\n  }\n\n  private computeTree(\n    node: Node.Node,\n    rawParent: Node.Node | undefined,\n    dataChanges: Set<BindingInstance> | undefined,\n    cacheUpdate: Map<Node.Node, Resolve.ResolvedNode>,\n    options: Resolve.NodeResolveOptions,\n    partiallyResolvedParent: Node.Node | undefined,\n    prevASTMap: Map<Node.Node, Node.Node>,\n  ): NodeUpdate {\n    const dependencyModel = new DependencyModel(options.data.model);\n\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding),\n    );\n\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser,\n        },\n        evaluate: (exp) =>\n          this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node,\n      },\n      node,\n    );\n\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions,\n    );\n\n    // Shallow clone the node so that changes to it during the resolve steps don't impact the original.\n    // We are trusting that this becomes a deep clone once the whole node tree has been traversed.\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent,\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions,\n    ) ?? {\n      type: NodeType.Empty,\n    };\n\n    const isNestedMultiNode =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.type === NodeType.Value;\n\n    if (previousResult && shouldUseLastValue) {\n      const update = {\n        ...previousResult,\n        updated: false,\n      };\n\n      /** Recursively repopulate the AST map given some AST Node and it's resolved AST representation */\n      const repopulateASTMapFromCache = (\n        resolvedNode: Resolve.ResolvedNode,\n        AST: Node.Node,\n        ASTParent: Node.Node | undefined,\n      ) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false,\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n\n        /** Helper function for recursing over child node */\n        const handleChildNode = (childNode: Node.Node) => {\n          // In order to get the correct results, we need to use the node references from the last update.\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult) return;\n\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST,\n          );\n        };\n\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(({ value: childAST }) =>\n            handleChildNode(childAST),\n          );\n        } else if (resolvedASTLocal.type === NodeType.MultiNode) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n\n      // Point the root of the cached node to the new resolved node.\n      previousResult.node.parent = partiallyResolvedParent;\n\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n\n      return update;\n    }\n\n    resolvedAST.parent = partiallyResolvedParent;\n\n    resolveOptions.node = resolvedAST;\n\n    this.ASTMap.set(resolvedAST, node);\n\n    let resolved = this.hooks.resolve.call(\n      undefined,\n      resolvedAST,\n      resolveOptions,\n    );\n\n    let updated = !dequal(previousResult?.value, resolved);\n\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    const childDependencies = new Set<BindingInstance>();\n    dependencyModel.trackSubset(\"children\");\n\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue,\n        } = computedChildTree;\n\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n\n        if (childValue) {\n          if (childNode.type === NodeType.MultiNode && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path as any[], []),\n              childValue,\n            );\n            resolved = setIn(resolved, child.path, arr);\n          } else {\n            resolved = setIn(resolved, child.path, childValue);\n          }\n        }\n\n        updated = updated || childUpdated;\n\n        return { ...child, value: childNode };\n      });\n\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === NodeType.MultiNode) {\n      const childValue: any = [];\n      const rawParentToPassIn = isNestedMultiNode\n        ? partiallyResolvedParent?.parent\n        : node;\n\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n\n        if (mTree.value !== undefined && mTree.value !== null) {\n          /**\n           * async nodes' parent is a multi-node\n           * When the node to resolve is an async node and the flatten flag is true\n           * Add the content streamed in to the childValue of parent multi-node\n           * Array.isArray(mTree.value.asset.values) is the case when the content is an async asset\n           */\n          if (\n            mValue.type === NodeType.Async &&\n            mValue.flatten &&\n            mTree.value.asset &&\n            Array.isArray(mTree.value.asset.values)\n          ) {\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n\n        mTree.dependencies.forEach((bindingDep) =>\n          childDependencies.add(bindingDep),\n        );\n\n        updated = updated || mTree.updated;\n\n        return mTree.node;\n      });\n\n      resolvedAST.values = newValues;\n      resolved = childValue;\n    }\n\n    childDependencies.forEach((bindingDep) =>\n      dependencyModel.addChildReadDep(bindingDep),\n    );\n\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope?: \"core\" | \"children\") =>\n        dependencyModel.getDependencies(scope),\n    });\n\n    const update: NodeUpdate = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies,\n      ]),\n    };\n\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update,\n    );\n    cacheUpdate.set(node, update);\n\n    return update;\n  }\n}\n","import { setIn } from \"timm\";\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { AnyAssetType, Node } from \"./types\";\nimport { NodeType } from \"./types\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\nexport const EMPTY_NODE: Node.Empty = {\n  type: NodeType.Empty,\n};\n\nexport interface ParseObjectOptions {\n  /** how nested the templated is */\n  templateDepth?: number;\n}\n\nexport interface ParseObjectChildOptions {\n  key: string;\n  path: Node.PathSegment[];\n  parentObj: object;\n}\n\ninterface NestedObj {\n  /** The values of a nested local object */\n  children: Node.Child[];\n\n  value: any;\n}\n/**\n * The Parser is the way to take an incoming view from the user and parse it into an AST.\n * It provides a few ways to interact with the parsing, including mutating an object before and after creation of an AST node\n */\nexport class Parser {\n  public readonly hooks = {\n    /**\n     * A hook to interact with an object _before_ parsing it into an AST\n     *\n     * @param value - The object we're are about to parse\n     * @returns - A new value to parse.\n     *  If undefined, the original value is used.\n     *  If null, we stop parsing this node.\n     */\n    onParseObject: new SyncWaterfallHook<[object, NodeType]>(),\n\n    /**\n     * A callback to interact with an AST _after_ we parse it into the AST\n     *\n     * @param value - The object we parsed\n     * @param node - The AST node we generated\n     * @returns - A new AST node to use\n     *   If undefined, the original value is used.\n     *   If null, we ignore this node all together\n     */\n    onCreateASTNode: new SyncWaterfallHook<\n      [Node.Node | undefined | null, object]\n    >(),\n\n    parseNode: new SyncBailHook<\n      [\n        obj: object,\n        nodeType: Node.ChildrenTypes,\n        parseOptions: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ],\n      Node.Node | Node.Child[]\n    >(),\n  };\n\n  public parseView(value: AnyAssetType): Node.View {\n    const viewNode = this.parseObject(value, NodeType.View);\n\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n\n    return viewNode as Node.View;\n  }\n\n  public createASTNode(node: Node.Node | null, value: any): Node.Node | null {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n\n    if (tapped === undefined) {\n      return node;\n    }\n\n    return tapped;\n  }\n\n  public parseObject(\n    obj: object,\n    type: Node.ChildrenTypes = NodeType.Value,\n    options: ParseObjectOptions = { templateDepth: 0 },\n  ): Node.Node | null {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options,\n    ) as Node.Node | null;\n\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n\n    const parseLocalObject = (\n      currentValue: any,\n      objToParse: unknown,\n      path: string[] = [],\n    ): NestedObj => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n\n      if (!localObj) {\n        return currentValue;\n      }\n\n      const objEntries = Array.isArray(localObj)\n        ? localObj.map((v, i) => [i, v])\n        : [\n            ...Object.entries(localObj),\n            ...Object.getOwnPropertySymbols(localObj).map((s) => [\n              s,\n              (localObj as any)[s],\n            ]),\n          ];\n\n      const defaultValue: NestedObj = {\n        children: [],\n        value: currentValue,\n      };\n\n      const newValue = objEntries.reduce((accumulation, current): NestedObj => {\n        let { value } = accumulation;\n        const { children } = accumulation;\n        const [localKey, localValue] = current;\n\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          NodeType.Value,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj,\n          },\n        ) as Node.Child[];\n\n        if (newChildren) {\n          children.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey,\n          ]);\n\n          value = result.value;\n          children.push(...result.children);\n        } else {\n          value = setIn(accumulation.value, [...path, localKey], localValue);\n        }\n\n        return {\n          value,\n          children,\n        };\n      }, defaultValue);\n\n      return newValue;\n    };\n\n    const { value, children } = parseLocalObject(undefined, obj);\n\n    const baseAst =\n      value === undefined && !children.length\n        ? undefined\n        : {\n            type,\n            value,\n          };\n\n    if (baseAst && children.length) {\n      const parent: Node.BaseWithChildren<any> = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n}\n","import { omit } from \"timm\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** A view plugin to remove inapplicable assets from the tree */\nexport default class ApplicabilityPlugin implements ViewPlugin {\n  private isApplicability(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node: Node.Node | null, options: Options) => {\n        let newNode = node;\n\n        if (node?.type === NodeType.Applicability) {\n          const isApplicable = options.evaluate(node.expression);\n\n          if (isApplicable === false) {\n            return null;\n          }\n\n          newNode = node.value;\n        }\n\n        return newNode;\n      },\n    );\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit(obj, \"applicability\"),\n            nodeType,\n            options,\n          );\n\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: NodeType.Applicability,\n              expression: (obj as any).applicability,\n              value: parsedApplicability,\n            },\n            obj,\n          );\n\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n\n          if (applicabilityNode.type === NodeType.Applicability) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n\n          return childOptions\n            ? [\n                {\n                  path: [...childOptions.path, childOptions.key],\n                  value: applicabilityNode,\n                },\n              ]\n            : applicabilityNode;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n}\n","import { setIn } from \"timm\";\nimport deferred from \"p-defer\";\nimport type { Flow as FlowType, FlowResult } from \"@player-ui/types\";\n\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { Logger } from \"./logger\";\nimport { TapableLogger } from \"./logger\";\nimport type { ExpressionType } from \"./expressions\";\nimport { ExpressionEvaluator } from \"./expressions\";\nimport { SchemaController } from \"./schema\";\nimport { BindingParser } from \"./binding\";\nimport type { ViewInstance } from \"./view\";\nimport { resolveDataRefs } from \"./string-resolver\";\nimport type { FlowInstance } from \"./controllers\";\nimport {\n  ConstantsController,\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport { FlowExpPlugin } from \"./plugins/flow-exp-plugin\";\nimport { DefaultExpPlugin } from \"./plugins/default-exp-plugin\";\nimport type {\n  PlayerFlowState,\n  InProgressState,\n  CompletedState,\n  ErrorState,\n} from \"./types\";\nimport { NOT_STARTED_STATE } from \"./types\";\nimport { DefaultViewPlugin } from \"./plugins/default-view-plugin\";\n\ndeclare global {\n  const __VERSION__: string;\n  const __GIT_COMMIT__: string;\n}\n\n// Variables injected at build time\nconst PLAYER_VERSION =\n  typeof __VERSION__ !== \"undefined\" ? __VERSION__ : \"__VERSION__\";\nconst COMMIT =\n  typeof __GIT_COMMIT__ !== \"undefined\" ? __GIT_COMMIT__ : \"__GIT_COMMIT__\";\n\nexport interface PlayerPlugin {\n  /**\n   * Unique identifier of the plugin.\n   * Enables the plugin to be retrievable from Player.\n   */\n  symbol?: symbol;\n\n  /** The name of the plugin */\n  name: string;\n\n  /**\n   * Use this to tap into Player hooks\n   */\n  apply: (player: Player) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ExtendedPlayerPlugin<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Assets = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Views = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Expressions = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTypes = void,\n> {}\n\nexport interface PlayerConfigOptions {\n  /** A set of plugins to load  */\n  plugins?: PlayerPlugin[];\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport interface PlayerInfo {\n  /** Version of the running player */\n  version: string;\n\n  /** Hash of the HEAD commit used to build the current version */\n  commit: string;\n}\n\n/**\n * This is it.\n */\nexport class Player {\n  public static readonly info: PlayerInfo = {\n    version: PLAYER_VERSION,\n    commit: COMMIT,\n  };\n\n  public readonly logger = new TapableLogger();\n  public readonly constantsController = new ConstantsController();\n  private config: PlayerConfigOptions;\n  private state: PlayerFlowState = NOT_STARTED_STATE;\n\n  public readonly hooks = {\n    /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n    flowController: new SyncHook<[FlowController]>(),\n\n    /** The hook that updates/handles views */\n    viewController: new SyncHook<[ViewController]>(),\n\n    /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n    view: new SyncHook<[ViewInstance]>(),\n\n    /** Called when an expression evaluator was created */\n    expressionEvaluator: new SyncHook<[ExpressionEvaluator]>(),\n\n    /** The hook that creates and manages data */\n    dataController: new SyncHook<[DataController]>(),\n\n    /** Called after the schema is created for a flow */\n    schema: new SyncHook<[SchemaController]>(),\n\n    /** Manages validations (schema and x-field ) */\n    validationController: new SyncHook<[ValidationController]>(),\n\n    /** Manages parsing binding */\n    bindingParser: new SyncHook<[BindingParser]>(),\n\n    /** A that's called for state changes in the flow execution */\n    state: new SyncHook<[PlayerFlowState]>(),\n\n    /** A hook to access the current flow */\n    onStart: new SyncHook<[FlowType]>(),\n\n    /** A hook for when the flow ends either in success or failure */\n    onEnd: new SyncHook<[]>(),\n    /** Mutate the Content flow before starting */\n    resolveFlowContent: new SyncWaterfallHook<[FlowType]>(),\n  };\n\n  constructor(config?: PlayerConfigOptions) {\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      new DefaultViewPlugin(),\n      ...(this.config.plugins || []),\n      new FlowExpPlugin(),\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n\n  /**  Returns currently registered plugins */\n  public getPlugins(): PlayerPlugin[] {\n    return this.config.plugins ?? [];\n  }\n\n  /** Find instance of [Plugin] that has been registered to Player */\n  public findPlugin<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n  ): Plugin | undefined {\n    return this.config.plugins?.find((el) => el.symbol === symbol) as Plugin;\n  }\n\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  public applyTo<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n    apply: (plugin: Plugin) => void,\n  ): void {\n    const plugin = this.findPlugin<Plugin>(symbol);\n\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  public registerPlugin(plugin: PlayerPlugin) {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n\n  /** Returns the current version of the running player */\n  public getVersion(): string {\n    return Player.info.version;\n  }\n\n  /** Returns the git commit used to build Player version */\n  public getCommit(): string {\n    return Player.info.commit;\n  }\n\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  public getState(): PlayerFlowState {\n    return this.state;\n  }\n\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  private setState(state: PlayerFlowState) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n\n  /** Start Player with the given flow */\n  private setupFlow(userContent: FlowType): {\n    /** a callback to _actually_ start the flow */\n    start: () => void;\n\n    /** the state object to kick if off */\n    state: Omit<InProgressState, \"ref\">;\n  } {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger,\n    });\n\n    this.hooks.onStart.call(userFlow);\n\n    this.hooks.flowController.call(flowController);\n\n    // eslint-disable-next-line prefer-const\n    let expressionEvaluator: ExpressionEvaluator;\n    // eslint-disable-next-line prefer-const\n    let dataController: DataController;\n\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      },\n    });\n\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred<FlowResult>();\n\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n\n    const validationController = new ValidationController(schema);\n\n    this.hooks.validationController.call(validationController);\n\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger,\n    });\n\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.format(value) : value;\n    });\n\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.deformat(value) : value;\n    });\n\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default,\n    );\n\n    // eslint-disable-next-line prefer-const\n    let viewController: ViewController;\n\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger,\n    });\n\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n\n      return true;\n    });\n\n    /** Resolve any data references in a string */\n    function resolveStrings<T>(val: T, formatted?: boolean) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted,\n      });\n    }\n\n    flowController.hooks.flow.tap(\"player\", (flow: FlowInstance) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        /** Checks to see if there are any transitions for a specific transition state (i.e. next, back). If not, it will default to * */\n        const computedTransitionVal = state.transitions[transitionVal]\n          ? transitionVal\n          : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd as ExpressionType);\n          }\n        }\n\n        /** If the transition does not exist, then do not resolve any expressions */\n        if (\n          !(\"transitions\" in state) ||\n          !state.transitions[computedTransitionVal]\n        ) {\n          return state;\n        }\n\n        /** resolves and sets the transition to the computed exp */\n        return setIn(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal]),\n        ) as any;\n      });\n\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } =\n            validationController.validateView(\"navigation\");\n\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n\n            return true;\n          }\n        }\n\n        return undefined;\n      });\n\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n\n        if (\"ref\" in state) {\n          newState = setIn(state, [\"ref\"], resolveStrings(state.ref)) as any;\n        }\n\n        if (\"param\" in state) {\n          newState = setIn(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false),\n          ) as any;\n        }\n\n        return newState;\n      });\n\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n\n      flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          flowController?.transition(\n            String(expressionEvaluator?.evaluate(exp)),\n          );\n        }\n\n        expressionEvaluator.reset();\n      });\n    });\n\n    this.hooks.dataController.call(dataController);\n\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController,\n    });\n\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: <Plugin = unknown>(pluginSymbol: symbol) => {\n          return this.findPlugin(pluginSymbol) as unknown as Plugin;\n        },\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b)),\n      },\n      constants: this.constantsController,\n    });\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n\n    return {\n      start: () => {\n        flowController\n          .start()\n          .then((endState) => {\n            const flowResult: FlowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize(),\n            };\n\n            return flowResult;\n          })\n          .then(flowResultDeferred.resolve)\n          .catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          })\n          .catch(flowResultDeferred.reject)\n          .finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController,\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger,\n      },\n    };\n  }\n\n  public async start(payload: FlowType): Promise<CompletedState> {\n    const ref = Symbol(payload?.id ?? \"payload\");\n\n    /** A check to avoid updating the state for a flow that's not the current one */\n    const maybeUpdateState = <T extends PlayerFlowState>(newState: T) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`,\n        );\n\n        return newState;\n      }\n\n      this.setState(newState);\n\n      return newState;\n    };\n\n    this.setState({\n      status: \"not-started\",\n      ref,\n    });\n\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state,\n      });\n\n      start();\n\n      // common data for the end state\n      // make sure to use the same ref as the starting one\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly(),\n        },\n      } as const;\n\n      return maybeUpdateState({\n        ...(await state.flowResult),\n        ...endProps,\n      });\n    } catch (error: any) {\n      const errorState: ErrorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error,\n      };\n\n      maybeUpdateState(errorState);\n\n      throw error;\n    }\n  }\n}\n","import { SyncBailHook, SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { DeferredPromise } from \"p-defer\";\nimport defer from \"p-defer\";\nimport type {\n  NavigationFlow,\n  NavigationFlowState,\n  NavigationFlowEndState,\n} from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\n\nexport interface NamedState {\n  /** The name of the navigation node */\n  name: string;\n\n  /** The nav node */\n  value: NavigationFlowState;\n}\n\nexport interface TransitionOptions {\n  /** Ignore any validations or other signals preventing the transition from taking place  */\n  force?: boolean;\n}\nexport type TransitionFunction = (\n  name: string,\n  options?: TransitionOptions,\n) => void;\n\n/** The Content navigation state machine */\nexport class FlowInstance {\n  private flow: NavigationFlow;\n  private log?: Logger;\n  private history: string[];\n  private isTransitioning = false;\n  private flowPromise?: DeferredPromise<NavigationFlowEndState>;\n  public readonly id: string;\n  public currentState?: NamedState;\n  public readonly hooks = {\n    beforeStart: new SyncBailHook<[NavigationFlow], NavigationFlow>(),\n\n    /** A callback when the onStart node was present */\n    onStart: new SyncHook<[any]>(),\n\n    /** A callback when the onEnd node was present */\n    onEnd: new SyncHook<[any]>(),\n\n    /** A hook to intercept and block a transition */\n    skipTransition: new SyncBailHook<\n      [NamedState | undefined],\n      boolean | undefined\n    >(),\n\n    /** A chance to manipulate the flow-node used to calculate the given transition used  */\n    beforeTransition: new SyncWaterfallHook<\n      [Exclude<NavigationFlowState, NavigationFlowEndState>, string]\n    >(),\n\n    /** A chance to manipulate the flow-node calculated after a transition */\n    resolveTransitionNode: new SyncWaterfallHook<[NavigationFlowState]>(),\n\n    /** A callback when a transition from 1 state to another was made */\n    transition: new SyncHook<[NamedState | undefined, NamedState]>(),\n\n    /** A callback to run actions after a transition occurs */\n    afterTransition: new SyncHook<[FlowInstance]>(),\n  };\n\n  constructor(\n    id: string,\n    flow: NavigationFlow,\n    options?: {\n      /** Logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState: NamedState) => {\n        const newState = nextState.value;\n\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      },\n    );\n  }\n\n  /** Start the state machine */\n  public async start(): Promise<NavigationFlowEndState> {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n\n      return this.flowPromise.promise;\n    }\n\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n\n    const initialState = this.flow.startState;\n\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n\n    return this.flowPromise.promise;\n  }\n\n  public transition(transitionValue: string, options?: TransitionOptions) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`,\n      );\n    }\n\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`,\n      );\n\n      return;\n    }\n\n    if (this.currentState === undefined) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`,\n        );\n        return;\n      }\n    }\n\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue,\n    );\n\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n\n    if (nextState === undefined) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`,\n      );\n\n      return;\n    }\n\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `,\n    );\n\n    return this.pushHistory(nextState, options);\n  }\n\n  private pushHistory(stateName: string, options?: TransitionOptions) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n\n    let nextState = this.flow[stateName];\n\n    if (\n      !this.flow[stateName] ||\n      typeof nextState !== \"object\" ||\n      !(\"state_type\" in nextState)\n    ) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n\n      return;\n    }\n\n    const prevState = this.currentState;\n\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n\n    const newCurrentState = {\n      name: stateName,\n      value: nextState,\n    } as NamedState;\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n\n    // If the new state is an END state call the `onEnd` if it exists\n\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState,\n    });\n\n    this.isTransitioning = false;\n\n    this.hooks.afterTransition.call(this);\n  }\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport type { View, NavigationFlowViewState } from \"@player-ui/types\";\n\nimport { resolveDataRefsInString } from \"../../string-resolver\";\nimport type { Resolve } from \"../../view\";\nimport { ViewInstance } from \"../../view\";\nimport type { Logger } from \"../../logger\";\nimport type { FlowInstance, FlowController } from \"../flow\";\nimport type { DataController } from \"../data/controller\";\nimport { AssetTransformCorePlugin } from \"./asset-transform\";\nimport type { TransformRegistry } from \"./types\";\nimport type { BindingInstance } from \"../../binding\";\n\nexport interface ViewControllerOptions {\n  /** Where to get data from */\n  model: DataController;\n\n  /** Where to log data */\n  logger?: Logger;\n\n  /** A flow-controller instance to listen for view changes */\n  flowController: FlowController;\n}\n\n/** A controller to manage updating/switching views */\nexport class ViewController {\n  public readonly hooks = {\n    /** Do any processing before the `View` instance is created */\n    resolveView: new SyncWaterfallHook<\n      [View | undefined, string, NavigationFlowViewState]\n    >(),\n\n    // The hook right before the View starts resolving. Attach anything custom here\n    view: new SyncHook<[ViewInstance]>(),\n  };\n\n  private readonly viewMap: Record<string, View>;\n  private readonly viewOptions: Resolve.ResolverOptions & ViewControllerOptions;\n  private pendingUpdate?: {\n    /** pending data binding changes */\n    changedBindings?: Set<BindingInstance>;\n    /** Whether we have a microtask queued to handle this pending update */\n    scheduled?: boolean;\n  };\n\n  public currentView?: ViewInstance;\n  public transformRegistry: TransformRegistry = new Registry();\n  public optimizeUpdates = true;\n\n  constructor(\n    initialViews: View[],\n    options: Resolve.ResolverOptions & ViewControllerOptions,\n  ) {\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce<Record<string, View>>(\n      (viewMap, view) => {\n        // eslint-disable-next-line no-param-reassign\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {},\n    );\n\n    new AssetTransformCorePlugin(this.transformRegistry).apply(this);\n\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow: FlowInstance) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = undefined;\n          }\n        });\n      },\n    );\n\n    /** Trigger a view update */\n    const update = (updates: Set<BindingInstance>, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t) => t.binding)),\n          updateOptions?.silent ?? false,\n        );\n      },\n    );\n\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n\n      // Deleting an array item will trigger an update for the entire array\n      if (typeof property === \"number\" && parentBinding) {\n        update(new Set([parentBinding]));\n      } else {\n        update(new Set([binding]));\n      }\n    });\n  }\n\n  private queueUpdate(bindings: Set<BindingInstance>, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      // If there's already a pending update, just add to it don't worry about silent updates here yet\n      this.pendingUpdate.changedBindings = new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings,\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n\n    // If there's no pending update, schedule one only if this one isn't silent\n    // otherwise if this is silent, we'll just wait for the next non-silent update and make sure our bindings are included\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = undefined;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n\n  private getViewForRef(viewRef: string): View | undefined {\n    // First look for a 1:1 viewRef -> id mapping (this is most common)\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n\n    // The view ids saved may also contain model refs, resolve those and try again\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) =>\n        viewRef ===\n        resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate,\n        }),\n    );\n\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n\n  public onView(state: NavigationFlowViewState) {\n    const viewId = state.ref;\n\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state,\n    );\n\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n\n    // Give people a chance to attach their\n    // own listeners to the view before we resolve it\n    this.hooks.view.call(view);\n    view.update();\n  }\n}\n","export interface Node<T extends string> {\n  /** The basic node type */\n  name: T;\n}\n\n/**\n * An AST node that represents a nested path in the model\n * foo.{{bar}}.baz (this is {{bar}})\n */\nexport interface PathNode extends Node<\"PathNode\"> {\n  /** The path in the model that this node represents */\n  path: Array<AnyNode>;\n}\n\n/**\n * A segment representing a query\n * [foo=bar]\n */\nexport interface QueryNode extends Node<\"Query\"> {\n  /** The key to query */\n  key: AnyNode;\n\n  /** The target value */\n  value?: AnyNode;\n}\n\n/** A simple segment */\nexport interface ValueNode extends Node<\"Value\"> {\n  /** The segment value */\n  value: string | number;\n}\n\n/** A nested expression */\nexport interface ExpressionNode extends Node<\"Expression\"> {\n  /** The expression */\n  value: string;\n}\n\n/** Helper to create a value node */\nexport const toValue = (value: string | number): ValueNode => ({\n  name: \"Value\",\n  value,\n});\n\n/** Helper to create an expression node */\nexport const toExpression = (value: string): ExpressionNode => ({\n  name: \"Expression\",\n  value,\n});\n\n/** Helper to create a nested path node */\nexport const toPath = (path: Array<AnyNode>): PathNode => ({\n  name: \"PathNode\",\n  path,\n});\n\n/** Helper to create a query node */\nexport const toQuery = (key: AnyNode, value?: AnyNode): QueryNode => ({\n  name: \"Query\",\n  key,\n  value,\n});\n\n/** Create a concat node */\nexport const toConcatenatedNode = (\n  values: Array<PathNode | ValueNode | ExpressionNode>,\n): PathNode | ValueNode | ConcatenatedNode | ExpressionNode => {\n  if (values.length === 1) {\n    return values[0];\n  }\n\n  return {\n    name: \"Concatenated\",\n    value: values,\n  };\n};\n\n/**\n * A binding segment that's multiple smaller ones\n * {{foo}}_bar_{{baz}}\n */\nexport interface ConcatenatedNode extends Node<\"Concatenated\"> {\n  /** A list of nested paths, or value nodes to concat together to form a segment */\n  value: Array<PathNode | ValueNode | ExpressionNode>;\n}\n\nexport type AnyNode =\n  | PathNode\n  | QueryNode\n  | ValueNode\n  | ConcatenatedNode\n  | ExpressionNode;\nexport type Path = Array<AnyNode>;\n\nexport interface ParserSuccessResult {\n  /** A successful parse result */\n  status: true;\n\n  /** The path the binding represents */\n  path: PathNode;\n}\n\nexport interface ParserFailureResult {\n  /** A failed parse result */\n  status: false;\n\n  /** The message representing the reason the parse result failed */\n  error: string;\n}\n\nexport type ParserResult = ParserSuccessResult | ParserFailureResult;\n\nexport type Parser = (raw: string) => ParserResult;\n","import type {\n  Parser,\n  AnyNode,\n  PathNode,\n  ConcatenatedNode,\n  ValueNode,\n  QueryNode,\n  ExpressionNode,\n} from \"../ast\";\nimport {\n  toValue,\n  toPath,\n  toConcatenatedNode,\n  toQuery,\n  toExpression,\n} from \"../ast\";\n\nconst SEGMENT_SEPARATOR = \".\";\nconst OPEN_CURL = \"{\";\nconst CLOSE_CURL = \"}\";\nconst OPEN_BRACKET = \"[\";\nconst CLOSE_BRACKET = \"]\";\nconst EQUALS = \"=\";\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nconst BACK_TICK = \"`\";\n// const IDENTIFIER_REGEX = /[\\w\\-@]+/;\n\n/** A _faster_ way to match chars instead of a regex. */\nconst isIdentifierChar = (char?: string): boolean => {\n  if (!char) {\n    return false;\n  }\n\n  const charCode = char.charCodeAt(0);\n\n  const matches =\n    charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125; // }\n\n  return !matches;\n};\n\n/** Parse out a binding AST from a path */\nexport const parse: Parser = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n\n  /** get the next char in the string */\n  const next = (expected?: string) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n\n  /** gobble all whitespace */\n  const whitespace = () => {\n    /* eslint-disable no-unmodified-loop-condition */\n    while (ch === \" \") {\n      next();\n    }\n  };\n\n  /** get an identifier if you can */\n  const identifier = (): ValueNode | undefined => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n\n    let value: string | number = ch;\n\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n\n  /** get an expression node if you can */\n  const expression = (): ExpressionNode | undefined => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n\n      let exp = ch;\n\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n\n        exp += ch;\n      }\n\n      next(BACK_TICK);\n\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n\n  /** Grab a value using a regex */\n  const regex = (match: RegExp): ValueNode | undefined => {\n    if (!ch?.match(match)) {\n      return;\n    }\n\n    let value = ch;\n\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      return toValue(value);\n    }\n  };\n\n  /** parse out a nestedPath if you can */\n  const nestedPath = (): PathNode | undefined => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n\n      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n\n  /** get a simple segment node */\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n\n  /** Parse a segment */\n  const segment = ():\n    | ConcatenatedNode\n    | PathNode\n    | ValueNode\n    | ExpressionNode\n    | undefined => {\n    // Either a string, modelRef, or concatenated version (both)\n    const segments: Array<ValueNode | PathNode | ExpressionNode> = [];\n    let nextSegment = simpleSegment();\n\n    while (nextSegment !== undefined) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n\n    if (segments.length === 0) {\n      return undefined;\n    }\n\n    return toConcatenatedNode(segments);\n  };\n\n  /** get an optionally quoted block */\n  const optionallyQuotedSegment = ():\n    | ValueNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    whitespace();\n\n    // see if we have a quote\n\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n\n    return simpleSegment();\n  };\n\n  /** eat equals signs */\n  const equals = (): boolean => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n\n    while (ch === EQUALS) {\n      next();\n    }\n\n    return true;\n  };\n\n  /** Parse out a bracket */\n  const parseBracket = ():\n    | ValueNode\n    | QueryNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value: ValueNode | QueryNode | PathNode | ExpressionNode | undefined =\n        optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n\n      return value;\n    }\n  };\n\n  /** Parse a segment and any number of brackets following it */\n  const parseSegmentAndBrackets = (): Array<AnyNode> => {\n    // try to parse a segment first\n\n    const parsed: Array<AnyNode> = [];\n\n    const firstSegment = segment();\n\n    if (firstSegment) {\n      parsed.push(firstSegment);\n\n      let bracketSegment = parseBracket();\n\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value =\n          isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value\n            ? bracketSegment.value\n            : maybeNumber;\n      }\n\n      while (bracketSegment !== undefined) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n\n    return parsed;\n  };\n\n  /** Parse out a path segment */\n  const parsePath = (): PathNode => {\n    const parts: AnyNode[] = [];\n\n    let nextSegment = parseSegmentAndBrackets();\n\n    while (nextSegment !== undefined) {\n      parts.push(...nextSegment);\n\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n\n    return toPath(parts);\n  };\n\n  try {\n    const result = parsePath();\n\n    return {\n      status: true,\n      path: result,\n    };\n  } catch (e: any) {\n    return {\n      status: false,\n      error: e.message,\n    };\n  }\n};\n","import { getBindingSegments } from \"./utils\";\n\nexport interface BindingParserOptions {\n  /** Get the value for a specific binding */\n  get: (binding: BindingInstance) => any;\n\n  /**\n   * Set the values for bindings.\n   * This is used when the query syntax needs to modify an object\n   */\n  set: (transaction: Array<[BindingInstance, any]>) => void;\n\n  /**\n   * Get the result of evaluating an expression\n   */\n  evaluate: (exp: string) => any;\n\n  /**\n   * Without readOnly, if a binding such as this is used: arr[key='does not exist'],\n   * then an object with that key will be created.\n   * This is done to make assignment such as arr[key='abc'].val = 'foo' work smoothly.\n   * Setting readOnly to true will prevent this behavior, avoiding unintended data changes.\n   */\n  readOnly?: boolean;\n}\n\nexport type Getter = (path: BindingInstance) => any;\n\nexport type RawBindingSegment = number | string;\nexport type RawBinding = string | RawBindingSegment[];\nexport type BindingLike = RawBinding | BindingInstance;\nexport type BindingFactory = (\n  raw: RawBinding,\n  options?: Partial<BindingParserOptions>,\n) => BindingInstance;\n\n/**\n * A path in the data model\n */\nexport class BindingInstance {\n  private split: RawBindingSegment[];\n  private joined: string;\n  private factory: BindingFactory;\n\n  constructor(\n    raw: RawBinding,\n    factory = (rawBinding: RawBinding) => new BindingInstance(rawBinding),\n  ) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n\n      const tryNum = Number(segment);\n      // test to make sure turning a numerical string to a number doesn't change\n      // the actual value of the string by getting rid of a leading zero\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n\n  asArray(): RawBindingSegment[] {\n    return this.split;\n  }\n\n  asString(): string {\n    return this.joined;\n  }\n\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding: BindingInstance): boolean {\n    // need to account for partial key matches\n    // [foo, bar] !== [foo, ba]\n    const bindingAsArray = binding.asArray();\n\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n\n    // Check every overlapping index to make sure they're the same\n    // Intentionally use a for loop for speeeed\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  relative(binding: BindingInstance): RawBindingSegment[] {\n    return this.asArray().slice(binding.asArray().length);\n  }\n\n  parent(): BindingInstance {\n    return this.factory(this.split.slice(0, -1));\n  }\n\n  key(): RawBindingSegment {\n    return this.split[this.split.length - 1];\n  }\n\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative: BindingLike): BindingInstance {\n    const descendentSegments = getBindingSegments(relative);\n\n    return this.factory(this.split.concat(descendentSegments));\n  }\n}\n","import type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelMiddleware,\n  DataModelOptions,\n  Updates,\n} from \"./model\";\n\nexport type DependencySets = \"core\" | \"children\";\n\n/** A class to track usage of read/writes to/from a data model */\nexport class DependencyTracker {\n  protected readDeps: Set<BindingInstance>;\n  protected writeDeps: Set<BindingInstance>;\n  protected namedSet: DependencySets;\n\n  private namedDependencySets: Partial<\n    Record<\n      DependencySets,\n      {\n        /** readDeps */\n        readDeps: Set<BindingInstance>;\n        /** writeDeps */\n        writeDeps: Set<BindingInstance>;\n      }\n    >\n  >;\n\n  constructor() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n\n  protected createSubset(name: DependencySets, force = false): void {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: new Set(),\n        writeDeps: new Set(),\n      };\n    }\n  }\n\n  /** Grab all of the bindings that this depended on */\n  public getDependencies(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.readDeps ?? new Set();\n    }\n\n    return this.readDeps;\n  }\n\n  public trackSubset(name: DependencySets) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n\n  public trackDefault() {\n    this.namedSet = \"core\";\n  }\n\n  /** Grab all of the bindings this wrote to */\n  public getModified(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? new Set();\n    }\n\n    return this.writeDeps;\n  }\n\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  public readsBinding(binding: BindingInstance): boolean {\n    return this.readDeps.has(binding);\n  }\n\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  public writesBinding(binding: BindingInstance): boolean {\n    return this.writeDeps.has(binding);\n  }\n\n  /** Reset all tracking of dependencies */\n  public reset() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n\n  protected addReadDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n\n    this.readDeps.add(binding);\n  }\n\n  protected addWriteDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n\n    this.writeDeps.add(binding);\n  }\n\n  public addChildReadDep(binding: BindingInstance): void {\n    this.addReadDep(binding, \"children\");\n  }\n}\n\n/** Middleware that tracks dependencies of read/written data */\nexport class DependencyMiddleware\n  extends DependencyTracker\n  implements DataModelMiddleware\n{\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return next?.set(transaction, options) ?? [];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addReadDep(binding);\n\n    return next?.get(binding, options);\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n}\n\n/** A data-model that tracks dependencies of read/written data */\nexport class DependencyModel<Options = DataModelOptions>\n  extends DependencyTracker\n  implements DataModelImpl<Options>\n{\n  private readonly rootModel: DataModelImpl<Options>;\n\n  constructor(rootModel: DataModelImpl<Options>) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n\n  public set(transaction: BatchSetTransaction, options?: Options): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return this.rootModel.set(transaction, options);\n  }\n\n  public get(binding: BindingInstance, options?: Options) {\n    this.addReadDep(binding);\n\n    return this.rootModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: Options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n}\n","import type { DataModelImpl } from \"./model\";\n\n/**\n * A model that does nothing\n * Helpful for testing and other default DataModel applications\n */\nexport class NOOPDataModel implements DataModelImpl {\n  get() {\n    return undefined;\n  }\n\n  set() {\n    return [];\n  }\n\n  delete() {}\n}\n\n/** You only really need 1 instance of the NOOP model */\nexport const NOOP_MODEL = new NOOPDataModel();\n","import type { Binding } from \"@player-ui/types\";\n\nimport type { BindingLike } from \"../binding\";\nimport type {\n  ExpressionHandler,\n  ExpressionContext,\n  ExpressionNode,\n} from \"./types\";\n\n/** Sets a value to the data-model */\nexport const setDataVal: ExpressionHandler<[Binding, any], any> = (\n  _context: ExpressionContext,\n  binding,\n  value,\n) => {\n  _context.model.set([[binding as BindingLike, value]]);\n};\n\n/** Fetches a valid from the data-model */\nexport const getDataVal: ExpressionHandler<[Binding], unknown> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.get(binding as BindingLike);\n};\n\n/** Deletes a value from the model */\nexport const deleteDataVal: ExpressionHandler<[Binding], void> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.delete(binding);\n};\n\n/** Conditional expression handler */\nexport const conditional: ExpressionHandler<\n  [ExpressionNode, ExpressionNode, ExpressionNode?]\n> = (ctx, condition, ifTrue, ifFalse) => {\n  const resolution = ctx.evaluate(condition);\n  if (resolution) {\n    return ctx.evaluate(ifTrue);\n  }\n\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n\n  return null;\n};\n\nconditional.resolveParams = false;\n","import { SyncHook } from \"tapable-ts\";\nimport type { Logger, Severity } from \"./types\";\n\n/** A logger that has a tapable subscriptions to callbacks */\nexport default class TapableLogger implements Logger {\n  public readonly hooks = {\n    trace: new SyncHook<[Array<any>]>(),\n    debug: new SyncHook<[Array<any>]>(),\n    info: new SyncHook<[Array<any>]>(),\n    warn: new SyncHook<[Array<any>]>(),\n    error: new SyncHook<[Array<any>]>(),\n    log: new SyncHook<[Severity, Array<any>]>(),\n  };\n\n  private logHandlers: Set<Logger> = new Set();\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n\n  public addHandler(logHandler: Logger) {\n    this.logHandlers.add(logHandler);\n  }\n\n  public removeHandler(logHandler: Logger) {\n    this.logHandlers.delete(logHandler);\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { Logger, Severity, LoggerProvider } from \"./types\";\n\n/**\n * The ProxyLogger allows a user to log to another Logger instance that may not exist yet\n */\nexport default class ProxyLogger implements Logger {\n  private proxiedLoggerProvider: LoggerProvider;\n\n  constructor(loggerProvider: LoggerProvider) {\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { ValidatorFunction } from \"./types\";\n\n/** A registry that tracks validators  */\nexport class ValidatorRegistry {\n  private registry: Map<string, ValidatorFunction<any>>;\n\n  constructor() {\n    this.registry = new Map();\n  }\n\n  /** Use the given validator name to fetch the handler */\n  public get(name: string): ValidatorFunction | undefined {\n    return this.registry.get(name);\n  }\n\n  /** Register a new validator */\n  public register<T>(name: string, handler: ValidatorFunction<T>) {\n    this.registry.set(name, handler);\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { View as ViewType } from \"@player-ui/types\";\nimport type { BindingInstance, BindingFactory } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { Logger } from \"../logger\";\nimport type { Resolve } from \"./resolver\";\nimport { Resolver } from \"./resolver\";\nimport type { Node } from \"./parser\";\nimport { Parser } from \"./parser\";\nimport { TemplatePlugin } from \"./plugins\";\n\n/**\n * Manages the view level validations\n */\nclass CrossfieldProvider implements ValidationProvider {\n  private allValidations = new Set<ValidationObject>();\n  private byBinding = new Map<BindingInstance, Array<ValidationObject>>();\n  private logger?: Logger;\n\n  constructor(initialView: ViewType, parser: BindingFactory, logger?: Logger) {\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n\n  private parse(contentView: ViewType, parser: BindingFactory) {\n    const xfieldRefs = contentView.validation;\n\n    if (xfieldRefs === undefined) {\n      return;\n    }\n\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`,\n      );\n\n      return;\n    }\n\n    // Grab the validations from the view (as authored) and parse out the ones that have a _ref_ (to a binding)\n    // Group them all by binding to make it easier to return than later\n\n    xfieldRefs.forEach((vRef) => {\n      // x-field validations by default are triggered by navigating away from the page\n      // the reference can also override that _or_ the severity\n      const withDefaults: ValidationObject = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef,\n      };\n\n      this.allValidations.add(withDefaults);\n\n      // The validation reference contains a _ref_ (a binding)\n      const { ref } = vRef;\n\n      if (ref) {\n        /** Group together validations by binding */\n        const parsed = parser(ref);\n\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.byBinding.get(binding);\n  }\n}\n\n/** A stateful view instance from an content */\nexport class ViewInstance implements ValidationProvider {\n  public hooks = {\n    onUpdate: new SyncHook<[ViewType]>(),\n    parser: new SyncHook<[Parser]>(),\n    resolver: new SyncHook<[Resolver]>(),\n    onTemplatePluginCreated: new SyncHook<[TemplatePlugin]>(),\n    templatePlugin: new SyncHook<[TemplatePlugin]>(),\n  };\n\n  private resolver?: Resolver;\n  public readonly initialView: ViewType;\n  public readonly resolverOptions: Resolve.ResolverOptions;\n  private rootNode?: Node.Node;\n\n  private validationProvider?: CrossfieldProvider;\n\n  private templatePlugin: TemplatePlugin | undefined;\n\n  // TODO might want to add a version/timestamp to this to compare updates\n  public lastUpdate: Record<string, any> | undefined;\n\n  constructor(initialView: ViewType, resolverOptions: Resolve.ResolverOptions) {\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n    this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n      this.templatePlugin = templatePlugin;\n    });\n  }\n\n  public updateAsync() {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n\n  public update(changes?: Set<BindingInstance>) {\n    if (this.rootNode === undefined) {\n      /** On initialization of the view, also create a validation parser */\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger,\n      );\n\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\",\n        );\n      }\n\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser),\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n\n    const update = this.resolver?.update(changes);\n\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n\n    return update;\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n}\n\n/** A plugin for a view */\nexport interface ViewPlugin {\n  /** Called with a view instance */\n  apply(view: ViewInstance): void;\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Template } from \"@player-ui/types\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport { hasTemplateKey } from \"../parser/utils\";\n\nconst templateSymbol = Symbol(\"template\");\n\nexport interface TemplateItemInfo {\n  /** The index of the data for the current iteration of the template */\n  index: number;\n  /** The data for the current iteration of the template */\n  data: any;\n  /** The depth of the template node */\n  depth: number;\n}\n\nexport interface TemplateSubstitution {\n  /** Regular expression to find and replace. The global flag will be always be added to this expression. */\n  expression: string | RegExp;\n  /** The value to replace matches with. */\n  value: string;\n}\n\nexport type TemplateSubstitutionsFunc = (\n  baseSubstitutions: TemplateSubstitution[],\n  templateItemInfo: TemplateItemInfo,\n) => TemplateSubstitution[];\n\n/** A view plugin to resolve/manage templates */\nexport default class TemplatePlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  hooks: {\n    resolveTemplateSubstitutions: SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo],\n      Record<string, any>\n    >;\n  } = {\n    resolveTemplateSubstitutions: new SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo]\n    >(),\n  };\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private parseTemplate(\n    parseObject: any,\n    node: Node.Template,\n    options: Options,\n  ): Node.Node | null {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n\n    if (!data) {\n      return null;\n    }\n\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n\n    const values: Array<Node.Node> = [];\n\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions =\n        this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index),\n            },\n          ],\n          {\n            depth,\n            data: dataItem,\n            index,\n          },\n        );\n      let templateStr = JSON.stringify(template);\n\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n\n      const parsed = parseObject(JSON.parse(templateStr), NodeType.Value, {\n        templateDepth: node.depth + 1,\n      });\n\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n\n    const result: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: false,\n      values,\n    };\n\n    // Removes undefined Symbol property\n    if (node.placement !== undefined) {\n      (result as any)[templateSymbol] = node.placement;\n    }\n\n    return result;\n  }\n\n  applyParser(parser: Parser): void {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === NodeType.Template && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options,\n        );\n      }\n\n      return node;\n    });\n\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node: Node.Node): string | undefined {\n        if (node.type === NodeType.MultiNode) {\n          return (node as any)[templateSymbol];\n        } else if (node.type === NodeType.Template) {\n          return node.placement;\n        }\n        return undefined;\n      }\n\n      if (\n        node &&\n        (node.type === NodeType.View || node.type === NodeType.Asset) &&\n        Array.isArray(node.children)\n      ) {\n        node.children = node.children.sort((a, b) => {\n          // compare template output with static values\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n\n          const pathsEqual = aPath === bPath;\n\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n\n            if (aPlacement !== undefined && bPlacement === undefined) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== undefined && aPlacement === undefined) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== undefined && bPlacement !== undefined) {\n              // Both have placement values\n              if (aPlacement === bPlacement) {\n                return 0; // Same placement, no preference\n              }\n              // \"prepend\" should come before \"append\"\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n\n          // Trigger more sorting for nested assets\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj\n            .map((template: Template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: NodeType.Template,\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement,\n                },\n                template,\n              );\n\n              if (!templateAST) return;\n\n              if (templateAST.type === NodeType.MultiNode) {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST,\n              };\n            })\n            .filter(Boolean);\n        }\n      },\n    );\n  }\n\n  applyResolverHooks(resolver: Resolver): void {\n    // Transform dynamic templates into MultiNodes\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === NodeType.Template && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance): void {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { EMPTY_NODE, NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { hasSwitchKey } from \"../parser/utils\";\n\n/** A view plugin to resolve switches */\nexport default class SwitchPlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private resolveSwitch(node: Node.Switch, options: Options): Node.Node {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n\n    return EMPTY_NODE;\n  }\n\n  private isSwitch(obj: any) {\n    return (\n      obj &&\n      (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") ||\n        Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"))\n    );\n  }\n\n  applyParser(parser: Parser) {\n    /** Switches resolved during the parsing phase are static */\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === NodeType.Switch && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          this.isSwitch(obj) ||\n          (childOptions && hasSwitchKey(childOptions.key))\n        ) {\n          const objToParse =\n            childOptions && hasSwitchKey(childOptions.key)\n              ? { [childOptions.key]: obj }\n              : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic\n            ? objToParse.dynamicSwitch\n            : objToParse.staticSwitch;\n\n          const cases: Node.SwitchCase[] = switchContent\n            .map(\n              (switchCase: {\n                [x: string]: any;\n                /**\n                 *\n                 */\n                case: any;\n              }) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  NodeType.Value,\n                  options,\n                );\n\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value: value as Node.Value,\n                  };\n                }\n\n                return;\n              },\n            )\n            .filter(Boolean);\n\n          const switchAST = parser.createASTNode(\n            {\n              type: NodeType.Switch,\n              dynamic,\n              cases,\n            },\n            objToParse,\n          );\n\n          if (!switchAST || switchAST.type === NodeType.Empty) {\n            return childOptions ? [] : null;\n          }\n\n          if (switchAST.type === NodeType.Switch) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value: any = switchAST;\n\n            if (\n              switchAST.type === NodeType.Value &&\n              switchAST.children?.length === 1 &&\n              switchAST.value === undefined\n            ) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n\n            return [{ path, value }];\n          }\n\n          return switchAST;\n        }\n      },\n    );\n  }\n\n  applyResolver(resolver: Resolver) {\n    /** Switches resolved during the parsing phase are dynamic */\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === NodeType.Switch && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { hasTemplateValues, hasTemplateKey } from \"../parser/utils\";\n\n/** A view plugin to resolve multi nodes */\nexport default class MultiNodePlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          childOptions &&\n          !hasTemplateKey(childOptions.key) &&\n          Array.isArray(obj)\n        ) {\n          const values = obj\n            .map((childVal) =>\n              parser.parseObject(childVal, NodeType.Value, options),\n            )\n            .filter((child): child is Node.Node => !!child);\n\n          if (!values.length) {\n            return [];\n          }\n\n          const multiNode = parser.createASTNode(\n            {\n              type: NodeType.MultiNode,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key,\n              ),\n              values,\n            },\n            obj,\n          );\n\n          if (!multiNode) {\n            return [];\n          }\n\n          if (multiNode.type === NodeType.MultiNode) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/** A view plugin to resolve assets */\nexport default class AssetPlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, NodeType.Asset, options);\n\n          if (!assetAST) {\n            return [];\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { Navigation, NavigationFlowEndState } from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\nimport type { TransitionOptions } from \"./flow\";\nimport { FlowInstance } from \"./flow\";\n\n/** A manager for the navigation section of a Content blob */\nexport class FlowController {\n  public readonly hooks = {\n    flow: new SyncHook<[FlowInstance]>(),\n  };\n\n  private readonly log?: Logger;\n  private navigation: Navigation;\n  private navStack: FlowInstance[];\n  public current?: FlowInstance;\n\n  constructor(\n    navigation: Navigation,\n    options?: {\n      /** A logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n\n  /** Navigate to another state in the state-machine */\n  public transition(stateTransition: string, options?: TransitionOptions) {\n    if (this.current === undefined) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n\n    this.current.transition(stateTransition, options);\n  }\n\n  private addNewFlow(flow: FlowInstance) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n\n  private async run(startState: string): Promise<NavigationFlowEndState> {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n\n    const startFlow = this.navigation[startState];\n\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`),\n      );\n    }\n\n    this.log?.debug(`Starting flow: ${startState}`);\n\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`,\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n\n    const end = await flow.start();\n    this.navStack.pop();\n\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n\n    return end;\n  }\n\n  public async start(): Promise<NavigationFlowEndState> {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n\n    return this.run(this.navigation.BEGIN);\n  }\n}\n","import type { Validation } from \"@player-ui/types\";\nimport type { ViewPlugin, Resolver, Node, ViewInstance } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport type {\n  BindingInstance,\n  BindingLike,\n  BindingFactory,\n} from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ValidationResponse } from \"../../validator\";\n\nconst CONTEXT = \"validation-binding-tracker\";\n\nexport interface BindingTracker {\n  /** Get the bindings currently being tracked for validation */\n  getBindings(): Set<BindingInstance>;\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance): void;\n}\ninterface Options {\n  /** Parse a binding from a view */\n  parseBinding: BindingFactory;\n\n  /** Callbacks when events happen */\n  callbacks?: {\n    /** Called when a binding is encountered for the first time in a view */\n    onAdd?: (binding: BindingInstance) => void;\n  };\n}\n\n/** A view plugin that manages bindings tracked across updates */\nexport class ValidationBindingTrackerViewPlugin\n  implements ViewPlugin, BindingTracker\n{\n  private options: Options;\n\n  private trackedBindings = new Set<BindingInstance>();\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  /** Fetch the tracked bindings in the current view */\n  getBindings(): Set<BindingInstance> {\n    return this.trackedBindings;\n  }\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver: Resolver) {\n    this.trackedBindings.clear();\n\n    /** Each node maps to a set of bindings that it directly tracks */\n    const tracked = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Each Node is a registered section or page that maps to a set of nodes in its section */\n    const sections = new Map<Node.Node, Set<Node.Node>>();\n\n    let lastViewUpdateChangeSet: Set<BindingInstance> | undefined;\n\n    /** Map of node to all bindings in children */\n    const lastComputedBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n    let currentBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of registered section nodes to bindings */\n    const lastSectionBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of resolved nodes to their original nodes. */\n    const resolvedNodeMap: Map<Node.Node, Node.Node> = new Map();\n\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter((b) =>\n          trackedBindingsForNode.has(b),\n        ),\n      );\n\n      return intersection.size === 0;\n    });\n\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === undefined) {\n        return options;\n      }\n\n      // Clear out any old tracked bindings for this node since we're re-compiling it\n      tracked.delete(node);\n\n      /** Validation callback to track a binding */\n      const track = (binding: BindingLike) => {\n        const parsed = isBinding(binding)\n          ? binding\n          : this.options.parseBinding(binding);\n\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, new Set([parsed]));\n        }\n\n        /** find first parent registered as section and add self to its list */\n        let { parent } = node;\n\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            const eows = options.validation\n              ?._getValidationForBinding(binding)\n              ?.getAll(getOptions);\n\n            const firstFieldEOW = eows?.find(\n              (eow) =>\n                eow.displayTarget === \"field\" ||\n                eow.displayTarget === undefined,\n            );\n\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            return (\n              options.validation\n                ?._getValidationForBinding(binding)\n                ?.getAll(getOptions) ?? []\n            );\n          },\n          getChildren: (type?: Validation.DisplayTarget) => {\n            const validations = new Array<ValidationResponse>();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && (type === undefined || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array<ValidationResponse>();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, new Set());\n              }\n            }\n          },\n          track,\n        },\n      };\n    });\n\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        // Compute the new tree for this node\n        // If it's not-updated, use the last known value\n\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === NodeType.MultiNode) {\n            resolvedNode.values.forEach((value) =>\n              currentBindingTree\n                .get(value)\n                ?.forEach((b) => newlyComputed.add(b)),\n            );\n          }\n\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree\n                .get(child.value)\n                ?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? new Set(),\n          );\n        }\n\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = new Set<BindingInstance>();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = new Map();\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n}\n","export interface Store {\n  useLocalState<T>(initialState: T): readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\ninterface SharedStore {\n  getLocalStateFunction<T>(\n    key: string | symbol,\n    countKey: symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\n/** A store that holds on to state for a transform */\nexport class LocalStateStore implements SharedStore {\n  private state: Map<string | symbol, any>;\n\n  private updateCallback?: () => void;\n\n  constructor(onUpdate?: () => void) {\n    this.updateCallback = onUpdate;\n\n    this.state = new Map();\n  }\n\n  public removeKey(key: symbol | string) {\n    this.state.delete(key);\n  }\n\n  public reset() {\n    this.state.clear();\n  }\n\n  useSharedState<T>(key: string | symbol) {\n    return (initialState: T) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n\n      return [\n        this.state.get(key) as T,\n        (newState: T) => {\n          const current = this.state.get(key) as T;\n\n          this.state.set(key, newState);\n\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n\n  getLocalStateFunction<T>(key: symbol, countKey: symbol) {\n    return (initialState: T) => {\n      // initialize if not already created\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n\n      this.state.set(countKey, oldCount + 1);\n\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n\n      const value = localState[oldCount] as T;\n\n      return [\n        value,\n        (newState: T) => {\n          const oldValue = localState[oldCount] as T;\n          localState[oldCount] = newState;\n\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n}\n","import type { Node } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport { LocalStateStore } from \"./store\";\nimport type { TransformRegistry } from \"./types\";\nimport type { ViewController } from \"./controller\";\n\n/** Traverse up the nodes until the target is found */\nfunction findUp(node: Node.Node, target: Node.Node): boolean {\n  if (node === target) {\n    return true;\n  }\n\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n\n  return false;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport class AssetTransformCorePlugin {\n  public readonly stateStore: Map<Node.Node, LocalStateStore>;\n  private readonly registry: TransformRegistry;\n  private beforeResolveSymbol: symbol;\n  private resolveSymbol: symbol;\n  private beforeResolveCountSymbol: symbol;\n  private resolveCountSymbol: symbol;\n\n  constructor(registry: TransformRegistry) {\n    this.registry = registry;\n    this.stateStore = new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n\n  apply(viewController: ViewController) {\n    viewController.hooks.view.tap(\"asset-transform\", (view) => {\n      // Clear out everything when we create a new view\n      this.stateStore.clear();\n\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode: Node.Node | undefined;\n\n        /** A function to update the state and trigger a view re-compute */\n        const updateState = (node: Node.Node) => {\n          lastUpdatedNode = node;\n          view.update(new Set());\n        };\n\n        /** Given a node and a transform step, fetch a local store */\n        const getStore = (node: Node.Node, stepKey: symbol) => {\n          let store: LocalStateStore;\n          const countKey =\n            stepKey === this.resolveSymbol\n              ? this.resolveCountSymbol\n              : this.beforeResolveCountSymbol;\n\n          const storedState = this.stateStore.get(node);\n\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n\n          return {\n            useSharedState: (\n              key: string | symbol,\n            ): (<T>(initialState: T) => readonly [T, (value: T) => void]) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: <T>(initialState: T) => {\n              return store.getLocalStateFunction<T>(\n                stepKey,\n                countKey,\n              )(initialState);\n            },\n          };\n        };\n\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol,\n              );\n\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n\n          return node;\n        });\n\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = undefined;\n        });\n\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== NodeType.Asset && node.type !== NodeType.View) {\n              return value;\n            }\n\n            const originalNode = resolver.getSourceNode(node);\n\n            if (!originalNode) {\n              return value;\n            }\n\n            const transform = this.registry.get(value);\n\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n\n              return transform?.resolve(value, options, store);\n            }\n\n            return value;\n          },\n        );\n      });\n    });\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { DataController } from \".\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingLike } from \"../../binding\";\nimport type {\n  DataModelWithParser,\n  DataModelOptions,\n  Updates,\n} from \"../../data\";\n\n/** Wrapper for the Data Controller Class that prevents writes */\nexport class ReadOnlyDataController\n  implements DataModelWithParser<DataModelOptions>\n{\n  private controller: DataController;\n  private logger?: Logger;\n\n  constructor(controller: DataController, logger?: Logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n\n  get(binding: BindingLike, options?: DataModelOptions | undefined) {\n    return this.controller.get(binding, options);\n  }\n\n  set(\n    transaction: [BindingLike, any][],\n    options?: DataModelOptions | undefined,\n  ): Updates {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\",\n    );\n    return [];\n  }\n\n  delete(binding: BindingLike, options?: DataModelOptions | undefined): void {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\",\n    );\n  }\n}\n","import { SyncHook, SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { dequal } from \"dequal\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingParser, BindingLike } from \"../../binding\";\nimport { BindingInstance } from \"../../binding\";\nimport type {\n  BatchSetTransaction,\n  Updates,\n  DataModelOptions,\n  DataModelWithParser,\n  DataPipeline,\n  DataModelMiddleware,\n} from \"../../data\";\nimport { PipelinedDataModel, LocalModel } from \"../../data\";\nimport type { RawSetTransaction } from \"../../types\";\nimport { ReadOnlyDataController } from \"./utils\";\n\n/** The orchestrator for player data */\nexport class DataController implements DataModelWithParser<DataModelOptions> {\n  public hooks = {\n    resolve: new SyncWaterfallHook(),\n    resolveDataStages: new SyncWaterfallHook<[DataPipeline]>(),\n\n    // On any set or get of an undefined value, redirect the value to be the default\n    resolveDefaultValue: new SyncBailHook<[BindingInstance], any>(),\n\n    onDelete: new SyncHook<[any]>(),\n\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n\n    onGet: new SyncHook<[any, any]>(),\n\n    onUpdate: new SyncHook<[Updates, DataModelOptions | undefined]>(),\n\n    format: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    deformat: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    serialize: new SyncWaterfallHook<[any]>(),\n  };\n\n  private model?: PipelinedDataModel;\n  private trash: Set<BindingInstance>;\n  private pathResolver: BindingParser;\n  private baseMiddleware: Array<DataModelMiddleware>;\n  private logger?: Logger;\n\n  constructor(\n    model: Record<any, unknown> | undefined,\n    options: {\n      /** A means of parsing a raw binding to a Binding object */\n      pathResolver: BindingParser;\n\n      /** middleware to use. typically for validation */\n      middleware?: Array<DataModelMiddleware>;\n\n      /** A logger to use  */\n      logger?: Logger;\n    },\n  ) {\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n\n    this.trash = new Set();\n    this.pathResolver = options.pathResolver;\n  }\n\n  public getModel(): PipelinedDataModel {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n\n    return this.model;\n  }\n\n  private resolveDataValue(\n    binding: BindingInstance,\n    value: any,\n    deformat: boolean,\n  ) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n\n    return value;\n  }\n\n  public set(\n    transaction: RawSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    let normalizedTransaction: BatchSetTransaction = [];\n\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted)),\n        ];\n      }) as BatchSetTransaction;\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding: string) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted)),\n          ];\n        },\n      ) as BatchSetTransaction;\n    }\n\n    // Figure out what the base changes being applied are\n    const setUpdates = normalizedTransaction.reduce<Updates>(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal,\n        };\n\n        if (dequal(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`,\n          );\n        } else {\n          updates.push(update);\n\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`,\n          );\n        }\n\n        return updates;\n      },\n      [],\n    );\n\n    // Get the applied update\n    const result = this.getModel().set(normalizedTransaction, options);\n\n    // Add any extra bindings that were effected\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (\n        !setUpdateBindings.has(tr.binding) &&\n        (tr.force === true || !dequal(tr.oldValue, tr.newValue))\n      ) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${\n            tr.oldValue\n          } to: ${tr.newValue}`,\n        );\n        setUpdates.push(tr);\n      }\n    });\n\n    this.hooks.onSet.call(normalizedTransaction);\n\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n\n    return result;\n  }\n\n  private resolve(binding: BindingLike, readOnly: boolean): BindingInstance {\n    return Array.isArray(binding) || typeof binding === \"string\"\n      ? this.pathResolver.parse(binding, { readOnly })\n      : binding;\n  }\n\n  public get(binding: BindingLike, options?: DataModelOptions) {\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n\n    if (result === undefined && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n\n    this.hooks.onGet.call(binding, result);\n\n    return result;\n  }\n\n  public delete(binding: BindingLike, options?: DataModelOptions) {\n    if (\n      typeof binding !== \"string\" &&\n      !Array.isArray(binding) &&\n      !(binding instanceof BindingInstance)\n    ) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, false);\n\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n\n    const existedBeforeDelete =\n      typeof parentValue === \"object\" &&\n      parentValue !== null &&\n      Object.prototype.hasOwnProperty.call(parentValue, property);\n\n    this.getModel().delete(resolved, options);\n\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n\n    this.hooks.onDelete.call(resolved);\n  }\n\n  public serialize(): object {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n\n  public makeReadOnly(): ReadOnlyDataController {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n}\n","import { LocalModel } from \"../../data\";\nimport { BindingInstance } from \"../../binding\";\nimport { objectToBatchSet } from \"./utils\";\n\nexport interface ConstantsProvider {\n  /**\n   * Function to add constants to the providers store\n   * - @param data values to add to the constants store\n   */\n  addConstants(data: Record<string, any>, namespace: string): void;\n\n  /**\n   * Function to retrieve constants from the providers store\n   *  - @param key Key used for the store access\n   *  - @param namespace namespace values were loaded under (defined in the plugin)\n   *  - @param fallback Optional - if key doesn't exist in namespace what to return (will return unknown if not provided)\n   */\n  getConstants(key: any, namespace: string, fallback?: any): any;\n\n  /**\n   * Function to set values to temporarily override certain keys in the perminant store\n   * - @param data values to override store with\n   * - @param namespace namespace to override\n   */\n  setTemporaryValues(data: any, namespace: string): void;\n\n  /**\n   * Clears any temporary values that were previously set\n   */\n  clearTemporaryValues(): void;\n}\n\n/**\n * Key/Value store for constants and context for Player\n */\nexport class ConstantsController implements ConstantsProvider {\n  /**\n   * Data store is basically a map of namespaces to DataModels to provide some data isolation\n   */\n  private store: Map<string, LocalModel>;\n\n  /**\n   * Separate store for temporary flow specific overrides.\n   * They are kept in a separate data model to make clearing it easier between flows\n   * and so there is no confusion on what is static and what is temporary\n   */\n  private tempStore: Map<string, LocalModel>;\n\n  constructor() {\n    this.store = new Map();\n    this.tempStore = new Map();\n  }\n\n  addConstants(data: any, namespace: string): void {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n\n  getConstants(key: string, namespace: string, fallback?: any): any {\n    const path = new BindingInstance(key);\n\n    return (\n      this.tempStore.get(namespace)?.get(path) ??\n      this.store.get(namespace)?.get(path) ??\n      fallback\n    );\n  }\n\n  setTemporaryValues(data: any, namespace: string): void {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n\n  clearTemporaryValues(namespace?: string): void {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value: LocalModel) => {\n        value.reset();\n      });\n    }\n  }\n}\n","import type {\n  Expression,\n  ExpressionObject,\n  NavigationFlowState,\n} from \"@player-ui/types\";\nimport type { ExpressionEvaluator, ExpressionType } from \"../expressions\";\nimport type { FlowInstance } from \"../controllers\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/**\n * A plugin that taps into the flow controller to evaluate available expressions\n * Expressions can be exposed via lifecycle \"hooks\" in flow/state nodes\n * e.g: onStart, onEnd\n */\nexport class FlowExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let expressionEvaluator: ExpressionEvaluator | undefined;\n\n    /**\n     * Eval Helper\n     *\n     * @param exp - an expression to be evaluated\n     */\n    const handleEval = (exp: Expression | ExpressionObject) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp as ExpressionType);\n        }\n      }\n    };\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow: FlowInstance) => {\n        // Eval flow nodes\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        // Eval state nodes\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState: NavigationFlowState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          },\n        });\n      });\n    });\n  }\n}\n","import type { ExpressionHandler, ExpressionType } from \"../expressions\";\nimport type { SchemaController } from \"../schema\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/** Gets formatter for given formatName and formats value if found, returns value otherwise */\nconst createFormatFunction = (schema: SchemaController) => {\n  /**\n   * The generated handler for the given schema\n   */\n  const handler: ExpressionHandler<[unknown, string], any> = (\n    ctx,\n    value,\n    formatName,\n  ) => {\n    return (\n      schema.getFormatterForType({ type: formatName })?.format(value) ?? value\n    );\n  };\n\n  return handler;\n};\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let formatFunction: ExpressionHandler<[unknown, string]> | undefined;\n\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args: [ExpressionType]) => {\n          return ctx.evaluate(...args);\n        },\n      );\n    });\n  }\n}\n","import type { Flow, FlowResult } from \"@player-ui/types\";\nimport type { BindingParser, BindingLike } from \"./binding\";\nimport type { SchemaController } from \"./schema\";\nimport type { ExpressionEvaluator } from \"./expressions\";\nimport type { Logger } from \"./logger\";\nimport type {\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport type { ReadOnlyDataController } from \"./controllers/data/utils\";\n\n/** The status for a flow's execution state */\nexport type PlayerFlowStatus =\n  | \"not-started\"\n  | \"in-progress\"\n  | \"completed\"\n  | \"error\";\n\n/** Common interface for the state of Player's flow execution */\nexport interface BaseFlowState<T extends PlayerFlowStatus> {\n  /** A unique reference for the life-cycle of a flow */\n  ref: symbol;\n\n  /** The status of the given flow */\n  status: T;\n}\n\n/** The beginning state of Player, before it's seen a flow  */\nexport type NotStartedState = BaseFlowState<\"not-started\">;\n\nexport const NOT_STARTED_STATE: NotStartedState = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\",\n};\n\n/** Shared properties for a flow in any state of execution (in-progress, completed successfully, or errored out) */\nexport interface PlayerFlowExecutionData {\n  /** The currently executing flow */\n  flow: Flow;\n}\n\nexport interface ControllerState {\n  /** The manager for data for a flow */\n  data: DataController;\n\n  /** The view manager for a flow */\n  view: ViewController;\n\n  /** The schema manager for a flow */\n  schema: SchemaController;\n\n  /** The validation manager for a flow */\n  validation: ValidationController;\n\n  /** The expression evaluator for a flow */\n  expression: ExpressionEvaluator;\n\n  /** The manager for parsing and resolving bindings */\n  binding: BindingParser;\n\n  /** the manager for the flow state machine */\n  flow: FlowController;\n}\n\n/** A flow is currently executing */\nexport type InProgressState = BaseFlowState<\"in-progress\"> &\n  PlayerFlowExecutionData & {\n    /** A promise that resolves when the flow is completed */\n    flowResult: Promise<FlowResult>;\n\n    /** The underlying state controllers for the current flow */\n    controllers: ControllerState;\n\n    /** Allow other platforms to abort the current flow with an error  */\n    fail: (error: Error) => void;\n\n    /**\n     * The Logger for the current player instance\n     */\n    logger: Logger;\n  };\n\n/** The flow completed properly */\nexport type CompletedState = BaseFlowState<\"completed\"> &\n  PlayerFlowExecutionData &\n  FlowResult & {\n    /** Readonly Player controllers to provide Player functionality after the flow has ended */\n    controllers: {\n      /** A read only instance of the Data Controller */\n      data: ReadOnlyDataController;\n    };\n  };\n\n/** The flow finished but not successfully */\nexport type ErrorState = BaseFlowState<\"error\"> & {\n  /** The currently executing flow */\n  flow: Flow;\n\n  /** The error associated with the failed flow */\n  error: Error;\n};\n\n/** Any Player state  */\nexport type PlayerFlowState =\n  | NotStartedState\n  | InProgressState\n  | CompletedState\n  | ErrorState;\n\n// Model\n\nexport type RawSetType = [BindingLike, any];\nexport type RawSetTransaction = Record<string, any> | RawSetType[];\n","import type { Player, PlayerPlugin } from \"../player\";\nimport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  MultiNodePlugin,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TemplatePlugin,\n  toNodeResolveOptions,\n} from \"../view\";\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultViewPlugin implements PlayerPlugin {\n  name = \"default-view-plugin\";\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n        new AssetPlugin().apply(view);\n        new SwitchPlugin(pluginOptions).apply(view);\n        new ApplicabilityPlugin().apply(view);\n        new StringResolverPlugin().apply(view);\n        const templatePlugin = new TemplatePlugin(pluginOptions);\n        templatePlugin.apply(view);\n        view.hooks.onTemplatePluginCreated.call(templatePlugin);\n        new MultiNodePlugin().apply(view);\n      });\n    });\n  }\n}\n","import { SyncBailHook, AsyncSeriesWaterfallHook, SyncHook } from \"tapable-ts\";\nimport type {\n  Player,\n  PlayerPlugin,\n  PlayerFlowState,\n  Logger,\n  Asset,\n  View,\n} from \"@player-ui/player\";\nimport { resolveDataRefs } from \"@player-ui/player\";\nimport { setIn } from \"timm\";\nimport { BeaconPluginSymbol } from \"./symbols\";\n\nexport type BeaconDataType = string | Record<string, any>;\n\nexport interface BeaconMetaData {\n  /** Additional data to send along with beacons */\n  beacon?: BeaconDataType;\n}\n\nexport interface AssetBeaconInfo {\n  /** Additional data about the asset */\n  metaData?: BeaconMetaData;\n}\n\nexport type AssetBeacon = Asset & AssetBeaconInfo;\nexport type ViewBeacon = View & AssetBeaconInfo;\n\nexport interface BeaconPluginPlugin {\n  /** Use this to tap into the beacon plugin hooks */\n  apply: (beaconPlugin: BeaconPlugin) => void;\n}\n\nexport interface BeaconPluginOptions {\n  /** Callback when a beacon is published */\n  callback?: (beacon: any) => void;\n  /** A set of plugins to load  */\n  plugins?: BeaconPluginPlugin[];\n}\n\ninterface BeaconContext {\n  /** The full current view */\n  view?: ViewBeacon;\n}\n\nexport interface BeaconArgs {\n  /** The action being performed */\n  action: string;\n  /** The specific element that the beacon originated from */\n  element: string;\n  /** The asset firing the beacon */\n  asset: AssetBeacon;\n  /** The current view */\n  view?: ViewBeacon;\n  /** Any additional data to attach to the event */\n  data?: any;\n}\n\nexport interface HookArgs extends BeaconArgs {\n  /** The current player state */\n  state?: PlayerFlowState;\n  /** The beacon plugin logger */\n  logger: Logger;\n}\n\n/**\n * A player plugin to manage beacon events.\n * It automatically keeps track of the current user's view, and adds additional metaData to each beacon event.\n */\nexport class BeaconPlugin implements PlayerPlugin {\n  name = \"Beacon\";\n\n  static Symbol = BeaconPluginSymbol;\n  public readonly symbol = BeaconPlugin.Symbol;\n\n  private player?: Player;\n  private logger?: Logger;\n\n  private beaconContext: BeaconContext = {\n    view: undefined,\n  };\n\n  private resolveDataRefs?: <T>(data: T) => T;\n\n  public hooks = {\n    buildBeacon: new AsyncSeriesWaterfallHook<[unknown, HookArgs]>(),\n    cancelBeacon: new SyncBailHook<[HookArgs], boolean>(),\n    publishBeacon: new SyncHook<[any]>(),\n  };\n\n  constructor(options?: BeaconPluginOptions) {\n    if (options?.plugins) {\n      options.plugins.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n\n    if (options?.callback) {\n      this.hooks.publishBeacon.tap(\"BeaconCallback\", (beacon: any) => {\n        if (options.callback) {\n          options.callback(beacon);\n        }\n      });\n    }\n  }\n\n  apply(player: Player) {\n    this.player = player;\n    this.logger = player.logger;\n\n    player.hooks.state.tap(this.name, (playerState) => {\n      if (playerState.status === \"in-progress\") {\n        this.resolveDataRefs = (data) =>\n          resolveDataRefs(data, {\n            model: playerState.controllers.data,\n            evaluate: playerState.controllers.expression.evaluate,\n          });\n      }\n    });\n\n    player.hooks.viewController.tap(this.name, (vc) => {\n      this.beaconContext = {\n        view: undefined,\n      };\n\n      vc.hooks.view.tap(this.name, (view) => {\n        let beaconedView = false;\n\n        view.hooks.parser.tap(this.name, (parser) => {\n          /* If there is a 'beacon' property in an asset or view, skip resolving as we\n             are doing this manually when beacon is fired. */\n          parser.hooks.onCreateASTNode.tap(this.name, (obj) => {\n            if (obj?.type !== \"asset\" && obj?.type !== \"view\") return undefined;\n\n            const propertiesToSkip =\n              obj.plugins?.stringResolver?.propertiesToSkip ?? [];\n\n            if (propertiesToSkip.includes(\"beacon\")) return undefined;\n\n            // eslint-disable-next-line no-param-reassign\n            obj.plugins = setIn(\n              obj.plugins ?? {},\n              [\"stringResolver\", \"propertiesToSkip\"],\n              [\"beacon\", ...propertiesToSkip],\n            ) as any;\n\n            return obj;\n          });\n        });\n\n        view.hooks.onUpdate.tap(this.name, (viewUpdate: ViewBeacon) => {\n          this.beaconContext = {\n            view: viewUpdate,\n          };\n\n          if (!beaconedView) {\n            this.beacon({\n              action: \"viewed\",\n              element: \"view\",\n              asset: viewUpdate,\n              view: viewUpdate,\n            });\n\n            beaconedView = true;\n          }\n        });\n      });\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      evaluator.addExpressionFunction(\"beacon\", (_ctx, action, data) => {\n        const view = this.beaconContext.view || ({} as ViewBeacon);\n        this.beacon({\n          action: action as string,\n          data: data as any,\n          element: \"view\",\n          asset: view,\n          view,\n        });\n      });\n    });\n  }\n\n  beacon(event: BeaconArgs) {\n    const { action, element, asset, view } = event;\n    const { view: currentView } = this.beaconContext;\n    setTimeout(async () => {\n      const unresolvedData = event?.data || event.asset?.metaData?.beacon;\n\n      const data = this.resolveDataRefs?.(unresolvedData) ?? unresolvedData;\n\n      const defaultBeacon = {\n        action,\n        element,\n        data,\n        assetId: asset?.id,\n        viewId: currentView?.id,\n      };\n      const state = this.player?.getState();\n      const hookArgs = {\n        ...event,\n        data,\n        state,\n        view: view ?? currentView,\n        logger: this.logger as Logger,\n      };\n      let beacon =\n        (await this.hooks.buildBeacon.call(defaultBeacon, hookArgs)) ||\n        defaultBeacon;\n\n      // Re-resolve data refs in case the hook modified the beacon and introduced more\n      if (beacon !== defaultBeacon && this.resolveDataRefs) {\n        beacon = this.resolveDataRefs(beacon);\n      }\n\n      const shouldCancel = this.hooks.cancelBeacon.call(hookArgs) || false;\n\n      if (!shouldCancel) {\n        this.logger?.debug(\"Sending beacon event\", beacon);\n        this.hooks.publishBeacon.call(beacon);\n      }\n    }, 0);\n  }\n}\n","export const BeaconPluginSymbol = Symbol.for(\"BeaconPlugin\");\n"]}