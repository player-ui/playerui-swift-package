{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1848/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/types-provider/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/types-provider/core/src/index.ts"],"names":["TypesProviderPlugin","__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toCommonJS","mod","value","src_exports","config","apply","player","hooks","schema","tap","types","addDataTypes","formats","addFormatters","validators","validationController","createValidatorRegistry","validationRegistry","forEach","handler","register"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAIA,sBAAsB,AAAC;IACzB,IAAIC,YAAYC,OAAOC,cAAc;IACrC,IAAIC,mBAAmBF,OAAOG,wBAAwB;IACtD,IAAIC,oBAAoBJ,OAAOK,mBAAmB;IAClD,IAAIC,eAAeN,OAAOO,SAAS,CAACC,cAAc;IAClD,IAAIC,WAAW,SAACC,QAAQC;QACtB,IAAK,IAAIC,QAAQD,IACfZ,UAAUW,QAAQE,MAAM;YAAEC,KAAKF,GAAG,CAACC,KAAK;YAAEE,YAAY;QAAK;IAC/D;IACA,IAAIC,cAAc,SAACC,IAAIC,MAAMC,QAAQC;QACnC,IAAIF,QAAQ,OAAOA,SAAS,YAAY,OAAOA,SAAS,YAAY;gBAC7D,kCAAA,2BAAA;;;oBAAA,IAAIG,MAAJ;oBACH,IAAI,CAACd,aAAae,IAAI,CAACL,IAAII,QAAQA,QAAQF,QACzCnB,UAAUiB,IAAII,KAAK;wBAAEP,KAAK;mCAAMI,IAAI,CAACG,IAAI;;wBAAEN,YAAY,CAAEK,CAAAA,OAAOjB,iBAAiBe,MAAMG,IAAG,KAAMD,KAAKL,UAAU;oBAAC;;gBAFpH,QAAK,YAAWV,kBAAkBa,0BAA7B,SAAA,6BAAA,QAAA,yBAAA;;gBAAA;gBAAA;;;yBAAA,6BAAA;wBAAA;;;wBAAA;8BAAA;;;;QAGP;QACA,OAAOD;IACT;IACA,IAAIM,eAAe,SAACC;eAAQR,YAAYhB,UAAU,CAAC,GAAG,cAAc;YAAEyB,OAAO;QAAK,IAAID;;IAEtF,sHAAsH;ICpBxH,IAAAE,cAAA,CAAA;IAAAhB,SAAAgB,aAAA;QAAA3B,qBAAA;mBAAAA;;IAAA;IA4BO,IAAMA,oCAAN;iBAAMA,oBAKC4B,MAAA;;YAJZ,IAAA,CAAAd,IAAA,GAAO;YAKL,IAAA,CAAKc,MAAA,GAASA;;;;gBAGhBC,KAAAA;uBAAAA,SAAAA,MAAMC,MAAA;;oBACJA,OAAOC,KAAA,CAAMC,MAAA,CAAOC,GAAA,CAAI,IAAA,CAAKnB,IAAA,EAAM,SAACkB;wBAClC,IAAI,MAAKJ,MAAA,CAAOM,KAAA,EAAO;4BACrBF,OAAOG,YAAA,CAAa,MAAKP,MAAA,CAAOM,KAAK;wBACvC;wBAEA,IAAI,MAAKN,MAAA,CAAOQ,OAAA,EAAS;4BACvBJ,OAAOK,aAAA,CAAc,MAAKT,MAAA,CAAOQ,OAAO;wBAC1C;oBACF;oBAEA,IAAI,IAAA,CAAKR,MAAA,CAAOU,UAAA,EAAY;wBAC1BR,OAAOC,KAAA,CAAMQ,oBAAA,CAAqBN,GAAA,CAChC,IAAA,CAAKnB,IAAA,EACL,SAACyB;4BACCA,qBAAqBR,KAAA,CAAMS,uBAAA,CAAwBP,GAAA,CACjD,MAAKnB,IAAA,EACL,SAAC2B;oCACC;iCAAA,0BAAA,MAAKb,MAAA,CAAOU,UAAA,cAAZ,8CAAA,wBAAwBI,OAAA,CAAQ;6EAAE5B,kBAAM6B;oCACtCF,mBAAmBG,QAAA,CAAS9B,MAAM6B;gCACpC;4BACF;wBAEJ;oBAEJ;gBACF;;;;;IDPA,OAAOnB,aAAaG;AACtB","sourcesContent":["\"use strict\";\nvar TypesProviderPlugin = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/types-provider/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    TypesProviderPlugin: () => TypesProviderPlugin\n  });\n  var TypesProviderPlugin = class {\n    constructor(config) {\n      this.name = \"TypesProviderPlugin\";\n      this.config = config;\n    }\n    apply(player) {\n      player.hooks.schema.tap(this.name, (schema) => {\n        if (this.config.types) {\n          schema.addDataTypes(this.config.types);\n        }\n        if (this.config.formats) {\n          schema.addFormatters(this.config.formats);\n        }\n      });\n      if (this.config.validators) {\n        player.hooks.validationController.tap(\n          this.name,\n          (validationController) => {\n            validationController.hooks.createValidatorRegistry.tap(\n              this.name,\n              (validationRegistry) => {\n                this.config.validators?.forEach(([name, handler]) => {\n                  validationRegistry.register(name, handler);\n                });\n              }\n            );\n          }\n        );\n      }\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\n","import type {\n  Player,\n  PlayerPlugin,\n  ValidatorFunction,\n  FormatType,\n  Schema,\n} from \"@player-ui/player\";\n\nexport interface TypesConfig {\n  /**\n   * DataTypes to expose to Player instance.\n   * The schema definition in authored content can reference these to get common functionality across types\n   */\n  types?: Array<Schema.DataType<any>>;\n\n  /**\n   * Custom validators to add to this player instance.\n   * Anything defined here will be available for use in any DataType or view-validation\n   */\n  validators?: Array<[string, ValidatorFunction<any>]>;\n\n  /** A list of formats (and handler functions) to expose to DataTypes */\n  formats?: Array<FormatType<any, any, any>>;\n}\n\n/**\n * The TypesProvider plugin provides an easy way for users to expose custom validators, DataTypes, or formatters to the content\n */\nexport class TypesProviderPlugin implements PlayerPlugin {\n  name = \"TypesProviderPlugin\";\n\n  private config: TypesConfig;\n\n  constructor(config: TypesConfig) {\n    this.config = config;\n  }\n\n  apply(player: Player) {\n    player.hooks.schema.tap(this.name, (schema) => {\n      if (this.config.types) {\n        schema.addDataTypes(this.config.types);\n      }\n\n      if (this.config.formats) {\n        schema.addFormatters(this.config.formats);\n      }\n    });\n\n    if (this.config.validators) {\n      player.hooks.validationController.tap(\n        this.name,\n        (validationController) => {\n          validationController.hooks.createValidatorRegistry.tap(\n            this.name,\n            (validationRegistry) => {\n              this.config.validators?.forEach(([name, handler]) => {\n                validationRegistry.register(name, handler);\n              });\n            },\n          );\n        },\n      );\n    }\n  }\n}\n"]}