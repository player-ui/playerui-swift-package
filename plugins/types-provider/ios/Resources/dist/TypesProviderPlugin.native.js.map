{"version":3,"sources":["../../../../../../../../../../../../execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/plugins/types-provider/core/src/index.ts"],"sourcesContent":["import type {\n  Player,\n  PlayerPlugin,\n  ValidatorFunction,\n  FormatType,\n  Schema,\n} from \"@player-ui/player\";\n\nexport interface TypesConfig {\n  /**\n   * DataTypes to expose to Player instance.\n   * The schema definition in authored content can reference these to get common functionality across types\n   */\n  types?: Array<Schema.DataType<any>>;\n\n  /**\n   * Custom validators to add to this player instance.\n   * Anything defined here will be available for use in any DataType or view-validation\n   */\n  validators?: Array<[string, ValidatorFunction<any>]>;\n\n  /** A list of formats (and handler functions) to expose to DataTypes */\n  formats?: Array<FormatType<any, any, any>>;\n}\n\n/**\n * The TypesProvider plugin provides an easy way for users to expose custom validators, DataTypes, or formatters to the content\n */\nexport class TypesProviderPlugin implements PlayerPlugin {\n  name = \"TypesProviderPlugin\";\n\n  private config: TypesConfig;\n\n  constructor(config: TypesConfig) {\n    this.config = config;\n  }\n\n  apply(player: Player) {\n    player.hooks.schema.tap(this.name, (schema) => {\n      if (this.config.types) {\n        schema.addDataTypes(this.config.types);\n      }\n\n      if (this.config.formats) {\n        schema.addFormatters(this.config.formats);\n      }\n    });\n\n    if (this.config.validators) {\n      player.hooks.validationController.tap(\n        this.name,\n        (validationController) => {\n          validationController.hooks.createValidatorRegistry.tap(\n            this.name,\n            (validationRegistry) => {\n              this.config.validators?.forEach(([name, handler]) => {\n                validationRegistry.register(name, handler);\n              });\n            },\n          );\n        },\n      );\n    }\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AA4BO,MAAM,sBAAN,MAAkD;AAAA,IAKvD,YAAY,QAAqB;AAJjC,kBAAO;AAKL,WAAK,SAAS;AAAA,IAChB;AAAA,IAEA,MAAM,QAAgB;AACpB,aAAO,MAAM,OAAO,IAAI,KAAK,MAAM,CAAC,WAAW;AAC7C,YAAI,KAAK,OAAO,OAAO;AACrB,iBAAO,aAAa,KAAK,OAAO,KAAK;AAAA,QACvC;AAEA,YAAI,KAAK,OAAO,SAAS;AACvB,iBAAO,cAAc,KAAK,OAAO,OAAO;AAAA,QAC1C;AAAA,MACF,CAAC;AAED,UAAI,KAAK,OAAO,YAAY;AAC1B,eAAO,MAAM,qBAAqB;AAAA,UAChC,KAAK;AAAA,UACL,CAAC,yBAAyB;AACxB,iCAAqB,MAAM,wBAAwB;AAAA,cACjD,KAAK;AAAA,cACL,CAAC,uBAAuB;AACtB,qBAAK,OAAO,YAAY,QAAQ,CAAC,CAAC,MAAM,OAAO,MAAM;AACnD,qCAAmB,SAAS,MAAM,OAAO;AAAA,gBAC3C,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;","names":[]}