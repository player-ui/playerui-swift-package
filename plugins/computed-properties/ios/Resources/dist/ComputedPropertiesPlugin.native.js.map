{"version":3,"sources":["../../../../../../../../../../../../execroot/_main/bazel-out/darwin_arm64-fastbuild/bin/plugins/computed-properties/core/src/index.ts"],"sourcesContent":["import type {\n  Player,\n  PlayerPlugin,\n  ExpressionEvaluator,\n  Schema,\n  Expression,\n  DataModelMiddleware,\n  Updates,\n  SchemaController,\n  BindingInstance,\n} from \"@player-ui/player\";\n\nexport interface ExpressionDataType extends Schema.DataType<\"Expression\"> {\n  /** The expression to evaluate to compute the value of this node */\n  exp?: Expression;\n}\n\n/**\n * A player plugin to manage beacon events.\n * It automatically keeps track of the current user's view, and adds additional metaData to each beacon event.\n */\nexport class ComputedPropertiesPlugin implements PlayerPlugin {\n  name = \"ComputedProperties\";\n\n  apply(player: Player) {\n    // Inject a middleware into the data-model to intercept any calls to an expression type in the schema\n    // Calls to `set` throw an error. Calls to `get` compute the value and return if or default\n\n    let schemaController: SchemaController | undefined;\n    let expressionEvaluator: ExpressionEvaluator | undefined;\n\n    /** Look up the data-type of the binding, and check for an Expression type */\n    const getExpressionType = (\n      binding: BindingInstance,\n    ): ExpressionDataType | undefined => {\n      // Check to see if the data-type of the binding is an `Expression`\n      const dataType = schemaController?.getType(binding);\n\n      if (dataType?.type === \"Expression\") {\n        return dataType as ExpressionDataType;\n      }\n    };\n\n    const computedPropertyMiddleware: DataModelMiddleware = {\n      name: this.name,\n      get(binding, options, next) {\n        const expType = getExpressionType(binding);\n\n        if (expType) {\n          const { exp } = expType;\n          const result =\n            exp && expressionEvaluator?.evaluate(exp, options?.context);\n\n          return result ?? expType.default;\n        }\n\n        return next?.get(binding, options);\n      },\n      set(transaction, options, next): Updates {\n        for (const setOperation of transaction) {\n          if (getExpressionType(setOperation[0])) {\n            throw new Error(\n              `Invalid 'set' operation on computed property: ${setOperation[0].asString()}`,\n            );\n          }\n        }\n\n        return next?.set(transaction, options) ?? [];\n      },\n      delete(binding, options, next) {\n        if (getExpressionType(binding)) {\n          throw new Error(\n            `Invalid 'delete' operation on computed property: ${binding.asString()}`,\n          );\n        }\n\n        return next?.delete(binding, options);\n      },\n    };\n\n    player.hooks.dataController.tap(this.name, (dataController) => {\n      dataController.hooks.resolveDataStages.tap(this.name, (dataPipeline) => {\n        return [...dataPipeline, computedPropertyMiddleware];\n      });\n    });\n\n    player.hooks.schema.tap(this.name, (schema) => {\n      schemaController = schema;\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAqBO,MAAM,2BAAN,MAAuD;AAAA,IAAvD;AACL,kBAAO;AAAA;AAAA,IAEP,MAAM,QAAgB;AAIpB,UAAI;AACJ,UAAI;AAGJ,YAAM,oBAAoB,CACxB,YACmC;AAEnC,cAAM,WAAW,kBAAkB,QAAQ,OAAO;AAElD,YAAI,UAAU,SAAS,cAAc;AACnC,iBAAO;AAAA,QACT;AAAA,MACF;AAEA,YAAM,6BAAkD;AAAA,QACtD,MAAM,KAAK;AAAA,QACX,IAAI,SAAS,SAAS,MAAM;AAC1B,gBAAM,UAAU,kBAAkB,OAAO;AAEzC,cAAI,SAAS;AACX,kBAAM,EAAE,IAAI,IAAI;AAChB,kBAAM,SACJ,OAAO,qBAAqB,SAAS,KAAK,SAAS,OAAO;AAE5D,mBAAO,UAAU,QAAQ;AAAA,UAC3B;AAEA,iBAAO,MAAM,IAAI,SAAS,OAAO;AAAA,QACnC;AAAA,QACA,IAAI,aAAa,SAAS,MAAe;AACvC,qBAAW,gBAAgB,aAAa;AACtC,gBAAI,kBAAkB,aAAa,CAAC,CAAC,GAAG;AACtC,oBAAM,IAAI;AAAA,gBACR,iDAAiD,aAAa,CAAC,EAAE,SAAS,CAAC;AAAA,cAC7E;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,MAAM,IAAI,aAAa,OAAO,KAAK,CAAC;AAAA,QAC7C;AAAA,QACA,OAAO,SAAS,SAAS,MAAM;AAC7B,cAAI,kBAAkB,OAAO,GAAG;AAC9B,kBAAM,IAAI;AAAA,cACR,oDAAoD,QAAQ,SAAS,CAAC;AAAA,YACxE;AAAA,UACF;AAEA,iBAAO,MAAM,OAAO,SAAS,OAAO;AAAA,QACtC;AAAA,MACF;AAEA,aAAO,MAAM,eAAe,IAAI,KAAK,MAAM,CAAC,mBAAmB;AAC7D,uBAAe,MAAM,kBAAkB,IAAI,KAAK,MAAM,CAAC,iBAAiB;AACtE,iBAAO,CAAC,GAAG,cAAc,0BAA0B;AAAA,QACrD,CAAC;AAAA,MACH,CAAC;AAED,aAAO,MAAM,OAAO,IAAI,KAAK,MAAM,CAAC,WAAW;AAC7C,2BAAmB;AAAA,MACrB,CAAC;AAED,aAAO,MAAM,oBAAoB,IAAI,KAAK,MAAM,CAAC,cAAc;AAC7D,8BAAsB;AAAA,MACxB,CAAC;AAAA,IACH;AAAA,EACF;","names":[]}