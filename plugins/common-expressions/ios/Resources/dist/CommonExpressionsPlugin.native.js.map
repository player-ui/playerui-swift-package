{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1862/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/deep-partial-matcher.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/partial-match-registry/src/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/parser.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/async.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/schema/schema.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/string-resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/binding-map-splice.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/resolver/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/string-resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/utils/replaceParams.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/utils.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/expressions/toNum.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/expressions/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/src/nested-error.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/index.ts","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/expression/core/src/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/resolver.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/local-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/validation-middleware.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/parser/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/applicability.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/player.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/flow.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/ast.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding-grammar/custom/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/binding/binding.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/dependency-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/data/noop-model.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/expressions/evaluator-functions.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/tapableLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/logger/proxyLogger.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/validator/registry.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/view.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/template.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/switch.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/multi-node.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/view/store.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/view/plugins/asset-transform.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/flow/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/validation/binding-tracker.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/utils.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/data/controller.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/controllers/constants/index.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/flow-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-exp-plugin.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/types.ts","../../../../../../../../../../../../execroot/execroot/_main/bazel-out/k8-fastbuild/bin/core/player/src/plugins/default-view-plugin.ts"],"names":["CommonExpressionsPlugin","equalToOrIn","value","check","Array","isArray","includes","callTap","tap","args","ctx","context","callback","dlv_es_default","obj","key","def","p","undef","split","length","find","iter","tar","keys","dequal","createMatcher","partialObj","pairs","traverseObj","matchFunction","searchObj","from","entry","path","count","size","createBasicMatcher","seed","matcher","match","isBinding","binding","maybeConvertToNum","i","asInt","parseInt","isNaN","getBindingSegments","asArray","findInArray","array","findIndex","withParser","model","parseBinding","maybeParse","readOnly","parsed","get","set","Error","options","transaction","map","val","delete","toModel","middleware","defaultOptions","next","resolvedOptions","constructModelForPipeline","pipeline","NOOP_MODEL","createModelWithOptions","reduce","nextModel","isExpressionNode","x","__id","ExpNodeOpaqueIdentifier","throwError","message","index","err","description","createSpanningLocation","start","end","getMaxKeyLen","maxLen","Object","forEach","prototype","hasOwnProperty","call","binaryPrecedence","opVal","binaryOps","createBinaryExpression","operator","left","right","location","type","isDecimalDigit","ch","isIdentifierStart","isIdentifierPart","isModelRefStart","ch0","ch1","OCURL_CODE","parseExpression","expr","strictMode","strict","charAtFunc","charAt","charCodeAtFunc","charCodeAt","getLocation","startChar","character","exprI","exprICode","gobbleObjects","attributes","closed","shouldDefineKey","chCode","startCharIndex","gobbleSpaces","CCURL_CODE","SQUOTE_CODE","DQUOTE_CODE","gobbleStringLiteral","COLON_CODE","gobbleExpression","push","COMMA_CODE","test","gobbleBinaryExpression","QUMARK_CODE","consequent","alternate","gobbleBinaryOp","toCheck","substr","maxBinopLen","tcLen","node","prec","gobbleToken","biop","biopInfo","stack","pop","PERIOD_CODE","gobbleNumericLiteral","OPAREN_CODE","gobbleVariable","OBRACK_CODE","gobbleArray","gobbleModelRef","maxUnopLen","unaryOps","argument","prefix","num","parseFloat","raw","quote","str","openBraceCount","ref","gobbleIdentifier","identifier","slice","literals","thisStr","name","gobbleArguments","termination","charIndex","String","fromCharCode","gobbleGroup","computed","object","property","CBRACK_CODE","CPAREN_CODE","callTarget","elements","nodes","chIndex","SEMCOL_CODE","body","e","error","isPromiselike","then","Promise","constructor","catch","finally","isAwaitable","AwaitableSymbol","collateAwaitable","promises","result","all","makeAwaitable","withoutContext","fn","_context","isObjectExpression","makePromiseAwareBinaryOp","operation","a","b","async","resolve","awaitableThen","resolvedA","resolvedB","makePromiseAwareUnaryOp","resolved","handleConditionalBranching","testValue","getTrueBranch","getFalseBranch","resolveNode","branch","branchResult","parse","schema","parseQueue","shift","visited","entries","prop","nestedPath","nestedPathStr","join","expandedPaths","has","isRecord","Set","Map","ROOT","findNextExp","expStart","indexOf","DOUBLE_OPEN_CURLY","offset","workingString","substring","nextCloseCurly","DOUBLE_CLOSE_CURLY","nextOpenCurly","resolveExpressionsInString","evaluate","expMatch","newVal","expStrWithBrackets","matchStart","expString","expValue","resolveDataRefsInString","formatted","expLocation","trim","evaledVal","resolveDataRefs","traverseObject","removeBindingAndChildrenFromMap","sourceMap","targetMap","parentBinding","parent","_value","trackedBinding","contains","bindingsToRewrite","filter","relative","childIndex","sort","childPath","newSegments","newChildBinding","descendent","hasTemplateValues","localKey","template","tmpl","output","hasSwitchKey","hasTemplateKey","getNodeID","id","caresAboutDataChanges","dataChanges","dependencies","depArray","values","dataChangeArray","dep","change","toNodeResolveOptions","resolverOptions","data","formatValue","format","bindingLike","exp","evaluator","unpackNode","item","unpacked","children","hasSomethingToResolve","bindingResolveLookup","expressionResolveLookup","resolveString","resolveOptions","replaceParams","params","replace","ANY_CHAR_REGEX","keyExpr","isSubset","subset","containingSet","createStatefulValidationObject","severity","state","isBlockingNavigation","objectToBatchSet","flattenedObj","flatten","batchTxn","BindingInstance","toNum","coerceTo0","nVal","Number","ifString","arg","__create","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","__commonJS","cb","mod","__require","exports","__export","target","enumerable","__copyProps","to","except","desc","__toESM","isNodeMode","__esModule","__toCommonJS","require_nested_error","toError","NestedError","_NestedError","innerErrors","thisErrorReport","getErrorReport","innerError","errReport","innerErrorReports","idx","rethrow","errs","require_timm","clone","addLast","addFirst","removeLast","removeFirst","insert","removeAt","replaceAt","getIn","setIn","update","updateIn","merge","mergeDeep","mergeIn","omit","addDefaults","default","INVALID_ARGS","IS_DEV","throwStr","msg","getKeysAndSymbols","getOwnPropertySymbols","concat","obj0","out","isObject","o","newItem","len","ptr","obj2","doSetIn","newValue","nestedObj","fnUpdate","prevVal","nextVal","c","d","f","rest","doMerge","attrs","omitList","fDoSomething","fAddDefaults","fDeep","first","fChanged","j","timm","_default","require_p_defer","module","pDefer","deferred","promise","reject","require_queue_microtask","queueMicrotask","bind","window","global","setTimeout","require_sorted_array","SortedArray","defclass","compare","compareDefault","element","high","low","pos","ordering","search","remove","splice","comparing","define","amd","src_exports","Expressions","expressions_exports","ExpressionPlugin","expressionMap","expressions","apply","player","hooks","expressionEvaluator","expEvaluator","handler","addExpressionFunction","ceil","containsAny","findProperty","findPropertyIndex","floor","isEmpty","isNotEmpty","lowerCase","number","round","sentenceCase","sum","titleCase","upperCase","InterceptionManager","interceptions","interceptionKeySet","isUsed","intercept","int","s","add","_a","_b","loop","asError","r","done","Hook","taps","Symbol","before","insertionIndex","beforeSet","t","untap","SyncHook","SyncBailHook","tapIndex","rtn","SyncWaterfallHook","tapValue","import_ts_nested_error","import_timm","foo","bar","ctor","tmp","Date","getTime","RegExp","toString","ArrayBuffer","Uint8Array","DataView","byteLength","getInt8","isView","import_p_defer","import_queue_microtask","import_sorted_array","createSortedArray","Registry","initialSet","store","query","callbackfn","clear","isRegistryEmpty","__defProp2","__export2","toValue","toExpression","toPath","toQuery","toConcatenatedNode","SEGMENT_SEPARATOR","OPEN_CURL","CLOSE_CURL","OPEN_BRACKET","CLOSE_BRACKET","EQUALS","SINGLE_QUOTE","DOUBLE_QUOTE","BACK_TICK","isIdentifierChar","char","charCode","matches","expected","whitespace","maybeNumber","expression","regex","modelRef","parsePath","simpleSegment","segment","segments","nextSegment","optionallyQuotedSegment","singleQuote","equals","parseBracket","second","parseSegmentAndBrackets","firstSegment","bracketSegment","parts","status","_BindingInstance","factory","rawBinding","tryNum","freeze","joined","asString","bindingAsArray","descendentSegments","resolveBindingAST","bindingPathNode","updates","getValueForNode","nestedResolvedValue","convertToPath","getValue","import_ts_nested_error2","actualValue","appendPathSegments","_node","resolvedNode","beforeResolveNode","objToQuery","resolvedKey","resolvedValue","BINDING_BRACKETS_REGEX","LAZY_BINDING_REGEX","DEFAULT_OPTIONS","BindingParser","skipOptimization","parserOptions","cache","parseCache","normalizePath","ast","TypeError","getBindingForNormalizedResult","normalized","normalizedStr","created","overrides","normalizeConfig","joinedNormalizedPath","updateKeys","updateTransaction","updatedBinding","DependencyTracker","readDeps","writeDeps","namedDependencySets","namedSet","createSubset","force","getDependencies","trackSubset","trackDefault","getModified","readsBinding","writesBinding","reset","addReadDep","addWriteDep","addChildReadDep","DependencyModel","rootModel","NOOPDataModel","ROOT_BINDING","PipelinedDataModel","onSet","effectiveDataModel","setMiddleware","handlers","addMiddleware","appliedTransaction","LocalModel","effectiveOperations","oldValue","parentValue","true","false","null","undefined","evaluator_functions_exports","conditional","deleteDataVal","getDataVal","setDataVal","waitFor","condition","ifTrue","ifFalse","testResult","resolvedTest","resolveParams","andandOperator","LogicalOperators","and","ororOperator","or","DEFAULT_BINARY_OPERATORS","DEFAULT_UNARY_OPERATORS","PromiseCollectionHandler","handleArray","items","hasPromises","some","handleObject","resolvedAttributes","attr","keyPromise","valuePromise","leftNode","rightNode","leftResult","awaitedLeft","rightResult","ExpressionEvaluator","vars","beforeEvaluate","onError","expressionsCache","operators","binary","unary","defaultHookOptions","_execAST","_resolveNode","resolvedOpts","_nothing","_execString","evaluateAsync","addBinaryOperator","addUnaryOperator","setExpressionVariable","getExpressionVariable","matchedExp","matched","storedAST","throwErrors","_currentValue","isAsync","expressionContext","leftVal","rightVal","argVal","expressionName","n","resolvedArgs","objVal","propVal","logger","warn","results","ele","TapableLogger","trace","debug","info","log","logHandlers","createHandler","addHandler","logHandler","removeHandler","ProxyLogger","loggerProvider","proxiedLoggerProvider","identify","SchemaController","formatters","types","bindingSchemaNormalizedCache","resolveTypeForBinding","addFormatters","fns","addDataTypes","getValidationsForBinding","typeDef","getApparentType","validation","vRef","trigger","normalizeBinding","cached","bindingArray","recordBinding","getType","schemaType","baseType","getTypeDefinition","dataType","getFormatterForType","formatReference","formatType","formatter","deformat","getFormatter","ValidationMiddleware","validator","shadowModelPaths","shouldIncludeInvalid","asModel","includeInvalid","nextTransaction","includedBindings","invalidBindings","validations","isStrong","validResults","invalidResults","shadowValue","shadowBinding","ValidatorRegistry","registry","register","EMPTY_NODE","Parser","onParseObject","onCreateASTNode","parseNode","parseView","viewNode","parseObject","createASTNode","tapped","templateDepth","parsedNode","parseLocalObject","currentValue","objToParse","localObj","objEntries","v","defaultValue","accumulation","current","localValue","newChildren","parentObj","baseAst","child","withContext","Resolver","root","skipResolve","beforeUpdate","afterUpdate","beforeResolve","afterResolve","afterNodeUpdate","resolveCache","ASTMap","idCache","getSourceNode","convertedAST","changes","prevASTMap","updated","computeTree","getResolveCache","getPreviousResult","isFirstUpdate","cloneNode","clonedNode","import_timm4","rawParent","cacheUpdate","partiallyResolvedParent","resolvedAST","dependencyModel","depModelWithParser","previousResult","previousDeps","dataChanged","shouldUseLastValue","isNestedMultiNodeWithAsync","isNestedMultiNode","repopulateASTMapFromCache","AST","ASTParent","resolvedASTLocal","resolvedUpdate","handleChildNode","childNode","originalChildNode","previousChildResult","childAST","childDependencies","computedChildTree","childTreeDeps","childUpdated","childValue","override","arr","rawParentToPassIn","hasAsync","newValues","mValue","mTree","asset","unpackAndPush","bindingDep","copy","scope","initial","CrossfieldProvider","initialView","parser","allValidations","byBinding","contentView","xfieldRefs","withDefaults","ViewInstance","onUpdate","resolver","onTemplatePluginCreated","templatePlugin","updateAsync","lastUpdate","rootNode","validationProvider","templateSymbol","TemplatePlugin","resolveTemplateSubstitutions","parseTemplate","depth","dataItem","templateSubstitutions","templateStr","JSON","stringify","flags","placement","applyParser","dynamic","getTemplateSymbolValue","aPath","bPath","pathsEqual","aPlacement","bPlacement","_nodeType","childOptions","templateAST","Boolean","applyResolverHooks","view","createPatternMatcher","testStr","startLocation","endLocation","resolveAllRefs","propertiesToSkip","newNode","import_timm6","findBasePath","parentNode","original","StringResolverPlugin","propertiesToSkipCache","applyResolver","propsToSkip","plugins","stringResolver","nodePath","ApplicabilityPlugin","isApplicability","isApplicable","nodeType","parsedApplicability","applicabilityNode","applicability","SwitchPlugin","resolveSwitch","cases","switchCase","case","isSwitch","switchContent","dynamicSwitch","staticSwitch","switchCaseExpr","switchBody","switchAST","sCase","firstChild","MultiNodePlugin","childVal","multiNode","AssetPlugin","assetAST","LocalStateStore","updateCallback","removeKey","useSharedState","initialState","newState","getLocalStateFunction","countKey","localState","oldCount","findUp","AssetTransformCorePlugin","stateStore","beforeResolveSymbol","resolveSymbol","beforeResolveCountSymbol","resolveCountSymbol","lastUpdatedNode","updateState","getStore","stepKey","storedState","useLocalState","transform","skip","isParentOfUpdated","isChildOfUpdated","originalNode","FlowInstance","flow","isTransitioning","beforeStart","onStart","onEnd","skipTransition","beforeTransition","resolveTransitionNode","transition","afterTransition","history","_oldState","nextState","flowPromise","state_type","startState","import_p_defer2","defer","pushHistory","transitionValue","currentState","transitions","stateName","prevState","newCurrentState","FlowController","navigation","navStack","run","addNewFlow","stateTransition","startFlow","firstItem","flowInstance","subflowId","subFlowEndState","outcome","BEGIN","CONTEXT","ValidationBindingTrackerViewPlugin","trackedBindings","getBindings","trackBinding","callbacks","onAdd","tracked","sections","lastViewUpdateChangeSet","lastComputedBindingTree","currentBindingTree","lastSectionBindingTree","resolvedNodeMap","shouldSkip","trackedBindingsForNode","intersection","track","getOptions","eows","_getValidationForBinding","getAll","firstFieldEOW","eow","displayTarget","getChildren","getValidationsForSection","registerOptions","newlyComputed","nodeSet","sectionNode","temp","SCHEMA_VALIDATION_PROVIDER_NAME","VIEW_VALIDATION_PROVIDER_NAME","VALIDATION_PROVIDER_NAME_SYMBOL","for","ValidatedBinding","possibleValidations","onDismiss","weakBindings","applicableValidations","validationsByState","load","vObj","statefulValidationObject","flat","checkIfBlocking","statefulObj","response","blocking","firstInvalid","runApplicableValidations","runner","canDismiss","phase","originalValue","dismissable","dismiss","newApplicableValidations","currentPhase","ValidationController","createValidatorRegistry","onAddValidation","onRemoveValidation","resolveValidationProviders","onTrackBinding","weakBindingTracker","setOptions","getDataMiddleware","strongValidation","updateValidationsForBinding","getValidationForBinding","newInvalidBindings","weakValidation","strongBinding","weakBinding","getValidationProviders","providers","source","provider","viewValidationProvider","getValidationsForView","tracker","onView","bindingTrackerPlugin","withoutDefault","ignoreDefaultValue","silent","validationContext","vals","valObj","trackedValidations","validationObj","validationRunner","vBinding","getValidator","dataTarget","parameters","updateValidationsForView","isNavigationTrigger","lastActiveBindings","activeBindings","updateValidations","dismissValidations","validatorRegistry","validateView","canTransition","forView","bindings","validationMapping","ViewController","initialViews","resolveView","transformRegistry","optimizeUpdates","viewOptions","viewMap","flowController","currentView","queueUpdate","updateOptions","onDelete","pendingUpdate","changedBindings","scheduled","getViewForRef","viewRef","matchingViewId","possibleViewIdMatch","viewId","ReadOnlyDataController","controller","DataController","resolveDataStages","resolveDefaultValue","onGet","serialize","baseMiddleware","trash","pathResolver","getModel","stages","resolveDataValue","normalizedTransaction","setUpdates","oldVal","setUpdateBindings","su","tr","defaultVal","existedBeforeDelete","makeReadOnly","roots","sep","memo","ConstantsController","tempStore","addConstants","namespace","getConstants","fallback","setTemporaryValues","clearTemporaryValues","FlowExpPlugin","handleEval","fc","createFormatFunction","formatName","DefaultExpPlugin","formatFunction","schemaController","NOT_STARTED_STATE","DefaultViewPlugin","viewController","pluginOptions","PLAYER_VERSION","COMMIT","_Player","config","constantsController","dataController","validationController","bindingParser","resolveFlowContent","plugin","getPlugins","findPlugin","symbol","el","applyTo","registerPlugin","getVersion","version","getCommit","commit","getState","setState","setupFlow","userContent","userFlow","flowResultDeferred","resolveStrings","transitionVal","computedTransitionVal","param","await","constants","views","utils","pluginSymbol","endState","flowResult","controllers","fail","payload","maybeUpdateState","endProps","errorState","every","merged","toUpperCase","toLowerCase","pattern","replacement","replacementRegex","word","separator","limit","separatorStr","actualStartIndex","Math","bindingOrModel","propToCheck","valueToCheck","searchArray","propToReturn","foundValue","keywords","keyword"],"mappings":"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","sourcesContent":["\"use strict\";\nvar CommonExpressionsPlugin = (() => {\n  var __create = Object.create;\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __getProtoOf = Object.getPrototypeOf;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __commonJS = (cb, mod) => function __require() {\n    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n  };\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n    // If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n    mod\n  ));\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\n  var require_nested_error = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/ts-nested-error@1.2.1/node_modules/ts-nested-error/build/nested-error.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", { value: true });\n      exports.toError = exports.NestedError = void 0;\n      var NestedError4 = class _NestedError extends Error {\n        /**\n         * Allocates an instance of `NestedError` with the given error `message` and\n         * optional `innerError` (which will be automatically coerced using `toError()`).\n         *\n         * @param message     Laconic error message to attach to the created `NestedError`.\n         * @param innerErrors Optional errors that will be wrapped by this higher level\n         *                    error. This value will be automatically coerced using `toError()`.\n         */\n        constructor(message, ...innerErrors) {\n          super(message);\n          const thisErrorReport = _NestedError.getErrorReport(this);\n          if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = _NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\n\n======= INNER ERROR =======\n\n${errReport}`;\n            return;\n          }\n          this.innerErrors = innerErrors.map((err) => toError(err));\n          const innerErrorReports = this.innerErrors.map((error, idx) => {\n            const errReport = _NestedError.getErrorReport(error);\n            return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\n\n${errReport}`;\n          }).join(\"\\n\\n\");\n          this.stack = `${thisErrorReport}\n\n${innerErrorReports}`;\n        }\n        /**\n         * Provides the first `Error` of the `innerErrors` (if it exists);\n         * otherwise, `null`.\n         *\n         * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n         */\n        get innerError() {\n          return this.innerErrors.length === 0 ? null : this.innerErrors[0];\n        }\n        /**\n         * Returns the function that accepts any value that was thrown as the first argument and\n         * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n         * this method was called directly in the context of that dervied class constructor)\n         * with the given `message`.\n         * Returned function will pass accepted `Error` object directly to `NestedError`\n         * as `innerErrors` by invoking `toError(err)` on it.\n         *\n         * You'll most likely want to use this method with promises:\n         *\n         * ```ts\n         * userService.getPage().then(\n         *     data => console.log(`Hooray! data: ${data}`),\n         *     NestedError.rethrow('failed to fetch users page')\n         * );\n         * ```\n         *\n         * @param message Message to attach `NestedError` created by the returned function.\n         */\n        static rethrow(message) {\n          return (...errs) => {\n            throw new this(message, ...errs);\n          };\n        }\n      };\n      exports.NestedError = NestedError4;\n      NestedError4.getErrorReport = typeof new Error().stack === \"string\" ? (err) => err.stack : (err) => `${err.name}: ${err.message}`;\n      NestedError4.prototype.name = \"NestedError\";\n      function toError(err) {\n        try {\n          return err instanceof Error ? err : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n        } catch {\n          return new Error(\"Failed to stringify non-instance of Error that was thrown.This is possibly due to the fact that toString() method of the valuedoesn't return a primitive value.\");\n        }\n      }\n      exports.toError = toError;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\n  var require_timm = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/timm@1.7.1/node_modules/timm/lib/timm.js\"(exports) {\n      \"use strict\";\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n      exports.clone = clone2;\n      exports.addLast = addLast2;\n      exports.addFirst = addFirst;\n      exports.removeLast = removeLast;\n      exports.removeFirst = removeFirst;\n      exports.insert = insert;\n      exports.removeAt = removeAt2;\n      exports.replaceAt = replaceAt;\n      exports.getIn = getIn;\n      exports.set = set2;\n      exports.setIn = setIn8;\n      exports.update = update;\n      exports.updateIn = updateIn;\n      exports.merge = merge;\n      exports.mergeDeep = mergeDeep;\n      exports.mergeIn = mergeIn;\n      exports.omit = omit3;\n      exports.addDefaults = addDefaults;\n      exports.default = void 0;\n      var INVALID_ARGS = \"INVALID_ARGS\";\n      var IS_DEV = false;\n      function throwStr(msg) {\n        throw new Error(msg);\n      }\n      function getKeysAndSymbols(obj) {\n        const keys = Object.keys(obj);\n        if (Object.getOwnPropertySymbols) {\n          return keys.concat(Object.getOwnPropertySymbols(obj));\n        }\n        return keys;\n      }\n      var hasOwnProperty = {}.hasOwnProperty;\n      function clone2(obj0) {\n        if (Array.isArray(obj0))\n          return obj0.slice();\n        const obj = obj0;\n        const keys = getKeysAndSymbols(obj);\n        const out = {};\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function isObject(o) {\n        return o != null && typeof o === \"object\";\n      }\n      function addLast2(array, val) {\n        if (Array.isArray(val))\n          return array.concat(val);\n        return array.concat([val]);\n      }\n      function addFirst(array, val) {\n        if (Array.isArray(val))\n          return val.concat(array);\n        return [val].concat(array);\n      }\n      function removeLast(array) {\n        if (!array.length)\n          return array;\n        return array.slice(0, array.length - 1);\n      }\n      function removeFirst(array) {\n        if (!array.length)\n          return array;\n        return array.slice(1);\n      }\n      function insert(array, idx, val) {\n        return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n      }\n      function removeAt2(array, idx) {\n        if (idx >= array.length || idx < 0)\n          return array;\n        return array.slice(0, idx).concat(array.slice(idx + 1));\n      }\n      function replaceAt(array, idx, newItem) {\n        if (array[idx] === newItem)\n          return array;\n        const len = array.length;\n        const result = Array(len);\n        for (let i = 0; i < len; i++) {\n          result[i] = array[i];\n        }\n        result[idx] = newItem;\n        return result;\n      }\n      function getIn(obj, path) {\n        if (!Array.isArray(path)) {\n          throwStr(IS_DEV ? \"A path array should be provided when calling getIn()\" : INVALID_ARGS);\n        }\n        if (obj == null)\n          return void 0;\n        let ptr = obj;\n        for (let i = 0; i < path.length; i++) {\n          const key = path[i];\n          ptr = ptr != null ? ptr[key] : void 0;\n          if (ptr === void 0)\n            return ptr;\n        }\n        return ptr;\n      }\n      function set2(obj0, key, val) {\n        let obj = obj0;\n        if (obj == null)\n          obj = typeof key === \"number\" ? [] : {};\n        if (obj[key] === val)\n          return obj;\n        const obj2 = clone2(obj);\n        obj2[key] = val;\n        return obj2;\n      }\n      function setIn8(obj, path, val) {\n        if (!path.length)\n          return val;\n        return doSetIn(obj, path, val, 0);\n      }\n      function doSetIn(obj, path, val, idx) {\n        let newValue;\n        const key = path[idx];\n        if (idx === path.length - 1) {\n          newValue = val;\n        } else {\n          const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === \"number\" ? [] : {};\n          newValue = doSetIn(nestedObj, path, val, idx + 1);\n        }\n        return set2(obj, key, newValue);\n      }\n      function update(obj, key, fnUpdate) {\n        const prevVal = obj == null ? void 0 : obj[key];\n        const nextVal = fnUpdate(prevVal);\n        return set2(obj, key, nextVal);\n      }\n      function updateIn(obj, path, fnUpdate) {\n        const prevVal = getIn(obj, path);\n        const nextVal = fnUpdate(prevVal);\n        return setIn8(obj, path, nextVal);\n      }\n      function merge(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n      }\n      function mergeDeep(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n      }\n      function mergeIn(a, path, b, c, d, e, f, ...rest) {\n        let prevVal = getIn(a, path);\n        if (prevVal == null)\n          prevVal = {};\n        let nextVal;\n        if (rest.length) {\n          nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n        } else {\n          nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n        }\n        return setIn8(a, path, nextVal);\n      }\n      function omit3(obj, attrs) {\n        const omitList = Array.isArray(attrs) ? attrs : [attrs];\n        let fDoSomething = false;\n        for (let i = 0; i < omitList.length; i++) {\n          if (hasOwnProperty.call(obj, omitList[i])) {\n            fDoSomething = true;\n            break;\n          }\n        }\n        if (!fDoSomething)\n          return obj;\n        const out = {};\n        const keys = getKeysAndSymbols(obj);\n        for (let i = 0; i < keys.length; i++) {\n          const key = keys[i];\n          if (omitList.indexOf(key) >= 0)\n            continue;\n          out[key] = obj[key];\n        }\n        return out;\n      }\n      function addDefaults(a, b, c, d, e, f, ...rest) {\n        return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n      }\n      function doMerge(fAddDefaults, fDeep, first, ...rest) {\n        let out = first;\n        if (!(out != null)) {\n          throwStr(IS_DEV ? \"At least one object should be provided to merge()\" : INVALID_ARGS);\n        }\n        let fChanged = false;\n        for (let idx = 0; idx < rest.length; idx++) {\n          const obj = rest[idx];\n          if (obj == null)\n            continue;\n          const keys = getKeysAndSymbols(obj);\n          if (!keys.length)\n            continue;\n          for (let j = 0; j <= keys.length; j++) {\n            const key = keys[j];\n            if (fAddDefaults && out[key] !== void 0)\n              continue;\n            let nextVal = obj[key];\n            if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n              nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n            }\n            if (nextVal === void 0 || nextVal === out[key])\n              continue;\n            if (!fChanged) {\n              fChanged = true;\n              out = clone2(out);\n            }\n            out[key] = nextVal;\n          }\n        }\n        return out;\n      }\n      var timm = {\n        clone: clone2,\n        addLast: addLast2,\n        addFirst,\n        removeLast,\n        removeFirst,\n        insert,\n        removeAt: removeAt2,\n        replaceAt,\n        getIn,\n        set: set2,\n        setIn: setIn8,\n        update,\n        updateIn,\n        merge,\n        mergeDeep,\n        mergeIn,\n        omit: omit3,\n        addDefaults\n      };\n      var _default = timm;\n      exports.default = _default;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\n  var require_p_defer = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/p-defer@3.0.0/node_modules/p-defer/index.js\"(exports, module) {\n      \"use strict\";\n      var pDefer = () => {\n        const deferred2 = {};\n        deferred2.promise = new Promise((resolve, reject) => {\n          deferred2.resolve = resolve;\n          deferred2.reject = reject;\n        });\n        return deferred2;\n      };\n      module.exports = pDefer;\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\n  var require_queue_microtask = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/queue-microtask@1.2.3/node_modules/queue-microtask/index.js\"(exports, module) {\n      \"use strict\";\n      var promise;\n      module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n        throw err;\n      }, 0));\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\n  var require_sorted_array = __commonJS({\n    \"../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/sorted-array@2.0.4/node_modules/sorted-array/sorted-array.js\"(exports, module) {\n      \"use strict\";\n      var SortedArray2 = function() {\n        var SortedArray3 = defclass({\n          constructor: function(array, compare) {\n            this.array = [];\n            this.compare = compare || compareDefault;\n            var length2 = array.length, index = 0;\n            while (index < length2)\n              this.insert(array[index++]);\n          },\n          insert: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, pos = -1, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else {\n                pos = index;\n                break;\n              }\n              ;\n            }\n            if (pos === -1) {\n              pos = high;\n            }\n            pos++;\n            high = array.length - 1;\n            while (pos < high && compare(element, array[pos]) === 0) {\n              pos++;\n            }\n            index = array.length;\n            array.push(element);\n            while (index > pos) {\n              array[index] = array[--index];\n            }\n            array[pos] = element;\n            return this;\n          },\n          search: function(element) {\n            var array = this.array, compare = this.compare, high = array.length - 1, low = 0, index, ordering;\n            while (high >= low) {\n              index = (high + low) / 2 >>> 0;\n              ordering = compare(array[index], element);\n              if (ordering < 0)\n                low = index + 1;\n              else if (ordering > 0)\n                high = index - 1;\n              else\n                return index;\n            }\n            return -1;\n          },\n          remove: function(element) {\n            var index = this.search(element);\n            if (index >= 0)\n              this.array.splice(index, 1);\n            return this;\n          }\n        });\n        SortedArray3.comparing = function(property, array) {\n          return new SortedArray3(array, function(a, b) {\n            return compareDefault(a[property], b[property]);\n          });\n        };\n        return SortedArray3;\n        function defclass(prototype) {\n          var constructor = prototype.constructor;\n          constructor.prototype = prototype;\n          return constructor;\n        }\n        function compareDefault(a, b) {\n          if (a < b)\n            return -1;\n          else if (a > b)\n            return 1;\n          else\n            return 0;\n        }\n      }();\n      if (typeof module === \"object\")\n        module.exports = SortedArray2;\n      if (typeof define === \"function\" && define.amd)\n        define(function() {\n          return SortedArray2;\n        });\n    }\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    CommonExpressionsPlugin: () => CommonExpressionsPlugin,\n    Expressions: () => expressions_exports\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+expression-plugin@0.0.0/node_modules/@player-ui/expression-plugin/dist/index.mjs\n  var ExpressionPlugin = class {\n    constructor(expressionMap) {\n      this.name = \"ExpressionPlugin\";\n      this.expressions = expressionMap;\n    }\n    apply(player) {\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        this.expressions.forEach((handler, name) => {\n          expEvaluator.addExpressionFunction(name, handler);\n        });\n      });\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/expressions/index.ts\n  var expressions_exports = {};\n  __export(expressions_exports, {\n    ceil: () => ceil,\n    concat: () => concat,\n    containsAny: () => containsAny,\n    findProperty: () => findProperty,\n    findPropertyIndex: () => findPropertyIndex,\n    floor: () => floor,\n    isEmpty: () => isEmpty,\n    isNotEmpty: () => isNotEmpty,\n    length: () => length,\n    lowerCase: () => lowerCase,\n    number: () => number,\n    replace: () => replace,\n    round: () => round,\n    sentenceCase: () => sentenceCase,\n    size: () => size,\n    split: () => split,\n    substr: () => substr,\n    sum: () => sum,\n    titleCase: () => titleCase,\n    trim: () => trim,\n    upperCase: () => upperCase\n  });\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/tapable-ts@0.2.4/node_modules/tapable-ts/dist/hooks.mjs\n  function equalToOrIn(value, check) {\n    if (Array.isArray(check)) {\n      return check.includes(value);\n    }\n    return check === value;\n  }\n  function callTap(tap, args, ctx) {\n    if (tap.context) {\n      return tap.callback(ctx, ...args);\n    }\n    return tap.callback(...args);\n  }\n  var InterceptionManager = class {\n    constructor() {\n      this.interceptions = [];\n      this.interceptionKeySet = /* @__PURE__ */ new Set();\n    }\n    isUsed() {\n      return this.interceptions.length > 0;\n    }\n    intercept(int) {\n      this.interceptions.push(int);\n      Object.keys(int).forEach((s) => {\n        this.interceptionKeySet.add(s);\n      });\n    }\n    tap(tap) {\n      if (this.interceptionKeySet.has(\"tap\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.tap) == null ? void 0 : _a.call(i, tap);\n        });\n      }\n    }\n    call(ctx, ...args) {\n      if (this.interceptionKeySet.has(\"call\")) {\n        this.interceptions.forEach((i) => {\n          var _a, _b;\n          if (i.context) {\n            (_a = i.call) == null ? void 0 : _a.call(i, ctx, ...args);\n          } else {\n            (_b = i.call) == null ? void 0 : _b.call(i, ...args);\n          }\n        });\n      }\n    }\n    loop(...args) {\n      if (this.interceptionKeySet.has(\"loop\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.loop) == null ? void 0 : _a.call(i, ...args);\n        });\n      }\n    }\n    error(err) {\n      if (this.interceptionKeySet.has(\"error\")) {\n        if (err instanceof Error) {\n          const asError = err;\n          this.interceptions.forEach((i) => {\n            var _a;\n            (_a = i.error) == null ? void 0 : _a.call(i, asError);\n          });\n        }\n      }\n    }\n    result(r) {\n      if (this.interceptionKeySet.has(\"result\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.result) == null ? void 0 : _a.call(i, r);\n        });\n      }\n    }\n    done() {\n      if (this.interceptionKeySet.has(\"done\")) {\n        this.interceptions.forEach((i) => {\n          var _a;\n          (_a = i.done) == null ? void 0 : _a.call(i);\n        });\n      }\n    }\n  };\n  var Hook = class {\n    constructor() {\n      this.taps = [];\n      this.interceptions = new InterceptionManager();\n    }\n    tap(options, callback) {\n      const resolvedOptions = typeof options === \"string\" ? {\n        name: options,\n        context: false\n      } : {\n        context: false,\n        ...options\n      };\n      const key = Symbol(resolvedOptions.name);\n      const tap = {\n        key,\n        ...resolvedOptions,\n        callback\n      };\n      if (tap.before) {\n        let insertionIndex = this.taps.length;\n        const beforeSet = new Set(Array.isArray(tap.before) ? tap.before : [tap.before]);\n        for (insertionIndex; insertionIndex > 0 && beforeSet.size > 0; insertionIndex--) {\n          const t2 = this.taps[insertionIndex - 1];\n          if (beforeSet.has(t2.name)) {\n            beforeSet.delete(t2.name);\n          }\n          if (t2.before && equalToOrIn(tap.name, t2.before)) {\n            break;\n          }\n        }\n        this.taps.splice(insertionIndex, 0, tap);\n      } else {\n        this.taps.push(tap);\n      }\n      this.interceptions.tap(tap);\n      return tap;\n    }\n    untap(tap) {\n      this.taps = this.taps.filter((t2) => t2.key !== tap.key);\n    }\n    isUsed() {\n      return this.taps.length > 0 || this.interceptions.isUsed();\n    }\n    intercept(int) {\n      this.interceptions.intercept(int);\n    }\n  };\n  var SyncHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      try {\n        this.taps.forEach((t2) => {\n          callTap(t2, args, ctx);\n        });\n      } catch (err) {\n        this.interceptions.error(err);\n        throw err;\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncBailHook = class extends Hook {\n    call(...args) {\n      if (!this.isUsed()) {\n        return;\n      }\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== void 0) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n      this.interceptions.done();\n    }\n  };\n  var SyncWaterfallHook = class extends Hook {\n    call(...args) {\n      const ctx = {};\n      this.interceptions.call(ctx, ...args);\n      let [rtn, ...rest] = args;\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest], ctx);\n        if (tapValue !== void 0) {\n          rtn = tapValue;\n        }\n      }\n      this.interceptions.result(rtn);\n      return rtn;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_ts_nested_error = __toESM(require_nested_error(), 1);\n  var import_ts_nested_error2 = __toESM(require_nested_error(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n  function dlv_es_default(t2, e, l, n, r) {\n    for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++)\n      t2 = t2 ? t2[e[n]] : r;\n    return t2 === r ? l : t2;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm = __toESM(require_timm(), 1);\n  var import_ts_nested_error3 = __toESM(require_nested_error(), 1);\n  var import_timm2 = __toESM(require_timm(), 1);\n  var import_timm3 = __toESM(require_timm(), 1);\n  var import_timm4 = __toESM(require_timm(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/dequal@2.0.3/node_modules/dequal/dist/index.mjs\n  var has = Object.prototype.hasOwnProperty;\n  function find(iter, tar, key) {\n    for (key of iter.keys()) {\n      if (dequal(key, tar))\n        return key;\n    }\n  }\n  function dequal(foo, bar) {\n    var ctor, len, tmp;\n    if (foo === bar)\n      return true;\n    if (foo && bar && (ctor = foo.constructor) === bar.constructor) {\n      if (ctor === Date)\n        return foo.getTime() === bar.getTime();\n      if (ctor === RegExp)\n        return foo.toString() === bar.toString();\n      if (ctor === Array) {\n        if ((len = foo.length) === bar.length) {\n          while (len-- && dequal(foo[len], bar[len]))\n            ;\n        }\n        return len === -1;\n      }\n      if (ctor === Set) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len;\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!bar.has(tmp))\n            return false;\n        }\n        return true;\n      }\n      if (ctor === Map) {\n        if (foo.size !== bar.size) {\n          return false;\n        }\n        for (len of foo) {\n          tmp = len[0];\n          if (tmp && typeof tmp === \"object\") {\n            tmp = find(bar, tmp);\n            if (!tmp)\n              return false;\n          }\n          if (!dequal(len[1], bar.get(tmp))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      if (ctor === ArrayBuffer) {\n        foo = new Uint8Array(foo);\n        bar = new Uint8Array(bar);\n      } else if (ctor === DataView) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo.getInt8(len) === bar.getInt8(len))\n            ;\n        }\n        return len === -1;\n      }\n      if (ArrayBuffer.isView(foo)) {\n        if ((len = foo.byteLength) === bar.byteLength) {\n          while (len-- && foo[len] === bar[len])\n            ;\n        }\n        return len === -1;\n      }\n      if (!ctor || typeof foo === \"object\") {\n        len = 0;\n        for (ctor in foo) {\n          if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))\n            return false;\n          if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))\n            return false;\n        }\n        return Object.keys(bar).length === len;\n      }\n    }\n    return foo !== foo && bar !== bar;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var import_timm5 = __toESM(require_timm(), 1);\n  var import_timm6 = __toESM(require_timm(), 1);\n  var import_timm7 = __toESM(require_timm(), 1);\n  var import_timm8 = __toESM(require_timm(), 1);\n  var import_p_defer = __toESM(require_p_defer(), 1);\n  var import_p_defer2 = __toESM(require_p_defer(), 1);\n  var import_timm9 = __toESM(require_timm(), 1);\n  var import_queue_microtask = __toESM(require_queue_microtask(), 1);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+partial-match-registry@0.0.0/node_modules/@player-ui/partial-match-registry/dist/index.mjs\n  var import_sorted_array = __toESM(require_sorted_array(), 1);\n  function traverseObj(object, path = [], pairs = /* @__PURE__ */ new Map()) {\n    for (const key of Object.keys(object)) {\n      const val = object[key];\n      const nestedPath = [...path, key];\n      if (typeof val === \"object\") {\n        traverseObj(val, nestedPath, pairs);\n      } else {\n        pairs.set(nestedPath, val);\n      }\n    }\n    return pairs;\n  }\n  function createMatcher(partialObj) {\n    const pairs = traverseObj(partialObj);\n    const matchFunction = (searchObj) => {\n      for (const entry of Array.from(pairs)) {\n        const [path, value] = entry;\n        if (dlv_es_default(searchObj, path) !== value) {\n          return false;\n        }\n      }\n      return true;\n    };\n    matchFunction.count = pairs.size;\n    return matchFunction;\n  }\n  function createBasicMatcher(seed) {\n    const matcher = (match) => seed === match;\n    matcher.count = 1;\n    return matcher;\n  }\n  var createSortedArray = () => new import_sorted_array.default([], (c) => c.matcher.count);\n  var Registry = class {\n    constructor(initialSet) {\n      this.store = createSortedArray();\n      initialSet?.forEach(([match, value]) => {\n        this.set(match, value);\n      });\n    }\n    /** Add match -> value mapping to the registry */\n    set(match, value) {\n      const matcher = typeof match === \"object\" ? createMatcher(match) : createBasicMatcher(match);\n      this.store.insert({\n        key: match,\n        value,\n        matcher\n      });\n    }\n    /** Fetch the best match in the registry */\n    get(query) {\n      for (const entry of this.store.array) {\n        if (entry.matcher(query)) {\n          return entry.value;\n        }\n      }\n    }\n    /** Loop over all entries and run callback */\n    forEach(callbackfn) {\n      for (const entry of this.store.array) {\n        callbackfn(entry);\n      }\n    }\n    /** Reset the items in the registry */\n    clear() {\n      this.store = createSortedArray();\n    }\n    /** Check if the registry is empty*/\n    isRegistryEmpty() {\n      return this.store.array.length === 0;\n    }\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/node_modules/.aspect_rules_js/@player-ui+player@0.0.0/node_modules/@player-ui/player/dist/index.mjs\n  var __defProp2 = Object.defineProperty;\n  var __export2 = (target, all) => {\n    for (var name in all)\n      __defProp2(target, name, { get: all[name], enumerable: true });\n  };\n  var toValue = (value) => ({\n    name: \"Value\",\n    value\n  });\n  var toExpression = (value) => ({\n    name: \"Expression\",\n    value\n  });\n  var toPath = (path) => ({\n    name: \"PathNode\",\n    path\n  });\n  var toQuery = (key, value) => ({\n    name: \"Query\",\n    key,\n    value\n  });\n  var toConcatenatedNode = (values) => {\n    if (values.length === 1) {\n      return values[0];\n    }\n    return {\n      name: \"Concatenated\",\n      value: values\n    };\n  };\n  var SEGMENT_SEPARATOR = \".\";\n  var OPEN_CURL = \"{\";\n  var CLOSE_CURL = \"}\";\n  var OPEN_BRACKET = \"[\";\n  var CLOSE_BRACKET = \"]\";\n  var EQUALS = \"=\";\n  var SINGLE_QUOTE = \"'\";\n  var DOUBLE_QUOTE = '\"';\n  var BACK_TICK = \"`\";\n  var isIdentifierChar = (char) => {\n    if (!char) {\n      return false;\n    }\n    const charCode = char.charCodeAt(0);\n    const matches = charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125;\n    return !matches;\n  };\n  var parse = (path) => {\n    let index = 1;\n    let ch = path.charAt(0);\n    const next = (expected) => {\n      if (expected && ch !== expected) {\n        throw new Error(`Expected char: ${expected} but got: ${ch}`);\n      }\n      ch = path.charAt(index);\n      index += 1;\n      return ch;\n    };\n    const whitespace = () => {\n      while (ch === \" \") {\n        next();\n      }\n    };\n    const identifier = () => {\n      if (!isIdentifierChar(ch)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!isIdentifierChar(ch)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        const maybeNumber = Number(value);\n        value = isNaN(maybeNumber) ? value : maybeNumber;\n        return toValue(value);\n      }\n    };\n    const expression = () => {\n      if (ch === BACK_TICK) {\n        next(BACK_TICK);\n        let exp = ch;\n        while (next()) {\n          if (ch === BACK_TICK) {\n            break;\n          }\n          exp += ch;\n        }\n        next(BACK_TICK);\n        if (exp) {\n          return toExpression(exp);\n        }\n      }\n    };\n    const regex = (match) => {\n      if (!ch?.match(match)) {\n        return;\n      }\n      let value = ch;\n      while (next()) {\n        if (!ch?.match(match)) {\n          break;\n        }\n        value += ch;\n      }\n      if (value) {\n        return toValue(value);\n      }\n    };\n    const nestedPath = () => {\n      if (ch === OPEN_CURL) {\n        next(OPEN_CURL);\n        next(OPEN_CURL);\n        const modelRef = parsePath();\n        next(CLOSE_CURL);\n        next(CLOSE_CURL);\n        return modelRef;\n      }\n    };\n    const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n    const segment = () => {\n      const segments = [];\n      let nextSegment = simpleSegment();\n      while (nextSegment !== void 0) {\n        segments.push(nextSegment);\n        nextSegment = simpleSegment();\n      }\n      if (segments.length === 0) {\n        return void 0;\n      }\n      return toConcatenatedNode(segments);\n    };\n    const optionallyQuotedSegment = () => {\n      whitespace();\n      if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n        const singleQuote = ch === SINGLE_QUOTE;\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        const id = regex(/[^'\"]+/);\n        next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n        return id;\n      }\n      return simpleSegment();\n    };\n    const equals = () => {\n      if (ch !== EQUALS) {\n        return false;\n      }\n      while (ch === EQUALS) {\n        next();\n      }\n      return true;\n    };\n    const parseBracket = () => {\n      if (ch === OPEN_BRACKET) {\n        next(OPEN_BRACKET);\n        whitespace();\n        let value = optionallyQuotedSegment();\n        if (value) {\n          whitespace();\n          if (equals()) {\n            whitespace();\n            const second = optionallyQuotedSegment();\n            value = toQuery(value, second);\n            whitespace();\n          }\n        } else {\n          throw new Error(`Expected identifier`);\n        }\n        if (value) {\n          next(CLOSE_BRACKET);\n        }\n        return value;\n      }\n    };\n    const parseSegmentAndBrackets = () => {\n      const parsed = [];\n      const firstSegment = segment();\n      if (firstSegment) {\n        parsed.push(firstSegment);\n        let bracketSegment = parseBracket();\n        if (bracketSegment?.name === \"Value\") {\n          const maybeNumber = Number(bracketSegment.value);\n          bracketSegment.value = isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value ? bracketSegment.value : maybeNumber;\n        }\n        while (bracketSegment !== void 0) {\n          parsed.push(bracketSegment);\n          bracketSegment = parseBracket();\n        }\n      }\n      return parsed;\n    };\n    const parsePath = () => {\n      const parts = [];\n      let nextSegment = parseSegmentAndBrackets();\n      while (nextSegment !== void 0) {\n        parts.push(...nextSegment);\n        if (!ch || ch === CLOSE_CURL) {\n          break;\n        }\n        if (nextSegment.length === 0 && ch) {\n          throw new Error(`Unexpected character: ${ch}`);\n        }\n        next(SEGMENT_SEPARATOR);\n        nextSegment = parseSegmentAndBrackets();\n      }\n      return toPath(parts);\n    };\n    try {\n      const result = parsePath();\n      return {\n        status: true,\n        path: result\n      };\n    } catch (e) {\n      return {\n        status: false,\n        error: e.message\n      };\n    }\n  };\n  function isBinding(binding) {\n    return !(typeof binding === \"string\" || Array.isArray(binding));\n  }\n  function maybeConvertToNum(i) {\n    const asInt = parseInt(i, 10);\n    if (isNaN(asInt)) {\n      return i;\n    }\n    return asInt;\n  }\n  function getBindingSegments(binding) {\n    if (Array.isArray(binding)) {\n      return binding;\n    }\n    if (typeof binding === \"string\") {\n      return binding.split(\".\");\n    }\n    return binding.asArray();\n  }\n  function findInArray(array, key, value) {\n    return array.findIndex((obj) => {\n      if (obj && typeof obj === \"object\") {\n        return obj[key] == value;\n      }\n      return false;\n    });\n  }\n  var BindingInstance = class _BindingInstance {\n    constructor(raw, factory = (rawBinding) => new _BindingInstance(rawBinding)) {\n      const split2 = Array.isArray(raw) ? raw : raw.split(\".\");\n      this.split = split2.map((segment) => {\n        if (typeof segment === \"number\") {\n          return segment;\n        }\n        const tryNum = Number(segment);\n        return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n      });\n      Object.freeze(this.split);\n      this.joined = this.split.join(\".\");\n      this.factory = factory;\n    }\n    asArray() {\n      return this.split;\n    }\n    asString() {\n      return this.joined;\n    }\n    /**\n     * Check to see if the given binding is a sub-path of the current one\n     */\n    contains(binding) {\n      const bindingAsArray = binding.asArray();\n      if (bindingAsArray.length < this.split.length) {\n        return false;\n      }\n      for (let i = 0; i < this.split.length; i++) {\n        if (this.split[i] !== bindingAsArray[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    relative(binding) {\n      return this.asArray().slice(binding.asArray().length);\n    }\n    parent() {\n      return this.factory(this.split.slice(0, -1));\n    }\n    key() {\n      return this.split[this.split.length - 1];\n    }\n    /**\n     * This is a utility method to get a binding that is a descendent of this binding\n     *\n     * @param relative - The relative path to descend to\n     */\n    descendent(relative) {\n      const descendentSegments = getBindingSegments(relative);\n      return this.factory(this.split.concat(descendentSegments));\n    }\n  };\n  function resolveBindingAST(bindingPathNode, options, hooks) {\n    const context = {\n      updates: {},\n      path: []\n    };\n    function getValueForNode(node) {\n      if (node.name === \"Value\") {\n        return node.value;\n      }\n      if (node.name === \"PathNode\") {\n        const nestedResolvedValue = resolveBindingAST(node, options);\n        if (nestedResolvedValue.updates) {\n          context.updates = {\n            ...context.updates,\n            ...nestedResolvedValue.updates\n          };\n        }\n        try {\n          return options.convertToPath(\n            options.getValue(nestedResolvedValue.path)\n          );\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(\n            `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n            e\n          );\n        }\n      }\n      if (node.name === \"Expression\") {\n        try {\n          const actualValue = options.evaluate(node.value);\n          return options.convertToPath(actualValue);\n        } catch (e) {\n          throw new import_ts_nested_error2.NestedError(`Unable to resolve path: ${node.value}`, e);\n        }\n      }\n      throw new Error(`Unable to resolve value for node: ${node.name}`);\n    }\n    function appendPathSegments(segment) {\n      if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n        segment.split(\".\").forEach((i) => {\n          context.path.push(maybeConvertToNum(i));\n        });\n      } else {\n        context.path.push(segment);\n      }\n    }\n    function resolveNode(_node) {\n      const resolvedNode = hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n      switch (resolvedNode.name) {\n        case \"Expression\":\n        case \"PathNode\":\n          appendPathSegments(getValueForNode(resolvedNode));\n          break;\n        case \"Value\":\n          appendPathSegments(resolvedNode.value);\n          break;\n        case \"Query\": {\n          const objToQuery = options.getValue(context.path) ?? [];\n          const { key, value } = resolvedNode;\n          const resolvedKey = getValueForNode(key);\n          const resolvedValue = value && getValueForNode(value);\n          const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n          if (index === void 0 || index === -1) {\n            context.updates[[...context.path, objToQuery.length, resolvedKey].join(\".\")] = resolvedValue;\n            context.path.push(objToQuery.length);\n          } else {\n            context.path.push(index);\n          }\n          break;\n        }\n        case \"Concatenated\":\n          context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n          break;\n        default:\n          throw new Error(`Unsupported node type: ${resolvedNode.name}`);\n      }\n    }\n    bindingPathNode.path.forEach(resolveNode);\n    return {\n      path: context.path,\n      updates: Object.keys(context.updates ?? {}).length > 0 ? context.updates : void 0\n    };\n  }\n  var BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\n  var LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n  var DEFAULT_OPTIONS = {\n    get: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    set: () => {\n      throw new Error(\"Not Implemented\");\n    },\n    evaluate: () => {\n      throw new Error(\"Not Implemented\");\n    }\n  };\n  var BindingParser = class {\n    constructor(options) {\n      this.hooks = {\n        skipOptimization: new SyncBailHook(),\n        beforeResolveNode: new SyncWaterfallHook()\n      };\n      this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n      this.cache = {};\n      this.parseCache = {};\n      this.parse = this.parse.bind(this);\n    }\n    /**\n     * Takes a binding path, parses it, and returns an equivalent, normalized\n     * representation of that path.\n     */\n    normalizePath(path, resolveOptions) {\n      if (!BINDING_BRACKETS_REGEX.test(path) && LAZY_BINDING_REGEX.test(path) && this.hooks.skipOptimization.call(path) !== true) {\n        return { path: path.split(\".\"), updates: void 0 };\n      }\n      const ast = this.parseCache[path] ?? parse(path);\n      this.parseCache[path] = ast;\n      if (typeof ast !== \"object\" || !ast?.status) {\n        throw new TypeError(\n          `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`\n        );\n      }\n      try {\n        return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n      } catch (e) {\n        throw new import_ts_nested_error.NestedError(`Cannot resolve binding: ${path}`, e);\n      }\n    }\n    getBindingForNormalizedResult(normalized) {\n      const normalizedStr = normalized.path.join(\".\");\n      if (this.cache[normalizedStr]) {\n        return this.cache[normalizedStr];\n      }\n      const created = new BindingInstance(\n        normalizedStr === \"\" ? [] : normalized.path,\n        this.parse\n      );\n      this.cache[normalizedStr] = created;\n      return created;\n    }\n    parse(rawBinding, overrides = {}) {\n      if (isBinding(rawBinding)) {\n        return rawBinding;\n      }\n      const options = {\n        ...this.parserOptions,\n        ...overrides\n      };\n      let updates = {};\n      const joined = Array.isArray(rawBinding) ? rawBinding.join(\".\") : String(rawBinding);\n      const normalizeConfig = {\n        getValue: (path) => {\n          const normalized2 = this.normalizePath(path.join(\".\"), normalizeConfig);\n          return options.get(this.getBindingForNormalizedResult(normalized2));\n        },\n        evaluate: (exp) => {\n          return options.evaluate(exp);\n        },\n        convertToPath: (path) => {\n          if (path === void 0) {\n            throw new Error(\n              \"Attempted to convert undefined value to binding path\"\n            );\n          }\n          if (typeof path !== \"string\" && typeof path !== \"number\" && typeof path !== \"boolean\") {\n            throw new Error(\n              `Attempting to convert ${typeof path} to a binding path.`\n            );\n          }\n          const normalized2 = this.normalizePath(String(path), normalizeConfig);\n          if (normalized2.updates) {\n            updates = {\n              ...updates,\n              ...normalized2.updates\n            };\n          }\n          const joinedNormalizedPath = normalized2.path.join(\".\");\n          if (joinedNormalizedPath === \"\") {\n            throw new Error(\"Nested path resolved to an empty path\");\n          }\n          return joinedNormalizedPath;\n        }\n      };\n      const normalized = this.normalizePath(joined, normalizeConfig);\n      if (normalized.updates) {\n        updates = {\n          ...updates,\n          ...normalized.updates\n        };\n      }\n      const updateKeys = Object.keys(updates);\n      if (!options.readOnly && updateKeys.length > 0) {\n        const updateTransaction = updateKeys.map(\n          (updatedBinding) => [\n            this.parse(updatedBinding),\n            updates[updatedBinding]\n          ]\n        );\n        options.set(updateTransaction);\n      }\n      return this.getBindingForNormalizedResult(normalized);\n    }\n  };\n  var DependencyTracker = class {\n    constructor() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\");\n      this.createSubset(\"children\");\n    }\n    createSubset(name, force = false) {\n      if (force || !this.namedDependencySets[name]) {\n        this.namedDependencySets[name] = {\n          readDeps: /* @__PURE__ */ new Set(),\n          writeDeps: /* @__PURE__ */ new Set()\n        };\n      }\n    }\n    /** Grab all of the bindings that this depended on */\n    getDependencies(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.readDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.readDeps;\n    }\n    trackSubset(name) {\n      this.createSubset(name);\n      this.namedSet = name;\n    }\n    trackDefault() {\n      this.namedSet = \"core\";\n    }\n    /** Grab all of the bindings this wrote to */\n    getModified(name) {\n      if (name !== void 0) {\n        return this.namedDependencySets?.[name]?.writeDeps ?? /* @__PURE__ */ new Set();\n      }\n      return this.writeDeps;\n    }\n    /**\n     * Check to see if the dataModel has read the value at the given binding\n     *\n     * @param binding - The binding you want to check for\n     */\n    readsBinding(binding) {\n      return this.readDeps.has(binding);\n    }\n    /**\n     * Check to see if the dataModel has written to the binding\n     */\n    writesBinding(binding) {\n      return this.writeDeps.has(binding);\n    }\n    /** Reset all tracking of dependencies */\n    reset() {\n      this.readDeps = /* @__PURE__ */ new Set();\n      this.writeDeps = /* @__PURE__ */ new Set();\n      this.namedDependencySets = {};\n      this.namedSet = \"core\";\n      this.createSubset(\"core\", true);\n      this.createSubset(\"children\", true);\n    }\n    addReadDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n      }\n      this.readDeps.add(binding);\n    }\n    addWriteDep(binding, namedSet = this.namedSet) {\n      if (namedSet) {\n        this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n      }\n      this.writeDeps.add(binding);\n    }\n    addChildReadDep(binding) {\n      this.addReadDep(binding, \"children\");\n    }\n  };\n  var DependencyModel = class extends DependencyTracker {\n    constructor(rootModel) {\n      super();\n      this.rootModel = rootModel;\n      this.set = this.set.bind(this);\n      this.get = this.get.bind(this);\n    }\n    set(transaction, options) {\n      transaction.forEach(([binding]) => this.addWriteDep(binding));\n      return this.rootModel.set(transaction, options);\n    }\n    get(binding, options) {\n      this.addReadDep(binding);\n      return this.rootModel.get(binding, options);\n    }\n    delete(binding, options) {\n      this.addWriteDep(binding);\n      return this.rootModel.delete(binding, options);\n    }\n  };\n  var NOOPDataModel = class {\n    get() {\n      return void 0;\n    }\n    set() {\n      return [];\n    }\n    delete() {\n    }\n  };\n  var NOOP_MODEL = new NOOPDataModel();\n  var ROOT_BINDING = new BindingInstance([]);\n  function withParser(model, parseBinding) {\n    function maybeParse(binding, readOnly) {\n      const parsed = isBinding(binding) ? binding : parseBinding(binding, {\n        get: model.get,\n        set: model.set,\n        readOnly\n      });\n      if (!parsed) {\n        throw new Error(\"Unable to parse binding\");\n      }\n      return parsed;\n    }\n    return {\n      get(binding, options) {\n        return model.get(maybeParse(binding, true), options);\n      },\n      set(transaction, options) {\n        return model.set(\n          transaction.map(([key, val]) => [maybeParse(key, false), val]),\n          options\n        );\n      },\n      delete(binding, options) {\n        return model.delete(maybeParse(binding, false), options);\n      }\n    };\n  }\n  function toModel(middleware, defaultOptions, next) {\n    if (!next) {\n      return middleware;\n    }\n    return {\n      get: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.get) {\n          return middleware.get(binding, resolvedOptions, next);\n        }\n        return next?.get(binding, resolvedOptions);\n      },\n      set: (transaction, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.set) {\n          return middleware.set(transaction, resolvedOptions, next);\n        }\n        return next?.set(transaction, resolvedOptions);\n      },\n      delete: (binding, options) => {\n        const resolvedOptions = options ?? defaultOptions;\n        if (middleware.delete) {\n          return middleware.delete(binding, resolvedOptions, next);\n        }\n        return next?.delete(binding, resolvedOptions);\n      }\n    };\n  }\n  function constructModelForPipeline(pipeline) {\n    if (pipeline.length === 0) {\n      return NOOP_MODEL;\n    }\n    if (pipeline.length === 1) {\n      return toModel(pipeline[0]);\n    }\n    function createModelWithOptions(options) {\n      const model = pipeline.reduce(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        void 0\n      ) ?? NOOP_MODEL;\n      return model;\n    }\n    return {\n      get: (binding, options) => {\n        return createModelWithOptions(options)?.get(binding, options);\n      },\n      set: (transaction, options) => {\n        return createModelWithOptions(options)?.set(transaction, options);\n      },\n      delete: (binding, options) => {\n        return createModelWithOptions(options)?.delete(binding, options);\n      }\n    };\n  }\n  var PipelinedDataModel = class {\n    constructor(pipeline = []) {\n      this.hooks = {\n        onSet: new SyncHook()\n      };\n      this.pipeline = pipeline;\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    setMiddleware(handlers) {\n      this.pipeline = handlers;\n      this.effectiveDataModel = constructModelForPipeline(handlers);\n    }\n    addMiddleware(handler) {\n      this.pipeline = [...this.pipeline, handler];\n      this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n    }\n    reset(model = {}) {\n      this.pipeline.forEach((middleware) => {\n        if (\"reset\" in middleware) {\n          middleware.reset?.();\n        }\n      });\n      this.set([[ROOT_BINDING, model]]);\n    }\n    set(transaction, options) {\n      const appliedTransaction = this.effectiveDataModel.set(\n        transaction,\n        options\n      );\n      this.hooks.onSet.call(transaction);\n      return appliedTransaction;\n    }\n    get(binding, options) {\n      return this.effectiveDataModel.get(binding, options);\n    }\n    delete(binding, options) {\n      return this.effectiveDataModel.delete(binding, options);\n    }\n  };\n  var LocalModel = class {\n    constructor(model = {}) {\n      this.model = model;\n      this.get = this.get.bind(this);\n      this.set = this.set.bind(this);\n    }\n    reset(model = {}) {\n      this.model = model;\n    }\n    get(binding) {\n      if (!binding || !binding.asString()) {\n        return this.model;\n      }\n      return dlv_es_default(this.model, binding.asArray());\n    }\n    set(transaction) {\n      const effectiveOperations = [];\n      transaction.forEach(([binding, value]) => {\n        const oldValue = this.get(binding);\n        this.model = (0, import_timm.setIn)(this.model, binding.asArray(), value);\n        effectiveOperations.push({ binding, oldValue, newValue: value });\n      });\n      return effectiveOperations;\n    }\n    delete(binding) {\n      const parentBinding = binding.parent();\n      if (parentBinding) {\n        const parentValue = this.get(parentBinding);\n        if (parentValue !== void 0) {\n          if (Array.isArray(parentValue)) {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.removeAt)(parentValue, binding.key())\n            );\n          } else {\n            this.model = (0, import_timm.setIn)(\n              this.model,\n              parentBinding.asArray(),\n              (0, import_timm.omit)(parentValue, binding.key())\n            );\n          }\n        }\n      }\n    }\n  };\n  var ExpNodeOpaqueIdentifier = Symbol(\"Expression Node ID\");\n  function isExpressionNode(x) {\n    return typeof x === \"object\" && x !== null && !Array.isArray(x) && x.__id === ExpNodeOpaqueIdentifier;\n  }\n  var PERIOD_CODE = 46;\n  var COMMA_CODE = 44;\n  var SQUOTE_CODE = 39;\n  var DQUOTE_CODE = 34;\n  var OPAREN_CODE = 40;\n  var CPAREN_CODE = 41;\n  var OBRACK_CODE = 91;\n  var CBRACK_CODE = 93;\n  var QUMARK_CODE = 63;\n  var SEMCOL_CODE = 59;\n  var COLON_CODE = 58;\n  var OCURL_CODE = 123;\n  var CCURL_CODE = 125;\n  var t = true;\n  var unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n  var binaryOps = {\n    \"=\": 3,\n    \"+=\": 3,\n    \"-=\": 3,\n    \"&=\": 3,\n    \"|=\": 3,\n    // Conditional: 4,\n    \"||\": 5,\n    \"&&\": 6,\n    \"|\": 7,\n    \"^\": 8,\n    \"&\": 9,\n    \"==\": 10,\n    \"!=\": 10,\n    \"===\": 10,\n    \"!==\": 10,\n    \"<\": 11,\n    \">\": 11,\n    \"<=\": 11,\n    \">=\": 11,\n    \"<<\": 12,\n    \">>\": 12,\n    \">>>\": 12,\n    \"+\": 13,\n    \"-\": 13,\n    \"*\": 14,\n    \"/\": 14,\n    \"%\": 14\n  };\n  function throwError(message, index) {\n    const err = new Error(`${message} at character ${index}`);\n    err.index = index;\n    err.description = message;\n    throw err;\n  }\n  function createSpanningLocation(start, end) {\n    if (!start || !end) {\n      return;\n    }\n    return {\n      start: start.start,\n      end: end.end\n    };\n  }\n  function getMaxKeyLen(obj) {\n    let maxLen = 0;\n    Object.keys(obj).forEach((key) => {\n      if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n        maxLen = key.length;\n      }\n    });\n    return maxLen;\n  }\n  var maxUnopLen = getMaxKeyLen(unaryOps);\n  var maxBinopLen = getMaxKeyLen(binaryOps);\n  var literals = {\n    true: true,\n    false: false,\n    null: null,\n    undefined: void 0\n  };\n  var thisStr = \"this\";\n  function binaryPrecedence(opVal) {\n    return binaryOps[opVal] || 0;\n  }\n  function createBinaryExpression(operator, left, right, location) {\n    let type;\n    if (operator === \"||\" || operator === \"&&\") {\n      type = \"LogicalExpression\";\n    } else if (operator === \"=\") {\n      type = \"Assignment\";\n    } else if (operator === \"+=\" || operator === \"-=\" || operator === \"&=\" || operator === \"|=\") {\n      type = \"Modification\";\n    } else {\n      type = \"BinaryExpression\";\n    }\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type,\n      operator,\n      left,\n      right,\n      location\n    };\n  }\n  function isDecimalDigit(ch) {\n    return ch >= 48 && ch <= 57;\n  }\n  function isIdentifierStart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122;\n  }\n  function isIdentifierPart(ch) {\n    return ch === 36 || ch === 95 || // `$` and `_`\n    ch >= 65 && ch <= 90 || // A...Z\n    ch >= 97 && ch <= 122 || // A...z\n    ch >= 48 && ch <= 57;\n  }\n  function isModelRefStart(ch0, ch1) {\n    return ch0 === OCURL_CODE && ch1 === OCURL_CODE;\n  }\n  function parseExpression(expr, options) {\n    const strictMode = options?.strict ?? true;\n    const charAtFunc = expr.charAt;\n    const charCodeAtFunc = expr.charCodeAt;\n    const { length: length2 } = expr;\n    let index = 0;\n    const getLocation = (startChar) => {\n      return {\n        start: {\n          character: startChar\n        },\n        end: {\n          character: index\n        }\n      };\n    };\n    function exprI(i) {\n      return charAtFunc.call(expr, i);\n    }\n    function exprICode(i) {\n      return charCodeAtFunc.call(expr, i);\n    }\n    function gobbleObjects() {\n      const attributes = [];\n      let closed = false;\n      let shouldDefineKey = true;\n      let key;\n      let value;\n      let chCode;\n      const startCharIndex = index;\n      ++index;\n      while (index < length2) {\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === CCURL_CODE) {\n          if (key) {\n            throwError(\"A key was defined but a value was not\", index);\n          }\n          index++;\n          closed = true;\n          break;\n        } else if (shouldDefineKey) {\n          if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n            throwError(\"An object must start wtih a key\", index);\n          }\n          key = gobbleStringLiteral();\n          gobbleSpaces();\n          if (exprICode(index) === COLON_CODE) {\n            index++;\n            shouldDefineKey = false;\n          } else {\n            throwError(\"A colon must follow an object key\", index);\n          }\n        } else {\n          value = gobbleExpression();\n          attributes.push({ key, value });\n          gobbleSpaces();\n          chCode = exprICode(index);\n          if (chCode === COMMA_CODE) {\n            index++;\n          } else if (chCode !== CCURL_CODE) {\n            throwError(\"Please add a comma to add another key\", index);\n          }\n          shouldDefineKey = true;\n          key = void 0;\n          value = void 0;\n        }\n        chCode = exprICode(index);\n      }\n      if (!closed) {\n        throwError(`Unclosed brace in object`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Object\",\n        attributes,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleSpaces() {\n      let ch = exprICode(index);\n      while (ch === 32 || ch === 9) {\n        ch = exprICode(++index);\n      }\n    }\n    function gobbleExpression() {\n      const test = gobbleBinaryExpression();\n      gobbleSpaces();\n      const startCharIndex = index;\n      if (index < length2 && exprICode(index) === QUMARK_CODE) {\n        index++;\n        const consequent = gobbleExpression();\n        if (!consequent) {\n          throwError(\"Expected expression\", index);\n        }\n        gobbleSpaces();\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          const alternate = gobbleExpression();\n          if (!alternate) {\n            throwError(\"Expected expression\", index);\n          }\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"ConditionalExpression\",\n            test,\n            consequent,\n            alternate,\n            location: getLocation(startCharIndex)\n          };\n        }\n        throwError(\"Expected :\", index);\n      }\n      return test;\n    }\n    function gobbleBinaryOp() {\n      gobbleSpaces();\n      let toCheck = expr.substr(index, maxBinopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n          index += tcLen;\n          return toCheck;\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleBinaryExpression() {\n      let node;\n      let prec;\n      let i;\n      let left = gobbleToken();\n      let biop = gobbleBinaryOp();\n      if (!biop) {\n        return left;\n      }\n      let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n      let right = gobbleToken();\n      if (!right) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n      const stack = [left, biopInfo, right];\n      biop = gobbleBinaryOp();\n      while (biop) {\n        prec = binaryPrecedence(biop);\n        if (prec === 0) {\n          break;\n        }\n        biopInfo = { value: biop, prec };\n        while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n          right = stack.pop();\n          biop = stack.pop().value;\n          left = stack.pop();\n          node = createBinaryExpression(\n            biop,\n            left,\n            right,\n            createSpanningLocation(left.location, right.location)\n          );\n          stack.push(node);\n        }\n        node = gobbleToken();\n        if (!node) {\n          throwError(`Expected expression after ${biop}`, index);\n        }\n        stack.push(biopInfo, node);\n        biop = gobbleBinaryOp();\n      }\n      i = stack.length - 1;\n      node = stack[i];\n      while (i > 1) {\n        node = createBinaryExpression(\n          stack[i - 1].value,\n          stack[i - 2],\n          node,\n          createSpanningLocation(stack[i - 2].location, node.location)\n        );\n        i -= 2;\n      }\n      return node;\n    }\n    function gobbleToken() {\n      gobbleSpaces();\n      const ch = exprICode(index);\n      const startCharIndex = index;\n      if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n        return gobbleNumericLiteral();\n      }\n      if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n        return gobbleStringLiteral();\n      }\n      if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n        return gobbleVariable();\n      }\n      if (ch === OBRACK_CODE) {\n        return gobbleArray();\n      }\n      if (isModelRefStart(ch, exprICode(index + 1))) {\n        return gobbleModelRef();\n      }\n      if (ch === OCURL_CODE) {\n        return gobbleObjects();\n      }\n      let toCheck = expr.substr(index, maxUnopLen);\n      let tcLen = toCheck.length;\n      while (tcLen > 0) {\n        if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n          index += tcLen;\n          return {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"UnaryExpression\",\n            operator: toCheck,\n            argument: gobbleToken(),\n            prefix: true,\n            location: getLocation(startCharIndex)\n          };\n        }\n        toCheck = toCheck.substr(0, --tcLen);\n      }\n      return false;\n    }\n    function gobbleNumericLiteral() {\n      let num = \"\";\n      const startCharIndex = index;\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n      if (exprICode(index) === PERIOD_CODE) {\n        num += exprI(index++);\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n      }\n      let ch = exprI(index);\n      if (ch === \"e\" || ch === \"E\") {\n        num += exprI(index++);\n        ch = exprI(index);\n        if (ch === \"+\" || ch === \"-\") {\n          num += exprI(index++);\n        }\n        while (isDecimalDigit(exprICode(index))) {\n          num += exprI(index++);\n        }\n        if (!isDecimalDigit(exprICode(index - 1))) {\n          throwError(`Expected exponent (${num}${exprI(index)})`, index);\n        }\n      }\n      const chCode = exprICode(index);\n      if (isIdentifierStart(chCode)) {\n        throwError(\n          `Variable names cannot start with a number (${num}${exprI(index)})`,\n          index\n        );\n      } else if (chCode === PERIOD_CODE) {\n        throwError(\"Unexpected period\", index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: parseFloat(num),\n        raw: num,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleStringLiteral() {\n      const quote = exprI(index++);\n      let str = \"\";\n      let closed = false;\n      const startCharIndex = index;\n      while (index < length2) {\n        let ch = exprI(index++);\n        if (ch === quote) {\n          closed = true;\n          break;\n        }\n        if (ch !== \"\\\\\") {\n          str += ch;\n          continue;\n        }\n        ch = exprI(index++);\n        switch (ch) {\n          case \"n\":\n            str += \"\\n\";\n            break;\n          case \"r\":\n            str += \"\\r\";\n            break;\n          case \"t\":\n            str += \"\t\";\n            break;\n          case \"b\":\n            str += \"\\b\";\n            break;\n          case \"f\":\n            str += \"\\f\";\n            break;\n          case \"v\":\n            str += \"\\v\";\n            break;\n          default:\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed quote after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: str,\n        raw: `${quote}${str}${quote}`,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleModelRef() {\n      let str = \"\";\n      let closed = false;\n      let openBraceCount = 1;\n      const startCharIndex = index;\n      index += 2;\n      while (index < length2) {\n        const ch = exprI(index++);\n        if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n          index++;\n          openBraceCount--;\n          if (openBraceCount === 0) {\n            closed = true;\n            break;\n          }\n          str += \"}}\";\n        } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n          openBraceCount++;\n          str += \"{{\";\n          index++;\n        } else {\n          str += ch;\n        }\n      }\n      if (!closed) {\n        throwError(`Unclosed brace after \"${str}\"`, index);\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ModelRef\",\n        ref: str,\n        location: getLocation(startCharIndex)\n      };\n    }\n    function gobbleIdentifier() {\n      const start = index;\n      let ch = exprICode(start);\n      if (isIdentifierStart(ch)) {\n        index++;\n      } else {\n        throwError(`Unexpected ${exprI(index)}`, index);\n      }\n      while (index < length2) {\n        ch = exprICode(index);\n        if (isIdentifierPart(ch)) {\n          index++;\n        } else {\n          break;\n        }\n      }\n      const identifier = expr.slice(start, index);\n      if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"Literal\",\n          value: literals[identifier],\n          raw: identifier,\n          location: getLocation(start)\n        };\n      }\n      if (identifier === thisStr) {\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ThisExpression\",\n          location: getLocation(start)\n        };\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Identifier\",\n        name: identifier,\n        location: getLocation(start)\n      };\n    }\n    function gobbleArguments(termination) {\n      const args = [];\n      let charIndex;\n      let node;\n      while (index < length2) {\n        gobbleSpaces();\n        charIndex = exprICode(index);\n        if (charIndex === termination) {\n          index++;\n          break;\n        }\n        if (charIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        node = gobbleExpression();\n        if (!node || node.type === \"Compound\") {\n          throwError(\"Expected comma\", index);\n        }\n        args.push(node);\n      }\n      if (strictMode && charIndex !== termination) {\n        throwError(`Expected ${String.fromCharCode(termination)}`, index);\n      }\n      return args;\n    }\n    function gobbleVariable() {\n      let charIndex = exprICode(index);\n      let node = charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n      const startCharIndex = index;\n      gobbleSpaces();\n      charIndex = exprICode(index);\n      while (charIndex === PERIOD_CODE || charIndex === OBRACK_CODE || charIndex === OPAREN_CODE) {\n        index++;\n        if (charIndex === PERIOD_CODE) {\n          gobbleSpaces();\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: false,\n            object: node,\n            property: gobbleIdentifier(),\n            location: getLocation(startCharIndex)\n          };\n        } else if (charIndex === OBRACK_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"MemberExpression\",\n            computed: true,\n            object: node,\n            property: gobbleExpression(),\n            location: getLocation(startCharIndex)\n          };\n          gobbleSpaces();\n          charIndex = exprICode(index);\n          if (charIndex !== CBRACK_CODE) {\n            throwError(\"Unclosed [\", index);\n          }\n          index++;\n        } else if (charIndex === OPAREN_CODE) {\n          node = {\n            __id: ExpNodeOpaqueIdentifier,\n            type: \"CallExpression\",\n            args: gobbleArguments(CPAREN_CODE),\n            callTarget: node,\n            location: getLocation(startCharIndex)\n          };\n        }\n        gobbleSpaces();\n        charIndex = exprICode(index);\n      }\n      return node;\n    }\n    function gobbleGroup() {\n      index++;\n      const node = gobbleExpression();\n      gobbleSpaces();\n      if (exprICode(index) === CPAREN_CODE) {\n        index++;\n        return node;\n      }\n      throwError(\"Unclosed (\", index);\n    }\n    function gobbleArray() {\n      const startCharIndex = index;\n      index++;\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ArrayExpression\",\n        elements: gobbleArguments(CBRACK_CODE),\n        location: getLocation(startCharIndex)\n      };\n    }\n    const nodes = [];\n    try {\n      while (index < length2) {\n        const chIndex = exprICode(index);\n        if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n          index++;\n          continue;\n        }\n        const node = gobbleExpression();\n        if (node) {\n          nodes.push(node);\n        } else if (strictMode && index < length2) {\n          throwError(`Unexpected \"${exprI(index)}\"`, index);\n        }\n      }\n      if (nodes.length === 1) {\n        return nodes[0];\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0)\n      };\n    } catch (e) {\n      if (strictMode || !(e instanceof Error)) {\n        throw e;\n      }\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Compound\",\n        body: nodes,\n        location: getLocation(0),\n        error: e\n      };\n    }\n  }\n  var evaluator_functions_exports = {};\n  __export2(evaluator_functions_exports, {\n    conditional: () => conditional,\n    deleteDataVal: () => deleteDataVal,\n    getDataVal: () => getDataVal,\n    setDataVal: () => setDataVal,\n    waitFor: () => waitFor\n  });\n  function isPromiselike(value) {\n    return value != null && typeof value === \"object\" && typeof value.then === \"function\" && // Additional safeguards against false positives\n    (value instanceof Promise || // Check for standard Promise constructor name\n    value.constructor?.name === \"Promise\" || // Verify it has other Promise-like methods to reduce false positives\n    typeof value.catch === \"function\" && typeof value.finally === \"function\");\n  }\n  var AwaitableSymbol = Symbol(\"Awaitable\");\n  function isAwaitable(val) {\n    return isPromiselike(val) && val[AwaitableSymbol] !== void 0;\n  }\n  function collateAwaitable(promises) {\n    const result = Promise.all(promises);\n    return makeAwaitable(result);\n  }\n  function makeAwaitable(promise) {\n    promise[AwaitableSymbol] = AwaitableSymbol;\n    promise.awaitableThen = (arg) => {\n      return makeAwaitable(promise.then(arg));\n    };\n    return promise;\n  }\n  var setDataVal = (_context, binding, value) => {\n    _context.model.set([[binding, value]]);\n  };\n  var getDataVal = (_context, binding) => {\n    return _context.model.get(binding);\n  };\n  var deleteDataVal = (_context, binding) => {\n    return _context.model.delete(binding);\n  };\n  var conditional = (ctx, condition, ifTrue, ifFalse) => {\n    const testResult = ctx.evaluate(condition);\n    if (isAwaitable(testResult)) {\n      return testResult.awaitableThen((resolvedTest) => {\n        if (resolvedTest) {\n          return ctx.evaluate(ifTrue);\n        }\n        if (ifFalse) {\n          return ctx.evaluate(ifFalse);\n        }\n        return null;\n      });\n    }\n    if (testResult) {\n      return ctx.evaluate(ifTrue);\n    }\n    if (ifFalse) {\n      return ctx.evaluate(ifFalse);\n    }\n    return null;\n  };\n  conditional.resolveParams = false;\n  var waitFor = (ctx, promise) => {\n    return makeAwaitable(promise);\n  };\n  function withoutContext(fn) {\n    return (_context, ...args) => fn(...args);\n  }\n  function isObjectExpression(expr) {\n    if (isExpressionNode(expr)) {\n      return false;\n    }\n    return typeof expr === \"object\" && expr !== null && !Array.isArray(expr) && \"value\" in expr;\n  }\n  var andandOperator = (ctx, a, b, async) => {\n    return LogicalOperators.and(ctx, a, b, async);\n  };\n  andandOperator.resolveParams = false;\n  var ororOperator = (ctx, a, b, async) => {\n    return LogicalOperators.or(ctx, a, b, async);\n  };\n  ororOperator.resolveParams = false;\n  var DEFAULT_BINARY_OPERATORS = {\n    // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n    \"+\": (a, b) => a + b,\n    \"-\": (a, b) => a - b,\n    \"*\": (a, b) => a * b,\n    \"/\": (a, b) => a / b,\n    \"%\": (a, b) => a % b,\n    // Promise-aware comparison operators\n    // eslint-disable-next-line\n    \"==\": makePromiseAwareBinaryOp((a, b) => a == b),\n    // eslint-disable-next-line\n    \"!=\": makePromiseAwareBinaryOp((a, b) => a != b),\n    \">\": makePromiseAwareBinaryOp((a, b) => a > b),\n    \">=\": makePromiseAwareBinaryOp((a, b) => a >= b),\n    \"<\": makePromiseAwareBinaryOp((a, b) => a < b),\n    \"<=\": makePromiseAwareBinaryOp((a, b) => a <= b),\n    \"!==\": makePromiseAwareBinaryOp((a, b) => a !== b),\n    \"===\": makePromiseAwareBinaryOp((a, b) => a === b),\n    \"&&\": andandOperator,\n    \"||\": ororOperator,\n    // eslint-disable-next-line\n    \"|\": (a, b) => a | b,\n    // eslint-disable-next-line\n    \"&\": (a, b) => a & b,\n    \"+=\": (a, b) => a + b,\n    \"-=\": (a, b) => a - b,\n    // eslint-disable-next-line\n    \"&=\": (a, b) => a & b,\n    // eslint-disable-next-line\n    \"|=\": (a, b) => a | b\n  };\n  var DEFAULT_UNARY_OPERATORS = {\n    \"-\": (a) => -a,\n    \"+\": (a) => Number(a),\n    \"!\": makePromiseAwareUnaryOp((a) => !a)\n  };\n  function makePromiseAwareBinaryOp(operation) {\n    return (a, b, async) => {\n      if (async && (isAwaitable(a) || isAwaitable(b))) {\n        return collateAwaitable([\n          Promise.resolve(a),\n          Promise.resolve(b)\n        ]).awaitableThen(\n          ([resolvedA, resolvedB]) => operation(resolvedA, resolvedB)\n        );\n      }\n      return operation(a, b);\n    };\n  }\n  function makePromiseAwareUnaryOp(operation) {\n    return (a, async) => {\n      if (async && isAwaitable(a)) {\n        return a.awaitableThen((resolved) => operation(resolved));\n      }\n      return operation(a);\n    };\n  }\n  function handleConditionalBranching(testValue, getTrueBranch, getFalseBranch, resolveNode, async) {\n    if (async && isAwaitable(testValue)) {\n      return testValue.awaitableThen((resolved) => {\n        const branch2 = resolved ? getTrueBranch() : getFalseBranch();\n        const branchResult = resolveNode(branch2);\n        return isAwaitable(branchResult) ? Promise.resolve(branchResult) : branchResult;\n      });\n    }\n    const branch = testValue ? getTrueBranch() : getFalseBranch();\n    return resolveNode(branch);\n  }\n  var PromiseCollectionHandler = {\n    /**\n     * Handle array with potential Promise elements\n     */\n    handleArray(items, async) {\n      if (!async) {\n        return items;\n      }\n      const hasPromises = items.some((item) => isAwaitable(item));\n      return hasPromises ? collateAwaitable(items) : items;\n    },\n    /**\n     * Handle object with potential Promise keys/values\n     */\n    handleObject(attributes, resolveNode, async) {\n      const resolvedAttributes = {};\n      const promises = [];\n      let hasPromises = false;\n      attributes.forEach((attr) => {\n        const key = resolveNode(attr.key);\n        const value = resolveNode(attr.value);\n        if (async && (isAwaitable(key) || isAwaitable(value))) {\n          hasPromises = true;\n          const keyPromise = Promise.resolve(key);\n          const valuePromise = Promise.resolve(value);\n          promises.push(\n            collateAwaitable([keyPromise, valuePromise]).awaitableThen(\n              ([resolvedKey, resolvedValue]) => {\n                resolvedAttributes[resolvedKey] = resolvedValue;\n              }\n            )\n          );\n        } else {\n          resolvedAttributes[key] = value;\n        }\n      });\n      return hasPromises ? collateAwaitable(promises).awaitableThen(() => resolvedAttributes) : resolvedAttributes;\n    }\n  };\n  var LogicalOperators = {\n    and: (ctx, leftNode, rightNode, async) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (async && isAwaitable(leftResult)) {\n        return leftResult.awaitableThen((awaitedLeft) => {\n          if (!awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isAwaitable(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult && ctx.evaluate(rightNode);\n    },\n    or: (ctx, leftNode, rightNode, async) => {\n      const leftResult = ctx.evaluate(leftNode);\n      if (async && isAwaitable(leftResult)) {\n        return leftResult.awaitableThen((awaitedLeft) => {\n          if (awaitedLeft)\n            return awaitedLeft;\n          const rightResult = ctx.evaluate(rightNode);\n          return isAwaitable(rightResult) ? rightResult : Promise.resolve(rightResult);\n        });\n      }\n      return leftResult || ctx.evaluate(rightNode);\n    }\n  };\n  var ExpressionEvaluator = class {\n    constructor(defaultOptions) {\n      this.vars = {};\n      this.hooks = {\n        /** Resolve an AST node for an expression to a value */\n        resolve: new SyncWaterfallHook(),\n        /** Gets the options that will be passed in calls to the resolve hook */\n        resolveOptions: new SyncWaterfallHook(),\n        /** Allows users to change the expression to be evaluated before processing */\n        beforeEvaluate: new SyncWaterfallHook(),\n        /**\n         * An optional means of handling an error in the expression execution\n         * Return true if handled, to stop propagation of the error\n         */\n        onError: new SyncBailHook()\n      };\n      this.expressionsCache = /* @__PURE__ */ new Map();\n      this.operators = {\n        binary: new Map(\n          Object.entries(DEFAULT_BINARY_OPERATORS)\n        ),\n        unary: new Map(\n          Object.entries(DEFAULT_UNARY_OPERATORS)\n        ),\n        expressions: new Map([\n          ...Object.entries(evaluator_functions_exports),\n          [\"await\", waitFor]\n        ])\n      };\n      this.defaultHookOptions = {\n        ...defaultOptions,\n        evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n        resolveNode: (node) => this._execAST(node, this.defaultHookOptions)\n      };\n      this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n        return this._resolveNode(result, node, options);\n      });\n      this.evaluate = this.evaluate.bind(this);\n    }\n    reset() {\n      this.expressionsCache.clear();\n    }\n    evaluate(expr, options) {\n      const resolvedOpts = this.hooks.resolveOptions.call({\n        ...this.defaultHookOptions,\n        ...options,\n        resolveNode: (node) => this._execAST(node, resolvedOpts)\n      });\n      let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n      while (isObjectExpression(expression)) {\n        expression = expression.value;\n      }\n      if (typeof expression === \"number\" || typeof expression === \"boolean\" || expression === void 0 || expression === null) {\n        return expression;\n      }\n      if (isExpressionNode(expression)) {\n        return this._execAST(expression, resolvedOpts);\n      }\n      if (Array.isArray(expression)) {\n        return expression.reduce(\n          (_nothing, exp) => this.evaluate(exp, options),\n          null\n        );\n      }\n      return this._execString(String(expression), resolvedOpts);\n    }\n    /**\n     * Evaluate functions in an async context\n     * @experimental These Player APIs are in active development and may change. Use with caution\n     */\n    evaluateAsync(expr, options) {\n      if (Array.isArray(expr)) {\n        return collateAwaitable(\n          expr.map(\n            async (exp) => this.evaluate(exp, { ...options, async: true })\n          )\n        ).awaitableThen((values) => {\n          return values.pop();\n        });\n      } else {\n        return this.evaluate(expr, { ...options, async: true });\n      }\n    }\n    addExpressionFunction(name, handler) {\n      this.operators.expressions.set(name, handler);\n    }\n    addBinaryOperator(operator, handler) {\n      this.operators.binary.set(operator, handler);\n    }\n    addUnaryOperator(operator, handler) {\n      this.operators.unary.set(operator, handler);\n    }\n    setExpressionVariable(name, value) {\n      this.vars[name] = value;\n    }\n    getExpressionVariable(name) {\n      return this.vars[name];\n    }\n    _execAST(node, options) {\n      return this.hooks.resolve.call(void 0, node, options);\n    }\n    _execString(exp, options) {\n      if (exp === \"\") {\n        return exp;\n      }\n      const matches = exp.match(/^@\\[(.*)\\]@$/);\n      let matchedExp = exp;\n      if (matches) {\n        const [, matched] = Array.from(matches);\n        if (matched) {\n          matchedExp = matched;\n        }\n      }\n      let storedAST;\n      try {\n        storedAST = this.expressionsCache.get(matchedExp) ?? parseExpression(matchedExp, { strict: options.strict });\n        this.expressionsCache.set(matchedExp, storedAST);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error parsing expression: ${exp}`, e);\n        }\n        return;\n      }\n      try {\n        return this._execAST(storedAST, options);\n      } catch (e) {\n        if (options.throwErrors || !this.hooks.onError.call(e)) {\n          throw new import_ts_nested_error3.NestedError(`Error evaluating expression: ${exp}`, e);\n        }\n      }\n    }\n    _resolveNode(_currentValue, node, options) {\n      const { resolveNode, model } = options;\n      const isAsync = options.async ?? false;\n      const expressionContext = {\n        ...options,\n        evaluate: (expr) => this.evaluate(expr, options)\n      };\n      if (node.type === \"Literal\") {\n        return node.value;\n      }\n      if (node.type === \"Identifier\") {\n        return this.vars[node.name];\n      }\n      if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n        throw new Error(`Expression type: ${node.type} is not supported`);\n      }\n      if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n        const operator = this.operators.binary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.left, node.right, isAsync);\n            }\n            const left2 = resolveNode(node.left);\n            const right2 = resolveNode(node.right);\n            if (options.async && (isAwaitable(left2) || isAwaitable(right2))) {\n              return collateAwaitable([left2, right2]).awaitableThen(\n                ([leftVal, rightVal]) => operator(expressionContext, leftVal, rightVal, isAsync)\n              );\n            }\n            return operator(expressionContext, left2, right2, isAsync);\n          }\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            return collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) => operator(leftVal, rightVal, isAsync)\n            );\n          }\n          return operator(left, right, isAsync);\n        }\n        return;\n      }\n      if (node.type === \"UnaryExpression\") {\n        const operator = this.operators.unary.get(node.operator);\n        if (operator) {\n          if (\"resolveParams\" in operator) {\n            if (operator.resolveParams === false) {\n              return operator(expressionContext, node.argument, isAsync);\n            }\n            const arg2 = resolveNode(node.argument);\n            if (options.async && isAwaitable(arg2)) {\n              return arg2.awaitableThen(\n                (argVal) => operator(expressionContext, argVal, isAsync)\n              );\n            }\n            return operator(expressionContext, arg2, isAsync);\n          }\n          const arg = resolveNode(node.argument);\n          if (options.async && isAwaitable(arg)) {\n            return arg.awaitableThen((argVal) => operator(argVal, isAsync));\n          }\n          return operator(arg, isAsync);\n        }\n        return;\n      }\n      if (node.type === \"Object\") {\n        return PromiseCollectionHandler.handleObject(\n          node.attributes,\n          resolveNode,\n          options.async || false\n        );\n      }\n      if (node.type === \"CallExpression\") {\n        const expressionName = node.callTarget.name;\n        const operator = this.operators.expressions.get(expressionName);\n        if (!operator) {\n          throw new Error(`Unknown expression function: ${expressionName}`);\n        }\n        if (operator.name === \"waitFor\" && !options.async) {\n          throw new Error(\"Usage of await outside of async context\");\n        }\n        if (\"resolveParams\" in operator && operator.resolveParams === false) {\n          return operator(expressionContext, ...node.args);\n        }\n        const args = node.args.map((n) => resolveNode(n));\n        if (options.async) {\n          const hasPromises = args.some(isAwaitable);\n          if (hasPromises) {\n            return collateAwaitable(args).awaitableThen(\n              (resolvedArgs) => operator(expressionContext, ...resolvedArgs)\n            );\n          }\n        }\n        return operator(expressionContext, ...args);\n      }\n      if (node.type === \"ModelRef\") {\n        return model.get(node.ref, { context: { model: options.model } });\n      }\n      if (node.type === \"MemberExpression\") {\n        const obj = resolveNode(node.object);\n        const prop = resolveNode(node.property);\n        if (options.async && (isAwaitable(obj) || isAwaitable(prop))) {\n          return collateAwaitable([obj, prop]).awaitableThen(\n            ([objVal, propVal]) => objVal[propVal]\n          );\n        }\n        return obj[prop];\n      }\n      if (node.type === \"Assignment\") {\n        if (node.left.type === \"ModelRef\") {\n          const value = resolveNode(node.right);\n          if (isPromiselike(value)) {\n            if (options.async && isAwaitable(value)) {\n              return value.awaitableThen((resolvedValue) => {\n                model.set([[node.left.ref, resolvedValue]]);\n                return resolvedValue;\n              });\n            } else {\n              options.logger?.warn(\n                \"Unawaited promise written to mode, this behavior is undefined and may change in future releases\"\n              );\n            }\n          }\n          model.set([[node.left.ref, value]]);\n          return value;\n        }\n        if (node.left.type === \"Identifier\") {\n          const value = resolveNode(node.right);\n          if (options.async && isAwaitable(value)) {\n            return value.awaitableThen((resolvedValue) => {\n              this.vars[node.left.name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[node.left.name] = value;\n          return value;\n        }\n        return;\n      }\n      if (node.type === \"ConditionalExpression\") {\n        const testResult = resolveNode(node.test);\n        return handleConditionalBranching(\n          testResult,\n          () => node.consequent,\n          () => node.alternate,\n          resolveNode,\n          isAsync\n        );\n      }\n      if (node.type === \"ArrayExpression\") {\n        const results = node.elements.map((ele) => resolveNode(ele));\n        return PromiseCollectionHandler.handleArray(results, isAsync);\n      }\n      if (node.type === \"Modification\") {\n        const operation = this.operators.binary.get(node.operator);\n        if (operation) {\n          let newValue;\n          if (\"resolveParams\" in operation) {\n            if (operation.resolveParams === false) {\n              newValue = operation(\n                expressionContext,\n                node.left,\n                node.right,\n                isAsync\n              );\n            } else {\n              const left = resolveNode(node.left);\n              const right = resolveNode(node.right);\n              if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n                newValue = collateAwaitable([left, right]).awaitableThen(\n                  ([leftVal, rightVal]) => operation(expressionContext, leftVal, rightVal, isAsync)\n                );\n              } else {\n                newValue = operation(expressionContext, left, right, isAsync);\n              }\n            }\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n            if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n              newValue = collateAwaitable([left, right]).awaitableThen(\n                ([leftVal, rightVal]) => operation(leftVal, rightVal, isAsync)\n              );\n            } else {\n              newValue = operation(left, right, isAsync);\n            }\n          }\n          if (node.left.type === \"ModelRef\") {\n            if (options.async && isAwaitable(newValue)) {\n              return newValue.awaitableThen((resolvedValue) => {\n                model.set([[node.left.ref, resolvedValue]]);\n                return resolvedValue;\n              });\n            }\n            model.set([[node.left.ref, newValue]]);\n          } else if (node.left.type === \"Identifier\") {\n            if (options.async && isAwaitable(newValue)) {\n              return newValue.awaitableThen((resolvedValue) => {\n                this.vars[node.left.name] = resolvedValue;\n                return resolvedValue;\n              });\n            }\n            this.vars[node.left.name] = newValue;\n          }\n          return newValue;\n        }\n        return resolveNode(node.left);\n      }\n    }\n  };\n  var TapableLogger = class {\n    constructor() {\n      this.hooks = {\n        trace: new SyncHook(),\n        debug: new SyncHook(),\n        info: new SyncHook(),\n        warn: new SyncHook(),\n        error: new SyncHook(),\n        log: new SyncHook()\n      };\n      this.logHandlers = /* @__PURE__ */ new Set();\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n    }\n    createHandler(severity) {\n      return (...args) => {\n        this.hooks[severity].call(args);\n        this.hooks.log.call(severity, args);\n        this.logHandlers.forEach((logger) => logger[severity](...args));\n      };\n    }\n    addHandler(logHandler) {\n      this.logHandlers.add(logHandler);\n    }\n    removeHandler(logHandler) {\n      this.logHandlers.delete(logHandler);\n    }\n  };\n  var ProxyLogger = class {\n    constructor(loggerProvider) {\n      this.trace = this.createHandler(\"trace\");\n      this.debug = this.createHandler(\"debug\");\n      this.info = this.createHandler(\"info\");\n      this.warn = this.createHandler(\"warn\");\n      this.error = this.createHandler(\"error\");\n      this.proxiedLoggerProvider = loggerProvider;\n    }\n    createHandler(severity) {\n      return (...args) => {\n        const logger = this.proxiedLoggerProvider();\n        logger?.[severity](...args);\n      };\n    }\n  };\n  var identify = (val) => val;\n  function parse2(schema) {\n    const expandedPaths = /* @__PURE__ */ new Map();\n    if (!schema.ROOT) {\n      return expandedPaths;\n    }\n    const parseQueue = [{ node: schema.ROOT, path: [], visited: /* @__PURE__ */ new Set() }];\n    while (parseQueue.length > 0) {\n      const next = parseQueue.shift();\n      if (!next) {\n        break;\n      }\n      const { node, path, visited } = next;\n      Object.entries(node).forEach(([prop, type]) => {\n        const nestedPath = [...path, prop];\n        const nestedPathStr = nestedPath.join(\".\");\n        if (expandedPaths.has(nestedPathStr)) {\n          throw new Error(\n            \"Path has already been processed. There's either a loop somewhere or a bug\"\n          );\n        }\n        if (visited.has(type.type)) {\n          throw new Error(\n            `Path already contained type: ${type.type}. This likely indicates a loop in the schema`\n          );\n        }\n        expandedPaths.set(nestedPathStr, type);\n        if (type.isArray) {\n          nestedPath.push(\"[]\");\n        }\n        if (type.isRecord) {\n          nestedPath.push(\"{}\");\n        }\n        if (type.type && schema[type.type]) {\n          parseQueue.push({\n            path: nestedPath,\n            node: schema[type.type],\n            visited: /* @__PURE__ */ new Set([...visited, type.type])\n          });\n        }\n      });\n    }\n    return expandedPaths;\n  }\n  var SchemaController = class {\n    constructor(schema) {\n      this.formatters = /* @__PURE__ */ new Map();\n      this.types = /* @__PURE__ */ new Map();\n      this.schema = /* @__PURE__ */ new Map();\n      this.bindingSchemaNormalizedCache = /* @__PURE__ */ new Map();\n      this.hooks = {\n        resolveTypeForBinding: new SyncWaterfallHook()\n      };\n      this.schema = schema ? parse2(schema) : /* @__PURE__ */ new Map();\n    }\n    addFormatters(fns) {\n      fns.forEach((def) => {\n        this.formatters.set(def.name, def);\n      });\n    }\n    addDataTypes(types) {\n      types.forEach((t2) => {\n        this.types.set(t2.type, t2);\n      });\n    }\n    getValidationsForBinding(binding) {\n      const typeDef = this.getApparentType(binding);\n      if (!typeDef?.validation?.length) {\n        return void 0;\n      }\n      return typeDef.validation.map((vRef) => ({\n        severity: \"error\",\n        trigger: \"change\",\n        ...vRef\n      }));\n    }\n    normalizeBinding(binding) {\n      const cached = this.bindingSchemaNormalizedCache.get(binding);\n      if (cached) {\n        return cached;\n      }\n      let bindingArray = binding.asArray();\n      let normalized = bindingArray.map((p) => typeof p === \"number\" ? \"[]\" : p).join(\".\");\n      if (normalized) {\n        this.bindingSchemaNormalizedCache.set(binding, normalized);\n        bindingArray = normalized.split(\".\");\n      }\n      bindingArray.forEach((item) => {\n        const recordBinding = bindingArray.map((p) => p === item ? \"{}\" : p).join(\".\");\n        if (this.schema.get(recordBinding)) {\n          this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n          bindingArray = recordBinding.split(\".\");\n          normalized = recordBinding;\n        }\n      });\n      return normalized;\n    }\n    getType(binding) {\n      return this.hooks.resolveTypeForBinding.call(\n        this.schema.get(this.normalizeBinding(binding)),\n        binding\n      );\n    }\n    getApparentType(binding) {\n      const schemaType = this.getType(binding);\n      if (schemaType === void 0) {\n        return void 0;\n      }\n      const baseType = this.getTypeDefinition(schemaType?.type);\n      if (baseType === void 0) {\n        return schemaType;\n      }\n      return {\n        ...baseType,\n        ...schemaType,\n        validation: [\n          ...schemaType.validation ?? [],\n          ...baseType.validation ?? []\n        ]\n      };\n    }\n    getTypeDefinition(dataType) {\n      return this.types.get(dataType);\n    }\n    getFormatterForType(formatReference) {\n      const { type: formatType, ...options } = formatReference;\n      const formatter = this.formatters.get(formatType);\n      if (!formatter) {\n        return;\n      }\n      return {\n        format: formatter.format ? (val) => formatter.format?.(val, options) : identify,\n        deformat: formatter.deformat ? (val) => formatter.deformat?.(val, options) : identify\n      };\n    }\n    /**\n     * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n     * If no formatter is registered, it will return undefined\n     */\n    getFormatter(binding) {\n      const type = this.getApparentType(binding);\n      if (!type?.format) {\n        return void 0;\n      }\n      return this.getFormatterForType(type.format);\n    }\n  };\n  var DOUBLE_OPEN_CURLY = \"{{\";\n  var DOUBLE_CLOSE_CURLY = \"}}\";\n  function findNextExp(str) {\n    const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n    if (expStart === -1) {\n      return void 0;\n    }\n    let count = 1;\n    let offset = expStart + DOUBLE_OPEN_CURLY.length;\n    let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n    while (count > 0 && workingString.length > 0) {\n      const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n      if (nextCloseCurly === -1) {\n        break;\n      }\n      const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n      if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n        count++;\n        workingString = workingString.substring(\n          nextOpenCurly + DOUBLE_OPEN_CURLY.length\n        );\n        offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n      } else {\n        count--;\n        workingString = workingString.substring(\n          nextCloseCurly + DOUBLE_CLOSE_CURLY.length\n        );\n        offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n      }\n    }\n    if (count !== 0) {\n      throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n    }\n    return {\n      start: expStart,\n      end: offset\n    };\n  }\n  function resolveExpressionsInString(val, { evaluate }) {\n    if (!evaluate) {\n      return val;\n    }\n    const expMatch = /@\\[.*?\\]@/;\n    let newVal = val;\n    let match = newVal.match(expMatch);\n    while (match !== null) {\n      const expStrWithBrackets = match[0];\n      const matchStart = newVal.indexOf(expStrWithBrackets);\n      const expString = expStrWithBrackets.substr(\n        \"@[\".length,\n        expStrWithBrackets.length - \"@[\".length - \"]@\".length\n      );\n      const expValue = evaluate(expString);\n      if (matchStart === 0 && expStrWithBrackets === val && typeof expValue !== \"string\") {\n        return expValue;\n      }\n      newVal = newVal.substr(0, matchStart) + expValue + newVal.substr(matchStart + expStrWithBrackets.length);\n      match = newVal.match(expMatch);\n    }\n    return newVal;\n  }\n  function resolveDataRefsInString(val, options) {\n    const { model, formatted = true } = options;\n    let workingString = resolveExpressionsInString(val, options);\n    if (!model || typeof workingString !== \"string\" || workingString.indexOf(DOUBLE_OPEN_CURLY) === -1) {\n      return workingString;\n    }\n    while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n      const expLocation = findNextExp(workingString);\n      if (!expLocation) {\n        return workingString;\n      }\n      const { start, end } = expLocation;\n      const binding = workingString.substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length\n      ).trim();\n      const evaledVal = model.get(binding, { formatted });\n      if (start === 0 && end === workingString.length && typeof evaledVal !== \"string\") {\n        return evaledVal;\n      }\n      workingString = workingString.substr(0, start) + evaledVal + workingString.substr(end);\n    }\n    return workingString;\n  }\n  function traverseObject(val, options) {\n    switch (typeof val) {\n      case \"string\": {\n        return resolveDataRefsInString(val, options);\n      }\n      case \"object\": {\n        if (!val)\n          return val;\n        const keys = Object.keys(val);\n        let newVal = val;\n        if (keys.length > 0) {\n          keys.forEach((key) => {\n            newVal = (0, import_timm2.setIn)(\n              newVal,\n              [key],\n              traverseObject(val[key], options)\n            );\n          });\n        }\n        return newVal;\n      }\n      default:\n        return val;\n    }\n  }\n  function resolveDataRefs(val, options) {\n    return traverseObject(val, options);\n  }\n  function removeBindingAndChildrenFromMap(sourceMap, binding) {\n    const targetMap = new Map(sourceMap);\n    const parentBinding = binding.parent();\n    const property = binding.key();\n    targetMap.forEach((_value, trackedBinding) => {\n      if (binding === trackedBinding || binding.contains(trackedBinding)) {\n        targetMap.delete(trackedBinding);\n      }\n    });\n    if (typeof property === \"number\") {\n      const bindingsToRewrite = Array.from(sourceMap.keys()).filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n        return false;\n      }).sort();\n      bindingsToRewrite.forEach((trackedBinding) => {\n        const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n        if (typeof childIndex === \"number\") {\n          const newSegments = [childIndex - 1, ...childPath];\n          const newChildBinding = parentBinding.descendent(newSegments);\n          targetMap.set(newChildBinding, targetMap.get(trackedBinding));\n          targetMap.delete(trackedBinding);\n        }\n      });\n    }\n    return targetMap;\n  }\n  var ValidationMiddleware = class {\n    constructor(validator, options) {\n      this.validator = validator;\n      this.shadowModelPaths = /* @__PURE__ */ new Map();\n      this.logger = options?.logger;\n      this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n    }\n    set(transaction, options, next) {\n      const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n      const nextTransaction = [];\n      const includedBindings = /* @__PURE__ */ new Set();\n      transaction.forEach(([binding, value]) => {\n        this.shadowModelPaths.set(binding, value);\n        includedBindings.add(binding);\n      });\n      const invalidBindings = [];\n      this.shadowModelPaths.forEach((value, binding) => {\n        const validations = this.validator(binding, asModel);\n        if (validations === void 0) {\n          nextTransaction.push([binding, value]);\n        } else if (validations instanceof Set) {\n          validations.forEach((validation) => {\n            invalidBindings.push(validation.binding);\n            if (!validation.isStrong && validation.binding.asString() === binding.asString()) {\n              nextTransaction.push([validation.binding, value]);\n            }\n          });\n        } else if (includedBindings.has(binding)) {\n          invalidBindings.push(binding);\n          this.logger?.debug(\n            `Invalid value for path: ${binding.asString()} - ${validations.severity} - ${validations.message}`\n          );\n        }\n      });\n      let validResults = [];\n      if (next && nextTransaction.length > 0) {\n        nextTransaction.forEach(\n          ([binding]) => this.shadowModelPaths.delete(binding)\n        );\n        const result = next.set(nextTransaction, options);\n        if (invalidBindings.length === 0) {\n          return result;\n        }\n        validResults = result;\n      }\n      const invalidResults = invalidBindings.map((binding) => {\n        return {\n          binding,\n          oldValue: asModel.get(binding),\n          newValue: asModel.get(binding),\n          force: true\n        };\n      });\n      return [...validResults, ...invalidResults];\n    }\n    get(binding, options, next) {\n      let val = next?.get(binding, options);\n      if (this.shouldIncludeInvalid?.(options) ?? options?.includeInvalid === true) {\n        this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n          if (shadowBinding === binding) {\n            val = shadowValue;\n            return;\n          }\n          if (binding.contains(shadowBinding)) {\n            val = (0, import_timm3.setIn)(val, shadowBinding.relative(binding), shadowValue);\n          }\n        });\n      }\n      return val;\n    }\n    delete(binding, options, next) {\n      this.shadowModelPaths = removeBindingAndChildrenFromMap(\n        this.shadowModelPaths,\n        binding\n      );\n      return next?.delete(binding, options);\n    }\n  };\n  var ValidatorRegistry = class {\n    constructor() {\n      this.registry = /* @__PURE__ */ new Map();\n    }\n    /** Use the given validator name to fetch the handler */\n    get(name) {\n      return this.registry.get(name);\n    }\n    /** Register a new validator */\n    register(name, handler) {\n      this.registry.set(name, handler);\n    }\n  };\n  function hasTemplateValues(obj, localKey) {\n    return Object.hasOwnProperty.call(obj, \"template\") && Array.isArray(obj?.template) && obj.template.length && obj.template.find((tmpl) => tmpl.output === localKey);\n  }\n  function hasSwitchKey(localKey) {\n    return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n  }\n  function hasTemplateKey(localKey) {\n    return localKey === \"template\";\n  }\n  function getNodeID(node) {\n    if (!node) {\n      return;\n    }\n    if (\"value\" in node && typeof node.value === \"object\" && typeof node.value?.id === \"string\") {\n      return node.value.id;\n    }\n  }\n  var EMPTY_NODE = {\n    type: \"empty\"\n    /* Empty */\n  };\n  var Parser = class {\n    constructor() {\n      this.hooks = {\n        /**\n         * A hook to interact with an object _before_ parsing it into an AST\n         *\n         * @param value - The object we're are about to parse\n         * @returns - A new value to parse.\n         *  If undefined, the original value is used.\n         *  If null, we stop parsing this node.\n         */\n        onParseObject: new SyncWaterfallHook(),\n        /**\n         * A callback to interact with an AST _after_ we parse it into the AST\n         *\n         * @param value - The object we parsed\n         * @param node - The AST node we generated\n         * @returns - A new AST node to use\n         *   If undefined, the original value is used.\n         *   If null, we ignore this node all together\n         */\n        onCreateASTNode: new SyncWaterfallHook(),\n        parseNode: new SyncBailHook()\n      };\n    }\n    parseView(value) {\n      const viewNode = this.parseObject(\n        value,\n        \"view\"\n        /* View */\n      );\n      if (!viewNode) {\n        throw new Error(\"Unable to parse object into a view\");\n      }\n      return viewNode;\n    }\n    createASTNode(node, value) {\n      const tapped = this.hooks.onCreateASTNode.call(node, value);\n      if (tapped === void 0) {\n        return node;\n      }\n      return tapped;\n    }\n    parseObject(obj, type = \"value\", options = { templateDepth: 0 }) {\n      const parsedNode = this.hooks.parseNode.call(\n        obj,\n        type,\n        options\n      );\n      if (parsedNode || parsedNode === null) {\n        return parsedNode;\n      }\n      const parseLocalObject = (currentValue, objToParse, path = []) => {\n        if (typeof objToParse !== \"object\" || objToParse === null) {\n          return { value: objToParse, children: [] };\n        }\n        const localObj = this.hooks.onParseObject.call(objToParse, type);\n        if (!localObj) {\n          return currentValue;\n        }\n        const objEntries = Array.isArray(localObj) ? localObj.map((v, i) => [i, v]) : [\n          ...Object.entries(localObj),\n          ...Object.getOwnPropertySymbols(localObj).map((s) => [\n            s,\n            localObj[s]\n          ])\n        ];\n        const defaultValue = {\n          children: [],\n          value: currentValue\n        };\n        const newValue = objEntries.reduce((accumulation, current) => {\n          let { value: value2 } = accumulation;\n          const { children: children2 } = accumulation;\n          const [localKey, localValue] = current;\n          const newChildren = this.hooks.parseNode.call(\n            localValue,\n            \"value\",\n            options,\n            {\n              path,\n              key: localKey,\n              parentObj: localObj\n            }\n          );\n          if (newChildren) {\n            children2.push(...newChildren);\n          } else if (localValue && typeof localValue === \"object\") {\n            const result = parseLocalObject(accumulation.value, localValue, [\n              ...path,\n              localKey\n            ]);\n            value2 = result.value;\n            children2.push(...result.children);\n          } else {\n            value2 = (0, import_timm5.setIn)(accumulation.value, [...path, localKey], localValue);\n          }\n          return {\n            value: value2,\n            children: children2\n          };\n        }, defaultValue);\n        return newValue;\n      };\n      const { value, children } = parseLocalObject(void 0, obj);\n      const baseAst = value === void 0 && !children.length ? void 0 : {\n        type,\n        value\n      };\n      if (baseAst && children.length) {\n        const parent = baseAst;\n        parent.children = children;\n        children.forEach((child) => {\n          child.value.parent = parent;\n        });\n      }\n      return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n    }\n  };\n  function caresAboutDataChanges(dataChanges, dependencies) {\n    if (!dataChanges || !dependencies) {\n      return true;\n    }\n    const depArray = Array.from(dependencies.values());\n    const dataChangeArray = Array.from(dataChanges.values());\n    return depArray.find(\n      (dep) => !!dataChangeArray.find(\n        (change) => change === dep || change.contains(dep) || dep.contains(change)\n      )\n    ) !== void 0;\n  }\n  function toNodeResolveOptions(resolverOptions) {\n    return {\n      ...resolverOptions,\n      data: {\n        model: resolverOptions.model,\n        formatValue: (ref, value) => {\n          if (resolverOptions.formatValue) {\n            return resolverOptions.formatValue(ref, value);\n          }\n          return value;\n        },\n        format: (bindingLike, value) => resolverOptions.format ? resolverOptions.format(\n          isBinding(bindingLike) ? bindingLike : resolverOptions.parseBinding(bindingLike),\n          value\n        ) : value\n      },\n      evaluate: (exp) => resolverOptions.evaluator.evaluate(exp, resolverOptions)\n    };\n  }\n  var withContext = (model) => {\n    return {\n      get: (binding, options) => {\n        return model.get(binding, {\n          context: { model },\n          ...options\n        });\n      },\n      set: (transaction, options) => {\n        return model.set(transaction, {\n          context: { model },\n          ...options\n        });\n      },\n      delete: (binding, options) => {\n        return model.delete(binding, {\n          context: { model },\n          ...options\n        });\n      }\n    };\n  };\n  var Resolver = class {\n    constructor(root, options) {\n      this.hooks = {\n        /** A hook to allow skipping of the resolution tree for a specific node */\n        skipResolve: new SyncWaterfallHook(),\n        /** An event emitted before calculating the next update */\n        beforeUpdate: new SyncHook(),\n        /** An event emitted after calculating the next update */\n        afterUpdate: new SyncHook(),\n        /** The options passed to a node to resolve it to an object */\n        resolveOptions: new SyncWaterfallHook(),\n        /** A hook to transform the AST node into a new AST node before resolving it */\n        beforeResolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform an AST node into it's resolved value.\n         * This runs _before_ any children are resolved\n         */\n        resolve: new SyncWaterfallHook(),\n        /**\n         * A hook to transform the resolved value of an AST node.\n         * This runs _after_ all children nodes are resolved\n         */\n        afterResolve: new SyncWaterfallHook(),\n        /** Called at the very end of a node's tree being updated */\n        afterNodeUpdate: new SyncHook()\n      };\n      this.root = root;\n      this.options = options;\n      this.resolveCache = /* @__PURE__ */ new Map();\n      this.ASTMap = /* @__PURE__ */ new Map();\n      this.logger = options.logger;\n      this.idCache = /* @__PURE__ */ new Set();\n    }\n    getSourceNode(convertedAST) {\n      return this.ASTMap.get(convertedAST);\n    }\n    update(changes) {\n      this.hooks.beforeUpdate.call(changes);\n      const resolveCache = /* @__PURE__ */ new Map();\n      this.idCache.clear();\n      const prevASTMap = new Map(this.ASTMap);\n      this.ASTMap.clear();\n      const updated = this.computeTree(\n        this.root,\n        void 0,\n        changes,\n        resolveCache,\n        toNodeResolveOptions(this.options),\n        void 0,\n        prevASTMap\n      );\n      this.resolveCache = resolveCache;\n      this.hooks.afterUpdate.call(updated.value);\n      return updated.value;\n    }\n    getResolveCache() {\n      return new Map(this.resolveCache);\n    }\n    getPreviousResult(node) {\n      if (!node) {\n        return;\n      }\n      const isFirstUpdate = this.resolveCache.size === 0;\n      const id = getNodeID(node);\n      if (id) {\n        if (this.idCache.has(id)) {\n          if (isFirstUpdate) {\n            if (node.type === \"asset\" || node.type === \"view\") {\n              this.logger?.error(\n                `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`\n              );\n            } else if (node.type === \"value\") {\n              this.logger?.info(\n                `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`\n              );\n            }\n          }\n          return;\n        }\n        this.idCache.add(id);\n      }\n      return this.resolveCache.get(node);\n    }\n    cloneNode(node) {\n      const clonedNode = (0, import_timm4.clone)(node);\n      Object.keys(clonedNode).forEach((key) => {\n        if (key === \"parent\")\n          return;\n        const value = clonedNode[key];\n        if (typeof value === \"object\" && value !== null) {\n          clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n        }\n      });\n      return clonedNode;\n    }\n    computeTree(node, rawParent, dataChanges, cacheUpdate, options, partiallyResolvedParent, prevASTMap) {\n      const dependencyModel = new DependencyModel(options.data.model);\n      dependencyModel.trackSubset(\"core\");\n      const depModelWithParser = withContext(\n        withParser(dependencyModel, this.options.parseBinding)\n      );\n      const resolveOptions = this.hooks.resolveOptions.call(\n        {\n          ...options,\n          data: {\n            ...options.data,\n            model: depModelWithParser\n          },\n          evaluate: (exp) => this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n          node\n        },\n        node\n      );\n      const previousResult = this.getPreviousResult(node);\n      const previousDeps = previousResult?.dependencies;\n      const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n      const shouldUseLastValue = this.hooks.skipResolve.call(\n        !dataChanged,\n        node,\n        resolveOptions\n      );\n      const clonedNode = {\n        ...this.cloneNode(node),\n        parent: partiallyResolvedParent\n      };\n      const resolvedAST = this.hooks.beforeResolve.call(\n        clonedNode,\n        resolveOptions\n      ) ?? {\n        type: \"empty\"\n        /* Empty */\n      };\n      const isNestedMultiNodeWithAsync = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.parent?.type === \"multi-node\" && partiallyResolvedParent.parent.type === \"value\" && resolvedAST.parent?.type === \"asset\" && resolvedAST.parent.value.id.includes(\"async\");\n      const isNestedMultiNode = resolvedAST.type === \"multi-node\" && partiallyResolvedParent?.parent?.type === \"multi-node\" && partiallyResolvedParent.type === \"value\";\n      if (previousResult && shouldUseLastValue) {\n        const update2 = {\n          ...previousResult,\n          updated: false\n        };\n        const repopulateASTMapFromCache = (resolvedNode, AST, ASTParent) => {\n          const { node: resolvedASTLocal } = resolvedNode;\n          this.ASTMap.set(resolvedASTLocal, AST);\n          const resolvedUpdate = {\n            ...resolvedNode,\n            updated: false\n          };\n          cacheUpdate.set(AST, resolvedUpdate);\n          const handleChildNode = (childNode) => {\n            const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n            const previousChildResult = this.getPreviousResult(originalChildNode);\n            if (!previousChildResult)\n              return;\n            repopulateASTMapFromCache(\n              previousChildResult,\n              originalChildNode,\n              AST\n            );\n          };\n          if (\"children\" in resolvedASTLocal) {\n            resolvedASTLocal.children?.forEach(\n              ({ value: childAST }) => handleChildNode(childAST)\n            );\n          } else if (resolvedASTLocal.type === \"multi-node\") {\n            resolvedASTLocal.values.forEach(handleChildNode);\n          }\n          this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n        };\n        previousResult.node.parent = partiallyResolvedParent;\n        repopulateASTMapFromCache(previousResult, node, rawParent);\n        return update2;\n      }\n      if (isNestedMultiNodeWithAsync) {\n        resolvedAST.parent = partiallyResolvedParent.parent;\n      } else {\n        resolvedAST.parent = partiallyResolvedParent;\n      }\n      resolveOptions.node = resolvedAST;\n      this.ASTMap.set(resolvedAST, node);\n      let resolved = this.hooks.resolve.call(\n        void 0,\n        resolvedAST,\n        resolveOptions\n      );\n      let updated = !dequal(previousResult?.value, resolved);\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      const childDependencies = /* @__PURE__ */ new Set();\n      dependencyModel.trackSubset(\"children\");\n      if (\"children\" in resolvedAST) {\n        const newChildren = resolvedAST.children?.map((child) => {\n          const computedChildTree = this.computeTree(\n            child.value,\n            node,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          const {\n            dependencies: childTreeDeps,\n            node: childNode,\n            updated: childUpdated,\n            value: childValue\n          } = computedChildTree;\n          childTreeDeps.forEach((binding) => childDependencies.add(binding));\n          if (childValue) {\n            if (childNode.type === \"multi-node\" && !childNode.override) {\n              const arr = (0, import_timm4.addLast)(\n                dlv_es_default(resolved, child.path, []),\n                childValue\n              );\n              resolved = (0, import_timm4.setIn)(resolved, child.path, arr);\n            } else {\n              resolved = (0, import_timm4.setIn)(resolved, child.path, childValue);\n            }\n          }\n          updated = updated || childUpdated;\n          return { ...child, value: childNode };\n        });\n        resolvedAST.children = newChildren;\n      } else if (resolvedAST.type === \"multi-node\") {\n        const childValue = [];\n        const rawParentToPassIn = isNestedMultiNode ? partiallyResolvedParent?.parent : node;\n        const hasAsync = resolvedAST.values.map((value, index) => value.type === \"async\" ? index : -1).filter((index) => index !== -1);\n        const newValues = resolvedAST.values.map((mValue) => {\n          const mTree = this.computeTree(\n            mValue,\n            rawParentToPassIn,\n            dataChanges,\n            cacheUpdate,\n            resolveOptions,\n            resolvedAST,\n            prevASTMap\n          );\n          if (mTree.value !== void 0 && mTree.value !== null) {\n            if (mValue.type === \"async\" && mValue.flatten && mTree.value.asset && Array.isArray(mTree.value.asset.values)) {\n              unpackAndPush(mTree.value, childValue);\n            } else {\n              childValue.push(mTree.value);\n            }\n          }\n          mTree.dependencies.forEach(\n            (bindingDep) => childDependencies.add(bindingDep)\n          );\n          updated = updated || mTree.updated;\n          return mTree.node;\n        });\n        if (hasAsync.length > 0) {\n          const copy = newValues;\n          hasAsync.forEach((index) => {\n            if (copy[index])\n              copy.splice(index, 1, ...unpackNode(copy[index]));\n          });\n          resolvedAST.values = copy;\n        } else {\n          resolvedAST.values = newValues;\n        }\n        resolved = childValue;\n      }\n      childDependencies.forEach(\n        (bindingDep) => dependencyModel.addChildReadDep(bindingDep)\n      );\n      dependencyModel.trackSubset(\"core\");\n      if (previousResult && !updated) {\n        resolved = previousResult?.value;\n      }\n      resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n        ...resolveOptions,\n        getDependencies: (scope) => dependencyModel.getDependencies(scope)\n      });\n      const update = {\n        node: resolvedAST,\n        updated,\n        value: resolved,\n        dependencies: /* @__PURE__ */ new Set([\n          ...dependencyModel.getDependencies(),\n          ...childDependencies\n        ])\n      };\n      this.hooks.afterNodeUpdate.call(\n        node,\n        isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n        update\n      );\n      cacheUpdate.set(node, update);\n      return update;\n    }\n  };\n  function unpackAndPush(item, initial) {\n    if (item.asset.values && Array.isArray(item.asset.values)) {\n      item.asset.values.forEach((i) => {\n        unpackAndPush(i, initial);\n      });\n    } else {\n      initial.push(item);\n    }\n  }\n  function unpackNode(item) {\n    const unpacked = [];\n    if (\"children\" in item && item.children?.[0]?.value.type === \"asset\" && (item.children?.[0]?.value).children) {\n      if ((item.children?.[0]?.value).children?.[0]?.value.type === \"multi-node\") {\n        ((item.children?.[0]?.value).children?.[0]?.value).values.forEach((value) => {\n          unpacked.push(value);\n        });\n      }\n    } else {\n      unpacked.push(item);\n    }\n    return unpacked;\n  }\n  var CrossfieldProvider = class {\n    constructor(initialView, parser, logger) {\n      this.allValidations = /* @__PURE__ */ new Set();\n      this.byBinding = /* @__PURE__ */ new Map();\n      this.logger = logger;\n      this.parse(initialView, parser);\n    }\n    parse(contentView, parser) {\n      const xfieldRefs = contentView.validation;\n      if (xfieldRefs === void 0) {\n        return;\n      }\n      if (!Array.isArray(xfieldRefs)) {\n        this.logger?.warn(\n          `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`\n        );\n        return;\n      }\n      xfieldRefs.forEach((vRef) => {\n        const withDefaults = {\n          trigger: \"navigation\",\n          severity: \"error\",\n          ...vRef\n        };\n        this.allValidations.add(withDefaults);\n        const { ref } = vRef;\n        if (ref) {\n          const parsed = parser(ref);\n          if (this.byBinding.has(parsed)) {\n            this.byBinding.get(parsed)?.push(withDefaults);\n          } else {\n            this.byBinding.set(parsed, [withDefaults]);\n          }\n        }\n      });\n    }\n    getValidationsForBinding(binding) {\n      return this.byBinding.get(binding);\n    }\n  };\n  var ViewInstance = class {\n    constructor(initialView, resolverOptions) {\n      this.hooks = {\n        onUpdate: new SyncHook(),\n        parser: new SyncHook(),\n        resolver: new SyncHook(),\n        onTemplatePluginCreated: new SyncHook(),\n        templatePlugin: new SyncHook()\n      };\n      this.initialView = initialView;\n      this.resolverOptions = resolverOptions;\n      this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n        this.templatePlugin = templatePlugin;\n      });\n    }\n    updateAsync() {\n      const update = this.resolver?.update();\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n    }\n    update(changes) {\n      if (this.rootNode === void 0) {\n        this.validationProvider = new CrossfieldProvider(\n          this.initialView,\n          this.resolverOptions.parseBinding,\n          this.resolverOptions.logger\n        );\n        if (this.templatePlugin) {\n          this.hooks.templatePlugin.call(this.templatePlugin);\n        } else {\n          this.resolverOptions.logger?.warn(\n            \"templatePlugin not set for View, legacy templates may not work\"\n          );\n        }\n        const parser = new Parser();\n        this.hooks.parser.call(parser);\n        this.rootNode = parser.parseView(this.initialView);\n        this.resolver = new Resolver(this.rootNode, {\n          ...this.resolverOptions,\n          parseNode: parser.parseObject.bind(parser)\n        });\n        this.hooks.resolver.call(this.resolver);\n      }\n      const update = this.resolver?.update(changes);\n      if (this.lastUpdate === update) {\n        return this.lastUpdate;\n      }\n      this.lastUpdate = update;\n      this.hooks.onUpdate.call(update);\n      return update;\n    }\n    getValidationsForBinding(binding) {\n      return this.validationProvider?.getValidationsForBinding(binding);\n    }\n  };\n  var templateSymbol = Symbol(\"template\");\n  var TemplatePlugin = class {\n    constructor(options) {\n      this.hooks = {\n        resolveTemplateSubstitutions: new SyncWaterfallHook()\n      };\n      this.options = options;\n    }\n    parseTemplate(parseObject, node, options) {\n      const { template, depth } = node;\n      const data = options.data.model.get(node.data);\n      if (!data) {\n        return null;\n      }\n      if (!Array.isArray(data)) {\n        throw new Error(`Template using '${node.data}' but is not an array`);\n      }\n      const values = [];\n      data.forEach((dataItem, index) => {\n        const templateSubstitutions = this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index)\n            }\n          ],\n          {\n            depth,\n            data: dataItem,\n            index\n          }\n        );\n        let templateStr = JSON.stringify(template);\n        for (const { expression, value } of templateSubstitutions) {\n          let flags = \"g\";\n          if (typeof expression === \"object\") {\n            flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n          }\n          templateStr = templateStr.replace(new RegExp(expression, flags), value);\n        }\n        const parsed = parseObject(JSON.parse(templateStr), \"value\", {\n          templateDepth: node.depth + 1\n        });\n        if (parsed) {\n          values.push(parsed);\n        }\n      });\n      const result = {\n        type: \"multi-node\",\n        override: false,\n        values\n      };\n      if (node.placement !== void 0) {\n        result[templateSymbol] = node.placement;\n      }\n      return result;\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        if (node && node.type === \"template\" && !node.dynamic) {\n          return this.parseTemplate(\n            parser.parseObject.bind(parser),\n            node,\n            this.options\n          );\n        }\n        return node;\n      });\n      parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n        function getTemplateSymbolValue(node2) {\n          if (node2.type === \"multi-node\") {\n            return node2[templateSymbol];\n          } else if (node2.type === \"template\") {\n            return node2.placement;\n          }\n          return void 0;\n        }\n        if (node && (node.type === \"view\" || node.type === \"asset\") && Array.isArray(node.children)) {\n          node.children = node.children.sort((a, b) => {\n            const aPath = a.path.join();\n            const bPath = b.path.join();\n            const pathsEqual = aPath === bPath;\n            if (pathsEqual) {\n              const aPlacement = getTemplateSymbolValue(a.value);\n              const bPlacement = getTemplateSymbolValue(b.value);\n              if (aPlacement !== void 0 && bPlacement === void 0) {\n                return aPlacement === \"prepend\" ? -1 : 1;\n              } else if (bPlacement !== void 0 && aPlacement === void 0) {\n                return bPlacement === \"prepend\" ? 1 : -1;\n              } else if (aPlacement !== void 0 && bPlacement !== void 0) {\n                if (aPlacement === bPlacement) {\n                  return 0;\n                }\n                return aPlacement === \"prepend\" ? -1 : 1;\n              }\n              return 0;\n            }\n            return aPath > bPath ? 1 : -1;\n          });\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"template\",\n        (obj, _nodeType, options, childOptions) => {\n          if (childOptions && hasTemplateKey(childOptions.key)) {\n            return obj.map((template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: \"template\",\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement\n                },\n                template\n              );\n              if (!templateAST)\n                return;\n              if (templateAST.type === \"multi-node\") {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST\n              };\n            }).filter(Boolean);\n          }\n        }\n      );\n    }\n    applyResolverHooks(resolver) {\n      resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n        if (node && node.type === \"template\" && node.dynamic) {\n          return this.parseTemplate(options.parseNode, node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n    }\n  };\n  var createPatternMatcher = (start, end) => {\n    return (testStr) => {\n      const startLocation = testStr.indexOf(start);\n      if (startLocation === -1) {\n        return false;\n      }\n      const endLocation = testStr.indexOf(end);\n      if (endLocation === -1) {\n        return false;\n      }\n      return startLocation < endLocation;\n    };\n  };\n  var bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\n  var expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n  function hasSomethingToResolve(str) {\n    return bindingResolveLookup(str) || expressionResolveLookup(str);\n  }\n  function resolveString(str, resolveOptions) {\n    return hasSomethingToResolve(str) ? resolveDataRefs(str, {\n      model: resolveOptions.data.model,\n      evaluate: resolveOptions.evaluate\n    }) : str;\n  }\n  function resolveAllRefs(node, resolveOptions, propertiesToSkip) {\n    if (node === null || node === void 0 || typeof node !== \"object\" && typeof node !== \"string\") {\n      return node;\n    }\n    if (typeof node === \"string\") {\n      return resolveString(node, resolveOptions);\n    }\n    let newNode = node;\n    Object.keys(node).forEach((key) => {\n      if (propertiesToSkip.has(key)) {\n        return;\n      }\n      const val = node[key];\n      let newVal = val;\n      if (typeof val === \"object\") {\n        newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n      } else if (typeof val === \"string\") {\n        newVal = resolveString(val, resolveOptions);\n      }\n      if (newVal !== val) {\n        newNode = (0, import_timm6.set)(newNode, key, newVal);\n      }\n    });\n    return newNode;\n  }\n  var findBasePath = (node, resolver) => {\n    const parentNode = node.parent;\n    if (!parentNode) {\n      return [];\n    }\n    if (\"children\" in parentNode) {\n      const original = resolver.getSourceNode(node);\n      return parentNode.children?.find((child) => child.value === original)?.path ?? [];\n    }\n    if (parentNode.type !== \"multi-node\") {\n      return [];\n    }\n    return findBasePath(parentNode, resolver);\n  };\n  var StringResolverPlugin = class {\n    constructor() {\n      this.propertiesToSkipCache = /* @__PURE__ */ new Map();\n    }\n    applyResolver(resolver) {\n      resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n        if (node.type === \"empty\" || node.type === \"unknown\") {\n          return null;\n        }\n        if (node.type === \"value\" || node.type === \"asset\" || node.type === \"view\") {\n          let propsToSkip;\n          if (node.type === \"asset\" || node.type === \"view\") {\n            propsToSkip = new Set(\n              node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"]\n            );\n            if (node.value?.id) {\n              this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n            }\n          } else if (node.parent?.type === \"multi-node\" && (node.parent?.parent?.type === \"asset\" || node.parent?.parent?.type === \"view\") && node.parent.parent.value?.id && this.propertiesToSkipCache.has(node.parent.parent.value.id)) {\n            propsToSkip = this.propertiesToSkipCache.get(\n              node.parent.parent.value.id\n            );\n          } else {\n            propsToSkip = /* @__PURE__ */ new Set([\"exp\"]);\n          }\n          const nodePath = findBasePath(node, resolver);\n          if (nodePath.length > 0 && nodePath.some((segment) => propsToSkip.has(segment.toString()))) {\n            return node.value;\n          }\n          return resolveAllRefs(node.value, options, propsToSkip);\n        }\n        return value;\n      });\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n    }\n  };\n  var ApplicabilityPlugin = class {\n    isApplicability(obj) {\n      return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\n        \"applicability\",\n        (node, options) => {\n          let newNode = node;\n          if (node?.type === \"applicability\") {\n            const isApplicable = options.evaluate(node.expression);\n            if (isApplicable === false) {\n              return null;\n            }\n            newNode = node.value;\n          }\n          return newNode;\n        }\n      );\n    }\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"applicability\",\n        (obj, nodeType, options, childOptions) => {\n          if (this.isApplicability(obj)) {\n            const parsedApplicability = parser.parseObject(\n              (0, import_timm7.omit)(obj, \"applicability\"),\n              nodeType,\n              options\n            );\n            if (!parsedApplicability) {\n              return childOptions ? [] : null;\n            }\n            const applicabilityNode = parser.createASTNode(\n              {\n                type: \"applicability\",\n                expression: obj.applicability,\n                value: parsedApplicability\n              },\n              obj\n            );\n            if (!applicabilityNode) {\n              return childOptions ? [] : null;\n            }\n            if (applicabilityNode.type === \"applicability\") {\n              applicabilityNode.value.parent = applicabilityNode;\n            }\n            return childOptions ? [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: applicabilityNode\n              }\n            ] : applicabilityNode;\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n      view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n    }\n  };\n  var SwitchPlugin = class {\n    constructor(options) {\n      this.options = options;\n    }\n    resolveSwitch(node, options) {\n      for (const switchCase of node.cases) {\n        const isApplicable = options.evaluate(switchCase.case);\n        if (isApplicable) {\n          return switchCase.value;\n        }\n      }\n      return EMPTY_NODE;\n    }\n    isSwitch(obj) {\n      return obj && (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") || Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"));\n    }\n    applyParser(parser) {\n      parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n        if (node && node.type === \"switch\" && !node.dynamic) {\n          return this.resolveSwitch(node, this.options);\n        }\n        return node;\n      });\n      parser.hooks.parseNode.tap(\n        \"switch\",\n        (obj, _nodeType, options, childOptions) => {\n          if (this.isSwitch(obj) || childOptions && hasSwitchKey(childOptions.key)) {\n            const objToParse = childOptions && hasSwitchKey(childOptions.key) ? { [childOptions.key]: obj } : obj;\n            const dynamic = \"dynamicSwitch\" in objToParse;\n            const switchContent = dynamic ? objToParse.dynamicSwitch : objToParse.staticSwitch;\n            const cases = switchContent.map(\n              (switchCase) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  \"value\",\n                  options\n                );\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value\n                  };\n                }\n                return;\n              }\n            ).filter(Boolean);\n            const switchAST = parser.createASTNode(\n              {\n                type: \"switch\",\n                dynamic,\n                cases\n              },\n              objToParse\n            );\n            if (!switchAST || switchAST.type === \"empty\") {\n              return childOptions ? [] : null;\n            }\n            if (switchAST.type === \"switch\") {\n              switchAST.cases.forEach((sCase) => {\n                sCase.value.parent = switchAST;\n              });\n            }\n            if (childOptions) {\n              let path = [...childOptions.path, childOptions.key];\n              let value = switchAST;\n              if (switchAST.type === \"value\" && switchAST.children?.length === 1 && switchAST.value === void 0) {\n                const firstChild = switchAST.children[0];\n                path = [...path, ...firstChild.path];\n                value = firstChild.value;\n              }\n              return [{ path, value }];\n            }\n            return switchAST;\n          }\n        }\n      );\n    }\n    applyResolver(resolver) {\n      resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n        if (node && node.type === \"switch\" && node.dynamic) {\n          return this.resolveSwitch(node, options);\n        }\n        return node;\n      });\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n      view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n    }\n  };\n  var MultiNodePlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"multi-node\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions && !hasTemplateKey(childOptions.key) && Array.isArray(obj)) {\n            const values = obj.map(\n              (childVal) => parser.parseObject(childVal, \"value\", options)\n            ).filter((child) => !!child);\n            if (!values.length) {\n              return [];\n            }\n            const multiNode = parser.createASTNode(\n              {\n                type: \"multi-node\",\n                override: !hasTemplateValues(\n                  childOptions.parentObj,\n                  childOptions.key\n                ),\n                values\n              },\n              obj\n            );\n            if (!multiNode) {\n              return [];\n            }\n            if (multiNode.type === \"multi-node\") {\n              multiNode.values.forEach((v) => {\n                v.parent = multiNode;\n              });\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: multiNode\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n    }\n  };\n  var AssetPlugin = class {\n    applyParser(parser) {\n      parser.hooks.parseNode.tap(\n        \"asset\",\n        (obj, nodeType, options, childOptions) => {\n          if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n            const assetAST = parser.parseObject(obj, \"asset\", options);\n            if (!assetAST) {\n              return [];\n            }\n            return [\n              {\n                path: [...childOptions.path, childOptions.key],\n                value: assetAST\n              }\n            ];\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n    }\n  };\n  var LocalStateStore = class {\n    constructor(onUpdate) {\n      this.updateCallback = onUpdate;\n      this.state = /* @__PURE__ */ new Map();\n    }\n    removeKey(key) {\n      this.state.delete(key);\n    }\n    reset() {\n      this.state.clear();\n    }\n    useSharedState(key) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, initialState);\n        }\n        return [\n          this.state.get(key),\n          (newState) => {\n            const current = this.state.get(key);\n            this.state.set(key, newState);\n            if (current !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n    getLocalStateFunction(key, countKey) {\n      return (initialState) => {\n        if (!this.state.has(key)) {\n          this.state.set(key, []);\n        }\n        if (!this.state.has(countKey)) {\n          this.state.set(countKey, 0);\n        }\n        const localState = this.state.get(key);\n        const oldCount = this.state.get(countKey);\n        this.state.set(countKey, oldCount + 1);\n        if (localState.length <= oldCount) {\n          localState.push(initialState);\n        }\n        const value = localState[oldCount];\n        return [\n          value,\n          (newState) => {\n            const oldValue = localState[oldCount];\n            localState[oldCount] = newState;\n            if (oldValue !== newState) {\n              this.updateCallback?.();\n            }\n          }\n        ];\n      };\n    }\n  };\n  function findUp(node, target) {\n    if (node === target) {\n      return true;\n    }\n    if (node.parent) {\n      return findUp(node.parent, target);\n    }\n    return false;\n  }\n  var AssetTransformCorePlugin = class {\n    constructor(registry) {\n      this.registry = registry;\n      this.stateStore = /* @__PURE__ */ new Map();\n      this.beforeResolveSymbol = Symbol(\"before resolve\");\n      this.resolveSymbol = Symbol(\"resolve\");\n      this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n      this.resolveCountSymbol = Symbol(\"resolve count\");\n    }\n    apply(view) {\n      this.stateStore.clear();\n      view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n        let lastUpdatedNode;\n        const updateState = (node) => {\n          lastUpdatedNode = node;\n          view.update(/* @__PURE__ */ new Set());\n        };\n        const getStore = (node, stepKey) => {\n          let store;\n          const countKey = stepKey === this.resolveSymbol ? this.resolveCountSymbol : this.beforeResolveCountSymbol;\n          const storedState = this.stateStore.get(node);\n          if (storedState) {\n            store = storedState;\n            store.removeKey(countKey);\n          } else {\n            store = new LocalStateStore(() => {\n              updateState(node);\n            });\n            this.stateStore.set(node, store);\n          }\n          return {\n            useSharedState: (key) => {\n              return store.useSharedState(key);\n            },\n            useLocalState: (initialState) => {\n              return store.getLocalStateFunction(\n                stepKey,\n                countKey\n              )(initialState);\n            }\n          };\n        };\n        resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n          if (node && (node.type === \"asset\" || node.type === \"view\")) {\n            const transform = this.registry.get(node.value);\n            if (transform?.beforeResolve) {\n              const store = getStore(\n                options.node ?? node,\n                this.beforeResolveSymbol\n              );\n              return transform.beforeResolve(node, options, store);\n            }\n          }\n          return node;\n        });\n        resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n          lastUpdatedNode = void 0;\n        });\n        resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n          if (!skip || !lastUpdatedNode) {\n            return skip;\n          }\n          const isParentOfUpdated = findUp(lastUpdatedNode, node);\n          const isChildOfUpdated = findUp(node, lastUpdatedNode);\n          return !isParentOfUpdated && !isChildOfUpdated;\n        });\n        resolver.hooks.afterResolve.tap(\n          \"asset-transform\",\n          (value, node, options) => {\n            if (node.type !== \"asset\" && node.type !== \"view\") {\n              return value;\n            }\n            const originalNode = resolver.getSourceNode(node);\n            if (!originalNode) {\n              return value;\n            }\n            const transform = this.registry.get(value);\n            if (transform?.resolve) {\n              const store = getStore(originalNode, this.resolveSymbol);\n              return transform?.resolve(value, options, store);\n            }\n            return value;\n          }\n        );\n      });\n    }\n  };\n  var FlowInstance = class {\n    constructor(id, flow, options) {\n      this.isTransitioning = false;\n      this.hooks = {\n        beforeStart: new SyncBailHook(),\n        /** A callback when the onStart node was present */\n        onStart: new SyncHook(),\n        /** A callback when the onEnd node was present */\n        onEnd: new SyncHook(),\n        /** A hook to intercept and block a transition */\n        skipTransition: new SyncBailHook(),\n        /** A chance to manipulate the flow-node used to calculate the given transition used  */\n        beforeTransition: new SyncWaterfallHook(),\n        /** A chance to manipulate the flow-node calculated after a transition */\n        resolveTransitionNode: new SyncWaterfallHook(),\n        /** A callback when a transition from 1 state to another was made */\n        transition: new SyncHook(),\n        /** A callback to run actions after a transition occurs */\n        afterTransition: new SyncHook()\n      };\n      this.id = id;\n      this.flow = flow;\n      this.log = options?.logger;\n      this.history = [];\n      this.hooks.transition.tap(\n        \"startPromise\",\n        async (_oldState, nextState) => {\n          const newState = nextState.value;\n          if (this.flowPromise && newState.state_type === \"END\") {\n            this.flowPromise.resolve(newState);\n          }\n        }\n      );\n    }\n    /** Start the state machine */\n    async start() {\n      if (this.flowPromise) {\n        this.log?.warn(\"Already called start for flow\");\n        return this.flowPromise.promise;\n      }\n      this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n      if (this.flow.onStart) {\n        this.hooks.onStart.call(this.flow.onStart);\n      }\n      const initialState = this.flow.startState;\n      if (!initialState) {\n        return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n      }\n      this.flowPromise = (0, import_p_defer2.default)();\n      this.pushHistory(initialState);\n      return this.flowPromise.promise;\n    }\n    transition(transitionValue, options) {\n      if (this.isTransitioning) {\n        throw new Error(\n          `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`\n        );\n      }\n      if (this.currentState?.value.state_type === \"END\") {\n        this.log?.warn(\n          `Skipping transition using ${transitionValue}. Already at and END state`\n        );\n        return;\n      }\n      if (this.currentState === void 0) {\n        throw new Error(\"Cannot transition when there's no current state\");\n      }\n      if (options?.force) {\n        this.log?.debug(`Forced transition. Skipping validation checks`);\n      } else {\n        const skipTransition = this.hooks.skipTransition.call(this.currentState);\n        if (skipTransition) {\n          this.log?.debug(\n            `Skipping transition from ${this.currentState.name} b/c hook told us to`\n          );\n          return;\n        }\n      }\n      const state = this.hooks.beforeTransition.call(\n        this.currentState.value,\n        transitionValue\n      );\n      if (!(\"transitions\" in state)) {\n        throw new Error(`No transitions defined for ${this.currentState.value}`);\n      }\n      const { transitions } = state;\n      const nextState = transitions[transitionValue] || transitions[\"*\"];\n      if (nextState === void 0) {\n        this.log?.warn(\n          `No transition from ${this.currentState.name} using ${transitionValue} or *`\n        );\n        return;\n      }\n      this.log?.debug(\n        `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `\n      );\n      return this.pushHistory(nextState, options);\n    }\n    pushHistory(stateName, options) {\n      if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n        throw new Error(`No flow definition for: ${stateName} was found.`);\n      }\n      let nextState = this.flow[stateName];\n      if (!this.flow[stateName] || typeof nextState !== \"object\" || !(\"state_type\" in nextState)) {\n        this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n        return;\n      }\n      const prevState = this.currentState;\n      this.isTransitioning = true;\n      nextState = this.hooks.resolveTransitionNode.call(nextState);\n      const newCurrentState = {\n        name: stateName,\n        value: nextState\n      };\n      this.currentState = newCurrentState;\n      this.history.push(stateName);\n      if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n        this.hooks.onEnd.call(this.flow.onEnd);\n      }\n      this.hooks.transition.call(prevState, {\n        ...newCurrentState\n      });\n      this.isTransitioning = false;\n      this.hooks.afterTransition.call(this);\n    }\n  };\n  var FlowController = class {\n    constructor(navigation, options) {\n      this.hooks = {\n        flow: new SyncHook()\n      };\n      this.navigation = navigation;\n      this.navStack = [];\n      this.log = options?.logger;\n      this.start = this.start.bind(this);\n      this.run = this.run.bind(this);\n      this.transition = this.transition.bind(this);\n      this.addNewFlow = this.addNewFlow.bind(this);\n    }\n    /** Navigate to another state in the state-machine */\n    transition(stateTransition, options) {\n      if (this.current === void 0) {\n        throw new Error(\"Not currently in a flow. Cannot transition.\");\n      }\n      this.current.transition(stateTransition, options);\n    }\n    addNewFlow(flow) {\n      this.navStack.push(flow);\n      this.current = flow;\n      this.hooks.flow.call(flow);\n    }\n    async run(startState) {\n      if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n        return Promise.reject(new Error(`No flow defined for: ${startState}`));\n      }\n      const startFlow = this.navigation[startState];\n      if (startFlow === null || typeof startFlow !== \"object\") {\n        return Promise.reject(\n          new Error(`Flow: ${startState} needs to be an object`)\n        );\n      }\n      this.log?.debug(`Starting flow: ${startState}`);\n      const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n      this.addNewFlow(flow);\n      flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n        if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n          const subflowId = flowInstance.currentState?.value.ref;\n          this.log?.debug(`Loading subflow ${subflowId}`);\n          this.run(subflowId).then((subFlowEndState) => {\n            this.log?.debug(\n              `Subflow ended. Using outcome: ${subFlowEndState.outcome}`\n            );\n            flowInstance.transition(subFlowEndState?.outcome);\n          });\n        }\n      });\n      const end = await flow.start();\n      this.navStack.pop();\n      if (this.navStack.length > 0) {\n        const firstItem = 0;\n        this.current = this.navStack[firstItem];\n      }\n      return end;\n    }\n    async start() {\n      if (!this.navigation.BEGIN) {\n        return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n      }\n      return this.run(this.navigation.BEGIN);\n    }\n  };\n  var ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n  function replaceParams(message, params) {\n    return message.slice().replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n  }\n  var CONTEXT = \"validation-binding-tracker\";\n  var ValidationBindingTrackerViewPlugin = class {\n    constructor(options) {\n      this.trackedBindings = /* @__PURE__ */ new Set();\n      this.options = options;\n    }\n    /** Fetch the tracked bindings in the current view */\n    getBindings() {\n      return this.trackedBindings;\n    }\n    /** Add a binding to the tracked set */\n    trackBinding(binding) {\n      if (this.trackedBindings.has(binding)) {\n        return;\n      }\n      this.trackedBindings.add(binding);\n      this.options.callbacks?.onAdd?.(binding);\n    }\n    /** Attach hooks to the given resolver */\n    applyResolver(resolver) {\n      this.trackedBindings.clear();\n      const tracked = /* @__PURE__ */ new Map();\n      const sections = /* @__PURE__ */ new Map();\n      let lastViewUpdateChangeSet;\n      const lastComputedBindingTree = /* @__PURE__ */ new Map();\n      let currentBindingTree = /* @__PURE__ */ new Map();\n      const lastSectionBindingTree = /* @__PURE__ */ new Map();\n      const resolvedNodeMap = /* @__PURE__ */ new Map();\n      resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n        lastViewUpdateChangeSet = changes;\n      });\n      resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n        const trackedBindingsForNode = lastComputedBindingTree.get(node);\n        if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n          return shouldSkip;\n        }\n        const intersection = new Set(\n          [...lastViewUpdateChangeSet].filter(\n            (b) => trackedBindingsForNode.has(b)\n          )\n        );\n        return intersection.size === 0;\n      });\n      resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n        if (options.validation === void 0) {\n          return options;\n        }\n        tracked.delete(node);\n        const track = (binding) => {\n          const parsed = isBinding(binding) ? binding : this.options.parseBinding(binding);\n          if (tracked.has(node)) {\n            tracked.get(node)?.add(parsed);\n          } else {\n            tracked.set(node, /* @__PURE__ */ new Set([parsed]));\n          }\n          let { parent } = node;\n          while (parent) {\n            if (sections.has(parent)) {\n              sections.get(parent)?.add(node);\n              break;\n            } else {\n              parent = parent.parent;\n            }\n          }\n          this.trackedBindings.add(parsed);\n          this.options.callbacks?.onAdd?.(parsed);\n        };\n        return {\n          ...options,\n          validation: {\n            ...options.validation,\n            get: (binding, getOptions) => {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              const eows = options.validation?._getValidationForBinding(binding)?.getAll(getOptions);\n              const firstFieldEOW = eows?.find(\n                (eow) => eow.displayTarget === \"field\" || eow.displayTarget === void 0\n              );\n              return firstFieldEOW;\n            },\n            getValidationsForBinding(binding, getOptions) {\n              if (getOptions?.track) {\n                track(binding);\n              }\n              return options.validation?._getValidationForBinding(binding)?.getAll(getOptions) ?? [];\n            },\n            getChildren: (type) => {\n              const validations = new Array();\n              lastComputedBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && (type === void 0 || type === eow.displayTarget)) {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            getValidationsForSection: () => {\n              const validations = new Array();\n              lastSectionBindingTree.get(node)?.forEach((binding) => {\n                const eow = options.validation?._getValidationForBinding(binding)?.get();\n                if (eow && eow.displayTarget === \"section\") {\n                  validations.push(eow);\n                }\n              });\n              return validations;\n            },\n            register: (registerOptions) => {\n              if (registerOptions?.type === \"section\") {\n                if (!sections.has(node)) {\n                  sections.set(node, /* @__PURE__ */ new Set());\n                }\n              }\n            },\n            track\n          }\n        };\n      });\n      resolver.hooks.afterNodeUpdate.tap(\n        CONTEXT,\n        (originalNode, parent, update) => {\n          const { updated, node: resolvedNode } = update;\n          resolvedNodeMap.set(resolvedNode, originalNode);\n          if (updated) {\n            const newlyComputed = new Set(tracked.get(originalNode));\n            if (resolvedNode.type === \"multi-node\") {\n              resolvedNode.values.forEach(\n                (value) => currentBindingTree.get(value)?.forEach((b) => newlyComputed.add(b))\n              );\n            }\n            if (\"children\" in resolvedNode && resolvedNode.children) {\n              resolvedNode.children.forEach((child) => {\n                currentBindingTree.get(child.value)?.forEach((b) => newlyComputed.add(b));\n              });\n            }\n            currentBindingTree.set(resolvedNode, newlyComputed);\n          } else {\n            currentBindingTree.set(\n              resolvedNode,\n              lastComputedBindingTree.get(originalNode) ?? /* @__PURE__ */ new Set()\n            );\n          }\n          if (originalNode === resolver.root) {\n            this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n            lastComputedBindingTree.clear();\n            currentBindingTree.forEach((value, key) => {\n              const node = resolvedNodeMap.get(key);\n              if (node) {\n                lastComputedBindingTree.set(node, value);\n              }\n            });\n            lastSectionBindingTree.clear();\n            sections.forEach((nodeSet, sectionNode) => {\n              const temp = /* @__PURE__ */ new Set();\n              nodeSet.forEach((n) => {\n                tracked.get(n)?.forEach(temp.add, temp);\n              });\n              lastSectionBindingTree.set(sectionNode, temp);\n            });\n            tracked.clear();\n            sections.clear();\n            currentBindingTree = /* @__PURE__ */ new Map();\n          }\n        }\n      );\n    }\n    apply(view) {\n      view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n    }\n  };\n  var SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\n  var VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n  var VALIDATION_PROVIDER_NAME_SYMBOL = Symbol.for(\n    \"validation-provider-name\"\n  );\n  function isSubset(subset, containingSet) {\n    if (subset.size > containingSet.size)\n      return false;\n    for (const entry of subset)\n      if (!containingSet.has(entry))\n        return false;\n    return true;\n  }\n  function createStatefulValidationObject(obj) {\n    return {\n      value: obj,\n      type: obj.severity,\n      state: \"none\",\n      isBlockingNavigation: false\n    };\n  }\n  var ValidatedBinding = class {\n    constructor(possibleValidations, onDismiss, log, weakBindings) {\n      this.applicableValidations = [];\n      this.validationsByState = {\n        load: [],\n        change: [],\n        navigation: []\n      };\n      this.onDismiss = onDismiss;\n      possibleValidations.forEach((vObj) => {\n        const { trigger } = vObj;\n        if (this.validationsByState[trigger]) {\n          const statefulValidationObject = createStatefulValidationObject(vObj);\n          this.validationsByState[trigger].push(statefulValidationObject);\n        } else {\n          log?.warn(`Unknown validation trigger: ${trigger}`);\n        }\n      });\n      this.weakBindings = weakBindings ?? /* @__PURE__ */ new Set();\n    }\n    get allValidations() {\n      return Object.values(this.validationsByState).flat();\n    }\n    checkIfBlocking(statefulObj) {\n      if (statefulObj.state === \"active\") {\n        const { isBlockingNavigation } = statefulObj;\n        return isBlockingNavigation;\n      }\n      return false;\n    }\n    getAll() {\n      return this.applicableValidations.reduce((all, statefulObj) => {\n        if (statefulObj.state === \"active\" && statefulObj.response) {\n          all.push({\n            ...statefulObj.response,\n            blocking: this.checkIfBlocking(statefulObj)\n          });\n        }\n        return all;\n      }, []);\n    }\n    get() {\n      const firstInvalid = this.applicableValidations.find((statefulObj) => {\n        return statefulObj.state === \"active\" && statefulObj.response;\n      });\n      if (firstInvalid?.state === \"active\") {\n        return {\n          ...firstInvalid.response,\n          blocking: this.checkIfBlocking(firstInvalid)\n        };\n      }\n    }\n    runApplicableValidations(runner, canDismiss, phase) {\n      this.applicableValidations = this.applicableValidations.map(\n        (originalValue) => {\n          if (originalValue.state === \"dismissed\") {\n            return originalValue;\n          }\n          const blocking = originalValue.value.blocking ?? (originalValue.value.severity === \"warning\" && \"once\" || true);\n          const obj = (0, import_timm9.setIn)(\n            originalValue,\n            [\"value\", \"blocking\"],\n            blocking\n          );\n          const isBlockingNavigation = blocking === true || blocking === \"once\" && !canDismiss;\n          if (phase === \"navigation\" && obj.state === \"active\" && obj.value.blocking !== true) {\n            if (obj.value.severity === \"warning\") {\n              const warn = obj;\n              if (warn.dismissable && warn.response.dismiss && (warn.response.blocking !== \"once\" || !warn.response.blocking)) {\n                warn.response.dismiss();\n              } else {\n                if (warn?.response.blocking === \"once\") {\n                  warn.response.blocking = false;\n                }\n                warn.dismissable = true;\n              }\n              return warn;\n            }\n          }\n          const response = runner(obj.value);\n          const newState = {\n            type: obj.type,\n            value: obj.value,\n            state: response ? \"active\" : \"none\",\n            isBlockingNavigation,\n            dismissable: obj.value.severity === \"warning\" && phase === \"navigation\",\n            response: response ? {\n              ...obj.value,\n              message: response.message ?? \"Something is broken\",\n              severity: obj.value.severity,\n              displayTarget: obj.value.displayTarget ?? \"field\"\n            } : void 0\n          };\n          if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n            newState.response.dismiss = () => {\n              newState.state = \"dismissed\";\n              this.onDismiss?.();\n            };\n          }\n          return newState;\n        }\n      );\n    }\n    update(phase, canDismiss, runner) {\n      const newApplicableValidations = [];\n      if (phase === \"load\" && this.currentPhase !== void 0) {\n        return;\n      }\n      if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n        this.runApplicableValidations(runner, canDismiss, phase);\n        return;\n      }\n      if (phase === \"load\") {\n        this.currentPhase = \"load\";\n        this.applicableValidations = [...this.validationsByState.load];\n      } else if (phase === \"change\" && this.currentPhase === \"load\") {\n        this.currentPhase = \"change\";\n        this.applicableValidations = [\n          ...this.applicableValidations,\n          ...this.validationsByState.change\n        ];\n      } else if (phase === \"navigation\" && (this.currentPhase === \"load\" || this.currentPhase === \"change\")) {\n        this.applicableValidations.forEach((element) => {\n          if (!(element.type === \"error\" && element.state === \"active\" && element.isBlockingNavigation === false)) {\n            newApplicableValidations.push(element);\n          }\n        });\n        this.applicableValidations = [\n          ...newApplicableValidations,\n          ...this.validationsByState.navigation,\n          ...this.currentPhase === \"load\" ? this.validationsByState.change : []\n        ];\n        this.currentPhase = \"navigation\";\n      }\n      this.runApplicableValidations(runner, canDismiss, phase);\n    }\n  };\n  var ValidationController = class {\n    constructor(schema, options) {\n      this.hooks = {\n        /** A hook called to tap into the validator registry for adding more validators */\n        createValidatorRegistry: new SyncHook(),\n        /** A callback/event when a new validation is added to the view */\n        onAddValidation: new SyncWaterfallHook(),\n        /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n        onRemoveValidation: new SyncWaterfallHook(),\n        resolveValidationProviders: new SyncWaterfallHook(),\n        /** A hook called when a binding is added to the tracker */\n        onTrackBinding: new SyncHook()\n      };\n      this.validations = /* @__PURE__ */ new Map();\n      this.weakBindingTracker = /* @__PURE__ */ new Set();\n      this.schema = schema;\n      this.options = options;\n      this.reset();\n    }\n    setOptions(options) {\n      this.options = options;\n    }\n    /** Return the middleware for the data-model to stop propagation of invalid data */\n    getDataMiddleware() {\n      return [\n        {\n          set: (transaction, options, next) => {\n            return next?.set(transaction, options) ?? [];\n          },\n          get: (binding, options, next) => {\n            return next?.get(binding, options);\n          },\n          delete: (binding, options, next) => {\n            this.validations = removeBindingAndChildrenFromMap(\n              this.validations,\n              binding\n            );\n            return next?.delete(binding, options);\n          }\n        },\n        new ValidationMiddleware(\n          (binding) => {\n            if (!this.options) {\n              return;\n            }\n            this.updateValidationsForBinding(binding, \"change\", this.options);\n            const strongValidation = this.getValidationForBinding(binding);\n            if (strongValidation?.get()?.severity === \"error\") {\n              return strongValidation.get();\n            }\n            const newInvalidBindings = /* @__PURE__ */ new Set();\n            this.validations.forEach((weakValidation, strongBinding) => {\n              if (caresAboutDataChanges(\n                /* @__PURE__ */ new Set([binding]),\n                weakValidation.weakBindings\n              ) && weakValidation?.get()?.severity === \"error\") {\n                weakValidation?.weakBindings.forEach((weakBinding) => {\n                  if (weakBinding === strongBinding) {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: true\n                    });\n                  } else {\n                    newInvalidBindings.add({\n                      binding: weakBinding,\n                      isStrong: false\n                    });\n                  }\n                });\n              }\n            });\n            if (newInvalidBindings.size > 0) {\n              return newInvalidBindings;\n            }\n          },\n          { logger: new ProxyLogger(() => this.options?.logger) }\n        )\n      ];\n    }\n    getValidationProviders() {\n      if (this.providers) {\n        return this.providers;\n      }\n      this.providers = this.hooks.resolveValidationProviders.call([\n        {\n          source: SCHEMA_VALIDATION_PROVIDER_NAME,\n          provider: this.schema\n        },\n        {\n          source: VIEW_VALIDATION_PROVIDER_NAME,\n          provider: {\n            getValidationsForBinding: (binding) => {\n              return this.viewValidationProvider?.getValidationsForBinding?.(\n                binding\n              );\n            },\n            getValidationsForView: () => {\n              return this.viewValidationProvider?.getValidationsForView?.();\n            }\n          }\n        }\n      ]);\n      return this.providers;\n    }\n    reset() {\n      this.validations.clear();\n      this.tracker = void 0;\n    }\n    onView(view) {\n      this.validations.clear();\n      if (!this.options) {\n        return;\n      }\n      const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n        ...this.options,\n        callbacks: {\n          onAdd: (binding) => {\n            if (!this.options || this.getValidationForBinding(binding) !== void 0) {\n              return;\n            }\n            const originalValue = this.options.model.get(binding);\n            const withoutDefault = this.options.model.get(binding, {\n              ignoreDefaultValue: true\n            });\n            if (originalValue !== withoutDefault) {\n              this.options.model.set([[binding, originalValue]], {\n                silent: true\n              });\n            }\n            this.updateValidationsForBinding(\n              binding,\n              \"load\",\n              this.options,\n              () => {\n                view.update(/* @__PURE__ */ new Set([binding]));\n              }\n            );\n            this.hooks.onTrackBinding.call(binding);\n          }\n        }\n      });\n      this.tracker = bindingTrackerPlugin;\n      this.viewValidationProvider = view;\n      bindingTrackerPlugin.apply(view);\n    }\n    updateValidationsForBinding(binding, trigger, validationContext, onDismiss) {\n      const context = validationContext ?? this.options;\n      if (!context) {\n        throw new Error(`Context is required for executing validations`);\n      }\n      if (trigger === \"load\") {\n        const possibleValidations = this.getValidationProviders().reduce((vals, provider) => {\n          vals.push(\n            ...provider.provider.getValidationsForBinding?.(binding)?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source\n            })) ?? []\n          );\n          return vals;\n        }, []);\n        if (possibleValidations.length === 0) {\n          return;\n        }\n        this.validations.set(\n          binding,\n          new ValidatedBinding(\n            possibleValidations,\n            onDismiss,\n            this.options?.logger\n          )\n        );\n      }\n      const trackedValidations = this.validations.get(binding);\n      trackedValidations?.update(trigger, true, (validationObj) => {\n        const response = this.validationRunner(validationObj, binding, context);\n        if (this.weakBindingTracker.size > 0) {\n          const t2 = this.validations.get(binding);\n          this.weakBindingTracker.forEach((b) => t2.weakBindings.add(b));\n        }\n        return response ? { message: response.message } : void 0;\n      });\n      if (trigger !== \"load\") {\n        this.validations.forEach((validation, vBinding) => {\n          if (vBinding !== binding && caresAboutDataChanges(/* @__PURE__ */ new Set([binding]), validation.weakBindings)) {\n            validation.update(trigger, true, (validationObj) => {\n              const response = this.validationRunner(\n                validationObj,\n                vBinding,\n                context\n              );\n              return response ? { message: response.message } : void 0;\n            });\n          }\n        });\n      }\n    }\n    validationRunner(validationObj, binding, context = this.options) {\n      if (!context) {\n        throw new Error(\"No context provided to validation runner\");\n      }\n      const handler = validationObj.handler ?? this.getValidator(validationObj.type);\n      const weakBindings = /* @__PURE__ */ new Set();\n      const model = {\n        get(b, options) {\n          weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n          return context.model.get(b, { ...options, includeInvalid: true });\n        },\n        set: context.model.set,\n        delete: context.model.delete\n      };\n      const result = handler?.(\n        {\n          ...context,\n          evaluate: (exp, options = { model }) => context.evaluate(exp, options),\n          model,\n          validation: validationObj,\n          schemaType: this.schema.getType(binding)\n        },\n        context.model.get(binding, {\n          includeInvalid: true,\n          formatted: validationObj.dataTarget === \"formatted\"\n        }),\n        validationObj\n      );\n      this.weakBindingTracker = weakBindings;\n      if (result) {\n        let { message } = result;\n        const { parameters } = result;\n        if (validationObj.message) {\n          message = resolveDataRefs(validationObj.message, {\n            model,\n            evaluate: context.evaluate\n          });\n          if (parameters) {\n            message = replaceParams(message, parameters);\n          }\n        }\n        return {\n          message\n        };\n      }\n    }\n    updateValidationsForView(trigger) {\n      const isNavigationTrigger = trigger === \"navigation\";\n      const lastActiveBindings = this.activeBindings;\n      const updateValidations = (dismissValidations) => {\n        this.getBindings().forEach((binding) => {\n          this.validations.get(binding)?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n            return this.validationRunner(obj, binding, this.options);\n          });\n        });\n      };\n      updateValidations(!isNavigationTrigger);\n      if (isNavigationTrigger) {\n        const { activeBindings } = this;\n        if (isSubset(activeBindings, lastActiveBindings)) {\n          updateValidations(true);\n        }\n      }\n    }\n    get activeBindings() {\n      return new Set(\n        Array.from(this.getBindings()).filter(\n          (b) => this.validations.get(b)?.get() !== void 0\n        )\n      );\n    }\n    getValidator(type) {\n      if (this.validatorRegistry) {\n        return this.validatorRegistry.get(type);\n      }\n      const registry = new ValidatorRegistry();\n      this.hooks.createValidatorRegistry.call(registry);\n      this.validatorRegistry = registry;\n      return registry.get(type);\n    }\n    getBindings() {\n      return this.tracker?.getBindings() ?? /* @__PURE__ */ new Set();\n    }\n    trackBinding(binding) {\n      this.tracker?.trackBinding(binding);\n    }\n    /** Executes all known validations for the tracked bindings using the given model */\n    validateView(trigger = \"navigation\") {\n      this.updateValidationsForView(trigger);\n      const validations = /* @__PURE__ */ new Map();\n      let canTransition = true;\n      this.getBindings().forEach((b) => {\n        const allValidations = this.getValidationForBinding(b)?.getAll();\n        allValidations?.forEach((v) => {\n          if (trigger === \"navigation\" && v.blocking) {\n            this.options?.logger.debug(\n              `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n                v\n              )}`\n            );\n            canTransition = false;\n          }\n          if (!validations.has(b)) {\n            validations.set(b, v);\n          }\n        });\n      });\n      return {\n        canTransition,\n        validations: validations.size ? validations : void 0\n      };\n    }\n    /** Get the current tracked validation for the given binding */\n    getValidationForBinding(binding) {\n      return this.validations.get(binding);\n    }\n    forView(parser) {\n      return {\n        _getValidationForBinding: (binding) => {\n          return this.getValidationForBinding(\n            isBinding(binding) ? binding : parser(binding)\n          );\n        },\n        getAll: () => {\n          const bindings = this.getBindings();\n          if (bindings.size === 0) {\n            return void 0;\n          }\n          const validationMapping = /* @__PURE__ */ new Map();\n          bindings.forEach((b) => {\n            const validation = this.getValidationForBinding(b)?.get();\n            if (validation) {\n              validationMapping.set(b, validation);\n            }\n          });\n          return validationMapping.size === 0 ? void 0 : validationMapping;\n        },\n        get() {\n          throw new Error(\"Error Access be provided by the view plugin\");\n        },\n        getValidationsForBinding() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getChildren() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        getValidationsForSection() {\n          throw new Error(\"Error rollup should be provided by the view plugin\");\n        },\n        track: () => {\n          throw new Error(\"Tracking should be provided by the view plugin\");\n        },\n        register: () => {\n          throw new Error(\n            \"Section functionality should be provided by the view plugin\"\n          );\n        },\n        type: (binding) => this.schema.getType(isBinding(binding) ? binding : parser(binding))\n      };\n    }\n  };\n  var ViewController = class {\n    constructor(initialViews, options) {\n      this.hooks = {\n        /** Do any processing before the `View` instance is created */\n        resolveView: new SyncWaterfallHook(),\n        // The hook right before the View starts resolving. Attach anything custom here\n        view: new SyncHook()\n      };\n      this.transformRegistry = new Registry();\n      this.optimizeUpdates = true;\n      this.viewOptions = options;\n      this.viewMap = initialViews.reduce(\n        (viewMap, view) => {\n          viewMap[view.id] = view;\n          return viewMap;\n        },\n        {}\n      );\n      options.flowController.hooks.flow.tap(\n        \"viewController\",\n        (flow) => {\n          flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n            if (newState.value.state_type === \"VIEW\") {\n              this.onView(newState.value);\n            } else {\n              this.currentView = void 0;\n            }\n          });\n        }\n      );\n      const update = (updates, silent = false) => {\n        if (this.currentView) {\n          if (this.optimizeUpdates) {\n            this.queueUpdate(updates, silent);\n          } else {\n            this.currentView.update();\n          }\n        }\n      };\n      options.model.hooks.onUpdate.tap(\n        \"viewController\",\n        (updates, updateOptions) => {\n          update(\n            new Set(updates.map((t2) => t2.binding)),\n            updateOptions?.silent ?? false\n          );\n        }\n      );\n      options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n        const parentBinding = binding.parent();\n        const property = binding.key();\n        if (typeof property === \"number\" && parentBinding) {\n          update(/* @__PURE__ */ new Set([parentBinding]));\n        } else {\n          update(/* @__PURE__ */ new Set([binding]));\n        }\n      });\n    }\n    queueUpdate(bindings, silent = false) {\n      if (this.pendingUpdate?.changedBindings) {\n        this.pendingUpdate.changedBindings = /* @__PURE__ */ new Set([\n          ...this.pendingUpdate.changedBindings,\n          ...bindings\n        ]);\n      } else {\n        this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n      }\n      if (!this.pendingUpdate.scheduled && !silent) {\n        this.pendingUpdate.scheduled = true;\n        (0, import_queue_microtask.default)(() => {\n          const updates = this.pendingUpdate?.changedBindings;\n          this.pendingUpdate = void 0;\n          this.currentView?.update(updates);\n        });\n      }\n    }\n    getViewForRef(viewRef) {\n      if (this.viewMap[viewRef]) {\n        return this.viewMap[viewRef];\n      }\n      const matchingViewId = Object.keys(this.viewMap).find(\n        (possibleViewIdMatch) => viewRef === resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate\n        })\n      );\n      if (matchingViewId && this.viewMap[matchingViewId]) {\n        return this.viewMap[matchingViewId];\n      }\n    }\n    onView(state) {\n      const viewId = state.ref;\n      const source = this.hooks.resolveView.call(\n        this.getViewForRef(viewId),\n        viewId,\n        state\n      );\n      if (!source) {\n        throw new Error(`No view with id ${viewId}`);\n      }\n      const view = new ViewInstance(source, this.viewOptions);\n      this.currentView = view;\n      this.hooks.view.call(view);\n      view.update();\n    }\n  };\n  var ReadOnlyDataController = class {\n    constructor(controller, logger) {\n      this.controller = controller;\n      this.logger = logger;\n    }\n    get(binding, options) {\n      return this.controller.get(binding, options);\n    }\n    set(transaction, options) {\n      this.logger?.error(\n        \"Error: Tried to set in a read only instance of the DataController\"\n      );\n      return [];\n    }\n    delete(binding, options) {\n      this.logger?.error(\n        \"Error: Tried to delete in a read only instance of the DataController\"\n      );\n    }\n  };\n  var DataController = class {\n    constructor(model, options) {\n      this.hooks = {\n        resolve: new SyncWaterfallHook(),\n        resolveDataStages: new SyncWaterfallHook(),\n        // On any set or get of an undefined value, redirect the value to be the default\n        resolveDefaultValue: new SyncBailHook(),\n        onDelete: new SyncHook(),\n        onSet: new SyncHook(),\n        onGet: new SyncHook(),\n        onUpdate: new SyncHook(),\n        format: new SyncWaterfallHook(),\n        deformat: new SyncWaterfallHook(),\n        serialize: new SyncWaterfallHook()\n      };\n      this.logger = options.logger;\n      const middleware = options.middleware || [];\n      this.baseMiddleware = [new LocalModel(model), ...middleware];\n      this.trash = /* @__PURE__ */ new Set();\n      this.pathResolver = options.pathResolver;\n    }\n    getModel() {\n      if (!this.model) {\n        const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n        const model = new PipelinedDataModel();\n        model.setMiddleware(stages);\n        this.model = model;\n      }\n      return this.model;\n    }\n    resolveDataValue(binding, value, deformat) {\n      if (deformat) {\n        return this.hooks.deformat.call(value, binding);\n      }\n      return value;\n    }\n    set(transaction, options) {\n      let normalizedTransaction = [];\n      if (Array.isArray(transaction)) {\n        normalizedTransaction = transaction.map(([binding, value]) => {\n          const parsed = this.pathResolver.parse(binding);\n          return [\n            parsed,\n            this.resolveDataValue(parsed, value, Boolean(options?.formatted))\n          ];\n        });\n      } else {\n        normalizedTransaction = Object.keys(transaction).map(\n          (binding) => {\n            const parsed = this.pathResolver.parse(binding);\n            const val = transaction[binding];\n            return [\n              parsed,\n              this.resolveDataValue(parsed, val, Boolean(options?.formatted))\n            ];\n          }\n        );\n      }\n      const setUpdates = normalizedTransaction.reduce(\n        (updates, [binding, newVal]) => {\n          const oldVal = this.get(binding, { includeInvalid: true });\n          const update = {\n            binding,\n            newValue: newVal,\n            oldValue: oldVal\n          };\n          if (dequal(oldVal, newVal)) {\n            this.logger?.debug(\n              `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`\n            );\n          } else {\n            updates.push(update);\n            this.logger?.debug(\n              `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`\n            );\n          }\n          return updates;\n        },\n        []\n      );\n      const result = this.getModel().set(normalizedTransaction, options);\n      const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n      result.forEach((tr) => {\n        if (!setUpdateBindings.has(tr.binding) && (tr.force === true || !dequal(tr.oldValue, tr.newValue))) {\n          this.logger?.debug(\n            `Path: ${tr.binding.asString()} was changed from: ${tr.oldValue} to: ${tr.newValue}`\n          );\n          setUpdates.push(tr);\n        }\n      });\n      this.hooks.onSet.call(normalizedTransaction);\n      if (setUpdates.length > 0) {\n        this.hooks.onUpdate.call(setUpdates, options);\n      }\n      return result;\n    }\n    resolve(binding, readOnly) {\n      return Array.isArray(binding) || typeof binding === \"string\" ? this.pathResolver.parse(binding, { readOnly }) : binding;\n    }\n    get(binding, options) {\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, true);\n      let result = this.getModel().get(resolved, options);\n      if (result === void 0 && !options?.ignoreDefaultValue) {\n        const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n        if (defaultVal !== result) {\n          result = defaultVal;\n        }\n      }\n      if (options?.formatted) {\n        result = this.hooks.format.call(result, resolved);\n      } else if (options?.formatted === false) {\n        result = this.hooks.deformat.call(result, resolved);\n      }\n      this.hooks.onGet.call(binding, result);\n      return result;\n    }\n    delete(binding, options) {\n      if (typeof binding !== \"string\" && !Array.isArray(binding) && !(binding instanceof BindingInstance)) {\n        throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n      }\n      const resolved = binding instanceof BindingInstance ? binding : this.resolve(binding, false);\n      const parentBinding = resolved.parent();\n      const property = resolved.key();\n      const parentValue = this.get(parentBinding);\n      const existedBeforeDelete = typeof parentValue === \"object\" && parentValue !== null && Object.prototype.hasOwnProperty.call(parentValue, property);\n      this.getModel().delete(resolved, options);\n      if (existedBeforeDelete && !this.get(resolved)) {\n        this.trash.add(resolved);\n      }\n      this.hooks.onDelete.call(resolved);\n    }\n    serialize() {\n      return this.hooks.serialize.call(this.get(\"\"));\n    }\n    makeReadOnly() {\n      return new ReadOnlyDataController(this, this.logger);\n    }\n  };\n  function flatten(obj, roots = [], sep = \".\") {\n    return Object.keys(obj).reduce(\n      (memo, prop) => ({\n        // create a new object\n        // include previously returned object\n        ...memo,\n        ...Object.prototype.toString.call(obj[prop]) === \"[object Object]\" ? (\n          // keep working if value is an object\n          flatten(obj[prop], roots.concat([prop]))\n        ) : (\n          // include current prop and value and prefix prop with the roots\n          { [roots.concat([prop]).join(sep)]: obj[prop] }\n        )\n      }),\n      {}\n    );\n  }\n  function objectToBatchSet(obj) {\n    const flattenedObj = flatten(obj);\n    const batchTxn = [];\n    Object.keys(flattenedObj).forEach((key) => {\n      batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n    });\n    return batchTxn;\n  }\n  var ConstantsController = class {\n    constructor() {\n      this.store = /* @__PURE__ */ new Map();\n      this.tempStore = /* @__PURE__ */ new Map();\n    }\n    addConstants(data, namespace) {\n      if (this.store.has(namespace)) {\n        this.store.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.store.set(namespace, new LocalModel(data));\n      }\n    }\n    getConstants(key, namespace, fallback) {\n      const path = new BindingInstance(key);\n      return this.tempStore.get(namespace)?.get(path) ?? this.store.get(namespace)?.get(path) ?? fallback;\n    }\n    setTemporaryValues(data, namespace) {\n      if (this.tempStore.has(namespace)) {\n        this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n      } else {\n        this.tempStore.set(namespace, new LocalModel(data));\n      }\n    }\n    clearTemporaryValues(namespace) {\n      if (namespace) {\n        this.tempStore.get(namespace)?.reset();\n      } else {\n        this.tempStore.forEach((value) => {\n          value.reset();\n        });\n      }\n    }\n  };\n  var FlowExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let expressionEvaluator;\n      const handleEval = (exp) => {\n        if (exp) {\n          if (typeof exp === \"object\" && \"exp\" in exp) {\n            expressionEvaluator?.evaluate(exp.exp);\n          } else {\n            expressionEvaluator?.evaluate(exp);\n          }\n        }\n      };\n      player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n        expressionEvaluator = evaluator;\n      });\n      player.hooks.flowController.tap(this.name, (fc) => {\n        fc.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n          flow.hooks.resolveTransitionNode.intercept({\n            call: (nextState) => {\n              if (nextState?.onStart) {\n                handleEval(nextState.onStart);\n              }\n            }\n          });\n        });\n      });\n    }\n  };\n  var createFormatFunction = (schema) => {\n    const handler = (ctx, value, formatName) => {\n      return schema.getFormatterForType({ type: formatName })?.format(value) ?? value;\n    };\n    return handler;\n  };\n  var DefaultExpPlugin = class {\n    constructor() {\n      this.name = \"flow-exp-plugin\";\n    }\n    apply(player) {\n      let formatFunction;\n      player.hooks.schema.tap(this.name, (schemaController) => {\n        formatFunction = createFormatFunction(schemaController);\n      });\n      player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n        if (formatFunction) {\n          expEvaluator.addExpressionFunction(\"format\", formatFunction);\n        }\n        expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n          player.logger.info(...args);\n        });\n        expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n          player.logger.debug(...args);\n        });\n        expEvaluator.addExpressionFunction(\n          \"eval\",\n          (ctx, ...args) => {\n            return ctx.evaluate(...args);\n          }\n        );\n      });\n    }\n  };\n  var NOT_STARTED_STATE = {\n    ref: Symbol(\"not-started\"),\n    status: \"not-started\"\n  };\n  var DefaultViewPlugin = class {\n    constructor() {\n      this.name = \"default-view-plugin\";\n    }\n    apply(player) {\n      player.hooks.viewController.tap(this.name, (viewController) => {\n        viewController.hooks.view.tap(this.name, (view) => {\n          const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n          new AssetPlugin().apply(view);\n          new SwitchPlugin(pluginOptions).apply(view);\n          new ApplicabilityPlugin().apply(view);\n          new AssetTransformCorePlugin(viewController.transformRegistry).apply(\n            view\n          );\n          new StringResolverPlugin().apply(view);\n          const templatePlugin = new TemplatePlugin(pluginOptions);\n          templatePlugin.apply(view);\n          view.hooks.onTemplatePluginCreated.call(templatePlugin);\n          new MultiNodePlugin().apply(view);\n        });\n      });\n    }\n  };\n  var PLAYER_VERSION = \"__VERSION__\";\n  var COMMIT = \"__GIT_COMMIT__\";\n  var _Player = class _Player2 {\n    constructor(config) {\n      this.logger = new TapableLogger();\n      this.constantsController = new ConstantsController();\n      this.state = NOT_STARTED_STATE;\n      this.hooks = {\n        /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n        flowController: new SyncHook(),\n        /** The hook that updates/handles views */\n        viewController: new SyncHook(),\n        /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n        view: new SyncHook(),\n        /** Called when an expression evaluator was created */\n        expressionEvaluator: new SyncHook(),\n        /** The hook that creates and manages data */\n        dataController: new SyncHook(),\n        /** Called after the schema is created for a flow */\n        schema: new SyncHook(),\n        /** Manages validations (schema and x-field ) */\n        validationController: new SyncHook(),\n        /** Manages parsing binding */\n        bindingParser: new SyncHook(),\n        /** A that's called for state changes in the flow execution */\n        state: new SyncHook(),\n        /** A hook to access the current flow */\n        onStart: new SyncHook(),\n        /** A hook for when the flow ends either in success or failure */\n        onEnd: new SyncHook(),\n        /** Mutate the Content flow before starting */\n        resolveFlowContent: new SyncWaterfallHook()\n      };\n      if (config?.logger) {\n        this.logger.addHandler(config.logger);\n      }\n      this.config = config || {};\n      this.config.plugins = [\n        new DefaultExpPlugin(),\n        new DefaultViewPlugin(),\n        ...this.config.plugins || [],\n        new FlowExpPlugin()\n      ];\n      this.config.plugins?.forEach((plugin) => {\n        plugin.apply(this);\n      });\n    }\n    /**  Returns currently registered plugins */\n    getPlugins() {\n      return this.config.plugins ?? [];\n    }\n    /** Find instance of [Plugin] that has been registered to Player */\n    findPlugin(symbol) {\n      return this.config.plugins?.find((el) => el.symbol === symbol);\n    }\n    /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n    applyTo(symbol, apply) {\n      const plugin = this.findPlugin(symbol);\n      if (plugin) {\n        apply(plugin);\n      }\n    }\n    /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n    registerPlugin(plugin) {\n      plugin.apply(this);\n      this.config.plugins?.push(plugin);\n    }\n    /** Returns the current version of the running player */\n    getVersion() {\n      return _Player2.info.version;\n    }\n    /** Returns the git commit used to build Player version */\n    getCommit() {\n      return _Player2.info.commit;\n    }\n    /**\n     * Fetch the current state of Player.\n     * It will return either `not-started`, `in-progress`, `completed`\n     * with some extra data in each\n     */\n    getState() {\n      return this.state;\n    }\n    /**\n     * A private means of setting the state of Player\n     * Calls the hooks for subscribers to listen for this event\n     */\n    setState(state) {\n      this.state = state;\n      this.hooks.state.call(state);\n    }\n    /** Start Player with the given flow */\n    setupFlow(userContent) {\n      const userFlow = this.hooks.resolveFlowContent.call(userContent);\n      const flowController = new FlowController(userFlow.navigation, {\n        logger: this.logger\n      });\n      this.hooks.onStart.call(userFlow);\n      this.hooks.flowController.call(flowController);\n      let expressionEvaluator;\n      let dataController;\n      const pathResolver = new BindingParser({\n        get: (binding) => {\n          return dataController.get(binding);\n        },\n        set: (transaction) => {\n          return dataController.set(transaction);\n        },\n        evaluate: (expression) => {\n          return expressionEvaluator.evaluate(expression);\n        }\n      });\n      this.hooks.bindingParser.call(pathResolver);\n      const parseBinding = pathResolver.parse;\n      const flowResultDeferred = (0, import_p_defer.default)();\n      const schema = new SchemaController(userFlow.schema);\n      this.hooks.schema.call(schema);\n      const validationController = new ValidationController(schema);\n      this.hooks.validationController.call(validationController);\n      dataController = new DataController(userFlow.data, {\n        pathResolver,\n        middleware: validationController.getDataMiddleware(),\n        logger: this.logger\n      });\n      dataController.hooks.format.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.format(value) : value;\n      });\n      dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n        const formatter = schema.getFormatter(binding);\n        return formatter ? formatter.deformat(value) : value;\n      });\n      dataController.hooks.resolveDefaultValue.tap(\n        \"player\",\n        (binding) => schema.getApparentType(binding)?.default\n      );\n      let viewController;\n      expressionEvaluator = new ExpressionEvaluator({\n        model: dataController,\n        logger: this.logger\n      });\n      this.hooks.expressionEvaluator.call(expressionEvaluator);\n      expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n        flowResultDeferred.reject(e);\n        return true;\n      });\n      function resolveStrings(val, formatted) {\n        return resolveDataRefs(val, {\n          model: dataController,\n          evaluate: expressionEvaluator.evaluate,\n          formatted\n        });\n      }\n      flowController.hooks.flow.tap(\"player\", (flow) => {\n        flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n          const computedTransitionVal = state.transitions[transitionVal] ? transitionVal : \"*\";\n          if (state.onEnd && state.transitions[computedTransitionVal]) {\n            if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n              expressionEvaluator?.evaluate(state.onEnd.exp);\n            } else {\n              expressionEvaluator?.evaluate(state.onEnd);\n            }\n          }\n          if (!(\"transitions\" in state) || !state.transitions[computedTransitionVal]) {\n            return state;\n          }\n          return (0, import_timm8.setIn)(\n            state,\n            [\"transitions\", computedTransitionVal],\n            resolveStrings(state.transitions[computedTransitionVal])\n          );\n        });\n        flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n          if (currentState?.value.state_type === \"VIEW\") {\n            const { canTransition, validations } = validationController.validateView(\"navigation\");\n            if (!canTransition && validations) {\n              const bindings = new Set(validations.keys());\n              viewController?.currentView?.update(bindings);\n              return true;\n            }\n          }\n          return void 0;\n        });\n        flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n          let newState = state;\n          if (\"ref\" in state) {\n            newState = (0, import_timm8.setIn)(state, [\"ref\"], resolveStrings(state.ref));\n          }\n          if (\"param\" in state) {\n            newState = (0, import_timm8.setIn)(\n              state,\n              [\"param\"],\n              resolveStrings(state.param, false)\n            );\n          }\n          return newState;\n        });\n        flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n          if (newState.value.state_type !== \"VIEW\") {\n            validationController.reset();\n          }\n        });\n        flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ACTION\") {\n            const { exp } = value;\n            const result = expressionEvaluator.evaluate(exp);\n            if (isPromiselike(result)) {\n              this.logger.warn(\n                \"Async expression used as return value in in non-async context, transitioning with '*' value\"\n              );\n            }\n            flowController?.transition(String(result));\n          }\n          expressionEvaluator.reset();\n        });\n        flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n          const value = flowInstance.currentState?.value;\n          if (value && value.state_type === \"ASYNC_ACTION\") {\n            const { exp } = value;\n            try {\n              let result = expressionEvaluator.evaluateAsync(exp);\n              if (isPromiselike(result)) {\n                if (value.await) {\n                  result = await result;\n                } else {\n                  this.logger.warn(\n                    \"Unawaited promise used as return value in in non-async context, transitioning with '*' value\"\n                  );\n                }\n              } else {\n                this.logger.warn(\n                  \"Non async expression used in async action node\"\n                );\n              }\n              flowController?.transition(String(result));\n            } catch (e) {\n              flowResultDeferred.reject(e);\n            }\n          }\n          expressionEvaluator.reset();\n        });\n      });\n      this.hooks.dataController.call(dataController);\n      validationController.setOptions({\n        parseBinding,\n        model: dataController,\n        logger: this.logger,\n        evaluate: expressionEvaluator.evaluate,\n        constants: this.constantsController\n      });\n      viewController = new ViewController(userFlow.views || [], {\n        evaluator: expressionEvaluator,\n        parseBinding,\n        transition: flowController.transition,\n        model: dataController,\n        utils: {\n          findPlugin: (pluginSymbol) => {\n            return this.findPlugin(pluginSymbol);\n          }\n        },\n        logger: this.logger,\n        flowController,\n        schema,\n        format: (binding, value) => {\n          const formatter = schema.getFormatter(binding);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        formatValue: (ref, value) => {\n          const formatter = schema.getFormatterForType(ref);\n          return formatter?.format ? formatter.format(value) : value;\n        },\n        validation: {\n          ...validationController.forView(parseBinding),\n          type: (b) => schema.getType(parseBinding(b))\n        },\n        constants: this.constantsController\n      });\n      viewController.hooks.view.tap(\"player\", (view) => {\n        validationController.onView(view);\n        this.hooks.view.call(view);\n      });\n      this.hooks.viewController.call(viewController);\n      return {\n        start: () => {\n          flowController.start().then((endState) => {\n            const flowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize()\n            };\n            return flowResult;\n          }).then(flowResultDeferred.resolve).catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          }).catch(flowResultDeferred.reject).finally(() => this.hooks.onEnd.call());\n        },\n        state: {\n          status: \"in-progress\",\n          flowResult: flowResultDeferred.promise,\n          controllers: {\n            data: dataController,\n            view: viewController,\n            flow: flowController,\n            schema,\n            expression: expressionEvaluator,\n            binding: pathResolver,\n            validation: validationController\n          },\n          fail: flowResultDeferred.reject,\n          flow: userFlow,\n          logger: this.logger\n        }\n      };\n    }\n    async start(payload) {\n      const ref = Symbol(payload?.id ?? \"payload\");\n      const maybeUpdateState = (newState) => {\n        if (this.state.ref !== ref) {\n          this.logger.warn(\n            `Received update for a flow that's not the current one`\n          );\n          return newState;\n        }\n        this.setState(newState);\n        return newState;\n      };\n      this.setState({\n        status: \"not-started\",\n        ref\n      });\n      try {\n        const { state, start } = this.setupFlow(payload);\n        this.setState({\n          ref,\n          ...state\n        });\n        start();\n        const endProps = {\n          ref,\n          status: \"completed\",\n          flow: state.flow,\n          controllers: {\n            data: state.controllers.data.makeReadOnly()\n          }\n        };\n        return maybeUpdateState({\n          ...await state.flowResult,\n          ...endProps\n        });\n      } catch (error) {\n        const errorState = {\n          status: \"error\",\n          ref,\n          flow: payload,\n          error\n        };\n        maybeUpdateState(errorState);\n        throw error;\n      }\n    }\n  };\n  _Player.info = {\n    version: PLAYER_VERSION,\n    commit: COMMIT\n  };\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/expressions/toNum.ts\n  function toNum(val, coerceTo0) {\n    if (typeof val === \"number\") {\n      return val;\n    }\n    if (typeof val === \"string\" && val.length > 0) {\n      let newVal = val.trim();\n      newVal = newVal.replace(/,/g, \"\");\n      newVal = newVal.replace(/[¥£$€]/, \"\");\n      const nVal = Number(newVal);\n      return newVal.match(/^0[xbo]/i) || isNaN(nVal) ? void 0 : nVal;\n    }\n    return coerceTo0 ? 0 : void 0;\n  }\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/expressions/index.ts\n  function ifString(fn) {\n    return (arg) => {\n      if (typeof arg === \"string\") {\n        return fn(arg);\n      }\n      return arg;\n    };\n  }\n  var size = withoutContext((val) => {\n    if (typeof val === \"string\") {\n      return val.length;\n    }\n    if (typeof val === \"object\" && val !== null) {\n      return Object.keys(val).length;\n    }\n    return 0;\n  });\n  var length = size;\n  var isEmpty = (ctx, val) => {\n    if (val === void 0 || val === null) {\n      return true;\n    }\n    if (typeof val === \"object\" || typeof val === \"string\") {\n      return size(ctx, val) === 0;\n    }\n    return false;\n  };\n  var isNotEmpty = (ctx, val) => {\n    return !isEmpty(ctx, val);\n  };\n  var concat = withoutContext((...args) => {\n    if (args.every((v) => Array.isArray(v))) {\n      const merged = [];\n      args.forEach((next) => {\n        merged.push(...next);\n      });\n      return merged;\n    }\n    return args.reduce((merged, next) => merged + (next ?? \"\"), \"\");\n  });\n  var trim = withoutContext(ifString((str) => str.trim()));\n  var upperCase = withoutContext(ifString((str) => str.toUpperCase()));\n  var lowerCase = withoutContext(ifString((str) => str.toLowerCase()));\n  var replace = withoutContext(\n    (str, pattern, replacement = \"\") => {\n      if (typeof str === \"string\" && typeof pattern === \"string\" && typeof replacement === \"string\") {\n        const replacementRegex = new RegExp(pattern, \"g\");\n        return str.replace(replacementRegex, replacement);\n      }\n      return str;\n    }\n  );\n  var titleCase = withoutContext(\n    ifString(\n      (str) => str.split(\" \").map((word) => word[0].toUpperCase() + word.slice(1)).join(\" \")\n    )\n  );\n  var sentenceCase = withoutContext(\n    ifString((str) => str.replace(/\\b[a-zA-Z]/, (word) => word.toUpperCase()))\n  );\n  var split = withoutContext(\n    (str, separator, limit) => {\n      if (separator === void 0 || separator === null) {\n        return str;\n      }\n      const separatorStr = String(separator);\n      if (separatorStr === \"\") {\n        const result2 = str.split(\"\");\n        if (limit !== void 0 && limit !== null && limit > 0) {\n          return result2.slice(0, limit);\n        }\n        return result2;\n      }\n      const result = str.split(separatorStr);\n      if (limit !== void 0 && limit !== null && limit > 0) {\n        return result.slice(0, limit);\n      }\n      return result;\n    }\n  );\n  var substr = withoutContext(\n    (str, start, length2) => {\n      const actualStartIndex = start < 0 ? str.length + start : start;\n      if (length2 !== void 0) {\n        return str.substring(actualStartIndex, actualStartIndex + length2);\n      }\n      return str.substring(actualStartIndex);\n    }\n  );\n  var number = withoutContext(toNum);\n  var round = withoutContext(\n    (num) => Math.round(toNum(num, true) ?? 0)\n  );\n  var floor = withoutContext(\n    (num) => Math.floor(toNum(num, true) ?? 0)\n  );\n  var ceil = withoutContext(\n    (num) => Math.ceil(toNum(num, true) ?? 0)\n  );\n  var sum = withoutContext((...args) => {\n    return args.reduce((s, next) => s + (toNum(next) ?? 0), 0);\n  });\n  var findPropertyIndex = (context, bindingOrModel, propToCheck, valueToCheck) => {\n    if (bindingOrModel === void 0) {\n      return -1;\n    }\n    const searchArray = Array.isArray(bindingOrModel) ? bindingOrModel : context.model.get(bindingOrModel);\n    if (!Array.isArray(searchArray)) {\n      return -1;\n    }\n    return searchArray.findIndex((value) => {\n      const propVal = typeof value === \"object\" && propToCheck !== void 0 ? value[propToCheck] : value;\n      return valueToCheck === propVal;\n    });\n  };\n  var findProperty = (context, bindingOrModel, propToCheck, valueToCheck, propToReturn, defaultValue) => {\n    const searchArray = Array.isArray(bindingOrModel) ? bindingOrModel : context.model.get(bindingOrModel);\n    if (!Array.isArray(searchArray)) {\n      return defaultValue;\n    }\n    const foundValue = searchArray.find((value) => {\n      const propVal = typeof value === \"object\" && propToCheck !== void 0 ? value[propToCheck] : value;\n      return valueToCheck === propVal;\n    });\n    if (foundValue === void 0) {\n      return defaultValue;\n    }\n    if (typeof foundValue === \"object\" && propToReturn) {\n      return foundValue[propToReturn] ?? defaultValue;\n    }\n    return foundValue;\n  };\n  var containsAny = withoutContext(\n    (str, keywords) => {\n      if (!(typeof str === \"string\") || !(typeof keywords === \"string\" || Array.isArray(keywords))) {\n        return false;\n      }\n      if (Array.isArray(keywords)) {\n        return keywords.some((keyword) => str.indexOf(keyword) > -1);\n      }\n      return str.indexOf(keywords) > -1;\n    }\n  );\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/common-expressions/core/src/index.ts\n  var CommonExpressionsPlugin = class {\n    constructor() {\n      this.name = \"CommonExpressions\";\n    }\n    apply(player) {\n      player.registerPlugin(\n        new ExpressionPlugin(new Map(Object.entries(expressions_exports)))\n      );\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\n/*! Bundled license information:\n\ntimm/lib/timm.js:\n  (*!\n   * Timm\n   *\n   * Immutability helpers with fast reads and acceptable writes.\n   *\n   * @copyright Guillermo Grau Panea 2016\n   * @license MIT\n   *)\n\nqueue-microtask/index.js:\n  (*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)\n*/\n","/**\n * Checks if `value` is equal to `check` if `check` is a string or in `check` if check is an Array\n *\n * @param value - the value being searched for\n * @param check - the values to check against\n * @returns `boolean`\n */\nexport function equalToOrIn(value: string, check: string | Array<string>) {\n  if (Array.isArray(check)) {\n    return check.includes(value);\n  }\n\n  return check === value;\n}\n","import { equalToOrIn } from \"./utils\";\n\nexport type Interceptor<Args extends any[], ReturnType, ContextType> = {\n  /** An optional name for the interceptor */\n  name?: string;\n  /** Callback for each loop when used by the hook */\n  loop?: (...args: Args) => void;\n  /** Callback when an error occurs during the hook's call */\n  error?: (err: Error) => void;\n  /** Callback when a result is found for a hook's invocation */\n  result?: (\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ) => void;\n  /** Callback when a hook's call is complete */\n  done?: () => void;\n  /** Callback when a hook is tapped */\n  tap?: (tap: Tap<Args, ReturnType, ContextType>) => void;\n} & (\n  | {\n      /** If context should be omitted from the 'call'. This is the default */\n      context?: false;\n      /** Callback when the hook is tapped without context */\n      call?: (...args: Args) => void;\n    }\n  | {\n      /** If context should be included in the 'call' */\n      context: true;\n      /** Callback when the hook is tapped with context */\n      call?: (context: ContextType, ...args: Args) => void;\n    }\n);\n\nexport type Tap<Args extends any[], ReturnType, ContextType = unknown> = {\n  key: symbol;\n  name: string;\n  before?: string | Array<string>;\n} & (\n  | {\n      context: false;\n      callback: (...args: Args) => ReturnType;\n    }\n  | {\n      context: true;\n      callback: (context: ContextType, ...args: Args) => ReturnType;\n    }\n);\n\ntype BasicTap<Args extends any[], ReturnType, ContextType> = (\n  name: string,\n  callback: (...args: Args) => ReturnType,\n  before?: string | Array<string>\n) => Tap<Args, ReturnType, ContextType>;\n\ntype TapWithContext<Args extends any[], ReturnType, ContextType> =\n  | ((\n      options: {\n        name: string;\n        context?: false;\n        before?: string | Array<string>;\n      },\n      callback: (...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>)\n  | ((\n      options: {\n        name: string;\n        context: true;\n        before?: string | Array<string>;\n      },\n      callback: (context: ContextType, ...args: Args) => ReturnType\n    ) => Tap<Args, ReturnType>);\n\ninterface SyncBaseHookType<Args extends any[], ReturnType, ContextType> {\n  tap:\n    | BasicTap<Args, ReturnType, ContextType>\n    | TapWithContext<Args, ReturnType, ContextType>;\n  call(...args: Args): void;\n  untap(key: Tap<Args, ReturnType>): void;\n  isUsed(): boolean;\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void;\n}\n\nfunction callTap<Args extends any[], ReturnType, ContextType>(\n  tap: Tap<Args, ReturnType, ContextType>,\n  args: Args,\n  ctx: ContextType\n) {\n  if (tap.context) {\n    return tap.callback(ctx, ...args);\n  }\n\n  return tap.callback(...args);\n}\n\n/** A manager for all intercepts inside of a tap */\nclass InterceptionManager<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> {\n  protected interceptions: Array<Interceptor<Args, ReturnType, ContextType>>;\n  private interceptionKeySet: Set<\n    keyof Interceptor<Args, ReturnType, ContextType>\n  >;\n\n  constructor() {\n    this.interceptions = [];\n    this.interceptionKeySet = new Set();\n  }\n\n  isUsed() {\n    return this.interceptions.length > 0;\n  }\n\n  intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.push(int);\n    Object.keys(int).forEach((s) => {\n      this.interceptionKeySet.add(s as any);\n    });\n  }\n\n  tap(tap: Tap<Args, ReturnType, ContextType>): void {\n    if (this.interceptionKeySet.has(\"tap\")) {\n      this.interceptions.forEach((i) => {\n        i.tap?.(tap);\n      });\n    }\n  }\n\n  call(ctx: ContextType, ...args: Args): void {\n    if (this.interceptionKeySet.has(\"call\")) {\n      this.interceptions.forEach((i) => {\n        if (i.context) {\n          i.call?.(ctx, ...args);\n        } else {\n          i.call?.(...args);\n        }\n      });\n    }\n  }\n\n  loop(...args: Args): void {\n    if (this.interceptionKeySet.has(\"loop\")) {\n      this.interceptions.forEach((i) => {\n        i.loop?.(...args);\n      });\n    }\n  }\n\n  error(err: unknown): void {\n    if (this.interceptionKeySet.has(\"error\")) {\n      if (err instanceof Error) {\n        const asError: Error = err;\n        this.interceptions.forEach((i) => {\n          i.error?.(asError);\n        });\n      }\n    }\n  }\n\n  result(\n    r: ReturnType extends Promise<infer AwaitedValue>\n      ? AwaitedValue\n      : ReturnType\n  ): void {\n    if (this.interceptionKeySet.has(\"result\")) {\n      this.interceptions.forEach((i) => {\n        i.result?.(r);\n      });\n    }\n  }\n\n  done(): void {\n    if (this.interceptionKeySet.has(\"done\")) {\n      this.interceptions.forEach((i) => {\n        i.done?.();\n      });\n    }\n  }\n}\n\nabstract class Hook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> implements SyncBaseHookType<Args, ReturnType, ContextType>\n{\n  protected taps: Array<Tap<Args, ReturnType, ContextType>>;\n  protected interceptions: InterceptionManager<Args, ReturnType, ContextType>;\n\n  constructor() {\n    this.taps = [];\n    this.interceptions = new InterceptionManager<\n      Args,\n      ReturnType,\n      ContextType\n    >();\n  }\n\n  public tap(\n    options: { name: string; context?: false; before?: string | Array<string> },\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    options: { name: string; context: true; before?: string | Array<string> },\n    callback: (ctx: ContextType, ...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(\n    name: string,\n    callback: (...args: Args) => ReturnType\n  ): Tap<Args, ReturnType, ContextType>;\n\n  public tap(options: any, callback: any): Tap<Args, ReturnType, ContextType> {\n    const resolvedOptions =\n      typeof options === \"string\"\n        ? {\n            name: options,\n            context: false,\n          }\n        : {\n            context: false,\n            ...options,\n          };\n\n    const key = Symbol(resolvedOptions.name);\n    const tap: Tap<Args, ReturnType, ContextType> = {\n      key,\n      ...resolvedOptions,\n      callback,\n    };\n\n    if (tap.before) {\n      let insertionIndex = this.taps.length;\n      const beforeSet = new Set(\n        Array.isArray(tap.before) ? tap.before : [tap.before]\n      );\n      for (\n        insertionIndex;\n        insertionIndex > 0 && beforeSet.size > 0;\n        insertionIndex--\n      ) {\n        const t = this.taps[insertionIndex - 1];\n        if (beforeSet.has(t.name)) {\n          beforeSet.delete(t.name);\n        }\n\n        if (t.before && equalToOrIn(tap.name, t.before)) {\n          break;\n        }\n      }\n\n      this.taps.splice(insertionIndex, 0, tap);\n    } else {\n      this.taps.push(tap);\n    }\n\n    this.interceptions.tap(tap);\n\n    return tap;\n  }\n\n  abstract call(...args: Args): ReturnType;\n\n  public untap(tap: Tap<Args, ReturnType, ContextType>) {\n    this.taps = this.taps.filter((t) => t.key !== tap.key);\n  }\n\n  public isUsed() {\n    return this.taps.length > 0 || this.interceptions.isUsed();\n  }\n\n  public intercept(int: Interceptor<Args, ReturnType, ContextType>): void {\n    this.interceptions.intercept(int);\n  }\n}\n\nexport class SyncHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      this.taps.forEach((t) => {\n        callTap(t, args, ctx);\n      });\n    } catch (err: unknown) {\n      this.interceptions.error(err);\n\n      throw err;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, ReturnType | undefined | null, ContextType> {\n  public call(...args: Args): ReturnType | undefined | null {\n    if (!this.isUsed()) {\n      return;\n    }\n\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const rtn = callTap(this.taps[tapIndex], args, ctx);\n      if (rtn !== undefined) {\n        this.interceptions.result(rtn as any);\n        return rtn;\n      }\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class SyncWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Args[0], ContextType> {\n  public call(...args: Args): Args[0] {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n\n    for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n      const tapValue = callTap(this.taps[tapIndex], [rtn, ...rest] as any, ctx);\n      if (tapValue !== undefined) {\n        rtn = tapValue;\n      }\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class SyncLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, void, ContextType> {\n  public call(...args: Args) {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n    this.interceptions.call(ctx, ...args);\n\n    await Promise.allSettled(this.taps.map((tap) => callTap(tap, args, ctx)));\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncParallelBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      const rtn = await Promise.race(\n        this.taps.map((tap) => callTap(tap, args, ctx))\n      );\n\n      this.interceptions.result(rtn as any);\n      return rtn;\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n  }\n}\n\nexport class AsyncSeriesHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        await callTap(this.taps[tapIndex], args, ctx);\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesBailHook<\n  Args extends any[],\n  ReturnType,\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<ReturnType | undefined | null>, ContextType> {\n  public async call(...args: Args): Promise<ReturnType | undefined | null> {\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const rtn = await callTap(this.taps[tapIndex], args, ctx);\n        if (rtn !== undefined) {\n          this.interceptions.result(rtn);\n          return rtn;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n\nexport class AsyncSeriesWaterfallHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<Args[0]>, ContextType> {\n  public async call(...args: Args): Promise<Args[0]> {\n    // eslint-disable-next-line prefer-const\n    let [rtn, ...rest] = args;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n        const tapValue = await callTap(\n          this.taps[tapIndex],\n          [rtn, ...rest] as any,\n          ctx\n        );\n        if (tapValue !== undefined) {\n          rtn = tapValue;\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.result(rtn);\n\n    return rtn;\n  }\n}\n\nexport class AsyncSeriesLoopHook<\n  Args extends any[],\n  ContextType = Record<string, any>\n> extends Hook<Args, Promise<void>, ContextType> {\n  public async call(...args: Args): Promise<void> {\n    let finished = false;\n    const ctx: ContextType = {} as any;\n\n    this.interceptions.call(ctx, ...args);\n\n    try {\n      while (finished !== true) {\n        finished = true;\n        this.interceptions.loop(...args);\n        for (let tapIndex = 0; tapIndex < this.taps.length; tapIndex += 1) {\n          const rtn = await callTap(this.taps[tapIndex], args, ctx);\n\n          if (rtn !== undefined) {\n            finished = false;\n            break;\n          }\n        }\n      }\n    } catch (e: unknown) {\n      this.interceptions.error(e);\n      throw e;\n    }\n\n    this.interceptions.done();\n  }\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n","var has = Object.prototype.hasOwnProperty;\n\nfunction find(iter, tar, key) {\n\tfor (key of iter.keys()) {\n\t\tif (dequal(key, tar)) return key;\n\t}\n}\n\nexport function dequal(foo, bar) {\n\tvar ctor, len, tmp;\n\tif (foo === bar) return true;\n\n\tif (foo && bar && (ctor=foo.constructor) === bar.constructor) {\n\t\tif (ctor === Date) return foo.getTime() === bar.getTime();\n\t\tif (ctor === RegExp) return foo.toString() === bar.toString();\n\n\t\tif (ctor === Array) {\n\t\t\tif ((len=foo.length) === bar.length) {\n\t\t\t\twhile (len-- && dequal(foo[len], bar[len]));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ctor === Set) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len;\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!bar.has(tmp)) return false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === Map) {\n\t\t\tif (foo.size !== bar.size) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tfor (len of foo) {\n\t\t\t\ttmp = len[0];\n\t\t\t\tif (tmp && typeof tmp === 'object') {\n\t\t\t\t\ttmp = find(bar, tmp);\n\t\t\t\t\tif (!tmp) return false;\n\t\t\t\t}\n\t\t\t\tif (!dequal(len[1], bar.get(tmp))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tif (ctor === ArrayBuffer) {\n\t\t\tfoo = new Uint8Array(foo);\n\t\t\tbar = new Uint8Array(bar);\n\t\t} else if (ctor === DataView) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo.getInt8(len) === bar.getInt8(len));\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (ArrayBuffer.isView(foo)) {\n\t\t\tif ((len=foo.byteLength) === bar.byteLength) {\n\t\t\t\twhile (len-- && foo[len] === bar[len]);\n\t\t\t}\n\t\t\treturn len === -1;\n\t\t}\n\n\t\tif (!ctor || typeof foo === 'object') {\n\t\t\tlen = 0;\n\t\t\tfor (ctor in foo) {\n\t\t\t\tif (has.call(foo, ctor) && ++len && !has.call(bar, ctor)) return false;\n\t\t\t\tif (!(ctor in bar) || !dequal(foo[ctor], bar[ctor])) return false;\n\t\t\t}\n\t\t\treturn Object.keys(bar).length === len;\n\t\t}\n\t}\n\n\treturn foo !== foo && bar !== bar;\n}\n","import dlv from \"dlv\";\n\n/** A function that checks overlapping properties against a reference value */\nexport type Matcher = ((searchObj: object) => boolean) & {\n  /** The count represents the specificity of this matcher */\n  count: number;\n};\n\n/** Traverse an object and collect any key/value pairs including nested keys */\nfunction traverseObj(\n  object: Record<any, any>,\n  path: string[] = [],\n  pairs: Map<string[], any> = new Map(),\n): Map<string[], any> {\n  for (const key of Object.keys(object)) {\n    const val: any = object[key];\n    const nestedPath = [...path, key];\n\n    if (typeof val === \"object\") {\n      traverseObj(val, nestedPath, pairs);\n    } else {\n      pairs.set(nestedPath, val);\n    }\n  }\n\n  return pairs;\n}\n\n/** Given an object, create a function that compares any set key/value pairs in the given object against a new value */\nexport default function createMatcher(partialObj: object): Matcher {\n  // Convert the partial object into a list of [key, value] pairs;\n  const pairs = traverseObj(partialObj);\n\n  /** Generate a function to match against all of the properties we care about */\n  const matchFunction = (searchObj: object) => {\n    for (const entry of Array.from(pairs)) {\n      const [path, value] = entry;\n\n      if (dlv(searchObj, path) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  // Keep track of the specificity of the comparator\n  matchFunction.count = pairs.size;\n\n  return matchFunction;\n}\n","import SortedArray from \"sorted-array\";\nimport type { Matcher } from \"./deep-partial-matcher\";\nimport createObjectMatcher from \"./deep-partial-matcher\";\n\nexport { default as createObjectMatcher } from \"./deep-partial-matcher\";\n\n/** create a matcher function that matches exactly */\nfunction createBasicMatcher(seed: any): Matcher {\n  /** a simple matcher function that only matches itself */\n  const matcher = (match: any) => seed === match;\n  matcher.count = 1;\n\n  return matcher;\n}\n\ninterface RegistryIndex<V> {\n  /** The original object we wanted to match on  */\n  key: object;\n\n  /** The value to return */\n  value: V;\n\n  /** The matcher function for this entry */\n  matcher: Matcher;\n}\n\n/** create an empty sorted array using the matcher count */\nconst createSortedArray = <V>() =>\n  new SortedArray<RegistryIndex<V>>([], (c) => c.matcher.count);\n\n/**\n * A partial match registry is a map that uses an object to \"match\" against keys.\n * More specific matches take precedence over less specific ones.\n */\nexport class Registry<V> {\n  private store = createSortedArray<V>();\n\n  constructor(initialSet?: Array<[any, V]>) {\n    initialSet?.forEach(([match, value]) => {\n      this.set(match, value);\n    });\n  }\n\n  /** Add match -> value mapping to the registry */\n  set(match: any, value: V) {\n    const matcher =\n      typeof match === \"object\"\n        ? createObjectMatcher(match)\n        : createBasicMatcher(match);\n\n    this.store.insert({\n      key: match,\n      value,\n      matcher,\n    });\n  }\n\n  /** Fetch the best match in the registry */\n  get(query: any): V | undefined {\n    for (const entry of this.store.array) {\n      if (entry.matcher(query)) {\n        return entry.value;\n      }\n    }\n  }\n\n  /** Loop over all entries and run callback */\n  forEach(callbackfn: (value: RegistryIndex<V>) => void): void {\n    for (const entry of this.store.array) {\n      callbackfn(entry);\n    }\n  }\n\n  /** Reset the items in the registry */\n  clear() {\n    this.store = createSortedArray<V>();\n  }\n\n  /** Check if the registry is empty*/\n  isRegistryEmpty() {\n    return this.store.array.length === 0;\n  }\n}\n","import type { BindingLike, BindingInstance } from \"./binding\";\n\n/** Check if the parameter representing a binding is already of the Binding class */\nexport function isBinding(binding: BindingLike): binding is BindingInstance {\n  return !(typeof binding === \"string\" || Array.isArray(binding));\n}\n\n/** Convert the string to an int if you can, otherwise just return the original string */\nexport function maybeConvertToNum(i: string): string | number {\n  const asInt = parseInt(i, 10);\n\n  if (isNaN(asInt)) {\n    return i;\n  }\n\n  return asInt;\n}\n\n/**\n * utility to convert binding into binding segments.\n */\nexport function getBindingSegments(\n  binding: BindingLike,\n): Array<string | number> {\n  if (Array.isArray(binding)) {\n    return binding;\n  }\n\n  if (typeof binding === \"string\") {\n    return binding.split(\".\");\n  }\n\n  return binding.asArray();\n}\n\n/** Like _.findIndex, but ignores types */\nexport function findInArray<T extends Record<string | number, object>>(\n  array: Array<T>,\n  key: string | number,\n  value: T,\n): number | undefined {\n  return array.findIndex((obj) => {\n    if (obj && typeof obj === \"object\") {\n      // Intentional double-equals because we want '4' to be coerced to 4\n      // eslint-disable-next-line eqeqeq\n      return obj[key] == value;\n    }\n\n    return false;\n  });\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { BindingLike, BindingFactory } from \"../binding\";\nimport { BindingInstance, isBinding } from \"../binding\";\nimport { NOOP_MODEL } from \"./noop-model\";\n\nexport const ROOT_BINDING = new BindingInstance([]);\nexport type BatchSetTransaction = [BindingInstance, any][];\n\nexport type Updates = Array<{\n  /** The updated binding */\n  binding: BindingInstance;\n\n  /** The old value */\n  oldValue: any;\n\n  /** The new value */\n  newValue: any;\n\n  /** Force the Update to be included even if no data changed */\n  force?: boolean;\n}>;\n\n/** Options to use when getting or setting data */\nexport interface DataModelOptions {\n  /**\n   * The data (either to set or get) should represent a formatted value\n   * For setting data, the data will be de-formatted before continuing in the pipeline\n   * For getting data, the data will be formatted before returning\n   */\n  formatted?: boolean;\n\n  /**\n   * By default, fetching data will ignore any invalid data.\n   * You can choose to grab the queued invalid data if you'd like\n   * This is usually the case for user-inputs\n   */\n  includeInvalid?: boolean;\n\n  /**\n   * A flag to set to ignore any default value in the schema, and just use the raw value\n   */\n  ignoreDefaultValue?: boolean;\n\n  /**\n   * A flag to indicate that this update should happen silently\n   */\n  silent?: boolean;\n\n  /** Other context associated with this request */\n  context?: {\n    /** The data model to use when getting other data from the context of this request */\n    model: DataModelWithParser;\n  };\n}\n\nexport interface DataModelWithParser<Options = DataModelOptions> {\n  get(binding: BindingLike, options?: Options): any;\n  set(transaction: [BindingLike, any][], options?: Options): Updates;\n  delete(binding: BindingLike, options?: Options): void;\n}\n\nexport interface DataModelImpl<Options = DataModelOptions> {\n  get(binding: BindingInstance, options?: Options): any;\n  set(transaction: BatchSetTransaction, options?: Options): Updates;\n  delete(binding: BindingInstance, options?: Options): void;\n}\n\nexport interface DataModelMiddleware {\n  /** The name of the middleware */\n  name?: string;\n\n  set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates;\n\n  get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): any;\n\n  delete?(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): void;\n\n  reset?(): void;\n}\n\n/** Wrap the inputs of the DataModel with calls to parse raw binding inputs */\nexport function withParser<Options = unknown>(\n  model: DataModelImpl<Options>,\n  parseBinding: BindingFactory,\n): DataModelWithParser<Options> {\n  /** Parse something into a binding if it requires it */\n  function maybeParse(\n    binding: BindingLike,\n    readOnly: boolean,\n  ): BindingInstance {\n    const parsed = isBinding(binding)\n      ? binding\n      : parseBinding(binding, {\n          get: model.get,\n          set: model.set,\n          readOnly,\n        });\n\n    if (!parsed) {\n      throw new Error(\"Unable to parse binding\");\n    }\n\n    return parsed;\n  }\n\n  return {\n    get(binding, options?: Options) {\n      return model.get(maybeParse(binding, true), options);\n    },\n    set(transaction, options?: Options) {\n      return model.set(\n        transaction.map(([key, val]) => [maybeParse(key, false), val]),\n        options,\n      );\n    },\n    delete(binding, options?: Options) {\n      return model.delete(maybeParse(binding, false), options);\n    },\n  };\n}\n\n/** Wrap a middleware instance in a DataModel compliant API */\nexport function toModel(\n  middleware: DataModelMiddleware,\n  defaultOptions?: DataModelOptions,\n  next?: DataModelImpl,\n): DataModelImpl {\n  if (!next) {\n    return middleware as DataModelImpl;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.get) {\n        return middleware.get(binding, resolvedOptions, next);\n      }\n\n      return next?.get(binding, resolvedOptions);\n    },\n    set: (transaction: BatchSetTransaction, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.set) {\n        return middleware.set(transaction, resolvedOptions, next);\n      }\n\n      return next?.set(transaction, resolvedOptions);\n    },\n    delete: (binding: BindingInstance, options?: DataModelOptions) => {\n      const resolvedOptions = options ?? defaultOptions;\n\n      if (middleware.delete) {\n        return middleware.delete(binding, resolvedOptions, next);\n      }\n\n      return next?.delete(binding, resolvedOptions);\n    },\n  };\n}\n\nexport type DataPipeline = Array<DataModelMiddleware | DataModelImpl>;\n\n/**\n * Given a set of steps in a pipeline, create the effective data-model\n */\nexport function constructModelForPipeline(\n  pipeline: DataPipeline,\n): DataModelImpl {\n  if (pipeline.length === 0) {\n    return NOOP_MODEL;\n  }\n\n  if (pipeline.length === 1) {\n    return toModel(pipeline[0]);\n  }\n\n  /** Default and propagate the options into the nested calls */\n  function createModelWithOptions(options?: DataModelOptions) {\n    const model: DataModelImpl =\n      pipeline.reduce<DataModelImpl | undefined>(\n        (nextModel, middleware) => toModel(middleware, options, nextModel),\n        undefined,\n      ) ?? NOOP_MODEL;\n\n    return model;\n  }\n\n  return {\n    get: (binding: BindingInstance, options?: DataModelOptions) => {\n      return createModelWithOptions(options)?.get(binding, options);\n    },\n    set: (transaction, options) => {\n      return createModelWithOptions(options)?.set(transaction, options);\n    },\n    delete: (binding, options) => {\n      return createModelWithOptions(options)?.delete(binding, options);\n    },\n  };\n}\n\n/** A DataModel that manages middleware data handlers  */\nexport class PipelinedDataModel implements DataModelImpl {\n  private pipeline: DataPipeline;\n  private effectiveDataModel: DataModelImpl;\n\n  public readonly hooks = {\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n  };\n\n  constructor(pipeline: DataPipeline = []) {\n    this.pipeline = pipeline;\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public setMiddleware(handlers: DataPipeline) {\n    this.pipeline = handlers;\n    this.effectiveDataModel = constructModelForPipeline(handlers);\n  }\n\n  public addMiddleware(handler: DataModelMiddleware) {\n    this.pipeline = [...this.pipeline, handler];\n    this.effectiveDataModel = constructModelForPipeline(this.pipeline);\n  }\n\n  public reset(model = {}) {\n    this.pipeline.forEach((middleware) => {\n      if (\"reset\" in middleware) {\n        middleware.reset?.();\n      }\n    });\n\n    this.set([[ROOT_BINDING, model]]);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    const appliedTransaction = this.effectiveDataModel.set(\n      transaction,\n      options,\n    );\n    this.hooks.onSet.call(transaction);\n    return appliedTransaction;\n  }\n\n  public get(binding: BindingInstance, options?: DataModelOptions): any {\n    return this.effectiveDataModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: DataModelOptions): void {\n    return this.effectiveDataModel.delete(binding, options);\n  }\n}\n","import type { DataModelWithParser } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nexport type ExpressionObjectType = {\n  /** The expression to eval */\n  value: BasicExpressionTypes;\n};\n\nexport type ExpressionLiteralType =\n  | string\n  | number\n  | boolean\n  | undefined\n  | null;\n\nexport type BasicExpressionTypes =\n  | ExpressionLiteralType\n  | ExpressionObjectType\n  | Array<ExpressionLiteralType | ExpressionObjectType>;\n\nexport type ExpressionType = BasicExpressionTypes | ExpressionNode;\n\nexport interface OperatorProcessingOptions {\n  /**\n   * When set to a falsy value, the arguments passed to the handler will be raw AST Nodes\n   * This enables lazy evaluation of arguments\n   */\n  resolveParams: boolean;\n\n  /**\n   * Whether the expression should be allowed to be evaluated asynchronously\n   */\n  async?: boolean;\n}\n\nexport type BinaryOperatorBasic = (\n  left: any,\n  right: any,\n  async: boolean,\n) => unknown;\nexport type BinaryOperatorAdvanced = OperatorProcessingOptions &\n  ((ctx: ExpressionContext, left: any, right: any, async: boolean) => unknown);\n\nexport type BinaryOperator = BinaryOperatorAdvanced | BinaryOperatorBasic;\n\nexport type UnaryOperator =\n  | ((arg: any, async: boolean) => unknown)\n  | (((ctx: ExpressionContext, arg: any, async: boolean) => unknown) &\n      OperatorProcessingOptions);\n\nexport interface ExpressionContext {\n  /** A means of executing an expression */\n  evaluate: (expr: ExpressionType) => unknown;\n\n  /** The data model that expression handlers can use when fetching data */\n  model: DataModelWithParser;\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport type ExpressionHandler<\n  T extends readonly unknown[] = unknown[],\n  R = void,\n> = ((context: ExpressionContext, ...args: T) => R) &\n  Partial<OperatorProcessingOptions>;\n\nexport const ExpNodeOpaqueIdentifier: unique symbol =\n  Symbol(\"Expression Node ID\");\n\n/** Checks if the input is an already processed Expression node */\nexport function isExpressionNode(x: any): x is ExpressionNode {\n  return (\n    typeof x === \"object\" &&\n    x !== null &&\n    !Array.isArray(x) &&\n    x.__id === ExpNodeOpaqueIdentifier\n  );\n}\n\nexport interface NodePosition {\n  /** The character location */\n  character: number;\n}\n\nexport interface NodeLocation {\n  // We only care about the character offset, not the line/column for now\n  // But making these objects allows us to add more (like line number) later\n\n  /** The start of the node */\n  start: NodePosition;\n\n  /** The end of the node */\n  end: NodePosition;\n}\n\nexport interface BaseNode<T> {\n  /** The thing to discriminate the AST type on */\n  type: T;\n\n  /** How to tell this apart from other objects */\n  __id: typeof ExpNodeOpaqueIdentifier;\n\n  /** The location of the node in the source expression string */\n  location?: NodeLocation;\n\n  /**\n   * The error that occurred while parsing this node\n   * This is only set if the parsing mode is set to non-strict\n   */\n  error?: Error;\n}\n\n/** A helper interface for nodes that container left and right children */\nexport interface DirectionalNode {\n  /** The left node. Often for the left hand side of an expression */\n  left: ExpressionNode;\n\n  /** The right child. Often for the right hand side of an expression */\n  right: ExpressionNode;\n}\n\nexport interface LiteralNode extends BaseNode<\"Literal\"> {\n  /** A node that holds a literal value */\n  value: string | number;\n\n  /** The unprocessed value */\n  raw?: any;\n}\n\nexport interface BinaryNode\n  extends BaseNode<\"BinaryExpression\">,\n    DirectionalNode {\n  /** The operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface LogicalNode\n  extends BaseNode<\"LogicalExpression\">,\n    DirectionalNode {\n  /** The logical operation to perform on the nodes */\n  operator: string;\n}\n\nexport interface UnaryNode extends BaseNode<\"UnaryExpression\"> {\n  /** The operation to perform on the node */\n  operator: string;\n\n  /** The single argument that the operation should be performed on */\n  argument: ExpressionNode;\n}\n\nexport type ThisNode = BaseNode<\"ThisExpression\">;\n\nexport interface ModelRefNode extends BaseNode<\"ModelRef\"> {\n  /** The binding that the model reference points to */\n  ref: string;\n}\n\nexport interface ObjectNode extends BaseNode<\"Object\"> {\n  /**  */\n  attributes: Array<{\n    /** The property name of the object */\n    key: ExpressionNode;\n\n    /** the associated value */\n    value: ExpressionNode;\n  }>;\n}\n\nexport interface MemberExpressionNode extends BaseNode<\"MemberExpression\"> {\n  /** The object to be introspected */\n  object: ExpressionNode;\n\n  /** If the property uses . or open-bracket */\n  computed: boolean;\n\n  /** The property to access on the object */\n  property: ExpressionNode;\n}\n\nexport interface ConditionalExpressionNode\n  extends BaseNode<\"ConditionalExpression\"> {\n  /** The test for the ternary */\n  test: ExpressionNode;\n\n  /** The truthy case for the ternary */\n  consequent: ExpressionNode;\n\n  /** The falsy case for the ternary */\n  alternate: ExpressionNode;\n}\n\nexport interface CompoundNode extends BaseNode<\"Compound\"> {\n  /** The contents of the compound expression */\n  body: ExpressionNode[];\n}\n\nexport interface CallExpressionNode extends BaseNode<\"CallExpression\"> {\n  /** The arguments to the function */\n  args: ExpressionNode[];\n\n  /** The function name */\n  callTarget: IdentifierNode;\n}\n\nexport interface ArrayExpressionNode extends BaseNode<\"ArrayExpression\"> {\n  /** The items in an array */\n  elements: ExpressionNode[];\n}\n\nexport interface IdentifierNode extends BaseNode<\"Identifier\"> {\n  /** The variable name */\n  name: string;\n}\n\nexport type AssignmentNode = BaseNode<\"Assignment\"> & DirectionalNode;\n\nexport interface ModificationNode\n  extends BaseNode<\"Modification\">,\n    DirectionalNode {\n  /** The operator for the modification */\n  operator: string;\n}\n\nexport type ExpressionNode =\n  | LiteralNode\n  | BinaryNode\n  | LogicalNode\n  | UnaryNode\n  | ThisNode\n  | ModelRefNode\n  | MemberExpressionNode\n  | ConditionalExpressionNode\n  | CompoundNode\n  | CallExpressionNode\n  | ArrayExpressionNode\n  | IdentifierNode\n  | AssignmentNode\n  | ModificationNode\n  | ObjectNode;\n\nexport type ExpressionNodeType = ExpressionNode[\"type\"];\n\nexport interface ErrorWithLocation extends Error {\n  /** The place in the string where the error occurs */\n  index: number;\n\n  /** a helpful description */\n  description: string;\n}\n","/* eslint @typescript-eslint/no-use-before-define: 0 */\n/**\n * An expression to AST parser based on JSEP: http://jsep.from.so/\n */\nimport type {\n  ErrorWithLocation,\n  ExpressionNode,\n  ExpressionNodeType,\n  NodeLocation,\n} from \"./types\";\nimport { ExpNodeOpaqueIdentifier } from \"./types\";\n\nconst PERIOD_CODE = 46; // '.'\nconst COMMA_CODE = 44; // ','\nconst SQUOTE_CODE = 39; // Single quote\nconst DQUOTE_CODE = 34; // Double quotes\nconst OPAREN_CODE = 40; // (\nconst CPAREN_CODE = 41; // )\nconst OBRACK_CODE = 91; // [\nconst CBRACK_CODE = 93; // ]\nconst QUMARK_CODE = 63; // ?\nconst SEMCOL_CODE = 59; // ;\nconst COLON_CODE = 58; // :\nconst OCURL_CODE = 123; // {\nconst CCURL_CODE = 125; // }\n\n// Operations\n// ----------\n\n// Set `t` to `true` to save space (when minified, not gzipped)\nconst t = true;\n\n// Use a quickly-accessible map to store all of the unary operators\n// Values are set to `true` (it really doesn't matter)\nconst unaryOps = { \"-\": t, \"!\": t, \"~\": t, \"+\": t };\n\n// Also use a map for the binary operations but set their values to their\n// binary precedence for quick reference:\n// see [Operator precedence](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\nconst binaryOps: Record<string, number> = {\n  \"=\": 3,\n  \"+=\": 3,\n  \"-=\": 3,\n  \"&=\": 3,\n  \"|=\": 3,\n  // Conditional: 4,\n  \"||\": 5,\n  \"&&\": 6,\n  \"|\": 7,\n  \"^\": 8,\n  \"&\": 9,\n  \"==\": 10,\n  \"!=\": 10,\n  \"===\": 10,\n  \"!==\": 10,\n  \"<\": 11,\n  \">\": 11,\n  \"<=\": 11,\n  \">=\": 11,\n  \"<<\": 12,\n  \">>\": 12,\n  \">>>\": 12,\n  \"+\": 13,\n  \"-\": 13,\n  \"*\": 14,\n  \"/\": 14,\n  \"%\": 14,\n};\n\n/** Wrap the message and index in an error and throw it */\nfunction throwError(message: string, index: number): ErrorWithLocation {\n  const err = new Error(`${message} at character ${index}`);\n\n  (err as ErrorWithLocation).index = index;\n  (err as ErrorWithLocation).description = message;\n\n  throw err;\n}\n\n/** Create a new location marker that spans both nodes */\nfunction createSpanningLocation(start?: NodeLocation, end?: NodeLocation) {\n  if (!start || !end) {\n    return;\n  }\n\n  return {\n    start: start.start,\n    end: end.end,\n  };\n}\n\n/** Get return the longest key length of any object */\nfunction getMaxKeyLen(obj: object): number {\n  let maxLen = 0;\n\n  Object.keys(obj).forEach((key) => {\n    if (key.length > maxLen && Object.prototype.hasOwnProperty.call(obj, key)) {\n      maxLen = key.length;\n    }\n  });\n\n  return maxLen;\n}\n\nconst maxUnopLen = getMaxKeyLen(unaryOps);\nconst maxBinopLen = getMaxKeyLen(binaryOps);\n\n// Literals\n// ----------\n// Store the values to return for the various literals we may encounter\nconst literals = {\n  true: true,\n  false: false,\n  null: null,\n  undefined,\n} as const;\n\n// Except for `this`, which is special. This could be changed to something like `'self'` as well\nconst thisStr = \"this\";\n\n/** Returns the precedence of a binary operator or `0` if it isn't a binary operator */\nfunction binaryPrecedence(opVal: string): number {\n  return binaryOps[opVal] || 0;\n}\n\n/**\n * Utility function (gets called from multiple places)\n * Also note that `a && b` and `a || b` are *logical* expressions, not binary expressions\n */\nfunction createBinaryExpression(\n  operator: string | boolean,\n  left: string,\n  right: string,\n  location?: NodeLocation,\n) {\n  let type: ExpressionNodeType;\n\n  if (operator === \"||\" || operator === \"&&\") {\n    type = \"LogicalExpression\";\n  } else if (operator === \"=\") {\n    type = \"Assignment\";\n  } else if (\n    operator === \"+=\" ||\n    operator === \"-=\" ||\n    operator === \"&=\" ||\n    operator === \"|=\"\n  ) {\n    type = \"Modification\";\n  } else {\n    type = \"BinaryExpression\";\n  }\n\n  return {\n    __id: ExpNodeOpaqueIdentifier,\n    type,\n    operator,\n    left,\n    right,\n    location,\n  };\n}\n\n/** `ch` is a character code in the next three functions */\nfunction isDecimalDigit(ch: number) {\n  return ch >= 48 && ch <= 57; // 0...9\n}\n\n/** Check if the char is the character code for the start of an identifier */\nfunction isIdentifierStart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122)\n  ); // A...z\n}\n\n/** Check if the char code is still a valid identifier portion */\nfunction isIdentifierPart(ch: number) {\n  return (\n    ch === 36 ||\n    ch === 95 || // `$` and `_`\n    (ch >= 65 && ch <= 90) || // A...Z\n    (ch >= 97 && ch <= 122) || // A...z\n    (ch >= 48 && ch <= 57)\n  ); // 0...9\n}\n\n/** Check if the 2 chars are the start of a model reference */\nfunction isModelRefStart(ch0: number, ch1: number) {\n  return ch0 === OCURL_CODE && ch1 === OCURL_CODE; // '{{'\n}\n\n/** Parse out an expression from the string */\nexport function parseExpression(\n  expr: string,\n  options?: {\n    /** If true (the default), will throw on invalid expressions */\n    strict?: boolean;\n  },\n): ExpressionNode {\n  const strictMode = options?.strict ?? true;\n\n  // `index` stores the character number we are currently at while `length` is a constant\n  // All of the gobbles below will modify `index` as we move along\n  const charAtFunc = expr.charAt;\n  const charCodeAtFunc = expr.charCodeAt;\n  const { length } = expr;\n\n  let index = 0;\n\n  /** Create a location object  */\n  const getLocation = (startChar: number) => {\n    return {\n      start: {\n        character: startChar,\n      },\n      end: {\n        character: index,\n      },\n    };\n  };\n\n  /** Grab the char at the index from the expression */\n  function exprI(i: number) {\n    return charAtFunc.call(expr, i);\n  }\n\n  /** Grab the unicode char at the index in the expression */\n  function exprICode(i: number) {\n    return charCodeAtFunc.call(expr, i);\n  }\n\n  /**\n   * Gobble an object and store the object in an attributes array\n   */\n  function gobbleObjects() {\n    const attributes: Array<{\n      /** The property name of the object */\n      key: any;\n\n      /** the associated value */\n      value: any;\n    }> = [];\n    let closed = false;\n\n    let shouldDefineKey = true;\n    let key;\n    let value;\n    let chCode;\n    const startCharIndex = index;\n\n    // get rid of OCURL_CODE\n    ++index;\n\n    while (index < length) {\n      gobbleSpaces();\n      chCode = exprICode(index);\n      // check for end\n      if (chCode === CCURL_CODE) {\n        // if we are at the end but a key was defined\n        if (key) {\n          throwError(\"A key was defined but a value was not\", index);\n        }\n\n        index++;\n        closed = true;\n        break;\n      } else if (shouldDefineKey) {\n        // check for key\n        if (chCode !== SQUOTE_CODE && chCode !== DQUOTE_CODE) {\n          throwError(\"An object must start wtih a key\", index);\n        }\n\n        // get key\n        key = gobbleStringLiteral();\n        // remove spaces\n        gobbleSpaces();\n        // remove colon\n        if (exprICode(index) === COLON_CODE) {\n          index++;\n          shouldDefineKey = false;\n        } else {\n          throwError(\"A colon must follow an object key\", index);\n        }\n      } else {\n        value = gobbleExpression();\n\n        attributes.push({ key, value });\n        gobbleSpaces();\n        chCode = exprICode(index);\n        if (chCode === COMMA_CODE) {\n          index++;\n        } else if (chCode !== CCURL_CODE) {\n          throwError(\"Please add a comma to add another key\", index);\n        }\n\n        shouldDefineKey = true;\n        key = undefined;\n        value = undefined;\n      }\n\n      chCode = exprICode(index);\n    }\n\n    // throw error if object is not closed\n    if (!closed) {\n      throwError(`Unclosed brace in object`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Object\",\n      attributes,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Push `index` up to the next non-space character\n   */\n  function gobbleSpaces() {\n    let ch = exprICode(index);\n    // Space or tab\n    while (ch === 32 || ch === 9) {\n      ch = exprICode(++index);\n    }\n  }\n\n  /**\n   * The main parsing function. Much of this code is dedicated to ternary expressions\n   */\n  function gobbleExpression(): ExpressionNode {\n    const test = gobbleBinaryExpression();\n    gobbleSpaces();\n    const startCharIndex = index;\n\n    if (index < length && exprICode(index) === QUMARK_CODE) {\n      // Ternary expression: test ? consequent : alternate\n      index++;\n      const consequent = gobbleExpression();\n\n      if (!consequent) {\n        throwError(\"Expected expression\", index);\n      }\n\n      gobbleSpaces();\n\n      if (exprICode(index) === COLON_CODE) {\n        index++;\n        const alternate = gobbleExpression();\n\n        if (!alternate) {\n          throwError(\"Expected expression\", index);\n        }\n\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"ConditionalExpression\",\n          test,\n          consequent,\n          alternate,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      throwError(\"Expected :\", index);\n    }\n\n    return test;\n  }\n\n  /**\n   * Search for the operation portion of the string (e.g. `+`, `===`)\n   * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n   * and move down from 3 to 2 to 1 character until a matching binary operation is found\n   * then, return that binary operation\n   */\n  function gobbleBinaryOp() {\n    gobbleSpaces();\n\n    let toCheck = expr.substr(index, maxBinopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(binaryOps, toCheck)) {\n        index += tcLen;\n        return toCheck;\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * This function is responsible for gobbling an individual expression,\n   * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n   */\n  function gobbleBinaryExpression() {\n    let node;\n    let prec;\n    let i;\n\n    // First, try to get the leftmost thing\n    // Then, check to see if there's a binary operator operating on that leftmost thing\n    let left = gobbleToken();\n    let biop = gobbleBinaryOp();\n\n    // If there wasn't a binary operator, just return the leftmost node\n    if (!biop) {\n      return left;\n    }\n\n    // Otherwise, we need to start a stack to properly place the binary operations in their\n    // precedence structure\n    let biopInfo = { value: biop, prec: binaryPrecedence(biop) };\n    let right = gobbleToken();\n\n    if (!right) {\n      throwError(`Expected expression after ${biop}`, index);\n    }\n\n    const stack = [left, biopInfo, right];\n\n    // Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n    biop = gobbleBinaryOp();\n    while (biop) {\n      prec = binaryPrecedence(biop);\n\n      if (prec === 0) {\n        break;\n      }\n\n      biopInfo = { value: biop, prec };\n\n      // Reduce: make a binary expression from the three topmost entries.\n      while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {\n        right = stack.pop();\n        biop = stack.pop().value;\n        left = stack.pop();\n        node = createBinaryExpression(\n          biop,\n          left,\n          right,\n          createSpanningLocation(left.location, right.location),\n        );\n        stack.push(node);\n      }\n\n      node = gobbleToken();\n\n      if (!node) {\n        throwError(`Expected expression after ${biop}`, index);\n      }\n\n      stack.push(biopInfo, node);\n      biop = gobbleBinaryOp();\n    }\n\n    i = stack.length - 1;\n    node = stack[i];\n\n    while (i > 1) {\n      node = createBinaryExpression(\n        stack[i - 1].value,\n        stack[i - 2],\n        node,\n        createSpanningLocation(stack[i - 2].location, node.location),\n      );\n      i -= 2;\n    }\n\n    return node;\n  }\n\n  /**\n   * An individual part of a binary expression:\n   * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n   */\n  function gobbleToken(): any {\n    gobbleSpaces();\n    const ch = exprICode(index);\n    const startCharIndex = index;\n\n    if (isDecimalDigit(ch) || ch === PERIOD_CODE) {\n      // Char code 46 is a dot `.` which can start off a numeric literal\n      return gobbleNumericLiteral();\n    }\n\n    if (ch === SQUOTE_CODE || ch === DQUOTE_CODE) {\n      // Single or double quotes\n      return gobbleStringLiteral();\n    }\n\n    if (isIdentifierStart(ch) || ch === OPAREN_CODE) {\n      // Open parenthesis\n      // `foo`, `bar.baz`\n      return gobbleVariable();\n    }\n\n    if (ch === OBRACK_CODE) {\n      return gobbleArray();\n    }\n\n    if (isModelRefStart(ch, exprICode(index + 1))) {\n      return gobbleModelRef();\n    }\n\n    // not a double bracket: {{}} but if its a single {}\n    if (ch === OCURL_CODE) {\n      return gobbleObjects();\n    }\n\n    let toCheck = expr.substr(index, maxUnopLen);\n    let tcLen = toCheck.length;\n\n    while (tcLen > 0) {\n      if (Object.prototype.hasOwnProperty.call(unaryOps, toCheck)) {\n        index += tcLen;\n        return {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"UnaryExpression\",\n          operator: toCheck,\n          argument: gobbleToken(),\n          prefix: true,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      toCheck = toCheck.substr(0, --tcLen);\n    }\n\n    return false;\n  }\n\n  /**\n   * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n   * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n   */\n  function gobbleNumericLiteral() {\n    let num = \"\";\n    const startCharIndex = index;\n\n    while (isDecimalDigit(exprICode(index))) {\n      num += exprI(index++);\n    }\n\n    if (exprICode(index) === PERIOD_CODE) {\n      // Can start with a decimal marker\n      num += exprI(index++);\n\n      while (isDecimalDigit(exprICode(index))) {\n        num += exprI(index++);\n      }\n    }\n\n    let ch = exprI(index);\n    if (ch === \"e\" || ch === \"E\") {\n      // Exponent marker\n      num += exprI(index++);\n      ch = exprI(index);\n\n      if (ch === \"+\" || ch === \"-\") {\n        // Exponent sign\n        num += exprI(index++);\n      }\n\n      while (isDecimalDigit(exprICode(index))) {\n        // Exponent itself\n        num += exprI(index++);\n      }\n\n      if (!isDecimalDigit(exprICode(index - 1))) {\n        throwError(`Expected exponent (${num}${exprI(index)})`, index);\n      }\n    }\n\n    const chCode = exprICode(index);\n    // Check to make sure this isn't a variable name that start with a number (123abc)\n    if (isIdentifierStart(chCode)) {\n      throwError(\n        `Variable names cannot start with a number (${num}${exprI(index)})`,\n        index,\n      );\n    } else if (chCode === PERIOD_CODE) {\n      throwError(\"Unexpected period\", index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: parseFloat(num),\n      raw: num,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Parses a string literal, staring with single or double quotes with basic support for escape codes\n   * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n   */\n  function gobbleStringLiteral() {\n    const quote = exprI(index++);\n    let str = \"\";\n    let closed = false;\n    const startCharIndex = index;\n\n    while (index < length) {\n      let ch = exprI(index++);\n\n      if (ch === quote) {\n        closed = true;\n        break;\n      }\n\n      if (ch !== \"\\\\\") {\n        str += ch;\n        continue;\n      }\n\n      // Check for all of the common escape codes\n      ch = exprI(index++);\n\n      switch (ch) {\n        case \"n\":\n          str += \"\\n\";\n          break;\n        case \"r\":\n          str += \"\\r\";\n          break;\n        case \"t\":\n          str += \"\\t\";\n          break;\n        case \"b\":\n          str += \"\\b\";\n          break;\n        case \"f\":\n          str += \"\\f\";\n          break;\n        case \"v\":\n          str += \"\\u000B\";\n          break;\n        default:\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed quote after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Literal\",\n      value: str,\n      raw: `${quote}${str}${quote}`,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Model refs are bindings wrapped in 2 sets of double curlys\n   * e.g. {{foo.bar.ref}}\n   */\n  function gobbleModelRef() {\n    let str = \"\";\n    let closed = false;\n    let openBraceCount = 1;\n    const startCharIndex = index;\n\n    index += 2; // Skip the {{\n    while (index < length) {\n      const ch = exprI(index++);\n\n      if (ch === \"}\" && exprICode(index) === CCURL_CODE) {\n        index++;\n        openBraceCount--;\n\n        if (openBraceCount === 0) {\n          closed = true;\n          break;\n        }\n\n        str += \"}}\";\n      } else if (ch === \"{\" && exprICode(index) === OCURL_CODE) {\n        openBraceCount++;\n        str += \"{{\";\n        index++;\n      } else {\n        str += ch;\n      }\n    }\n\n    if (!closed) {\n      throwError(`Unclosed brace after \"${str}\"`, index);\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ModelRef\",\n      ref: str,\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  /**\n   * Gobbles only identifiers\n   * e.g.: `foo`, `_value`, `$x1`\n   * Also, this function checks if that identifier is a literal:\n   * (e.g. `true`, `false`, `null`) or `this`\n   */\n  function gobbleIdentifier() {\n    const start = index;\n    let ch = exprICode(start);\n\n    if (isIdentifierStart(ch)) {\n      index++;\n    } else {\n      throwError(`Unexpected ${exprI(index)}`, index);\n    }\n\n    while (index < length) {\n      ch = exprICode(index);\n      if (isIdentifierPart(ch)) {\n        index++;\n      } else {\n        break;\n      }\n    }\n\n    const identifier = expr.slice(start, index);\n\n    if (Object.prototype.hasOwnProperty.call(literals, identifier)) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"Literal\",\n        value: (literals as any)[identifier],\n        raw: identifier,\n        location: getLocation(start),\n      };\n    }\n\n    if (identifier === thisStr) {\n      return {\n        __id: ExpNodeOpaqueIdentifier,\n        type: \"ThisExpression\",\n        location: getLocation(start),\n      };\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Identifier\",\n      name: identifier,\n      location: getLocation(start),\n    };\n  }\n\n  /**\n   * Gobbles a list of arguments within the context of a function call\n   * or array literal. This function also assumes that the opening character\n   * `(` or `[` has already been gobbled, and gobbles expressions and commas\n   * until the terminator character `)` or `]` is encountered.\n   * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n   */\n  function gobbleArguments(termination: number) {\n    const args = [];\n    let charIndex;\n    let node;\n\n    while (index < length) {\n      gobbleSpaces();\n      charIndex = exprICode(index);\n\n      if (charIndex === termination) {\n        // Done parsing\n        index++;\n        break;\n      }\n\n      if (charIndex === COMMA_CODE) {\n        // Between expressions\n        index++;\n        continue;\n      }\n\n      node = gobbleExpression();\n\n      if (!node || node.type === \"Compound\") {\n        throwError(\"Expected comma\", index);\n      }\n\n      args.push(node);\n    }\n\n    if (strictMode && charIndex !== termination) {\n      throwError(`Expected ${String.fromCharCode(termination)}`, index);\n    }\n\n    return args;\n  }\n\n  /**\n   * Gobble a non-literal variable name. This variable name may include properties\n   * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n   * It also gobbles function calls:\n   * e.g. `Math.acos(obj.angle)`\n   */\n  function gobbleVariable(): ExpressionNode {\n    let charIndex = exprICode(index);\n    let node: any =\n      charIndex === OPAREN_CODE ? gobbleGroup() : gobbleIdentifier();\n    const startCharIndex = index;\n    gobbleSpaces();\n    charIndex = exprICode(index);\n\n    while (\n      charIndex === PERIOD_CODE ||\n      charIndex === OBRACK_CODE ||\n      charIndex === OPAREN_CODE\n    ) {\n      index++;\n\n      if (charIndex === PERIOD_CODE) {\n        gobbleSpaces();\n\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: false,\n          object: node,\n          property: gobbleIdentifier(),\n          location: getLocation(startCharIndex),\n        };\n      } else if (charIndex === OBRACK_CODE) {\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"MemberExpression\",\n          computed: true,\n          object: node,\n          property: gobbleExpression(),\n          location: getLocation(startCharIndex),\n        };\n\n        gobbleSpaces();\n        charIndex = exprICode(index);\n\n        if (charIndex !== CBRACK_CODE) {\n          throwError(\"Unclosed [\", index);\n        }\n\n        index++;\n      } else if (charIndex === OPAREN_CODE) {\n        // A function call is being made; gobble all the arguments\n        node = {\n          __id: ExpNodeOpaqueIdentifier,\n          type: \"CallExpression\",\n          args: gobbleArguments(CPAREN_CODE),\n          callTarget: node,\n          location: getLocation(startCharIndex),\n        };\n      }\n\n      gobbleSpaces();\n      charIndex = exprICode(index);\n    }\n\n    return node;\n  }\n\n  /**\n   * Responsible for parsing a group of things within parentheses `()`\n   * This function assumes that it needs to gobble the opening parenthesis\n   * and then tries to gobble everything within that parenthesis, assuming\n   * that the next thing it should see is the close parenthesis. If not,\n   * then the expression probably doesn't have a `)`\n   */\n  function gobbleGroup() {\n    index++;\n    const node = gobbleExpression();\n    gobbleSpaces();\n\n    if (exprICode(index) === CPAREN_CODE) {\n      index++;\n      return node;\n    }\n\n    throwError(\"Unclosed (\", index);\n  }\n\n  /**\n   * Responsible for parsing Array literals `[1, 2, 3]`\n   * This function assumes that it needs to gobble the opening bracket\n   * and then tries to gobble the expressions as arguments.\n   */\n  function gobbleArray() {\n    const startCharIndex = index;\n    index++;\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"ArrayExpression\",\n      elements: gobbleArguments(CBRACK_CODE),\n      location: getLocation(startCharIndex),\n    };\n  }\n\n  const nodes = [];\n\n  try {\n    while (index < length) {\n      const chIndex = exprICode(index);\n\n      // Expressions can be separated by semicolons, commas, or just inferred without any\n      // separators\n      if (chIndex === SEMCOL_CODE || chIndex === COMMA_CODE) {\n        index++; // ignore separators\n        continue;\n      }\n\n      const node = gobbleExpression();\n\n      // Try to gobble each expression individually\n      if (node) {\n        nodes.push(node);\n        // If we weren't able to find a binary expression and are out of room, then\n        // the expression passed in probably has too much\n      } else if (strictMode && index < length) {\n        throwError(`Unexpected \"${exprI(index)}\"`, index);\n      }\n    }\n\n    // If there's only one expression just try returning the expression\n    if (nodes.length === 1) {\n      return nodes[0];\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n    };\n  } catch (e) {\n    if (strictMode || !(e instanceof Error)) {\n      throw e;\n    }\n\n    return {\n      __id: ExpNodeOpaqueIdentifier,\n      type: \"Compound\",\n      body: nodes,\n      location: getLocation(0),\n      error: e,\n    };\n  }\n}\n","/**\n * Promise detection that handles various Promise implementations\n * and reduces false positives from objects with coincidental 'then' methods\n */\nexport function isPromiselike(value: any): value is Promise<any> {\n  return (\n    value != null &&\n    typeof value === \"object\" &&\n    typeof value.then === \"function\" &&\n    // Additional safeguards against false positives\n    (value instanceof Promise ||\n      // Check for standard Promise constructor name\n      value.constructor?.name === \"Promise\" ||\n      // Verify it has other Promise-like methods to reduce false positives\n      (typeof value.catch === \"function\" &&\n        typeof value.finally === \"function\"))\n  );\n}\n\n/** Unique private symbol to indicate async functions wrapped in Player's await function */\nexport const AwaitableSymbol: unique symbol = Symbol(\"Awaitable\");\n\n/**\n * Wrapper for Promises that are generated from the `await` function with a unique symbol so we can\n * determine when a promise should be awaited by us (as its returned by await) or a promise thats\n * generated from any async function\n */\nexport interface Awaitable<T> extends Promise<T> {\n  /** Prevent unwrapped then from being exposed from underlying promise */\n  then: never;\n  /** Internalally awaitable wrapper around underlying then function */\n  awaitableThen<TResult1 = T, TResult2 = never>(\n    onfulfilled?:\n      | ((value: T) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?:\n      | ((reason: any) => TResult2 | PromiseLike<TResult2>)\n      | undefined\n      | null,\n  ): Promise<TResult1 | TResult2>;\n  /** Symbol to identify this as something returned by await */\n  [AwaitableSymbol]: symbol;\n}\n\n/** Typeguard for AwaitableResult */\nexport function isAwaitable(val: unknown): val is Awaitable<any> {\n  return (\n    isPromiselike(val) && (val as Awaitable<any>)[AwaitableSymbol] !== undefined\n  );\n}\n\n/**\n * Wraps Promise.all in AwaitableResult wrapper to allow internal functions to await internally produced promises\n */\nexport function collateAwaitable<T extends readonly unknown[] | []>(\n  promises: T,\n): Awaitable<any> {\n  const result = Promise.all(promises) as Promise<any>;\n  return makeAwaitable(result);\n}\n\n/**\n * Add AwaitableSymbol to base promise and promise returned by then() function\n */\nexport function makeAwaitable(promise: Promise<any>): Awaitable<any> {\n  (promise as Awaitable<any>)[AwaitableSymbol] = AwaitableSymbol;\n  (promise as any).awaitableThen = (arg: any) => {\n    return makeAwaitable(promise.then(arg));\n  };\n  return promise as Awaitable<any>;\n}\n","import { isExpressionNode } from \"./types\";\nimport type {\n  ErrorWithLocation,\n  ExpressionHandler,\n  ExpressionNode,\n  ExpressionObjectType,\n  ExpressionType,\n  NodeLocation,\n  NodePosition,\n} from \"./types\";\n\n/** Generates a function by removing the first context argument */\nexport function withoutContext<T extends unknown[], Return>(\n  fn: (...args: T) => Return,\n): ExpressionHandler<T, Return> {\n  return (_context, ...args) => fn(...args);\n}\n\n/** Checks if the location includes the target position  */\nfunction isInRange(position: NodePosition, location: NodeLocation) {\n  return (\n    position.character >= location.start.character &&\n    position.character <= location.end.character\n  );\n}\n\n/** Get the node in the expression that's closest to the desired position */\nexport function findClosestNodeAtPosition(\n  node: ExpressionNode,\n  position: NodePosition,\n): ExpressionNode | undefined {\n  // This is just mapping recursively over nodes in the tree\n\n  switch (node.type) {\n    case \"Modification\":\n    case \"Assignment\":\n    case \"LogicalExpression\":\n    case \"BinaryExpression\": {\n      const check =\n        findClosestNodeAtPosition(node.left, position) ??\n        findClosestNodeAtPosition(node.right, position);\n      if (check) {\n        return check;\n      }\n\n      break;\n    }\n\n    case \"UnaryExpression\": {\n      const checkArg = findClosestNodeAtPosition(node.argument, position);\n      if (checkArg) {\n        return checkArg;\n      }\n\n      break;\n    }\n\n    case \"MemberExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.object, position) ??\n        findClosestNodeAtPosition(node.property, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ConditionalExpression\": {\n      const checkObject =\n        findClosestNodeAtPosition(node.test, position) ??\n        findClosestNodeAtPosition(node.consequent, position) ??\n        findClosestNodeAtPosition(node.alternate, position);\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"ArrayExpression\":\n    case \"Compound\": {\n      const elements =\n        node.type === \"ArrayExpression\" ? node.elements : node.body;\n\n      const anyElements = elements.find((e) =>\n        findClosestNodeAtPosition(e, position),\n      );\n\n      if (anyElements) {\n        return anyElements;\n      }\n\n      break;\n    }\n\n    case \"Object\": {\n      const checkObject = node.attributes.reduce<ExpressionNode | undefined>(\n        (found, next) => {\n          return (\n            found ??\n            findClosestNodeAtPosition(next.key, position) ??\n            findClosestNodeAtPosition(next.value, position)\n          );\n        },\n        undefined,\n      );\n\n      if (checkObject) {\n        return checkObject;\n      }\n\n      break;\n    }\n\n    case \"CallExpression\": {\n      const anyArgs =\n        node.args.find((arg) => {\n          return findClosestNodeAtPosition(arg, position);\n        }) ?? findClosestNodeAtPosition(node.callTarget, position);\n\n      if (anyArgs) {\n        return anyArgs;\n      }\n\n      break;\n    }\n  }\n\n  // Lastly check for yourself\n  if (node.location && isInRange(position, node.location)) {\n    return node;\n  }\n}\n\n/** Checks if the expression is a simple type */\nexport function isObjectExpression(\n  expr: ExpressionType,\n): expr is ExpressionObjectType {\n  if (isExpressionNode(expr)) {\n    return false;\n  }\n\n  return (\n    typeof expr === \"object\" &&\n    expr !== null &&\n    !Array.isArray(expr) &&\n    \"value\" in expr\n  );\n}\n\n/**\n * Type guard for ErrorWithLocation\n */\nexport function isErrorWithLocation(error: Error): error is ErrorWithLocation {\n  return (\n    (error as ErrorWithLocation).index !== undefined &&\n    (error as ErrorWithLocation).description !== undefined\n  );\n}\n","import { SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport { parseExpression } from \"./parser\";\nimport * as DEFAULT_EXPRESSION_HANDLERS from \"./evaluator-functions\";\nimport { collateAwaitable, isAwaitable, isPromiselike } from \"./async\";\nimport { isExpressionNode } from \"./types\";\nimport { isObjectExpression } from \"./utils\";\nimport type {\n  ExpressionNode,\n  BinaryOperator,\n  UnaryOperator,\n  ExpressionType,\n  ExpressionContext,\n  ExpressionHandler,\n} from \"./types\";\n\n/** a && b -- but handles short cutting if the first value is false */\nconst andandOperator: BinaryOperator = (ctx, a, b, async) => {\n  return LogicalOperators.and(ctx, a, b, async);\n};\nandandOperator.resolveParams = false;\n\n/** a || b -- but with short cutting if first value is true */\nconst ororOperator: BinaryOperator = (ctx, a, b, async) => {\n  return LogicalOperators.or(ctx, a, b, async);\n};\nororOperator.resolveParams = false;\n\nconst DEFAULT_BINARY_OPERATORS: Record<string, BinaryOperator> = {\n  // TODO: A lot of these functions used to do type coercion. Not sure if we want to keep that behavior or not.\n  \"+\": (a: any, b: any) => a + b,\n  \"-\": (a: any, b: any) => a - b,\n  \"*\": (a: any, b: any) => a * b,\n  \"/\": (a: any, b: any) => a / b,\n  \"%\": (a: any, b: any) => a % b,\n\n  // Promise-aware comparison operators\n  // eslint-disable-next-line\n  \"==\": makePromiseAwareBinaryOp((a: any, b: any) => a == b),\n  // eslint-disable-next-line\n  \"!=\": makePromiseAwareBinaryOp((a: any, b: any) => a != b),\n  \">\": makePromiseAwareBinaryOp((a: any, b: any) => a > b),\n  \">=\": makePromiseAwareBinaryOp((a: any, b: any) => a >= b),\n  \"<\": makePromiseAwareBinaryOp((a: any, b: any) => a < b),\n  \"<=\": makePromiseAwareBinaryOp((a: any, b: any) => a <= b),\n  \"!==\": makePromiseAwareBinaryOp((a: any, b: any) => a !== b),\n  \"===\": makePromiseAwareBinaryOp((a: any, b: any) => a === b),\n\n  \"&&\": andandOperator,\n  \"||\": ororOperator,\n\n  // eslint-disable-next-line\n  \"|\": (a: any, b: any) => a | b,\n\n  // eslint-disable-next-line\n  \"&\": (a: any, b: any) => a & b,\n  \"+=\": (a: any, b: any) => a + b,\n  \"-=\": (a: any, b: any) => a - b,\n\n  // eslint-disable-next-line\n  \"&=\": (a: any, b: any) => a & b,\n\n  // eslint-disable-next-line\n  \"|=\": (a: any, b: any) => a | b,\n};\n\nconst DEFAULT_UNARY_OPERATORS: Record<string, UnaryOperator> = {\n  \"-\": (a: any) => -a,\n  \"+\": (a: any) => Number(a),\n  \"!\": makePromiseAwareUnaryOp((a: any) => !a),\n};\n\n/**\n * Higher-order function that makes any binary operation Promise-aware\n */\nfunction makePromiseAwareBinaryOp<T>(\n  operation: (a: any, b: any) => T,\n): (a: any, b: any, async: boolean) => T | Promise<T> {\n  return (a: any, b: any, async: boolean) => {\n    //async handler\n    if (async && (isAwaitable(a) || isAwaitable(b))) {\n      return collateAwaitable([\n        Promise.resolve(a),\n        Promise.resolve(b),\n      ]).awaitableThen(([resolvedA, resolvedB]) =>\n        operation(resolvedA, resolvedB),\n      );\n    }\n    //sync handler\n    return operation(a, b);\n  };\n}\n\n/**\n * Higher-order function that makes any unary operation Promise-aware\n */\nfunction makePromiseAwareUnaryOp<T>(\n  operation: (a: any) => T,\n): (a: any, async: boolean) => T | Promise<T> {\n  return (a: any, async: boolean) => {\n    //async handler\n    if (async && isAwaitable(a)) {\n      return a.awaitableThen((resolved: any) => operation(resolved));\n    }\n    //sync handler\n    return operation(a);\n  };\n}\n\n/**\n * Utility for handling conditional branching with Promises\n */\nfunction handleConditionalBranching(\n  testValue: any,\n  getTrueBranch: () => any,\n  getFalseBranch: () => any,\n  resolveNode: (node: any) => any,\n  async: boolean,\n): any {\n  //async handler\n  if (async && isAwaitable(testValue)) {\n    return testValue.awaitableThen((resolved: boolean) => {\n      const branch = resolved ? getTrueBranch() : getFalseBranch();\n      const branchResult = resolveNode(branch);\n      return isAwaitable(branchResult)\n        ? Promise.resolve(branchResult)\n        : branchResult;\n    });\n  }\n\n  // sync handler\n  const branch = testValue ? getTrueBranch() : getFalseBranch();\n  return resolveNode(branch);\n}\n\n/**\n * Utility for handling collections (arrays/objects) with potential Promises\n */\nconst PromiseCollectionHandler = {\n  /**\n   * Handle array with potential Promise elements\n   */\n  handleArray<T>(items: T[], async: boolean): T[] | Promise<T[]> {\n    if (!async) {\n      return items;\n    }\n    const hasPromises = items.some((item) => isAwaitable(item));\n    return hasPromises ? collateAwaitable(items) : items;\n  },\n\n  /**\n   * Handle object with potential Promise keys/values\n   */\n  handleObject(\n    attributes: Array<{ key: any; value: any }>,\n    resolveNode: (node: any) => any,\n    async: boolean,\n  ): Record<string, any> | Promise<Record<string, any>> {\n    const resolvedAttributes: Record<string, any> = {};\n    const promises: Promise<void>[] = [];\n    let hasPromises = false;\n\n    attributes.forEach((attr) => {\n      const key = resolveNode(attr.key);\n      const value = resolveNode(attr.value);\n\n      //async handler\n      if (async && (isAwaitable(key) || isAwaitable(value))) {\n        hasPromises = true;\n        const keyPromise = Promise.resolve(key);\n        const valuePromise = Promise.resolve(value);\n\n        promises.push(\n          collateAwaitable([keyPromise, valuePromise]).awaitableThen(\n            ([resolvedKey, resolvedValue]) => {\n              resolvedAttributes[resolvedKey] = resolvedValue;\n            },\n          ),\n        );\n      } else {\n        resolvedAttributes[key] = value;\n      }\n    });\n\n    return hasPromises\n      ? collateAwaitable(promises).awaitableThen(() => resolvedAttributes)\n      : resolvedAttributes;\n  },\n};\n\n/**\n * Smart logical operators that handle short-circuiting with Promises\n */\nconst LogicalOperators = {\n  and: (ctx: any, leftNode: any, rightNode: any, async: boolean) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (async && isAwaitable(leftResult)) {\n      return leftResult.awaitableThen((awaitedLeft: any) => {\n        if (!awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isAwaitable(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult && ctx.evaluate(rightNode);\n  },\n\n  or: (ctx: any, leftNode: any, rightNode: any, async: boolean) => {\n    const leftResult = ctx.evaluate(leftNode);\n\n    if (async && isAwaitable(leftResult)) {\n      return leftResult.awaitableThen((awaitedLeft: any) => {\n        if (awaitedLeft) return awaitedLeft; // Short circuit\n        const rightResult = ctx.evaluate(rightNode);\n        return isAwaitable(rightResult)\n          ? rightResult\n          : Promise.resolve(rightResult);\n      });\n    }\n\n    // Sync short-circuiting\n    return leftResult || ctx.evaluate(rightNode);\n  },\n};\n\nexport interface HookOptions extends ExpressionContext {\n  /** Given an expression node  */\n  resolveNode: (node: ExpressionNode) => any;\n\n  /** Enabling this flag skips calling the onError hook, and just throws errors back to the caller.\n   * The caller is responsible for handling the error.\n   */\n  throwErrors?: boolean;\n\n  /** Whether expressions should be parsed strictly or not */\n  strict?: boolean;\n\n  /** Whether the expression should be evaluated asynchronously */\n  async?: boolean;\n}\n\nexport type ExpressionEvaluatorOptions = Omit<\n  HookOptions,\n  \"resolveNode\" | \"evaluate\"\n>;\n\nexport type ExpressionEvaluatorFunction = (\n  exp: ExpressionType,\n  options?: ExpressionEvaluatorOptions,\n) => any;\n\n/**\n * The expression evaluator is responsible for parsing and executing anything in the custom expression language\n * */\nexport class ExpressionEvaluator {\n  private readonly vars: Record<string, any> = {};\n  public readonly hooks: {\n    resolve: SyncWaterfallHook<[any, ExpressionNode, HookOptions]>;\n    resolveOptions: SyncWaterfallHook<[HookOptions]>;\n    beforeEvaluate: SyncWaterfallHook<[ExpressionType, HookOptions]>;\n    onError: SyncBailHook<[Error], true>;\n  } = {\n    /** Resolve an AST node for an expression to a value */\n    resolve: new SyncWaterfallHook<[any, ExpressionNode, HookOptions]>(),\n    /** Gets the options that will be passed in calls to the resolve hook */\n    resolveOptions: new SyncWaterfallHook<[HookOptions]>(),\n    /** Allows users to change the expression to be evaluated before processing */\n    beforeEvaluate: new SyncWaterfallHook<[ExpressionType, HookOptions]>(),\n    /**\n     * An optional means of handling an error in the expression execution\n     * Return true if handled, to stop propagation of the error\n     */\n    onError: new SyncBailHook<[Error], true>(),\n  };\n\n  private readonly expressionsCache: Map<string, ExpressionNode> = new Map();\n\n  private readonly defaultHookOptions: HookOptions;\n\n  public readonly operators: {\n    binary: Map<string, BinaryOperator>;\n    unary: Map<string, UnaryOperator>;\n    expressions: Map<string, ExpressionHandler<any, any>>;\n  } = {\n    binary: new Map<string, BinaryOperator>(\n      Object.entries(DEFAULT_BINARY_OPERATORS),\n    ),\n    unary: new Map<string, UnaryOperator>(\n      Object.entries(DEFAULT_UNARY_OPERATORS),\n    ),\n    expressions: new Map<string, ExpressionHandler<any, any>>([\n      ...Object.entries(DEFAULT_EXPRESSION_HANDLERS),\n      [\"await\", DEFAULT_EXPRESSION_HANDLERS.waitFor],\n    ]),\n  };\n\n  public reset(): void {\n    this.expressionsCache.clear();\n  }\n\n  constructor(defaultOptions: ExpressionEvaluatorOptions) {\n    this.defaultHookOptions = {\n      ...defaultOptions,\n      evaluate: (expr) => this.evaluate(expr, this.defaultHookOptions),\n      resolveNode: (node: ExpressionNode) =>\n        this._execAST(node, this.defaultHookOptions),\n    };\n\n    this.hooks.resolve.tap(\"ExpressionEvaluator\", (result, node, options) => {\n      return this._resolveNode(result, node, options);\n    });\n    this.evaluate = this.evaluate.bind(this);\n  }\n\n  public evaluate(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): any {\n    const resolvedOpts = this.hooks.resolveOptions.call({\n      ...this.defaultHookOptions,\n      ...options,\n      resolveNode: (node: ExpressionNode) => this._execAST(node, resolvedOpts),\n    });\n\n    let expression = this.hooks.beforeEvaluate.call(expr, resolvedOpts) ?? expr;\n\n    // Unwrap any returned expression type\n    // Since this could also be an object type, we need to recurse through it until we find the end\n    while (isObjectExpression(expression)) {\n      expression = expression.value;\n    }\n\n    // Check for literals\n    if (\n      typeof expression === \"number\" ||\n      typeof expression === \"boolean\" ||\n      expression === undefined ||\n      expression === null\n    ) {\n      return expression;\n    }\n\n    // Skip doing anything with objects that are _actually_ just parsed expression nodes\n    if (isExpressionNode(expression)) {\n      return this._execAST(expression, resolvedOpts);\n    }\n\n    if (Array.isArray(expression)) {\n      return expression.reduce(\n        (_nothing, exp) => this.evaluate(exp, options),\n        null,\n      );\n    }\n\n    return this._execString(String(expression), resolvedOpts);\n  }\n\n  /**\n   * Evaluate functions in an async context\n   * @experimental These Player APIs are in active development and may change. Use with caution\n   */\n  public evaluateAsync(\n    expr: ExpressionType,\n    options?: ExpressionEvaluatorOptions,\n  ): Promise<any> {\n    // handle async expression block\n    if (Array.isArray(expr)) {\n      return collateAwaitable(\n        expr.map(async (exp) =>\n          this.evaluate(exp, { ...options, async: true } as any),\n        ),\n      ).awaitableThen((values) => {\n        return values.pop();\n      });\n    } else {\n      return this.evaluate(expr, { ...options, async: true } as any);\n    }\n  }\n\n  public addExpressionFunction<T extends readonly unknown[], R>(\n    name: string,\n    handler: ExpressionHandler<T, R>,\n  ): void {\n    this.operators.expressions.set(name, handler);\n  }\n\n  public addBinaryOperator(operator: string, handler: BinaryOperator): void {\n    this.operators.binary.set(operator, handler);\n  }\n\n  public addUnaryOperator(operator: string, handler: UnaryOperator): void {\n    this.operators.unary.set(operator, handler);\n  }\n\n  public setExpressionVariable(name: string, value: unknown): void {\n    this.vars[name] = value;\n  }\n\n  public getExpressionVariable(name: string): unknown {\n    return this.vars[name];\n  }\n\n  private _execAST(node: ExpressionNode, options: HookOptions): any {\n    return this.hooks.resolve.call(undefined, node, options);\n  }\n\n  private _execString(exp: string, options: HookOptions) {\n    if (exp === \"\") {\n      return exp;\n    }\n\n    const matches = exp.match(/^@\\[(.*)\\]@$/);\n    let matchedExp = exp;\n    if (matches) {\n      const [, matched] = Array.from(matches); // In case the expression was surrounded by @[ ]@\n      if (matched) {\n        matchedExp = matched;\n      }\n    }\n\n    let storedAST: ExpressionNode;\n\n    try {\n      storedAST =\n        this.expressionsCache.get(matchedExp) ??\n        parseExpression(matchedExp, { strict: options.strict });\n      this.expressionsCache.set(matchedExp, storedAST);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error parsing expression: ${exp}`, e);\n      }\n\n      return;\n    }\n\n    try {\n      return this._execAST(storedAST, options);\n    } catch (e: any) {\n      if (options.throwErrors || !this.hooks.onError.call(e)) {\n        // Only throw the error if it's not handled by the hook, or throwErrors is true\n        throw new NestedError(`Error evaluating expression: ${exp}`, e);\n      }\n    }\n  }\n\n  private _resolveNode(\n    _currentValue: any,\n    node: ExpressionNode,\n    options: HookOptions,\n  ): unknown {\n    const { resolveNode, model } = options;\n    const isAsync = options.async ?? false;\n\n    const expressionContext: ExpressionContext = {\n      ...options,\n      evaluate: (expr) => this.evaluate(expr, options),\n    };\n\n    if (node.type === \"Literal\") {\n      return node.value;\n    }\n\n    if (node.type === \"Identifier\") {\n      return this.vars[node.name];\n    }\n\n    if (node.type === \"Compound\" || node.type === \"ThisExpression\") {\n      throw new Error(`Expression type: ${node.type} is not supported`);\n    }\n\n    if (node.type === \"BinaryExpression\" || node.type === \"LogicalExpression\") {\n      const operator = this.operators.binary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.left, node.right, isAsync);\n          }\n\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          // Handle promises in binary operations\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            return collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) =>\n                operator(expressionContext, leftVal, rightVal, isAsync),\n            );\n          }\n\n          return operator(expressionContext, left, right, isAsync);\n        }\n\n        const left = resolveNode(node.left);\n        const right = resolveNode(node.right);\n\n        if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n          return collateAwaitable([left, right]).awaitableThen(\n            ([leftVal, rightVal]) => operator(leftVal, rightVal, isAsync),\n          );\n        }\n\n        return operator(left, right, isAsync);\n      }\n\n      return;\n    }\n\n    if (node.type === \"UnaryExpression\") {\n      const operator = this.operators.unary.get(node.operator);\n\n      if (operator) {\n        if (\"resolveParams\" in operator) {\n          if (operator.resolveParams === false) {\n            return operator(expressionContext, node.argument, isAsync);\n          }\n\n          const arg = resolveNode(node.argument);\n\n          if (options.async && isAwaitable(arg)) {\n            return arg.awaitableThen((argVal) =>\n              operator(expressionContext, argVal, isAsync),\n            );\n          }\n\n          return operator(expressionContext, arg, isAsync);\n        }\n\n        const arg = resolveNode(node.argument);\n\n        if (options.async && isAwaitable(arg)) {\n          return arg.awaitableThen((argVal) => operator(argVal, isAsync));\n        }\n\n        return operator(arg, isAsync);\n      }\n\n      return;\n    }\n\n    if (node.type === \"Object\") {\n      return PromiseCollectionHandler.handleObject(\n        node.attributes,\n        resolveNode,\n        options.async || false,\n      );\n    }\n\n    if (node.type === \"CallExpression\") {\n      const expressionName = node.callTarget.name;\n\n      const operator = this.operators.expressions.get(expressionName);\n\n      if (!operator) {\n        throw new Error(`Unknown expression function: ${expressionName}`);\n      }\n\n      if (operator.name === \"waitFor\" && !options.async) {\n        throw new Error(\"Usage of await outside of async context\");\n      }\n\n      if (\"resolveParams\" in operator && operator.resolveParams === false) {\n        return operator(expressionContext, ...node.args);\n      }\n\n      const args = node.args.map((n) => resolveNode(n));\n\n      // Check if any arguments are promises\n      if (options.async) {\n        const hasPromises = args.some(isAwaitable);\n\n        if (hasPromises) {\n          return collateAwaitable(args).awaitableThen((resolvedArgs) =>\n            operator(expressionContext, ...resolvedArgs),\n          );\n        }\n      }\n\n      return operator(expressionContext, ...args);\n    }\n\n    if (node.type === \"ModelRef\") {\n      return model.get(node.ref, { context: { model: options.model } });\n    }\n\n    if (node.type === \"MemberExpression\") {\n      const obj = resolveNode(node.object);\n      const prop = resolveNode(node.property);\n\n      if (options.async && (isAwaitable(obj) || isAwaitable(prop))) {\n        return collateAwaitable([obj, prop]).awaitableThen(\n          ([objVal, propVal]) => objVal[propVal],\n        );\n      }\n\n      return obj[prop];\n    }\n\n    if (node.type === \"Assignment\") {\n      if (node.left.type === \"ModelRef\") {\n        const value = resolveNode(node.right);\n\n        if (isPromiselike(value)) {\n          if (options.async && isAwaitable(value)) {\n            return value.awaitableThen((resolvedValue) => {\n              model.set([[(node.left as any).ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          } else {\n            options.logger?.warn(\n              \"Unawaited promise written to mode, this behavior is undefined and may change in future releases\",\n            );\n          }\n        }\n\n        model.set([[(node.left as any).ref, value]]);\n        return value;\n      }\n\n      if (node.left.type === \"Identifier\") {\n        const value = resolveNode(node.right);\n\n        if (options.async && isAwaitable(value)) {\n          return value.awaitableThen((resolvedValue) => {\n            this.vars[(node.left as any).name] = resolvedValue;\n            return resolvedValue;\n          });\n        }\n\n        this.vars[(node.left as any).name] = value;\n        return value;\n      }\n\n      return;\n    }\n\n    if (node.type === \"ConditionalExpression\") {\n      const testResult = resolveNode(node.test);\n\n      return handleConditionalBranching(\n        testResult,\n        () => node.consequent,\n        () => node.alternate,\n        resolveNode,\n        isAsync,\n      );\n    }\n\n    if (node.type === \"ArrayExpression\") {\n      const results = node.elements.map((ele) => resolveNode(ele));\n      return PromiseCollectionHandler.handleArray(results, isAsync);\n    }\n\n    if (node.type === \"Modification\") {\n      const operation = this.operators.binary.get(node.operator);\n\n      if (operation) {\n        let newValue;\n\n        if (\"resolveParams\" in operation) {\n          if (operation.resolveParams === false) {\n            newValue = operation(\n              expressionContext,\n              node.left,\n              node.right,\n              isAsync,\n            );\n          } else {\n            const left = resolveNode(node.left);\n            const right = resolveNode(node.right);\n\n            if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n              newValue = collateAwaitable([left, right]).awaitableThen(\n                ([leftVal, rightVal]) =>\n                  operation(expressionContext, leftVal, rightVal, isAsync),\n              );\n            } else {\n              newValue = operation(expressionContext, left, right, isAsync);\n            }\n          }\n        } else {\n          const left = resolveNode(node.left);\n          const right = resolveNode(node.right);\n\n          if (options.async && (isAwaitable(left) || isAwaitable(right))) {\n            newValue = collateAwaitable([left, right]).awaitableThen(\n              ([leftVal, rightVal]) => operation(leftVal, rightVal, isAsync),\n            );\n          } else {\n            newValue = operation(left, right, isAsync);\n          }\n        }\n\n        if (node.left.type === \"ModelRef\") {\n          if (options.async && isAwaitable(newValue)) {\n            return newValue.awaitableThen((resolvedValue) => {\n              model.set([[(node.left as any).ref, resolvedValue]]);\n              return resolvedValue;\n            });\n          }\n          model.set([[(node.left as any).ref, newValue]]);\n        } else if (node.left.type === \"Identifier\") {\n          if (options.async && isAwaitable(newValue)) {\n            return newValue.awaitableThen((resolvedValue) => {\n              this.vars[(node.left as any).name] = resolvedValue;\n              return resolvedValue;\n            });\n          }\n          this.vars[(node.left as any).name] = newValue;\n        }\n\n        return newValue;\n      }\n\n      return resolveNode(node.left);\n    }\n  }\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Schema as SchemaType, Formatting } from \"@player-ui/types\";\n\nimport type { BindingInstance } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { FormatDefinition, FormatOptions, FormatType } from \"./types\";\n\n/** A function that returns itself */\nconst identify = (val: any) => val;\n\n/** Expand the authored schema into a set of paths -> DataTypes */\nexport function parse(\n  schema: SchemaType.Schema,\n): Map<string, SchemaType.DataTypes> {\n  const expandedPaths = new Map<string, SchemaType.DataTypes>();\n\n  if (!schema.ROOT) {\n    return expandedPaths;\n  }\n\n  const parseQueue: Array<{\n    /** The node to process */\n    node: SchemaType.Node;\n\n    /** The path in the data-model this node represents */\n    path: Array<string>;\n\n    /** A set of visited DataTypes to prevent loops */\n    visited: Set<string>;\n  }> = [{ node: schema.ROOT, path: [], visited: new Set() }];\n\n  while (parseQueue.length > 0) {\n    const next = parseQueue.shift();\n\n    if (!next) {\n      break;\n    }\n\n    const { node, path, visited } = next;\n\n    Object.entries(node).forEach(([prop, type]) => {\n      const nestedPath = [...path, prop];\n\n      const nestedPathStr = nestedPath.join(\".\");\n\n      if (expandedPaths.has(nestedPathStr)) {\n        // We've gone in a loop. Panic\n        throw new Error(\n          \"Path has already been processed. There's either a loop somewhere or a bug\",\n        );\n      }\n\n      if (visited.has(type.type)) {\n        throw new Error(\n          `Path already contained type: ${type.type}. This likely indicates a loop in the schema`,\n        );\n      }\n\n      expandedPaths.set(nestedPathStr, type);\n\n      if (type.isArray) {\n        nestedPath.push(\"[]\");\n      }\n\n      if (type.isRecord) {\n        nestedPath.push(\"{}\");\n      }\n\n      if (type.type && schema[type.type]) {\n        parseQueue.push({\n          path: nestedPath,\n          node: schema[type.type],\n          visited: new Set([...visited, type.type]),\n        });\n      }\n    });\n  }\n\n  return expandedPaths;\n}\n\n/**\n * The Schema is the central hub for all data invariants, and metaData associated with the data-model itself\n * Outside of the types defined in the JSON payload, it doesn't manage or keep any state.\n * It simply servers as an orchestrator for other modules to interface w/ the schema.\n */\nexport class SchemaController implements ValidationProvider {\n  private formatters: Map<string, FormatType<any, any, FormatOptions>> =\n    new Map();\n\n  private types: Map<string, SchemaType.DataType<any>> = new Map();\n  public readonly schema: Map<string, SchemaType.DataTypes> = new Map();\n\n  private bindingSchemaNormalizedCache: Map<BindingInstance, string> =\n    new Map();\n\n  public readonly hooks = {\n    resolveTypeForBinding: new SyncWaterfallHook<\n      [SchemaType.DataTypes | undefined, BindingInstance]\n    >(),\n  };\n\n  constructor(schema?: SchemaType.Schema) {\n    this.schema = schema ? parse(schema) : new Map();\n  }\n\n  public addFormatters(fns: Array<FormatType<any, any, FormatOptions>>) {\n    fns.forEach((def) => {\n      this.formatters.set(def.name, def);\n    });\n  }\n\n  public addDataTypes(types: Array<SchemaType.DataType<any>>) {\n    types.forEach((t) => {\n      this.types.set(t.type, t);\n    });\n  }\n\n  getValidationsForBinding(\n    binding: BindingInstance,\n  ): Array<ValidationObject> | undefined {\n    const typeDef = this.getApparentType(binding);\n\n    if (!typeDef?.validation?.length) {\n      return undefined;\n    }\n\n    // Set the defaults for schema-level validations\n    return typeDef.validation.map((vRef) => ({\n      severity: \"error\",\n      trigger: \"change\",\n      ...vRef,\n    }));\n  }\n\n  private normalizeBinding(binding: BindingInstance): string {\n    const cached = this.bindingSchemaNormalizedCache.get(binding);\n    if (cached) {\n      return cached;\n    }\n\n    let bindingArray = binding.asArray();\n    let normalized = bindingArray\n      .map((p) => (typeof p === \"number\" ? \"[]\" : p))\n      .join(\".\");\n\n    if (normalized) {\n      this.bindingSchemaNormalizedCache.set(binding, normalized);\n      bindingArray = normalized.split(\".\");\n    }\n\n    bindingArray.forEach((item) => {\n      const recordBinding = bindingArray\n        .map((p) => (p === item ? \"{}\" : p))\n        .join(\".\");\n\n      if (this.schema.get(recordBinding)) {\n        this.bindingSchemaNormalizedCache.set(binding, recordBinding);\n        bindingArray = recordBinding.split(\".\");\n        normalized = recordBinding;\n      }\n    });\n\n    return normalized;\n  }\n\n  public getType(binding: BindingInstance): SchemaType.DataTypes | undefined {\n    return this.hooks.resolveTypeForBinding.call(\n      this.schema.get(this.normalizeBinding(binding)),\n      binding,\n    );\n  }\n\n  public getApparentType(\n    binding: BindingInstance,\n  ): SchemaType.DataTypes | undefined {\n    const schemaType = this.getType(binding);\n\n    if (schemaType === undefined) {\n      return undefined;\n    }\n\n    const baseType = this.getTypeDefinition(schemaType?.type);\n\n    if (baseType === undefined) {\n      return schemaType;\n    }\n\n    return {\n      ...baseType,\n      ...schemaType,\n      validation: [\n        ...(schemaType.validation ?? []),\n        ...(baseType.validation ?? []),\n      ],\n    };\n  }\n\n  public getTypeDefinition(dataType: string) {\n    return this.types.get(dataType);\n  }\n\n  public getFormatterForType(\n    formatReference: Formatting.Reference,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const { type: formatType, ...options } = formatReference;\n\n    const formatter = this.formatters.get(formatType);\n\n    if (!formatter) {\n      return;\n    }\n\n    return {\n      format: formatter.format\n        ? (val) => formatter.format?.(val, options)\n        : identify,\n      deformat: formatter.deformat\n        ? (val) => formatter.deformat?.(val, options)\n        : identify,\n    };\n  }\n\n  /**\n   * Given a binding, fetch a function that's responsible for formatting, and/or de-formatting the data\n   * If no formatter is registered, it will return undefined\n   */\n  public getFormatter(\n    binding: BindingInstance,\n  ): FormatDefinition<unknown, unknown> | undefined {\n    const type = this.getApparentType(binding);\n\n    if (!type?.format) {\n      return undefined;\n    }\n\n    return this.getFormatterForType(type.format);\n  }\n}\n","import { setIn } from \"timm\";\nimport type { Expression } from \"@player-ui/types\";\nimport type { DataModelWithParser } from \"../data\";\n\nconst DOUBLE_OPEN_CURLY = \"{{\";\nconst DOUBLE_CLOSE_CURLY = \"}}\";\n\nexport interface Options {\n  /**\n   * The model to use when resolving refs\n   * Passing `false` will skip trying to resolve any direct model refs ({{foo}})\n   */\n  model: false | DataModelWithParser;\n\n  /**\n   * A function to evaluate an expression\n   * Passing `false` will skip trying to evaluate any expressions (@[ foo() ]@)\n   */\n  evaluate: false | ((exp: Expression) => any);\n\n  /**\n   * Optionaly resolve binding without formatting in case Type format applies\n   */\n  formatted?: boolean;\n}\n\n/** Search the given string for the coordinates of the next expression to resolve */\nexport function findNextExp(str: string) {\n  const expStart = str.indexOf(DOUBLE_OPEN_CURLY);\n\n  if (expStart === -1) {\n    return undefined;\n  }\n\n  let count = 1;\n  let offset = expStart + DOUBLE_OPEN_CURLY.length;\n  let workingString = str.substring(expStart + DOUBLE_OPEN_CURLY.length);\n\n  while (count > 0 && workingString.length > 0) {\n    // Find the next open or close curly\n    const nextCloseCurly = workingString.indexOf(DOUBLE_CLOSE_CURLY);\n\n    // We can't close anything, so there's no point in going on with life.\n    if (nextCloseCurly === -1) {\n      break;\n    }\n\n    const nextOpenCurly = workingString.indexOf(DOUBLE_OPEN_CURLY);\n\n    if (nextOpenCurly !== -1 && nextOpenCurly < nextCloseCurly) {\n      // We've hit another open bracket before closing out the one we want\n      // Move everything over and bump our close count by 1\n      count++;\n      workingString = workingString.substring(\n        nextOpenCurly + DOUBLE_OPEN_CURLY.length,\n      );\n      offset += nextOpenCurly + DOUBLE_OPEN_CURLY.length;\n    } else {\n      // We've hit another closing bracket\n      // Decrement our count and updates offsets\n      count--;\n      workingString = workingString.substring(\n        nextCloseCurly + DOUBLE_CLOSE_CURLY.length,\n      );\n      offset += nextCloseCurly + DOUBLE_CLOSE_CURLY.length;\n    }\n  }\n\n  if (count !== 0) {\n    throw new Error(`Unbalanced {{ and }} in exp: ${str}`);\n  }\n\n  return {\n    start: expStart,\n    end: offset,\n  };\n}\n\n/** Finds any subset of the string wrapped in @[]@ and evaluates it as an expression */\nexport function resolveExpressionsInString(\n  val: string,\n  { evaluate }: Options,\n): string {\n  if (!evaluate) {\n    return val;\n  }\n\n  const expMatch = /@\\[.*?\\]@/;\n  let newVal = val;\n  let match = newVal.match(expMatch);\n\n  while (match !== null) {\n    const expStrWithBrackets = match[0];\n    const matchStart = newVal.indexOf(expStrWithBrackets);\n\n    const expString = expStrWithBrackets.substr(\n      \"@[\".length,\n      expStrWithBrackets.length - \"@[\".length - \"]@\".length,\n    );\n    const expValue = evaluate(expString);\n\n    // The string is only the expression, return the raw value.\n    if (\n      matchStart === 0 &&\n      expStrWithBrackets === val &&\n      typeof expValue !== \"string\"\n    ) {\n      return expValue;\n    }\n\n    newVal =\n      newVal.substr(0, matchStart) +\n      expValue +\n      newVal.substr(matchStart + expStrWithBrackets.length);\n    // remove the surrounding @[]@ to get the expression\n    match = newVal.match(expMatch);\n  }\n\n  return newVal;\n}\n\n/** Return a string with all data model references resolved */\nexport function resolveDataRefsInString(val: string, options: Options): string {\n  const { model, formatted = true } = options;\n  let workingString = resolveExpressionsInString(val, options);\n\n  if (\n    !model ||\n    typeof workingString !== \"string\" ||\n    workingString.indexOf(DOUBLE_OPEN_CURLY) === -1\n  ) {\n    return workingString;\n  }\n\n  while (workingString.indexOf(DOUBLE_OPEN_CURLY) !== -1) {\n    const expLocation = findNextExp(workingString);\n\n    if (!expLocation) {\n      return workingString;\n    }\n\n    const { start, end } = expLocation;\n\n    // Strip out the wrapping curlies from {{binding}} before passing to the model\n    const binding = workingString\n      .substring(\n        start + DOUBLE_OPEN_CURLY.length,\n        end - DOUBLE_OPEN_CURLY.length,\n      )\n      .trim();\n\n    const evaledVal = model.get(binding, { formatted });\n\n    // Exit early if the string is _just_ a model lookup\n    // If the result is a string, we may need further processing for nested bindings\n    if (\n      start === 0 &&\n      end === workingString.length &&\n      typeof evaledVal !== \"string\"\n    ) {\n      return evaledVal;\n    }\n\n    workingString =\n      workingString.substr(0, start) + evaledVal + workingString.substr(end);\n  }\n\n  return workingString;\n}\n\n/** Traverse the thing and replace any model refs */\nfunction traverseObject<T>(val: T, options: Options): T {\n  switch (typeof val) {\n    case \"string\": {\n      return resolveDataRefsInString(val as string, options) as unknown as T;\n    }\n\n    case \"object\": {\n      if (!val) return val;\n      // TODO: Do we care refs in keys?\n      const keys = Object.keys(val);\n      let newVal = val;\n\n      if (keys.length > 0) {\n        keys.forEach((key) => {\n          newVal = setIn(\n            newVal as any,\n            [key],\n            traverseObject((val as any)[key], options),\n          ) as any;\n        });\n      }\n\n      return newVal;\n    }\n\n    default:\n      return val;\n  }\n}\n\n/** Recursively resolve all model refs in whatever you pass in */\nexport function resolveDataRefs<T>(val: T, options: Options): T {\n  return traverseObject(val, options);\n}\n","import type { BindingInstance } from \"../binding\";\n\n/**\n * Remove a binding, and any children from from the map\n * If the binding is an array-item, then it will be spliced from the array and the others will be shifted down\n *\n * @param sourceMap - A map of bindings to values\n * @param binding - The binding to remove from the map\n */\nexport function removeBindingAndChildrenFromMap<T>(\n  sourceMap: Map<BindingInstance, T>,\n  binding: BindingInstance,\n): Map<BindingInstance, T> {\n  const targetMap = new Map(sourceMap);\n\n  const parentBinding = binding.parent();\n  const property = binding.key();\n\n  // Clear out any that are sub-bindings of this binding\n\n  targetMap.forEach((_value, trackedBinding) => {\n    if (binding === trackedBinding || binding.contains(trackedBinding)) {\n      targetMap.delete(trackedBinding);\n    }\n  });\n\n  if (typeof property === \"number\") {\n    // Splice out this index from the rest\n\n    // Order matters here b/c we are shifting items in the array\n    // Start with the smallest index and work our way down\n    const bindingsToRewrite = Array.from(sourceMap.keys())\n      .filter((b) => {\n        if (parentBinding.contains(b)) {\n          const [childIndex] = b.relative(parentBinding);\n          return typeof childIndex === \"number\" && childIndex > property;\n        }\n\n        return false;\n      })\n      .sort();\n\n    bindingsToRewrite.forEach((trackedBinding) => {\n      // If the tracked binding is a sub-binding of the parent binding, then we need to\n      // update the path to reflect the new index\n\n      const [childIndex, ...childPath] = trackedBinding.relative(parentBinding);\n\n      if (typeof childIndex === \"number\") {\n        const newSegments = [childIndex - 1, ...childPath];\n        const newChildBinding = parentBinding.descendent(newSegments);\n        targetMap.set(newChildBinding, targetMap.get(trackedBinding) as T);\n        targetMap.delete(trackedBinding);\n      }\n    });\n  }\n\n  return targetMap;\n}\n","import type { Node } from \"./types\";\n\n/**\n * Checks if there are templated values in the object\n *\n * @param obj - The Parsed Object to check to see if we have a template array type for\n * @param localKey - The key being checked\n */\nexport function hasTemplateValues(obj: any, localKey: string) {\n  return (\n    Object.hasOwnProperty.call(obj, \"template\") &&\n    Array.isArray(obj?.template) &&\n    obj.template.length &&\n    obj.template.find((tmpl: any) => tmpl.output === localKey)\n  );\n}\n\n/** Check to see if the string is a valid switch key */\nexport function hasSwitchKey(localKey: string) {\n  return localKey === \"staticSwitch\" || localKey === \"dynamicSwitch\";\n}\n\n/** Check to see if the string is a valid template key */\nexport function hasTemplateKey(localKey: string) {\n  return localKey === \"template\";\n}\n\n/** Get the ID of the Node if there is one */\nexport function getNodeID(node?: Node.Node | null): string | undefined {\n  if (!node) {\n    return;\n  }\n\n  if (\n    \"value\" in node &&\n    typeof node.value === \"object\" &&\n    typeof node.value?.id === \"string\"\n  ) {\n    return node.value.id;\n  }\n}\n","import type { BindingInstance, BindingLike } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ExpressionType } from \"../../expressions\";\nimport type { Resolve } from \"./types\";\n\n/** Check to see if and of the data-changes affect the given dependencies  */\nexport function caresAboutDataChanges(\n  dataChanges?: Set<BindingInstance>,\n  dependencies?: Set<BindingInstance>,\n) {\n  if (!dataChanges || !dependencies) {\n    return true;\n  }\n\n  const depArray = Array.from(dependencies.values());\n  const dataChangeArray = Array.from(dataChanges.values());\n\n  return (\n    depArray.find(\n      (dep) =>\n        !!dataChangeArray.find(\n          (change) =>\n            change === dep || change.contains(dep) || dep.contains(change),\n        ),\n    ) !== undefined\n  );\n}\n\n/** Convert the options object for a resolver to one for a node */\nexport function toNodeResolveOptions(\n  resolverOptions: Resolve.ResolverOptions,\n): Resolve.NodeResolveOptions {\n  return {\n    ...resolverOptions,\n    data: {\n      model: resolverOptions.model,\n      formatValue: (ref, value) => {\n        if (resolverOptions.formatValue) {\n          return resolverOptions.formatValue(ref, value);\n        }\n\n        return value;\n      },\n      format: (bindingLike: BindingLike, value: any) =>\n        resolverOptions.format\n          ? resolverOptions.format(\n              isBinding(bindingLike)\n                ? bindingLike\n                : resolverOptions.parseBinding(bindingLike),\n              value,\n            )\n          : value,\n    },\n    evaluate: (exp: ExpressionType) =>\n      resolverOptions.evaluator.evaluate(exp, resolverOptions),\n  };\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { addLast, clone, setIn } from \"timm\";\nimport dlv from \"dlv\";\nimport { dequal } from \"dequal\";\nimport type { BindingInstance, BindingLike } from \"../../binding\";\nimport type {\n  DataModelOptions,\n  DataModelWithParser,\n  Updates,\n} from \"../../data\";\nimport { DependencyModel, withParser } from \"../../data\";\nimport type { Logger } from \"../../logger\";\nimport { Node, NodeType } from \"../parser\";\nimport { caresAboutDataChanges, toNodeResolveOptions } from \"./utils\";\nimport type { Resolve } from \"./types\";\nimport { getNodeID } from \"../parser/utils\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\ninterface NodeUpdate extends Resolve.ResolvedNode {\n  /** A flag to track if a node has changed since the last resolution */\n  updated: boolean;\n}\n\n/** Add model context to the data model */\nconst withContext = (model: DataModelWithParser): DataModelWithParser => {\n  return {\n    get: (binding: BindingLike, options?: DataModelOptions): any => {\n      return model.get(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    set: (\n      transaction: [BindingLike, any][],\n      options?: DataModelOptions,\n    ): Updates => {\n      return model.set(transaction, {\n        context: { model },\n        ...options,\n      });\n    },\n\n    delete: (binding: BindingLike, options?: DataModelOptions): void => {\n      return model.delete(binding, {\n        context: { model },\n        ...options,\n      });\n    },\n  };\n};\n\n/**\n * The Resolver is the way to take a parsed AST graph of a view and resolve it to a concrete representation of the current user state\n * It combines the ability to mutate ast nodes before resolving, as well as the mutating the resolved objects while parsing\n */\nexport class Resolver {\n  public readonly hooks = {\n    /** A hook to allow skipping of the resolution tree for a specific node */\n    skipResolve: new SyncWaterfallHook<\n      [boolean, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** An event emitted before calculating the next update */\n    beforeUpdate: new SyncHook<[Set<BindingInstance> | undefined]>(),\n\n    /** An event emitted after calculating the next update */\n    afterUpdate: new SyncHook<[any]>(),\n\n    /** The options passed to a node to resolve it to an object */\n    resolveOptions: new SyncWaterfallHook<\n      [Resolve.NodeResolveOptions, Node.Node]\n    >(),\n\n    /** A hook to transform the AST node into a new AST node before resolving it */\n    beforeResolve: new SyncWaterfallHook<\n      [Node.Node | null, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform an AST node into it's resolved value.\n     * This runs _before_ any children are resolved\n     */\n    resolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /**\n     * A hook to transform the resolved value of an AST node.\n     * This runs _after_ all children nodes are resolved\n     */\n    afterResolve: new SyncWaterfallHook<\n      [any, Node.Node, Resolve.NodeResolveOptions]\n    >(),\n\n    /** Called at the very end of a node's tree being updated */\n    afterNodeUpdate: new SyncHook<\n      [Node.Node, Node.Node | undefined, NodeUpdate]\n    >(),\n  };\n\n  /**\n   * The AST tree after beforeResolve is ran mapped to the AST before beforeResolve is ran\n   */\n  private readonly ASTMap: Map<Node.Node, Node.Node>;\n  /**\n   * The root node in the AST tree we want to resolve\n   */\n  public readonly root: Node.Node;\n\n  /**\n   * The cache of the last resolved values when walking the tree.\n   * This gets recycled every update to avoid stale data if a node is unused in an update\n   */\n  private resolveCache: Map<Node.Node, Resolve.ResolvedNode>;\n\n  /**\n   * Cache of node IDs that have been processed to track if nodes have duplicate IDs\n   */\n  private idCache: Set<string>;\n\n  /**\n   * The parameters required to resolve AST nodes\n   */\n  private readonly options: Resolve.ResolverOptions;\n\n  /**\n   * Tapable logger for logging errors encountered during view resolution\n   */\n  private logger?: Logger;\n\n  constructor(root: Node.Node, options: Resolve.ResolverOptions) {\n    this.root = root;\n    this.options = options;\n    this.resolveCache = new Map();\n    this.ASTMap = new Map();\n    this.logger = options.logger;\n    this.idCache = new Set();\n  }\n\n  public getSourceNode(convertedAST: Node.Node) {\n    return this.ASTMap.get(convertedAST);\n  }\n\n  public update(changes?: Set<BindingInstance>): any {\n    this.hooks.beforeUpdate.call(changes);\n    const resolveCache = new Map<Node.Node, Resolve.ResolvedNode>();\n    this.idCache.clear();\n    const prevASTMap = new Map(this.ASTMap);\n    this.ASTMap.clear();\n\n    const updated = this.computeTree(\n      this.root,\n      undefined,\n      changes,\n      resolveCache,\n      toNodeResolveOptions(this.options),\n      undefined,\n      prevASTMap,\n    );\n    this.resolveCache = resolveCache;\n    this.hooks.afterUpdate.call(updated.value);\n    return updated.value;\n  }\n\n  public getResolveCache() {\n    return new Map(this.resolveCache);\n  }\n\n  private getPreviousResult(node: Node.Node): Resolve.ResolvedNode | undefined {\n    if (!node) {\n      return;\n    }\n\n    const isFirstUpdate = this.resolveCache.size === 0;\n    const id = getNodeID(node);\n\n    if (id) {\n      if (this.idCache.has(id)) {\n        // Only log this conflict once to cut down on noise\n        // May want to swap this to logging when we first see the id -- which may not be the first render\n        if (isFirstUpdate) {\n          if (node.type === NodeType.Asset || node.type === NodeType.View) {\n            this.logger?.error(\n              `Cache conflict: Found Asset/View nodes that have conflicting ids: ${id}, may cause cache issues.`,\n            );\n          } else if (node.type === NodeType.Value) {\n            this.logger?.info(\n              `Cache conflict: Found Value nodes that have conflicting ids: ${id}, may cause cache issues. To improve performance make value node IDs globally unique.`,\n            );\n          }\n        }\n\n        // Don't use anything from a prev result if there's a duplicate id detected\n        return;\n      }\n\n      this.idCache.add(id);\n    }\n\n    return this.resolveCache.get(node);\n  }\n\n  private cloneNode(node: any) {\n    const clonedNode = clone(node);\n\n    Object.keys(clonedNode).forEach((key) => {\n      if (key === \"parent\") return;\n\n      const value = clonedNode[key];\n      if (typeof value === \"object\" && value !== null) {\n        clonedNode[key] = Array.isArray(value) ? [...value] : { ...value };\n      }\n    });\n\n    return clonedNode;\n  }\n\n  private computeTree(\n    node: Node.Node,\n    rawParent: Node.Node | undefined,\n    dataChanges: Set<BindingInstance> | undefined,\n    cacheUpdate: Map<Node.Node, Resolve.ResolvedNode>,\n    options: Resolve.NodeResolveOptions,\n    partiallyResolvedParent: Node.Node | undefined,\n    prevASTMap: Map<Node.Node, Node.Node>,\n  ): NodeUpdate {\n    const dependencyModel = new DependencyModel(options.data.model);\n\n    dependencyModel.trackSubset(\"core\");\n    const depModelWithParser = withContext(\n      withParser(dependencyModel, this.options.parseBinding),\n    );\n\n    const resolveOptions = this.hooks.resolveOptions.call(\n      {\n        ...options,\n        data: {\n          ...options.data,\n          model: depModelWithParser,\n        },\n        evaluate: (exp) =>\n          this.options.evaluator.evaluate(exp, { model: depModelWithParser }),\n        node,\n      },\n      node,\n    );\n\n    const previousResult = this.getPreviousResult(node);\n    const previousDeps = previousResult?.dependencies;\n\n    const dataChanged = caresAboutDataChanges(dataChanges, previousDeps);\n    const shouldUseLastValue = this.hooks.skipResolve.call(\n      !dataChanged,\n      node,\n      resolveOptions,\n    );\n\n    // Shallow clone the node so that changes to it during the resolve steps don't impact the original.\n    // We are trusting that this becomes a deep clone once the whole node tree has been traversed.\n    const clonedNode = {\n      ...this.cloneNode(node),\n      parent: partiallyResolvedParent,\n    };\n    const resolvedAST = this.hooks.beforeResolve.call(\n      clonedNode,\n      resolveOptions,\n    ) ?? {\n      type: NodeType.Empty,\n    };\n\n    const isNestedMultiNodeWithAsync =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.parent.type === NodeType.Value &&\n      resolvedAST.parent?.type === NodeType.Asset &&\n      resolvedAST.parent.value.id.includes(\"async\");\n\n    const isNestedMultiNode =\n      resolvedAST.type === NodeType.MultiNode &&\n      partiallyResolvedParent?.parent?.type === NodeType.MultiNode &&\n      partiallyResolvedParent.type === NodeType.Value;\n\n    if (previousResult && shouldUseLastValue) {\n      const update = {\n        ...previousResult,\n        updated: false,\n      };\n\n      /** Recursively repopulate the AST map given some AST Node and it's resolved AST representation */\n      const repopulateASTMapFromCache = (\n        resolvedNode: Resolve.ResolvedNode,\n        AST: Node.Node,\n        ASTParent: Node.Node | undefined,\n      ) => {\n        const { node: resolvedASTLocal } = resolvedNode;\n        this.ASTMap.set(resolvedASTLocal, AST);\n        const resolvedUpdate = {\n          ...resolvedNode,\n          updated: false,\n        };\n        cacheUpdate.set(AST, resolvedUpdate);\n\n        /** Helper function for recursing over child node */\n        const handleChildNode = (childNode: Node.Node) => {\n          // In order to get the correct results, we need to use the node references from the last update.\n          const originalChildNode = prevASTMap.get(childNode) ?? childNode;\n          const previousChildResult = this.getPreviousResult(originalChildNode);\n          if (!previousChildResult) return;\n\n          repopulateASTMapFromCache(\n            previousChildResult,\n            originalChildNode,\n            AST,\n          );\n        };\n\n        if (\"children\" in resolvedASTLocal) {\n          resolvedASTLocal.children?.forEach(({ value: childAST }) =>\n            handleChildNode(childAST),\n          );\n        } else if (resolvedASTLocal.type === NodeType.MultiNode) {\n          resolvedASTLocal.values.forEach(handleChildNode);\n        }\n\n        this.hooks.afterNodeUpdate.call(AST, ASTParent, resolvedUpdate);\n      };\n\n      // Point the root of the cached node to the new resolved node.\n      previousResult.node.parent = partiallyResolvedParent;\n\n      repopulateASTMapFromCache(previousResult, node, rawParent);\n\n      return update;\n    }\n\n    if (isNestedMultiNodeWithAsync) {\n      resolvedAST.parent = partiallyResolvedParent.parent;\n    } else {\n      resolvedAST.parent = partiallyResolvedParent;\n    }\n\n    resolveOptions.node = resolvedAST;\n\n    this.ASTMap.set(resolvedAST, node);\n\n    let resolved = this.hooks.resolve.call(\n      undefined,\n      resolvedAST,\n      resolveOptions,\n    );\n\n    let updated = !dequal(previousResult?.value, resolved);\n\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    const childDependencies = new Set<BindingInstance>();\n    dependencyModel.trackSubset(\"children\");\n\n    if (\"children\" in resolvedAST) {\n      const newChildren = resolvedAST.children?.map((child) => {\n        const computedChildTree = this.computeTree(\n          child.value,\n          node,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n        const {\n          dependencies: childTreeDeps,\n          node: childNode,\n          updated: childUpdated,\n          value: childValue,\n        } = computedChildTree;\n\n        childTreeDeps.forEach((binding) => childDependencies.add(binding));\n\n        if (childValue) {\n          if (childNode.type === NodeType.MultiNode && !childNode.override) {\n            const arr = addLast(\n              dlv(resolved, child.path as any[], []),\n              childValue,\n            );\n            resolved = setIn(resolved, child.path, arr);\n          } else {\n            resolved = setIn(resolved, child.path, childValue);\n          }\n        }\n\n        updated = updated || childUpdated;\n\n        return { ...child, value: childNode };\n      });\n\n      resolvedAST.children = newChildren;\n    } else if (resolvedAST.type === NodeType.MultiNode) {\n      const childValue: any = [];\n      const rawParentToPassIn = isNestedMultiNode\n        ? partiallyResolvedParent?.parent\n        : node;\n\n      const hasAsync = resolvedAST.values\n        .map((value, index) => (value.type === NodeType.Async ? index : -1))\n        .filter((index) => index !== -1);\n\n      const newValues = resolvedAST.values.map((mValue) => {\n        const mTree = this.computeTree(\n          mValue,\n          rawParentToPassIn,\n          dataChanges,\n          cacheUpdate,\n          resolveOptions,\n          resolvedAST,\n          prevASTMap,\n        );\n\n        if (mTree.value !== undefined && mTree.value !== null) {\n          /**\n           * async nodes' parent is a multi-node\n           * When the node to resolve is an async node and the flatten flag is true\n           * Add the content streamed in to the childValue of parent multi-node\n           * Array.isArray(mTree.value.asset.values) is the case when the content is an async asset\n           */\n          if (\n            mValue.type === NodeType.Async &&\n            mValue.flatten &&\n            mTree.value.asset &&\n            Array.isArray(mTree.value.asset.values)\n          ) {\n            // This flatten function only changed the values not node structure\n            unpackAndPush(mTree.value, childValue);\n          } else {\n            childValue.push(mTree.value);\n          }\n        }\n\n        mTree.dependencies.forEach((bindingDep) =>\n          childDependencies.add(bindingDep),\n        );\n\n        updated = updated || mTree.updated;\n\n        return mTree.node;\n      });\n\n      if (hasAsync.length > 0) {\n        // this likely turned into a nested multinode, attempt to flatten in node structure\n        const copy = newValues;\n        hasAsync.forEach((index) => {\n          if (copy[index]) copy.splice(index, 1, ...unpackNode(copy[index]));\n        });\n        resolvedAST.values = copy;\n      } else {\n        resolvedAST.values = newValues;\n      }\n      resolved = childValue;\n    }\n\n    childDependencies.forEach((bindingDep) =>\n      dependencyModel.addChildReadDep(bindingDep),\n    );\n\n    dependencyModel.trackSubset(\"core\");\n    if (previousResult && !updated) {\n      resolved = previousResult?.value;\n    }\n\n    resolved = this.hooks.afterResolve.call(resolved, resolvedAST, {\n      ...resolveOptions,\n      getDependencies: (scope?: \"core\" | \"children\") =>\n        dependencyModel.getDependencies(scope),\n    });\n\n    const update: NodeUpdate = {\n      node: resolvedAST,\n      updated,\n      value: resolved,\n      dependencies: new Set([\n        ...dependencyModel.getDependencies(),\n        ...childDependencies,\n      ]),\n    };\n\n    this.hooks.afterNodeUpdate.call(\n      node,\n      isNestedMultiNode ? partiallyResolvedParent?.parent : rawParent,\n      update,\n    );\n    cacheUpdate.set(node, update);\n\n    return update;\n  }\n}\n\n/**\n * helper function to flatten a potential nested array and combine with initial array\n */\nfunction unpackAndPush(item: any | any[], initial: any[]): void {\n  if (item.asset.values && Array.isArray(item.asset.values)) {\n    item.asset.values.forEach((i: any) => {\n      unpackAndPush(i, initial);\n    });\n  } else {\n    initial.push(item);\n  }\n}\n\nfunction unpackNode(item: Node.Node) {\n  const unpacked: Node.Node[] = [];\n  if (\n    \"children\" in item &&\n    item.children?.[0]?.value.type === NodeType.Asset &&\n    (item.children?.[0]?.value as Node.Asset).children\n  ) {\n    if (\n      (item.children?.[0]?.value as Node.Asset).children?.[0]?.value.type ===\n      NodeType.MultiNode\n    ) {\n      (\n        (item.children?.[0]?.value as Node.Asset).children?.[0]\n          ?.value as Node.MultiNode\n      ).values.forEach((value) => {\n        unpacked.push(value);\n      });\n    }\n  } else {\n    unpacked.push(item);\n  }\n  return unpacked;\n}\n","import { set } from \"timm\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type { Options } from \"./options\";\nimport type { Node } from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** Create a function that checks for a start/end sequence in a string */\nconst createPatternMatcher = (start: string, end: string) => {\n  return (testStr: string) => {\n    const startLocation = testStr.indexOf(start);\n\n    if (startLocation === -1) {\n      return false;\n    }\n\n    const endLocation = testStr.indexOf(end);\n\n    if (endLocation === -1) {\n      return false;\n    }\n\n    return startLocation < endLocation;\n  };\n};\n\nconst bindingResolveLookup = createPatternMatcher(\"{{\", \"}}\");\nconst expressionResolveLookup = createPatternMatcher(\"@[\", \"]@\");\n\n/** Check to see if a string contains a reference to dynamic content */\nfunction hasSomethingToResolve(str: string) {\n  return bindingResolveLookup(str) || expressionResolveLookup(str);\n}\n\n/** Resolve data refs in a string if necessary. */\nfunction resolveString(str: string, resolveOptions: Options) {\n  return hasSomethingToResolve(str)\n    ? resolveDataRefs(str, {\n        model: resolveOptions.data.model,\n        evaluate: resolveOptions.evaluate,\n      })\n    : str;\n}\n\n/** Recursively resolve all string references in an object or array */\nexport function resolveAllRefs(\n  node: any,\n  resolveOptions: Options,\n  propertiesToSkip: Set<string | number>,\n): any {\n  if (\n    node === null ||\n    node === undefined ||\n    (typeof node !== \"object\" && typeof node !== \"string\")\n  ) {\n    return node;\n  }\n\n  if (typeof node === \"string\") {\n    return resolveString(node, resolveOptions);\n  }\n\n  let newNode = node;\n\n  Object.keys(node).forEach((key: string | number) => {\n    if (propertiesToSkip.has(key)) {\n      return;\n    }\n\n    const val = node[key];\n\n    let newVal = val;\n\n    if (typeof val === \"object\") {\n      newVal = resolveAllRefs(val, resolveOptions, propertiesToSkip);\n    } else if (typeof val === \"string\") {\n      newVal = resolveString(val, resolveOptions);\n    }\n\n    if (newVal !== val) {\n      newNode = set(newNode, key as any, newVal);\n    }\n  });\n\n  return newNode;\n}\n\n/** Traverse up the node tree finding the first available 'path' */\nconst findBasePath = (\n  node: Node.Node,\n  resolver: Resolver,\n): Node.PathSegment[] => {\n  const parentNode = node.parent;\n  if (!parentNode) {\n    return [];\n  }\n\n  if (\"children\" in parentNode) {\n    const original = resolver.getSourceNode(node);\n    return (\n      parentNode.children?.find((child) => child.value === original)?.path ?? []\n    );\n  }\n\n  if (parentNode.type !== NodeType.MultiNode) {\n    return [];\n  }\n\n  return findBasePath(parentNode, resolver);\n};\n\n/** A plugin that resolves all string references for each node */\nexport default class StringResolverPlugin implements ViewPlugin {\n  private propertiesToSkipCache: Map<string, Set<string>>;\n\n  constructor() {\n    this.propertiesToSkipCache = new Map();\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.resolve.tap(\"string-resolver\", (value, node, options) => {\n      if (node.type === NodeType.Empty || node.type === NodeType.Unknown) {\n        return null;\n      }\n\n      if (\n        node.type === NodeType.Value ||\n        node.type === NodeType.Asset ||\n        node.type === NodeType.View\n      ) {\n        /** Use specified properties to skip during string resolution, or default */\n        let propsToSkip: Set<string>;\n        if (node.type === NodeType.Asset || node.type === NodeType.View) {\n          propsToSkip = new Set(\n            node.plugins?.stringResolver?.propertiesToSkip ?? [\"exp\"],\n          );\n          if (node.value?.id) {\n            this.propertiesToSkipCache.set(node.value.id, propsToSkip);\n          }\n        } else if (\n          node.parent?.type === NodeType.MultiNode &&\n          (node.parent?.parent?.type === NodeType.Asset ||\n            node.parent?.parent?.type === NodeType.View) &&\n          node.parent.parent.value?.id &&\n          this.propertiesToSkipCache.has(node.parent.parent.value.id)\n        ) {\n          propsToSkip = this.propertiesToSkipCache.get(\n            node.parent.parent.value.id,\n          ) as Set<string>;\n        } else {\n          propsToSkip = new Set([\"exp\"]);\n        }\n\n        const nodePath = findBasePath(node, resolver);\n\n        /** If the path includes something that is supposed to be skipped, this node should be skipped too. */\n        if (\n          nodePath.length > 0 &&\n          nodePath.some((segment) => propsToSkip.has(segment.toString()))\n        ) {\n          return node.value;\n        }\n\n        return resolveAllRefs(node.value, options, propsToSkip);\n      }\n\n      return value;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"string-resolver\", this.applyResolver.bind(this));\n  }\n}\n","const ANY_CHAR_REGEX = /%([a-zA-Z]+)/g;\n\n/**\n * Replaces %num in message with the provided parameters in order.\n *\n * @param message - Parameterized string like \"This is a %1\"\n * @param params - Parameters to replace in message E.g. ['tax2021.amount']\n * @returns A message with the parameters replaced.\n */\nexport function replaceParams(\n  message: string,\n  params: Record<string, any>,\n): string {\n  return message\n    .slice()\n    .replace(ANY_CHAR_REGEX, (keyExpr) => params[keyExpr.slice(1)] || keyExpr);\n}\n","import type { Validation } from \"@player-ui/types\";\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { setIn } from \"timm\";\n\nimport type { BindingInstance, BindingFactory } from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { DataModelWithParser, DataModelMiddleware } from \"../../data\";\nimport type { SchemaController } from \"../../schema\";\nimport type {\n  ErrorValidationResponse,\n  ValidationObject,\n  ValidationObjectWithHandler,\n  ValidatorContext,\n  ValidationProvider,\n  ValidationResponse,\n  WarningValidationResponse,\n  StrongOrWeakBinding,\n} from \"../../validator\";\nimport {\n  ValidationMiddleware,\n  ValidatorRegistry,\n  removeBindingAndChildrenFromMap,\n} from \"../../validator\";\nimport type { Logger } from \"../../logger\";\nimport { ProxyLogger } from \"../../logger\";\nimport type { Resolve, ViewInstance } from \"../../view\";\nimport { caresAboutDataChanges } from \"../../view\";\nimport { replaceParams } from \"../../utils\";\nimport { resolveDataRefs } from \"../../string-resolver\";\nimport type {\n  ExpressionEvaluatorOptions,\n  ExpressionType,\n} from \"../../expressions\";\nimport type { BindingTracker } from \"./binding-tracker\";\nimport { ValidationBindingTrackerViewPlugin } from \"./binding-tracker\";\n\nexport const SCHEMA_VALIDATION_PROVIDER_NAME = \"schema\";\nexport const VIEW_VALIDATION_PROVIDER_NAME = \"view\";\n\nexport const VALIDATION_PROVIDER_NAME_SYMBOL: unique symbol = Symbol.for(\n  \"validation-provider-name\",\n);\n\nexport type ValidationObjectWithSource = ValidationObjectWithHandler & {\n  /** The name of the validation */\n  [VALIDATION_PROVIDER_NAME_SYMBOL]: string;\n};\n\ntype SimpleValidatorContext = Omit<\n  ValidatorContext,\n  \"validation\" | \"schemaType\"\n>;\n\ninterface BaseActiveValidation<T> {\n  /** The validation is being actively shown */\n  state: \"active\";\n\n  /** The validation response */\n  response: T;\n}\n\ntype ActiveWarning = BaseActiveValidation<WarningValidationResponse> & {\n  /** Warnings track if they can be dismissed automatically (by navigating) */\n  dismissable: boolean;\n};\ntype ActiveError = BaseActiveValidation<ErrorValidationResponse>;\n\n/**\n * warnings that keep track of their active state\n */\ntype StatefulWarning = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"warning\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** warnings start with no state, but can active or dismissed */\n      state: \"none\" | \"dismissed\";\n    }\n  | ActiveWarning\n);\n\n/** Errors that keep track of their state */\ntype StatefulError = {\n  /** A common key to differentiate between errors and warnings */\n  type: \"error\";\n\n  /** The underlying validation this tracks */\n  value: ValidationObjectWithSource;\n\n  /** If this is currently preventing navigation from continuing */\n  isBlockingNavigation: boolean;\n} & (\n  | {\n      /** Errors start with no state an can be activated */\n      state: \"none\";\n    }\n  | ActiveError\n);\n\nexport type StatefulValidationObject = StatefulWarning | StatefulError;\n\n/** Helper function to determin if the subset is within the containingSet */\nfunction isSubset<T>(subset: Set<T>, containingSet: Set<T>): boolean {\n  if (subset.size > containingSet.size) return false;\n  for (const entry of subset) if (!containingSet.has(entry)) return false;\n  return true;\n}\n\n/** Helper for initializing a validation object that tracks state */\nfunction createStatefulValidationObject(\n  obj: ValidationObjectWithSource,\n): StatefulValidationObject {\n  return {\n    value: obj,\n    type: obj.severity,\n    state: \"none\",\n    isBlockingNavigation: false,\n  };\n}\n\ntype ValidationRunner = (obj: ValidationObjectWithHandler) =>\n  | {\n      /** A validation message */\n      message: string;\n    }\n  | undefined;\n\n/** A class that manages validating bindings across phases */\nclass ValidatedBinding {\n  public currentPhase?: Validation.Trigger;\n  private applicableValidations: Array<StatefulValidationObject> = [];\n  private validationsByState: Record<\n    Validation.Trigger,\n    Array<StatefulValidationObject>\n  > = {\n    load: [],\n    change: [],\n    navigation: [],\n  };\n\n  public get allValidations(): Array<StatefulValidationObject> {\n    return Object.values(this.validationsByState).flat();\n  }\n\n  public weakBindings: Set<BindingInstance>;\n\n  private onDismiss?: () => void;\n\n  constructor(\n    possibleValidations: Array<ValidationObjectWithSource>,\n    onDismiss?: () => void,\n    log?: Logger,\n    weakBindings?: Set<BindingInstance>,\n  ) {\n    this.onDismiss = onDismiss;\n    possibleValidations.forEach((vObj) => {\n      const { trigger } = vObj;\n\n      if (this.validationsByState[trigger]) {\n        const statefulValidationObject = createStatefulValidationObject(vObj);\n        this.validationsByState[trigger].push(statefulValidationObject);\n      } else {\n        log?.warn(`Unknown validation trigger: ${trigger}`);\n      }\n    });\n    this.weakBindings = weakBindings ?? new Set();\n  }\n\n  private checkIfBlocking(statefulObj: StatefulValidationObject) {\n    if (statefulObj.state === \"active\") {\n      const { isBlockingNavigation } = statefulObj;\n      return isBlockingNavigation;\n    }\n\n    return false;\n  }\n\n  public getAll(): Array<ValidationResponse> {\n    return this.applicableValidations.reduce((all, statefulObj) => {\n      if (statefulObj.state === \"active\" && statefulObj.response) {\n        all.push({\n          ...statefulObj.response,\n          blocking: this.checkIfBlocking(statefulObj),\n        });\n      }\n\n      return all;\n    }, [] as Array<ValidationResponse>);\n  }\n\n  public get(): ValidationResponse | undefined {\n    const firstInvalid = this.applicableValidations.find((statefulObj) => {\n      return statefulObj.state === \"active\" && statefulObj.response;\n    });\n\n    if (firstInvalid?.state === \"active\") {\n      return {\n        ...firstInvalid.response,\n        blocking: this.checkIfBlocking(firstInvalid),\n      };\n    }\n  }\n\n  private runApplicableValidations(\n    runner: ValidationRunner,\n    canDismiss: boolean,\n    phase: Validation.Trigger,\n  ) {\n    // If the currentState is not load, skip those\n    this.applicableValidations = this.applicableValidations.map(\n      (originalValue) => {\n        if (originalValue.state === \"dismissed\") {\n          // Don't rerun any dismissed warnings\n          return originalValue;\n        }\n\n        // treat all warnings the same and block it once (unless blocking is true)\n        const blocking =\n          originalValue.value.blocking ??\n          ((originalValue.value.severity === \"warning\" && \"once\") || true);\n\n        const obj = setIn(\n          originalValue,\n          [\"value\", \"blocking\"],\n          blocking,\n        ) as StatefulValidationObject;\n\n        const isBlockingNavigation =\n          blocking === true || (blocking === \"once\" && !canDismiss);\n\n        if (\n          phase === \"navigation\" &&\n          obj.state === \"active\" &&\n          obj.value.blocking !== true\n        ) {\n          if (obj.value.severity === \"warning\") {\n            const warn = obj as ActiveWarning;\n            if (\n              warn.dismissable &&\n              warn.response.dismiss &&\n              (warn.response.blocking !== \"once\" || !warn.response.blocking)\n            ) {\n              warn.response.dismiss();\n            } else {\n              if (warn?.response.blocking === \"once\") {\n                warn.response.blocking = false;\n              }\n\n              warn.dismissable = true;\n            }\n\n            return warn as StatefulValidationObject;\n          }\n        }\n\n        const response = runner(obj.value);\n\n        const newState = {\n          type: obj.type,\n          value: obj.value,\n          state: response ? \"active\" : \"none\",\n          isBlockingNavigation,\n          dismissable:\n            obj.value.severity === \"warning\" && phase === \"navigation\",\n          response: response\n            ? {\n                ...obj.value,\n                message: response.message ?? \"Something is broken\",\n                severity: obj.value.severity,\n                displayTarget: obj.value.displayTarget ?? \"field\",\n              }\n            : undefined,\n        } as StatefulValidationObject;\n\n        if (newState.state === \"active\" && obj.value.severity === \"warning\") {\n          (newState.response as WarningValidationResponse).dismiss = () => {\n            (newState as StatefulWarning).state = \"dismissed\";\n            this.onDismiss?.();\n          };\n        }\n\n        return newState;\n      },\n    );\n  }\n\n  public update(\n    phase: Validation.Trigger,\n    canDismiss: boolean,\n    runner: ValidationRunner,\n  ) {\n    const newApplicableValidations: StatefulValidationObject[] = [];\n\n    if (phase === \"load\" && this.currentPhase !== undefined) {\n      // Tried to run the 'load' phase twice. Aborting\n      return;\n    }\n\n    if (this.currentPhase === \"navigation\" || phase === this.currentPhase) {\n      // Already added all the types. No need to continue adding new validations\n      this.runApplicableValidations(runner, canDismiss, phase);\n      return;\n    }\n\n    if (phase === \"load\") {\n      this.currentPhase = \"load\";\n      this.applicableValidations = [...this.validationsByState.load];\n    } else if (phase === \"change\" && this.currentPhase === \"load\") {\n      this.currentPhase = \"change\";\n      // The transition to the 'change' type can only come from a 'load' type\n      this.applicableValidations = [\n        ...this.applicableValidations,\n        ...this.validationsByState.change,\n      ];\n    } else if (\n      phase === \"navigation\" &&\n      (this.currentPhase === \"load\" || this.currentPhase === \"change\")\n    ) {\n      // Can transition to a nav state from a change or load\n\n      // if there is an non-blocking error that is active then remove the error from applicable validations so it can no longer be shown\n      // which is needed if there are additional warnings to become active for that binding after the error is shown\n      this.applicableValidations.forEach((element) => {\n        if (\n          !(\n            element.type === \"error\" &&\n            element.state === \"active\" &&\n            element.isBlockingNavigation === false\n          )\n        ) {\n          newApplicableValidations.push(element);\n        }\n      });\n\n      this.applicableValidations = [\n        ...newApplicableValidations,\n        ...this.validationsByState.navigation,\n        ...(this.currentPhase === \"load\" ? this.validationsByState.change : []),\n      ];\n      this.currentPhase = \"navigation\";\n    }\n\n    this.runApplicableValidations(runner, canDismiss, phase);\n  }\n}\n\n/**\n * A controller for orchestrating validation within a running player\n *\n * The current validation flow is as follows:\n *\n *   - When a binding is first seen, gather all of the possible validations for it from the providers\n *     - Schema and Crossfield (view) are both providers of possible validations\n *     - Run all of the applicable validations for that binding for the `load` trigger\n *\n *   - When a change occurs, set the phase of the binding to `change`.\n *     - Run all of the `change` triggered validations for that binding.\n *\n *   - When a navigation event occurs, set the phase of the binding to `navigate`.\n *     - Run all `change` and `navigate` validations for each tracked binding.\n *     - For any warnings, also keep a state of `shown` or `dismissed`.\n *       - Set all non-dismissed warnings to `shown`.\n *       - Set all `shown` warnings to `dismissed`.\n *     - Allow navigation forward if there are no non-dismissed warnings and no valid errors.\n */\nexport class ValidationController implements BindingTracker {\n  public readonly hooks = {\n    /** A hook called to tap into the validator registry for adding more validators */\n    createValidatorRegistry: new SyncHook<[ValidatorRegistry]>(),\n\n    /** A callback/event when a new validation is added to the view */\n    onAddValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    /** The inverse of onAddValidation, this is called when a validation is removed from the list */\n    onRemoveValidation: new SyncWaterfallHook<\n      [ValidationResponse, BindingInstance]\n    >(),\n\n    resolveValidationProviders: new SyncWaterfallHook<\n      [\n        Array<{\n          /** The name of the provider */\n          source: string;\n          /** The provider itself */\n          provider: ValidationProvider;\n        }>,\n      ],\n      {\n        /** The view this is triggered for  */\n        view?: ViewInstance;\n      }\n    >(),\n\n    /** A hook called when a binding is added to the tracker */\n    onTrackBinding: new SyncHook<[BindingInstance]>(),\n  };\n\n  private tracker: BindingTracker | undefined;\n  private validations = new Map<BindingInstance, ValidatedBinding>();\n  private validatorRegistry?: ValidatorRegistry;\n  private schema: SchemaController;\n\n  private providers:\n    | Array<{\n        /** The name of the provider */\n        source: string;\n        /** The provider itself */\n        provider: ValidationProvider;\n      }>\n    | undefined;\n\n  private viewValidationProvider?: ValidationProvider;\n  private options?: SimpleValidatorContext;\n  private weakBindingTracker = new Set<BindingInstance>();\n\n  constructor(schema: SchemaController, options?: SimpleValidatorContext) {\n    this.schema = schema;\n    this.options = options;\n    this.reset();\n  }\n\n  setOptions(options: SimpleValidatorContext) {\n    this.options = options;\n  }\n\n  /** Return the middleware for the data-model to stop propagation of invalid data */\n  public getDataMiddleware(): Array<DataModelMiddleware> {\n    return [\n      {\n        set: (transaction, options, next) => {\n          return next?.set(transaction, options) ?? [];\n        },\n        get: (binding, options, next) => {\n          return next?.get(binding, options);\n        },\n        delete: (binding, options, next) => {\n          this.validations = removeBindingAndChildrenFromMap(\n            this.validations,\n            binding,\n          );\n\n          return next?.delete(binding, options);\n        },\n      },\n      new ValidationMiddleware(\n        (binding) => {\n          if (!this.options) {\n            return;\n          }\n\n          this.updateValidationsForBinding(binding, \"change\", this.options);\n          const strongValidation = this.getValidationForBinding(binding);\n\n          // return validation issues directly on bindings first\n          if (strongValidation?.get()?.severity === \"error\") {\n            return strongValidation.get();\n          }\n\n          // if none, check to see any validations this binding may be a weak ref of and return\n          const newInvalidBindings: Set<StrongOrWeakBinding> = new Set();\n          this.validations.forEach((weakValidation, strongBinding) => {\n            if (\n              caresAboutDataChanges(\n                new Set([binding]),\n                weakValidation.weakBindings,\n              ) &&\n              weakValidation?.get()?.severity === \"error\"\n            ) {\n              weakValidation?.weakBindings.forEach((weakBinding) => {\n                if (weakBinding === strongBinding) {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: true,\n                  });\n                } else {\n                  newInvalidBindings.add({\n                    binding: weakBinding,\n                    isStrong: false,\n                  });\n                }\n              });\n            }\n          });\n\n          if (newInvalidBindings.size > 0) {\n            return newInvalidBindings;\n          }\n        },\n        { logger: new ProxyLogger(() => this.options?.logger) },\n      ),\n    ];\n  }\n\n  private getValidationProviders() {\n    if (this.providers) {\n      return this.providers;\n    }\n\n    this.providers = this.hooks.resolveValidationProviders.call([\n      {\n        source: SCHEMA_VALIDATION_PROVIDER_NAME,\n        provider: this.schema,\n      },\n      {\n        source: VIEW_VALIDATION_PROVIDER_NAME,\n        provider: {\n          getValidationsForBinding: (\n            binding: BindingInstance,\n          ): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForBinding?.(\n              binding,\n            );\n          },\n\n          getValidationsForView: (): Array<ValidationObject> | undefined => {\n            return this.viewValidationProvider?.getValidationsForView?.();\n          },\n        },\n      },\n    ]);\n\n    return this.providers;\n  }\n\n  public reset() {\n    this.validations.clear();\n    this.tracker = undefined;\n  }\n\n  public onView(view: ViewInstance): void {\n    this.validations.clear();\n    if (!this.options) {\n      return;\n    }\n\n    const bindingTrackerPlugin = new ValidationBindingTrackerViewPlugin({\n      ...this.options,\n      callbacks: {\n        onAdd: (binding) => {\n          if (\n            !this.options ||\n            this.getValidationForBinding(binding) !== undefined\n          ) {\n            return;\n          }\n\n          // Set the default value for the binding if we need to\n          const originalValue = this.options.model.get(binding);\n          const withoutDefault = this.options.model.get(binding, {\n            ignoreDefaultValue: true,\n          });\n\n          if (originalValue !== withoutDefault) {\n            // Don't trigger updates when setting the default value\n            this.options.model.set([[binding, originalValue]], {\n              silent: true,\n            });\n          }\n\n          this.updateValidationsForBinding(\n            binding,\n            \"load\",\n            this.options,\n            () => {\n              view.update(new Set([binding]));\n            },\n          );\n\n          this.hooks.onTrackBinding.call(binding);\n        },\n      },\n    });\n\n    this.tracker = bindingTrackerPlugin;\n    this.viewValidationProvider = view;\n\n    bindingTrackerPlugin.apply(view);\n  }\n\n  updateValidationsForBinding(\n    binding: BindingInstance,\n    trigger: Validation.Trigger,\n    validationContext?: SimpleValidatorContext,\n    onDismiss?: () => void,\n  ): void {\n    const context = validationContext ?? this.options;\n\n    if (!context) {\n      throw new Error(`Context is required for executing validations`);\n    }\n\n    if (trigger === \"load\") {\n      // Get all of the validations from each provider\n      const possibleValidations = this.getValidationProviders().reduce<\n        Array<ValidationObjectWithSource>\n      >((vals, provider) => {\n        vals.push(\n          ...(provider.provider\n            .getValidationsForBinding?.(binding)\n            ?.map((valObj) => ({\n              ...valObj,\n              [VALIDATION_PROVIDER_NAME_SYMBOL]: provider.source,\n            })) ?? []),\n        );\n\n        return vals;\n      }, []);\n\n      if (possibleValidations.length === 0) {\n        return;\n      }\n\n      this.validations.set(\n        binding,\n        new ValidatedBinding(\n          possibleValidations,\n          onDismiss,\n          this.options?.logger,\n        ),\n      );\n    }\n\n    const trackedValidations = this.validations.get(binding);\n    trackedValidations?.update(trigger, true, (validationObj) => {\n      const response = this.validationRunner(validationObj, binding, context);\n\n      if (this.weakBindingTracker.size > 0) {\n        const t = this.validations.get(binding) as ValidatedBinding;\n        this.weakBindingTracker.forEach((b) => t.weakBindings.add(b));\n      }\n\n      return response ? { message: response.message } : undefined;\n    });\n\n    // Also run any validations that binding or sub-binding is a weak binding of\n    if (trigger !== \"load\") {\n      this.validations.forEach((validation, vBinding) => {\n        if (\n          vBinding !== binding &&\n          caresAboutDataChanges(new Set([binding]), validation.weakBindings)\n        ) {\n          validation.update(trigger, true, (validationObj) => {\n            const response = this.validationRunner(\n              validationObj,\n              vBinding,\n              context,\n            );\n            return response ? { message: response.message } : undefined;\n          });\n        }\n      });\n    }\n  }\n\n  validationRunner(\n    validationObj: ValidationObjectWithHandler,\n    binding: BindingInstance,\n    context: SimpleValidatorContext | undefined = this.options,\n  ) {\n    if (!context) {\n      throw new Error(\"No context provided to validation runner\");\n    }\n\n    const handler =\n      validationObj.handler ?? this.getValidator(validationObj.type);\n\n    const weakBindings = new Set<BindingInstance>();\n\n    // For any data-gets in the validation runner, default to using the _invalid_ value (since that's what we're testing against)\n    const model: DataModelWithParser = {\n      get(b, options) {\n        weakBindings.add(isBinding(b) ? binding : context.parseBinding(b));\n        return context.model.get(b, { ...options, includeInvalid: true });\n      },\n      set: context.model.set,\n      delete: context.model.delete,\n    };\n\n    const result = handler?.(\n      {\n        ...context,\n        evaluate: (\n          exp: ExpressionType,\n          options: ExpressionEvaluatorOptions = { model },\n        ) => context.evaluate(exp, options),\n        model,\n        validation: validationObj,\n        schemaType: this.schema.getType(binding),\n      },\n      context.model.get(binding, {\n        includeInvalid: true,\n        formatted: validationObj.dataTarget === \"formatted\",\n      }),\n      validationObj,\n    );\n\n    this.weakBindingTracker = weakBindings;\n\n    if (result) {\n      let { message } = result;\n      const { parameters } = result;\n\n      if (validationObj.message) {\n        message = resolveDataRefs(validationObj.message, {\n          model,\n          evaluate: context.evaluate,\n        });\n        if (parameters) {\n          message = replaceParams(message, parameters);\n        }\n      }\n\n      return {\n        message,\n      };\n    }\n  }\n\n  private updateValidationsForView(trigger: Validation.Trigger): void {\n    const isNavigationTrigger = trigger === \"navigation\";\n    const lastActiveBindings = this.activeBindings;\n\n    /** Run validations for all bindings in view */\n    const updateValidations = (dismissValidations: boolean) => {\n      this.getBindings().forEach((binding) => {\n        this.validations\n          .get(binding)\n          ?.update(trigger, dismissValidations, (obj) => {\n            if (!this.options) {\n              return;\n            }\n\n            return this.validationRunner(obj, binding, this.options);\n          });\n      });\n    };\n\n    // Should dismiss for non-navigation triggers.\n    updateValidations(!isNavigationTrigger);\n\n    if (isNavigationTrigger) {\n      // If validations didn't change since last update, dismiss all dismissible validations.\n      const { activeBindings } = this;\n      if (isSubset(activeBindings, lastActiveBindings)) {\n        updateValidations(true);\n      }\n    }\n  }\n\n  private get activeBindings(): Set<BindingInstance> {\n    return new Set(\n      Array.from(this.getBindings()).filter(\n        (b) => this.validations.get(b)?.get() !== undefined,\n      ),\n    );\n  }\n\n  public getValidator(type: string) {\n    if (this.validatorRegistry) {\n      return this.validatorRegistry.get(type);\n    }\n\n    const registry = new ValidatorRegistry();\n    this.hooks.createValidatorRegistry.call(registry);\n    this.validatorRegistry = registry;\n\n    return registry.get(type);\n  }\n\n  getBindings(): Set<BindingInstance> {\n    return this.tracker?.getBindings() ?? new Set();\n  }\n\n  trackBinding(binding: BindingInstance): void {\n    this.tracker?.trackBinding(binding);\n  }\n\n  /** Executes all known validations for the tracked bindings using the given model */\n  validateView(trigger: Validation.Trigger = \"navigation\"): {\n    /** Indicating if the view can proceed without error */\n    canTransition: boolean;\n\n    /** the validations that are preventing the view from continuing */\n    validations?: Map<BindingInstance, ValidationResponse>;\n  } {\n    this.updateValidationsForView(trigger);\n\n    const validations = new Map<BindingInstance, ValidationResponse>();\n\n    let canTransition = true;\n\n    this.getBindings().forEach((b) => {\n      const allValidations = this.getValidationForBinding(b)?.getAll();\n\n      allValidations?.forEach((v) => {\n        if (trigger === \"navigation\" && v.blocking) {\n          this.options?.logger.debug(\n            `Validation on binding: ${b.asString()} is preventing navigation. ${JSON.stringify(\n              v,\n            )}`,\n          );\n\n          canTransition = false;\n        }\n\n        if (!validations.has(b)) {\n          validations.set(b, v);\n        }\n      });\n    });\n\n    return {\n      canTransition,\n      validations: validations.size ? validations : undefined,\n    };\n  }\n\n  /** Get the current tracked validation for the given binding */\n  public getValidationForBinding(\n    binding: BindingInstance,\n  ): ValidatedBinding | undefined {\n    return this.validations.get(binding);\n  }\n\n  forView(parser: BindingFactory): Resolve.Validation {\n    return {\n      _getValidationForBinding: (binding) => {\n        return this.getValidationForBinding(\n          isBinding(binding) ? binding : parser(binding),\n        );\n      },\n      getAll: () => {\n        const bindings = this.getBindings();\n        if (bindings.size === 0) {\n          return undefined;\n        }\n\n        const validationMapping = new Map<\n          BindingInstance,\n          ValidationResponse\n        >();\n\n        bindings.forEach((b) => {\n          const validation = this.getValidationForBinding(b)?.get();\n\n          if (validation) {\n            validationMapping.set(b, validation);\n          }\n        });\n\n        return validationMapping.size === 0 ? undefined : validationMapping;\n      },\n      get() {\n        throw new Error(\"Error Access be provided by the view plugin\");\n      },\n      getValidationsForBinding() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getChildren() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      getValidationsForSection() {\n        throw new Error(\"Error rollup should be provided by the view plugin\");\n      },\n      track: () => {\n        throw new Error(\"Tracking should be provided by the view plugin\");\n      },\n      register: () => {\n        throw new Error(\n          \"Section functionality should be provided by the view plugin\",\n        );\n      },\n      type: (binding) =>\n        this.schema.getType(isBinding(binding) ? binding : parser(binding)),\n    };\n  }\n}\n","import { BindingInstance } from \"../../binding\";\n\n/** Recursively flattens a nested object to be an object of depth 1 with keys being the full path in the orginal object */\nexport function flatten(obj: any, roots: [string][] = [], sep = \".\"): any {\n  return (\n    Object\n      // find props of given object\n      .keys(obj)\n      // return an object by iterating props\n      .reduce(\n        (memo, prop) => ({\n          // create a new object\n\n          // include previously returned object\n          ...memo,\n          ...(Object.prototype.toString.call(obj[prop]) === \"[object Object]\"\n            ? // keep working if value is an object\n              flatten(obj[prop], roots.concat([prop]))\n            : // include current prop and value and prefix prop with the roots\n              { [roots.concat([prop]).join(sep)]: obj[prop] }),\n        }),\n        {},\n      )\n  );\n}\n\n/** Converts an object into a list of binding/value tuples to use with a LocalModel object */\nexport function objectToBatchSet(obj: any): [BindingInstance, any][] {\n  const flattenedObj = flatten(obj);\n  const batchTxn: [BindingInstance, any][] = [];\n\n  Object.keys(flattenedObj).forEach((key) => {\n    batchTxn.push([new BindingInstance(key), flattenedObj[key]]);\n  });\n\n  return batchTxn;\n}\n","/**\n * Convert a string that might contain formatting (such as commas and a currency symbol) to a number\n */\nexport function toNum(val: unknown, coerceTo0?: boolean): number | undefined {\n  if (typeof val === \"number\") {\n    return val;\n  }\n\n  if (typeof val === \"string\" && val.length > 0) {\n    // Trim whitespace\n    let newVal = val.trim();\n    // Remove all commas\n    newVal = newVal.replace(/,/g, \"\");\n    // Remove up to 1 commonly-used currency symbol\n    newVal = newVal.replace(/[¥£$€]/, \"\");\n    const nVal = Number(newVal);\n\n    // ignore hex, binary, octal, and values that don't parse\n    return newVal.match(/^0[xbo]/i) || isNaN(nVal) ? undefined : nVal;\n  }\n\n  return coerceTo0 ? 0 : undefined;\n}\n","import type {\n  ExpressionHandler,\n  ExpressionContext,\n  Binding,\n} from \"@player-ui/player\";\nimport { withoutContext } from \"@player-ui/player\";\nimport { toNum } from \"./toNum\";\n\n/** Returns a function that executes the given function only if the first argument is a string */\nfunction ifString(fn: (arg: string) => unknown) {\n  return (arg: unknown) => {\n    if (typeof arg === \"string\") {\n      return fn(arg);\n    }\n\n    return arg;\n  };\n}\n\n/** Generic Types */\n\nexport const size = withoutContext((val: unknown): number => {\n  if (typeof val === \"string\") {\n    return val.length;\n  }\n\n  if (typeof val === \"object\" && val !== null) {\n    return Object.keys(val).length;\n  }\n\n  return 0;\n});\n\nexport const length = size;\n\n/** Checks to see if the given value is empty */\nexport const isEmpty: ExpressionHandler<[unknown], boolean> = (ctx, val) => {\n  if (val === undefined || val === null) {\n    return true;\n  }\n\n  if (typeof val === \"object\" || typeof val === \"string\") {\n    return size(ctx, val) === 0;\n  }\n\n  return false;\n};\n\n/** Checks to see if the given value is not empty */\nexport const isNotEmpty: ExpressionHandler<[unknown], boolean> = (ctx, val) => {\n  return !isEmpty(ctx, val);\n};\n\nexport const concat = withoutContext((...args: Array<unknown>) => {\n  if (args.every((v) => Array.isArray(v))) {\n    const merged: Array<unknown> = [];\n\n    args.forEach((next) => {\n      merged.push(...next);\n    });\n\n    return merged;\n  }\n\n  return args.reduce((merged: any, next) => merged + (next ?? \"\"), \"\");\n});\n\n/** String Types */\n\nexport const trim = withoutContext(ifString((str) => str.trim()));\nexport const upperCase = withoutContext(ifString((str) => str.toUpperCase()));\nexport const lowerCase = withoutContext(ifString((str) => str.toLowerCase()));\nexport const replace = withoutContext(\n  (str: unknown, pattern: unknown, replacement: unknown = \"\") => {\n    if (\n      typeof str === \"string\" &&\n      typeof pattern === \"string\" &&\n      typeof replacement === \"string\"\n    ) {\n      const replacementRegex = new RegExp(pattern, \"g\");\n\n      return str.replace(replacementRegex, replacement);\n    }\n\n    return str;\n  },\n);\nexport const titleCase = withoutContext(\n  ifString((str) =>\n    str\n      .split(\" \")\n      .map((word) => word[0].toUpperCase() + word.slice(1))\n      .join(\" \"),\n  ),\n);\n\nexport const sentenceCase = withoutContext(\n  ifString((str) => str.replace(/\\b[a-zA-Z]/, (word) => word.toUpperCase())),\n);\n\n// split: Splits a string into an array of substrings based on a separator.\n// Deviations from JS:\n// - If separator is undefined or null, returns the original string (JS would throw TypeError)\n// - If separator is an empty string, splits at every character (matches JS)\nexport const split = withoutContext(\n  (str: string, separator: string, limit?: number) => {\n    // If separator is undefined or null, return the original string (custom: JS throws an error)\n    if (separator === undefined || separator === null) {\n      return str;\n    }\n\n    const separatorStr = String(separator);\n\n    // JS behavior: empty string separator splits at every character\n    if (separatorStr === \"\") {\n      const result = str.split(\"\");\n      if (limit !== undefined && limit !== null && limit > 0) {\n        return result.slice(0, limit);\n      }\n      return result;\n    }\n\n    // Standard JS split behavior for non-empty separator\n    const result = str.split(separatorStr);\n\n    if (limit !== undefined && limit !== null && limit > 0) {\n      return result.slice(0, limit);\n    }\n\n    return result;\n  },\n);\n\n// substr: Extracts a substring from a string.\n// Deviations from JS:\n// - Negative start index counts from the end (JS substring does not support negative indices)\n// - Uses substring logic, not deprecated substr\nexport const substr = withoutContext(\n  (str: string, start: number, length?: number) => {\n    // Custom: Negative start index counts from the end (matches array behavior, not JS substring)\n    const actualStartIndex = start < 0 ? str.length + start : start;\n\n    if (length !== undefined) {\n      return str.substring(actualStartIndex, actualStartIndex + length);\n    }\n\n    return str.substring(actualStartIndex);\n  },\n);\n\n/** Math Types */\n\nexport const number = withoutContext(toNum);\n\nexport const round = withoutContext<[number | string], number>((num) =>\n  Math.round(toNum(num, true) ?? 0),\n);\n\nexport const floor = withoutContext<[number | string], number>((num) =>\n  Math.floor(toNum(num, true) ?? 0),\n);\n\nexport const ceil = withoutContext<[number | string], number>((num) =>\n  Math.ceil(toNum(num, true) ?? 0),\n);\n\nexport const sum = withoutContext<Array<number | string>, number>((...args) => {\n  return args.reduce<number>((s, next) => s + (toNum(next) ?? 0), 0);\n});\n\n/** Array Operations */\n\n/** Finds the property in an array of objects */\nexport const findPropertyIndex: ExpressionHandler<\n  [Array<any> | Binding | undefined, string | undefined, any],\n  number\n> = <T = unknown>(\n  context: ExpressionContext,\n  bindingOrModel: Binding | Array<Record<string, T>> | undefined,\n  propToCheck: string | undefined,\n  valueToCheck: T,\n) => {\n  if (bindingOrModel === undefined) {\n    return -1;\n  }\n\n  const searchArray: Array<Record<string, T>> = Array.isArray(bindingOrModel)\n    ? bindingOrModel\n    : context.model.get(bindingOrModel);\n\n  if (!Array.isArray(searchArray)) {\n    return -1;\n  }\n\n  return searchArray.findIndex((value) => {\n    const propVal =\n      typeof value === \"object\" && propToCheck !== undefined\n        ? value[propToCheck]\n        : value;\n\n    return valueToCheck === propVal;\n  });\n};\n\n/** Searches an array for an object matching the criteria. Returns the target prop from that object */\nexport const findProperty: ExpressionHandler<\n  [Array<any> | Binding, string | undefined, any, string | undefined, any],\n  any\n> = <T = unknown>(\n  context: ExpressionContext,\n  bindingOrModel: Binding | Array<Record<string, T>>,\n  propToCheck: string | undefined,\n  valueToCheck: T,\n  propToReturn?: string,\n  defaultValue?: T,\n) => {\n  const searchArray: Array<Record<string, T>> = Array.isArray(bindingOrModel)\n    ? bindingOrModel\n    : context.model.get(bindingOrModel);\n\n  if (!Array.isArray(searchArray)) {\n    return defaultValue;\n  }\n\n  const foundValue = searchArray.find((value) => {\n    const propVal =\n      typeof value === \"object\" && propToCheck !== undefined\n        ? value[propToCheck]\n        : value;\n\n    return valueToCheck === propVal;\n  });\n\n  if (foundValue === undefined) {\n    return defaultValue;\n  }\n\n  if (typeof foundValue === \"object\" && propToReturn) {\n    return foundValue[propToReturn] ?? defaultValue;\n  }\n\n  return foundValue;\n};\n\n/*\n * Checks if a given string contains any keywords present in the given array\n * @param str: The string to search in\n * @param searchStrs: A keyword(s) to search for\n # @returns boolean: Return true if any of the keywords exist in the given string\n */\nexport const containsAny = withoutContext<[string, string[] | string], boolean>(\n  (str, keywords) => {\n    if (\n      !(typeof str === \"string\") ||\n      !(typeof keywords === \"string\" || Array.isArray(keywords))\n    ) {\n      return false;\n    }\n\n    if (Array.isArray(keywords)) {\n      return keywords.some((keyword) => str.indexOf(keyword) > -1);\n    }\n\n    return str.indexOf(keywords) > -1;\n  },\n);\n","/**\n * Subclass of standard `Error` that eagerly collects the callstack of the error\n * that caused it. This way you can investigate the core problem that happened\n * by looking at the callstack from up to bottom (from higher level errors to\n * lower level).\n */\nexport class NestedError extends Error {\n    /**\n     * Combined callstack of this error and the errors that it wraps.\n     * If the JavaScript runtime doesn't support `Error::stack` property\n     * this will contain only the concatenated messages.\n     */\n    readonly stack: string;\n\n    /**\n     * The list of lower-level errors wrapped by this error.\n     */\n    readonly innerErrors: Error[];\n\n    /**\n     * Provides the first `Error` of the `innerErrors` (if it exists);\n     * otherwise, `null`.\n     *\n     * @deprecated Please shift to using the `innerErrors` (with an 's') property.\n     */\n    get innerError(): Error | null {\n        return this.innerErrors.length === 0\n            ? null\n            : this.innerErrors[0];\n    }\n\n    private static readonly getErrorReport = typeof new Error().stack === 'string'\n        ? (err: Error) => err.stack!\n        : (err: Error) => `${err.name}: ${err.message}`;\n\n    /**\n     * Returns the function that accepts any value that was thrown as the first argument and\n     * throws it wrapped into `NestedError` or class derived from `NestedError` (provided\n     * this method was called directly in the context of that dervied class constructor)\n     * with the given `message`.\n     * Returned function will pass accepted `Error` object directly to `NestedError`\n     * as `innerErrors` by invoking `toError(err)` on it.\n     *\n     * You'll most likely want to use this method with promises:\n     *\n     * ```ts\n     * userService.getPage().then(\n     *     data => console.log(`Hooray! data: ${data}`),\n     *     NestedError.rethrow('failed to fetch users page')\n     * );\n     * ```\n     *\n     * @param message Message to attach `NestedError` created by the returned function.\n     */\n    static rethrow(message: string) {\n        return (...errs: unknown[]) => { throw new this(message, ...errs); };\n    }\n\n    /**\n     * Allocates an instance of `NestedError` with the given error `message` and\n     * optional `innerError` (which will be automatically coerced using `toError()`).\n     *\n     * @param message     Laconic error message to attach to the created `NestedError`.\n     * @param innerErrors Optional errors that will be wrapped by this higher level\n     *                    error. This value will be automatically coerced using `toError()`.\n     */\n    constructor(message?: string, ...innerErrors: unknown[]) {\n        super(message);\n        const thisErrorReport = NestedError.getErrorReport(this);\n        if (innerErrors.length === 1) {\n            const innerError = toError(innerErrors[0]);\n            this.innerErrors = [innerError];\n            const errReport = NestedError.getErrorReport(innerError);\n            this.stack = `${thisErrorReport}\\n\\n======= INNER ERROR =======\\n\\n${errReport}`;\n            return;\n        }\n        this.innerErrors = innerErrors.map(err => toError(err));\n        const innerErrorReports = this.innerErrors\n            .map((error, idx) => {\n                const errReport = NestedError.getErrorReport(error);\n                return `======= INNER ERROR (${idx + 1} of ${innerErrors.length}) =======\\n\\n${errReport}`;\n            })\n            .join(\"\\n\\n\");\n        this.stack = `${thisErrorReport}\\n\\n${innerErrorReports}`;\n    }\n}\n\nNestedError.prototype.name = nameof(NestedError);\n\n/**\n * @deprecated You should not call this function on an object of statically assumed `Error` type,\n *             because it is intended to be used in a dynamic context where the type of thrown value\n *             is not known ahead of time (during the compile time).\n */\nexport function toError(err: Error): Error;\n\n/**\n * Returns `err` itself if `err instanceof Error === true`, otherwise attemts to\n * stringify it and wrap into `Error` object to be returned.\n *\n * **This function is guaranteed never to throw.**\n *\n * @param err Possbile `instanceof Error` to return or value of any type that will\n *            be wrapped into a fully-fledged `Error` object.\n */\nexport function toError(err: unknown): Error;\n\nexport function toError(err: unknown) {\n    try {\n        return err instanceof Error\n            ? err\n            : new Error(`Value that is not an instance of Error was thrown: ${err}`);\n    } catch {\n        return new Error(\n            \"Failed to stringify non-instance of Error that was thrown.\" +\n            \"This is possibly due to the fact that toString() method of the value\" +\n            \"doesn't return a primitive value.\"\n        );\n    }\n}\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = clone;\nexports.addLast = addLast;\nexports.addFirst = addFirst;\nexports.removeLast = removeLast;\nexports.removeFirst = removeFirst;\nexports.insert = insert;\nexports.removeAt = removeAt;\nexports.replaceAt = replaceAt;\nexports.getIn = getIn;\nexports.set = set;\nexports.setIn = setIn;\nexports.update = update;\nexports.updateIn = updateIn;\nexports.merge = merge;\nexports.mergeDeep = mergeDeep;\nexports.mergeIn = mergeIn;\nexports.omit = omit;\nexports.addDefaults = addDefaults;\nexports.default = void 0;\n\n/* eslint-disable @typescript-eslint/ban-types */\n\n/*!\n * Timm\n *\n * Immutability helpers with fast reads and acceptable writes.\n *\n * @copyright Guillermo Grau Panea 2016\n * @license MIT\n */\nconst INVALID_ARGS = 'INVALID_ARGS';\nconst IS_DEV = process.env.NODE_ENV !== 'production';\n\n// ===============================================\n// ### Helpers\n// ===============================================\nfunction throwStr(msg) {\n  throw new Error(msg);\n}\n\nfunction getKeysAndSymbols(obj) {\n  const keys = Object.keys(obj);\n\n  if (Object.getOwnPropertySymbols) {\n    // @ts-ignore\n    return keys.concat(Object.getOwnPropertySymbols(obj));\n  }\n\n  return keys;\n}\n\nconst hasOwnProperty = {}.hasOwnProperty;\n\nfunction clone(obj0) {\n  // As array\n  if (Array.isArray(obj0)) return obj0.slice(); // As object\n\n  const obj = obj0;\n  const keys = getKeysAndSymbols(obj);\n  const out = {};\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    out[key] = obj[key];\n  } // @ts-ignore (see type tests)\n\n\n  return out;\n} // Custom guard\n\n\nfunction isObject(o) {\n  return o != null && typeof o === 'object';\n} // _deepFreeze = (obj) ->\n//   Object.freeze obj\n//   for key in Object.getOwnPropertyNames obj\n//     val = obj[key]\n//     if isObject(val) and not Object.isFrozen val\n//       _deepFreeze val\n//   obj\n// ===============================================\n// -- ### Arrays\n// ===============================================\n// -- #### addLast()\n// -- Returns a new array with an appended item or items.\n// --\n// -- Usage: `addLast(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addLast(arr, 'c')\n// -- // ['a', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addLast(arr, ['c', 'd'])\n// -- // ['a', 'b', 'c', 'd']\n// -- ```\n// `array.concat(val)` also handles the scalar case,\n// but is apparently very slow\n\n\nfunction addLast(array, val) {\n  if (Array.isArray(val)) return array.concat(val);\n  return array.concat([val]);\n} // -- #### addFirst()\n// -- Returns a new array with a prepended item or items.\n// --\n// -- Usage: `addFirst(array, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = addFirst(arr, 'c')\n// -- // ['c', 'a', 'b']\n// -- arr2 === arr\n// -- // false\n// -- arr3 = addFirst(arr, ['c', 'd'])\n// -- // ['c', 'd', 'a', 'b']\n// -- ```\n\n\nfunction addFirst(array, val) {\n  if (Array.isArray(val)) return val.concat(array);\n  return [val].concat(array);\n} // -- #### removeLast()\n// -- Returns a new array removing the last item.\n// --\n// -- Usage: `removeLast(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeLast(arr)\n// -- // ['a']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeLast(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeLast(array) {\n  if (!array.length) return array;\n  return array.slice(0, array.length - 1);\n} // -- #### removeFirst()\n// -- Returns a new array removing the first item.\n// --\n// -- Usage: `removeFirst(array)`\n// --\n// -- ```js\n// -- arr = ['a', 'b']\n// -- arr2 = removeFirst(arr)\n// -- // ['b']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- arr3 = []\n// -- removeFirst(arr3) === arr3\n// -- // true\n// -- ```\n\n\nfunction removeFirst(array) {\n  if (!array.length) return array;\n  return array.slice(1);\n} // -- #### insert()\n// -- Returns a new array obtained by inserting an item or items\n// -- at a specified index.\n// --\n// -- Usage: `insert(array, idx, val)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = insert(arr, 1, 'd')\n// -- // ['a', 'd', 'b', 'c']\n// -- arr2 === arr\n// -- // false\n// -- insert(arr, 1, ['d', 'e'])\n// -- // ['a', 'd', 'e', 'b', 'c']\n// -- ```\n\n\nfunction insert(array, idx, val) {\n  return array.slice(0, idx).concat(Array.isArray(val) ? val : [val]).concat(array.slice(idx));\n} // -- #### removeAt()\n// -- Returns a new array obtained by removing an item at\n// -- a specified index.\n// --\n// -- Usage: `removeAt(array, idx)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = removeAt(arr, 1)\n// -- // ['a', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same array is returned if there are no changes:\n// -- removeAt(arr, 4) === arr\n// -- // true\n// -- ```\n\n\nfunction removeAt(array, idx) {\n  if (idx >= array.length || idx < 0) return array;\n  return array.slice(0, idx).concat(array.slice(idx + 1));\n} // -- #### replaceAt()\n// -- Returns a new array obtained by replacing an item at\n// -- a specified index. If the provided item is the same as\n// -- (*referentially equal to*) the previous item at that position,\n// -- the original array is returned.\n// --\n// -- Usage: `replaceAt(array, idx, newItem)`\n// --\n// -- ```js\n// -- arr = ['a', 'b', 'c']\n// -- arr2 = replaceAt(arr, 1, 'd')\n// -- // ['a', 'd', 'c']\n// -- arr2 === arr\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- replaceAt(arr, 1, 'b') === arr\n// -- // true\n// -- ```\n\n\nfunction replaceAt(array, idx, newItem) {\n  if (array[idx] === newItem) return array;\n  const len = array.length;\n  const result = Array(len);\n\n  for (let i = 0; i < len; i++) {\n    result[i] = array[i];\n  }\n\n  result[idx] = newItem;\n  return result;\n} // ===============================================\n// -- ### Collections (objects and arrays)\n// ===============================================\n// -- #### getIn()\n// -- Returns a value from an object at a given path. Works with\n// -- nested arrays and objects. If the path does not exist, it returns\n// -- `undefined`.\n// --\n// -- Usage: `getIn(obj, path)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: ['a', 'b', 'c'] }\n// -- getIn(obj, ['d', 'd1'])\n// -- // 3\n// -- getIn(obj, ['e', 1])\n// -- // 'b'\n// -- ```\n\n\nfunction getIn(obj, path) {\n  if (!Array.isArray(path)) {\n    throwStr(IS_DEV ? 'A path array should be provided when calling getIn()' : INVALID_ARGS);\n  }\n\n  if (obj == null) return undefined;\n  let ptr = obj;\n\n  for (let i = 0; i < path.length; i++) {\n    const key = path[i];\n    ptr = ptr != null ? ptr[key] : undefined;\n    if (ptr === undefined) return ptr;\n  }\n\n  return ptr;\n} // -- #### set()\n// -- Returns a new object with a modified attribute.\n// -- If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `set(obj, key, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = set(obj, 'b', 5)\n// -- // { a: 1, b: 5, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- set(obj, 'b', 2) === obj\n// -- // true\n// -- ```\n// When called with an undefined/null `obj`, `set()` returns either\n// a single-element array, or a single-key object\n\n\n// Implementation\nfunction set(obj0, key, val) {\n  let obj = obj0;\n  if (obj == null) obj = typeof key === 'number' ? [] : {};\n  if (obj[key] === val) return obj;\n  const obj2 = clone(obj);\n  obj2[key] = val;\n  return obj2;\n} // -- #### setIn()\n// -- Returns a new object with a modified **nested** attribute.\n// --\n// -- Notes:\n// --\n// -- * If the provided value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// -- * If the path does not exist, it will be created before setting\n// -- the new value.\n// --\n// -- Usage: `setIn(obj, path, val)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 = setIn(obj, ['d', 'd1'], 4)\n// -- // { a: 1, b: 2, d: { d1: 4, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj2 === obj\n// -- // false\n// -- obj2.d === obj.d\n// -- // false\n// -- obj2.e === obj.e\n// -- // true\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = setIn(obj, ['d', 'd1'], 3)\n// -- // { a: 1, b: 2, d: { d1: 3, d2: 4 }, e: { e1: 'foo', e2: 'bar' } }\n// -- obj3 === obj\n// -- // true\n// -- obj3.d === obj.d\n// -- // true\n// -- obj3.e === obj.e\n// -- // true\n// --\n// -- // ... unknown paths create intermediate keys. Numeric segments are treated as array indices:\n// -- setIn({ a: 3 }, ['unknown', 0, 'path'], 4)\n// -- // { a: 3, unknown: [{ path: 4 }] }\n// -- ```\n\n\nfunction setIn(obj, path, val) {\n  if (!path.length) return val;\n  return doSetIn(obj, path, val, 0);\n}\n\nfunction doSetIn(obj, path, val, idx) {\n  let newValue;\n  const key = path[idx];\n\n  if (idx === path.length - 1) {\n    newValue = val;\n  } else {\n    const nestedObj = isObject(obj) && isObject(obj[key]) ? obj[key] : typeof path[idx + 1] === 'number' ? [] : {};\n    newValue = doSetIn(nestedObj, path, val, idx + 1);\n  }\n\n  return set(obj, key, newValue);\n} // -- #### update()\n// -- Returns a new object with a modified attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `update(obj, key, fnUpdate)`\n// --\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3 }\n// -- obj2 = update(obj, 'b', (val) => val + 1)\n// -- // { a: 1, b: 3, c: 3 }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- update(obj, 'b', (val) => val) === obj\n// -- // true\n// -- ```\n\n\nfunction update(obj, key, fnUpdate) {\n  const prevVal = obj == null ? undefined : obj[key];\n  const nextVal = fnUpdate(prevVal);\n  return set(obj, key, nextVal);\n} // -- #### updateIn()\n// -- Returns a new object with a modified **nested** attribute,\n// -- calculated via a user-provided callback based on the current value.\n// -- If the calculated value is the same as (*referentially equal to*)\n// -- the previous value, the original object is returned.\n// --\n// -- Usage: `updateIn<T: ArrayOrObject>(obj: T, path: Array<Key>,\n// -- fnUpdate: (prevValue: any) => any): T`\n// --\n// -- ```js\n// -- obj = { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj2 = updateIn(obj, ['d', 'd1'], (val) => val + 1)\n// -- // { a: 1, d: { d1: 4, d2: 4 } }\n// -- obj2 === obj\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- obj3 = updateIn(obj, ['d', 'd1'], (val) => val)\n// -- // { a: 1, d: { d1: 3, d2: 4 } }\n// -- obj3 === obj\n// -- // true\n// -- ```\n\n\nfunction updateIn(obj, path, fnUpdate) {\n  const prevVal = getIn(obj, path);\n  const nextVal = fnUpdate(prevVal);\n  return setIn(obj, path, nextVal);\n} // -- #### merge()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- Similar to `Object.assign()`, but immutable.\n// --\n// -- Usage:\n// --\n// -- * `merge(obj1, obj2)`\n// -- * `merge(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5 }\n// -- obj3 = merge(obj1, obj2)\n// -- // { a: 1, b: 2, c: 4, d: 5 }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- merge(obj1, { c: 3 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 1 arg\n\n\n// Implementation\nfunction merge(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, false, a, b, c, d, e, f, ...rest) : doMerge(false, false, a, b, c, d, e, f);\n} // -- #### mergeDeep()\n// -- Returns a new object built as follows: the overlapping keys from the\n// -- second one overwrite the corresponding entries from the first one.\n// -- If both the first and second entries are objects they are merged recursively.\n// -- Similar to `Object.assign()`, but immutable, and deeply merging.\n// --\n// -- Usage:\n// --\n// -- * `mergeDeep(obj1, obj2)`\n// -- * `mergeDeep(obj1, ...objects)`\n// --\n// -- The unmodified `obj1` is returned if `obj2` does not *provide something\n// -- new to* `obj1`, i.e. if either of the following\n// -- conditions are true:\n// --\n// -- * `obj2` is `null` or `undefined`\n// -- * `obj2` is an object, but it is empty\n// -- * All attributes of `obj2` are `undefined`\n// -- * All attributes of `obj2` are referentially equal to the\n// --   corresponding attributes of `obj1`\n// --\n// -- Note that `undefined` attributes in `obj2` do not modify the\n// -- corresponding attributes in `obj1`.\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: { a: 1 } }\n// -- obj2 = { b: 3, c: { b: 2 } }\n// -- obj3 = mergeDeep(obj1, obj2)\n// -- // { a: 1, b: 3, c: { a: 1, b: 2 }  }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeDeep(obj1, { c: { a: 1 } }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeDeep(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, false, true, a, b, c, d, e, f, ...rest) : doMerge(false, true, a, b, c, d, e, f);\n} // -- #### mergeIn()\n// -- Similar to `merge()`, but merging the value at a given nested path.\n// --\n// -- Usage examples:\n// --\n// -- * `mergeIn(obj1, path, obj2)`\n// -- * `mergeIn(obj1, path, ...objects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, d: { b: { d1: 3, d2: 4 } } }\n// -- obj2 = { d3: 5 }\n// -- obj3 = mergeIn(obj1, ['d', 'b'], obj2)\n// -- // { a: 1, d: { b: { d1: 3, d2: 4, d3: 5 } } }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- mergeIn(obj1, ['d', 'b'], { d2: 4 }) === obj1\n// -- // true\n// -- ```\n\n\nfunction mergeIn(a, path, b, c, d, e, f, ...rest) {\n  let prevVal = getIn(a, path);\n  if (prevVal == null) prevVal = {};\n  let nextVal;\n\n  if (rest.length) {\n    nextVal = doMerge.call(null, false, false, prevVal, b, c, d, e, f, ...rest);\n  } else {\n    nextVal = doMerge(false, false, prevVal, b, c, d, e, f);\n  }\n\n  return setIn(a, path, nextVal);\n} // -- #### omit()\n// -- Returns an object excluding one or several attributes.\n// --\n// -- Usage: `omit(obj, attrs)`\n//\n// -- ```js\n// -- obj = { a: 1, b: 2, c: 3, d: 4 }\n// -- omit(obj, 'a')\n// -- // { b: 2, c: 3, d: 4 }\n// -- omit(obj, ['b', 'c'])\n// -- // { a: 1, d: 4 }\n// --\n// -- // The same object is returned if there are no changes:\n// -- omit(obj, 'z') === obj1\n// -- // true\n// -- ```\n\n\nfunction omit(obj, attrs) {\n  const omitList = Array.isArray(attrs) ? attrs : [attrs];\n  let fDoSomething = false;\n\n  for (let i = 0; i < omitList.length; i++) {\n    if (hasOwnProperty.call(obj, omitList[i])) {\n      fDoSomething = true;\n      break;\n    }\n  }\n\n  if (!fDoSomething) return obj;\n  const out = {};\n  const keys = getKeysAndSymbols(obj);\n\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if (omitList.indexOf(key) >= 0) continue;\n    out[key] = obj[key];\n  }\n\n  return out;\n} // -- #### addDefaults()\n// -- Returns a new object built as follows: `undefined` keys in the first one\n// -- are filled in with the corresponding values from the second one\n// -- (even if they are `null`).\n// --\n// -- Usage:\n// --\n// -- * `addDefaults(obj, defaults)`\n// -- * `addDefaults(obj, ...defaultObjects)`\n// --\n// -- ```js\n// -- obj1 = { a: 1, b: 2, c: 3 }\n// -- obj2 = { c: 4, d: 5, e: null }\n// -- obj3 = addDefaults(obj1, obj2)\n// -- // { a: 1, b: 2, c: 3, d: 5, e: null }\n// -- obj3 === obj1\n// -- // false\n// --\n// -- // The same object is returned if there are no changes:\n// -- addDefaults(obj1, { c: 4 }) === obj1\n// -- // true\n// -- ```\n// Signatures:\n// - 2 args\n\n\n// Implementation and catch-all\nfunction addDefaults(a, b, c, d, e, f, ...rest) {\n  return rest.length ? doMerge.call(null, true, false, a, b, c, d, e, f, ...rest) : doMerge(true, false, a, b, c, d, e, f);\n}\n\nfunction doMerge(fAddDefaults, fDeep, first, ...rest) {\n  let out = first;\n\n  if (!(out != null)) {\n    throwStr(IS_DEV ? 'At least one object should be provided to merge()' : INVALID_ARGS);\n  }\n\n  let fChanged = false;\n\n  for (let idx = 0; idx < rest.length; idx++) {\n    const obj = rest[idx];\n    if (obj == null) continue;\n    const keys = getKeysAndSymbols(obj);\n    if (!keys.length) continue;\n\n    for (let j = 0; j <= keys.length; j++) {\n      const key = keys[j];\n      if (fAddDefaults && out[key] !== undefined) continue;\n      let nextVal = obj[key];\n\n      if (fDeep && isObject(out[key]) && isObject(nextVal)) {\n        nextVal = doMerge(fAddDefaults, fDeep, out[key], nextVal);\n      }\n\n      if (nextVal === undefined || nextVal === out[key]) continue;\n\n      if (!fChanged) {\n        fChanged = true;\n        out = clone(out);\n      }\n\n      out[key] = nextVal;\n    }\n  }\n\n  return out;\n} // ===============================================\n// ### Public API\n// ===============================================\n\n\nconst timm = {\n  clone,\n  addLast,\n  addFirst,\n  removeLast,\n  removeFirst,\n  insert,\n  removeAt,\n  replaceAt,\n  getIn,\n  set,\n  setIn,\n  update,\n  updateIn,\n  merge,\n  mergeDeep,\n  mergeIn,\n  omit,\n  addDefaults\n};\nvar _default = timm;\nexports.default = _default;","'use strict';\n\nconst pDefer = () => {\n\tconst deferred = {};\n\n\tdeferred.promise = new Promise((resolve, reject) => {\n\t\tdeferred.resolve = resolve;\n\t\tdeferred.reject = reject;\n\t});\n\n\treturn deferred;\n};\n\nmodule.exports = pDefer;\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","var SortedArray = (function () {\n    var SortedArray = defclass({\n\n        constructor: function (array, compare) {\n            this.array   = [];\n            this.compare = compare || compareDefault;\n            var length   = array.length,\n                index    = 0;\n            while (index < length) this.insert(array[index++]);\n        },\n        insert: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                pos = -1,\n                index,\n                ordering;\n\n            // The array is sorted. You must find the position of new element in O(log(n)), not O(n).\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);                \n                if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else {\n                    pos = index;\n                    break;\n                };\n            }\n\n            if (pos === -1) {\n                // if element was not found, high < low.\n                pos = high;\n            }\n            // This assures that equal elements inserted after will be in a higher position in array.\n            // They can be equal for comparison purposes, but different objects with different data.\n            // Respecting the chronological order can be important for many applications.\n            pos++;\n            high = array.length-1;\n            while ((pos < high) && (compare(element, array[pos]) === 0)){\n                pos++;\n            }\n            index = array.length;\n            // Just to increase array size.\n            array.push(element);            \n            // Much faster. No need to elements swap.\n            while (index > pos) {\n                array[index] = array[--index];\n            }\n            // Set the new element on its correct position.\n            array[pos] = element;\n\n            return this;\n        },\n        search: function (element) {\n            var array   = this.array,\n                compare = this.compare,\n                high    = array.length-1,\n                low     = 0,\n                // In most languages, inner variable declaration makes the code slower.\n                index,\n                ordering;\n\n            while (high >= low) {\n                index    = (high + low) / 2 >>> 0;\n                ordering = compare(array[index], element);\n\n                     if (ordering < 0) low  = index + 1;\n                else if (ordering > 0) high = index - 1;\n                else return index;\n            }\n\n            return -1;\n        },\n        remove: function (element) {\n            var index = this.search(element);\n            if (index >= 0) this.array.splice(index, 1);\n            return this;\n        }\n    });\n\n    SortedArray.comparing = function (property, array) {\n        return new SortedArray(array, function (a, b) {\n            // This should be faster than calling functions.\n            // Besides, this way it is not needed to create useless function to return property value.\n            return compareDefault(a[property], b[property]);\n        });\n    };\n\n    return SortedArray;\n\n    function defclass(prototype) {\n        var constructor = prototype.constructor;\n        constructor.prototype = prototype;\n        return constructor;\n    }\n\n    function compareDefault(a, b) {\n        // Equality has a very low chance to happen. It should be the last option.\n        if (a < b)\n            return -1;\n        else if (a > b)\n            return 1;\n        else\n            return 0;\n    }\n}());\n\nif (typeof module === \"object\") module.exports = SortedArray;\nif (typeof define === \"function\" && define.amd)\n    define(function () { return SortedArray; });\n","import type { ExtendedPlayerPlugin, Player } from \"@player-ui/player\";\nimport { ExpressionPlugin } from \"@player-ui/expression-plugin\";\nimport * as Expressions from \"./expressions\";\nimport type {\n  size,\n  length,\n  isEmpty,\n  isNotEmpty,\n  concat,\n  trim,\n  upperCase,\n  lowerCase,\n  replace,\n  titleCase,\n  sentenceCase,\n  split,\n  substr,\n  number,\n  round,\n  floor,\n  ceil,\n  sum,\n  findPropertyIndex,\n  findProperty,\n  containsAny,\n} from \"./expressions\";\n\nexport { Expressions };\n\n/**\n * Exposes a lot of expressions to Player.\n */\nexport class CommonExpressionsPlugin\n  implements\n    ExtendedPlayerPlugin<\n      [],\n      [],\n      [\n        typeof size,\n        typeof length,\n        typeof isEmpty,\n        typeof isNotEmpty,\n        typeof concat,\n        typeof trim,\n        typeof upperCase,\n        typeof lowerCase,\n        typeof replace,\n        typeof titleCase,\n        typeof sentenceCase,\n        typeof split,\n        typeof substr,\n        typeof number,\n        typeof round,\n        typeof floor,\n        typeof ceil,\n        typeof sum,\n        typeof findPropertyIndex,\n        typeof findProperty,\n        typeof containsAny,\n      ]\n    >\n{\n  name = \"CommonExpressions\";\n\n  apply(player: Player): void {\n    player.registerPlugin(\n      new ExpressionPlugin(new Map(Object.entries(Expressions))),\n    );\n  }\n}\n","import type {\n  Player,\n  PlayerPlugin,\n  ExpressionHandler,\n} from \"@player-ui/player\";\n\nexport type ExpressionMap = Map<string, ExpressionHandler<any[], any>>;\n\n/**\n * The ExpressionPlugin is an easy way to inject custom expression handlers into the running player instance.\n * Simply supply a map of function name to handler, and the expressions will be available inside of the Content.\n *\n * Any subsequent expressions registered with the same name will override previous handlers.\n */\nexport class ExpressionPlugin implements PlayerPlugin {\n  name = \"ExpressionPlugin\";\n  private expressions: ExpressionMap;\n\n  constructor(expressionMap: ExpressionMap) {\n    this.expressions = expressionMap;\n  }\n\n  apply(player: Player) {\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      this.expressions.forEach((handler, name) => {\n        expEvaluator.addExpressionFunction(name, handler);\n      });\n    });\n  }\n}\n","import { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport { NestedError } from \"ts-nested-error\";\nimport type { ParserResult, AnyNode } from \"../binding-grammar/index\";\nimport {\n  // We can swap this with whichever parser we want to use\n  parseCustom as parseBinding,\n} from \"../binding-grammar\";\nimport type { BindingParserOptions, BindingLike } from \"./binding\";\nimport { BindingInstance } from \"./binding\";\nimport { isBinding } from \"./utils\";\nimport type { NormalizedResult, ResolveBindingASTOptions } from \"./resolver\";\nimport { resolveBindingAST } from \"./resolver\";\n\nexport * from \"./utils\";\nexport * from \"./binding\";\n\nexport const SIMPLE_BINDING_REGEX = /^[\\w\\-@]+(\\.[\\w\\-@]+)*$/;\nexport const BINDING_BRACKETS_REGEX = /[\\s()*=`{}'\"[\\]]/;\nconst LAZY_BINDING_REGEX = /^[^.]+(\\..+)*$/;\n\nconst DEFAULT_OPTIONS: BindingParserOptions = {\n  get: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  set: () => {\n    throw new Error(\"Not Implemented\");\n  },\n  evaluate: () => {\n    throw new Error(\"Not Implemented\");\n  },\n};\n\ntype BeforeResolveNodeContext = Required<NormalizedResult> &\n  ResolveBindingASTOptions;\n\n/** A parser for creating bindings from a string */\nexport class BindingParser {\n  private cache: Record<string, BindingInstance>;\n  private parseCache: Record<string, ParserResult>;\n  private parserOptions: BindingParserOptions;\n\n  public hooks = {\n    skipOptimization: new SyncBailHook<[string], boolean>(),\n    beforeResolveNode: new SyncWaterfallHook<\n      [AnyNode, BeforeResolveNodeContext]\n    >(),\n  };\n\n  constructor(options?: Partial<BindingParserOptions>) {\n    this.parserOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.cache = {};\n    this.parseCache = {};\n    this.parse = this.parse.bind(this);\n  }\n\n  /**\n   * Takes a binding path, parses it, and returns an equivalent, normalized\n   * representation of that path.\n   */\n  private normalizePath(\n    path: string,\n    resolveOptions: ResolveBindingASTOptions,\n  ) {\n    /**\n     * Ensure no binding characters exist in path and the characters remaining\n     * look like a binding format.\n     */\n    if (\n      !BINDING_BRACKETS_REGEX.test(path) &&\n      LAZY_BINDING_REGEX.test(path) &&\n      this.hooks.skipOptimization.call(path) !== true\n    ) {\n      return { path: path.split(\".\"), updates: undefined } as NormalizedResult;\n    }\n\n    const ast = this.parseCache[path] ?? parseBinding(path);\n    this.parseCache[path] = ast;\n\n    if (typeof ast !== \"object\" || !ast?.status) {\n      throw new TypeError(\n        `Cannot normalize path \"${path}\": ${ast?.error ?? \"Unknown Error.\"}`,\n      );\n    }\n\n    try {\n      return resolveBindingAST(ast.path, resolveOptions, this.hooks);\n    } catch (e: any) {\n      throw new NestedError(`Cannot resolve binding: ${path}`, e);\n    }\n  }\n\n  private getBindingForNormalizedResult(\n    normalized: NormalizedResult,\n  ): BindingInstance {\n    const normalizedStr = normalized.path.join(\".\");\n\n    if (this.cache[normalizedStr]) {\n      return this.cache[normalizedStr];\n    }\n\n    const created = new BindingInstance(\n      normalizedStr === \"\" ? [] : normalized.path,\n      this.parse,\n    );\n    this.cache[normalizedStr] = created;\n\n    return created;\n  }\n\n  public parse(\n    rawBinding: BindingLike,\n    overrides: Partial<BindingParserOptions> = {},\n  ): BindingInstance {\n    if (isBinding(rawBinding)) {\n      return rawBinding;\n    }\n\n    const options = {\n      ...this.parserOptions,\n      ...overrides,\n    };\n\n    let updates: Record<string, any> = {};\n\n    const joined = Array.isArray(rawBinding)\n      ? rawBinding.join(\".\")\n      : String(rawBinding);\n\n    const normalizeConfig: ResolveBindingASTOptions = {\n      getValue: (path: Array<string | number>) => {\n        const normalized = this.normalizePath(path.join(\".\"), normalizeConfig);\n\n        return options.get(this.getBindingForNormalizedResult(normalized));\n      },\n      evaluate: (exp) => {\n        return options.evaluate(exp);\n      },\n      convertToPath: (path: any) => {\n        if (path === undefined) {\n          throw new Error(\n            \"Attempted to convert undefined value to binding path\",\n          );\n        }\n\n        if (\n          typeof path !== \"string\" &&\n          typeof path !== \"number\" &&\n          typeof path !== \"boolean\"\n        ) {\n          throw new Error(\n            `Attempting to convert ${typeof path} to a binding path.`,\n          );\n        }\n\n        const normalized = this.normalizePath(String(path), normalizeConfig);\n\n        if (normalized.updates) {\n          updates = {\n            ...updates,\n            ...normalized.updates,\n          };\n        }\n\n        const joinedNormalizedPath = normalized.path.join(\".\");\n\n        if (joinedNormalizedPath === \"\") {\n          throw new Error(\"Nested path resolved to an empty path\");\n        }\n\n        return joinedNormalizedPath;\n      },\n    };\n\n    const normalized = this.normalizePath(joined, normalizeConfig);\n\n    if (normalized.updates) {\n      updates = {\n        ...updates,\n        ...normalized.updates,\n      };\n    }\n\n    const updateKeys = Object.keys(updates);\n\n    if (!options.readOnly && updateKeys.length > 0) {\n      const updateTransaction = updateKeys.map<[BindingInstance, any]>(\n        (updatedBinding) => [\n          this.parse(updatedBinding),\n          updates[updatedBinding],\n        ],\n      );\n\n      options.set(updateTransaction);\n    }\n\n    return this.getBindingForNormalizedResult(normalized);\n  }\n}\n","import { NestedError } from \"ts-nested-error\";\nimport type { SyncWaterfallHook } from \"tapable-ts\";\nimport type { PathNode, AnyNode } from \"../binding-grammar\";\nimport { findInArray, maybeConvertToNum } from \"./utils\";\n\nexport interface NormalizedResult {\n  /** The normalized path */\n  path: Array<string | number>;\n\n  /** Any new updates that need to happen for this binding to be resolved */\n  updates?: Record<string, any>;\n}\n\nexport interface ResolveBindingASTOptions {\n  /** Get the value of the model at the given path */\n  getValue: (path: Array<string | number>) => any;\n\n  /** Convert the value into valid path segments */\n  convertToPath: (value: any) => string;\n\n  /** Convert the value into valid path segments */\n  evaluate: (exp: string) => any;\n}\n\nexport interface ResolveBindingASTHooks {\n  /** A hook for transforming a node before fully resolving it */\n  beforeResolveNode: SyncWaterfallHook<\n    [AnyNode, Required<NormalizedResult> & ResolveBindingASTOptions]\n  >;\n}\n\n/** Given a binding AST, resolve it */\nexport function resolveBindingAST(\n  bindingPathNode: PathNode,\n  options: ResolveBindingASTOptions,\n  hooks?: ResolveBindingASTHooks,\n): NormalizedResult {\n  const context: Required<NormalizedResult> = {\n    updates: {},\n    path: [],\n  };\n\n  // let updates: Record<string, any> = {};\n  // const path: Array<string | number> = [];\n\n  /** Get the value for any child node */\n  function getValueForNode(node: AnyNode): any {\n    if (node.name === \"Value\") {\n      return node.value;\n    }\n\n    if (node.name === \"PathNode\") {\n      const nestedResolvedValue = resolveBindingAST(node, options);\n\n      if (nestedResolvedValue.updates) {\n        context.updates = {\n          ...context.updates,\n          ...nestedResolvedValue.updates,\n        };\n      }\n\n      try {\n        return options.convertToPath(\n          options.getValue(nestedResolvedValue.path),\n        );\n      } catch (e: any) {\n        throw new NestedError(\n          `Unable to resolve path segment: ${nestedResolvedValue.path}`,\n          e,\n        );\n      }\n    }\n\n    if (node.name === \"Expression\") {\n      try {\n        const actualValue = options.evaluate(node.value);\n\n        return options.convertToPath(actualValue);\n      } catch (e: any) {\n        throw new NestedError(`Unable to resolve path: ${node.value}`, e);\n      }\n    }\n\n    throw new Error(`Unable to resolve value for node: ${node.name}`);\n  }\n\n  /** Handle when path segments are binding paths (foo.bar) or single segments (foo) */\n  function appendPathSegments(segment: string | number) {\n    if (typeof segment === \"string\" && segment.indexOf(\".\") > -1) {\n      segment.split(\".\").forEach((i) => {\n        context.path.push(maybeConvertToNum(i));\n      });\n    } else {\n      context.path.push(segment);\n    }\n  }\n\n  /** Compute the _actual_ binding val from the AST */\n  function resolveNode(_node: AnyNode) {\n    const resolvedNode =\n      hooks?.beforeResolveNode.call(_node, { ...context, ...options }) ?? _node;\n\n    switch (resolvedNode.name) {\n      case \"Expression\":\n      case \"PathNode\":\n        appendPathSegments(getValueForNode(resolvedNode));\n        break;\n\n      case \"Value\":\n        appendPathSegments(resolvedNode.value);\n        break;\n\n      case \"Query\": {\n        // Look for an object at the path with the given key/val criteria\n        const objToQuery: Record<string, any>[] =\n          options.getValue(context.path) ?? [];\n\n        const { key, value } = resolvedNode;\n\n        const resolvedKey = getValueForNode(key);\n        const resolvedValue = value && getValueForNode(value);\n\n        const index = findInArray(objToQuery, resolvedKey, resolvedValue);\n\n        if (index === undefined || index === -1) {\n          context.updates[\n            [...context.path, objToQuery.length, resolvedKey].join(\".\")\n          ] = resolvedValue;\n          context.path.push(objToQuery.length);\n        } else {\n          context.path.push(index);\n        }\n\n        break;\n      }\n\n      case \"Concatenated\":\n        context.path.push(resolvedNode.value.map(getValueForNode).join(\"\"));\n        break;\n\n      default:\n        throw new Error(`Unsupported node type: ${(resolvedNode as any).name}`);\n    }\n  }\n\n  bindingPathNode.path.forEach(resolveNode);\n\n  return {\n    path: context.path,\n    updates:\n      Object.keys(context.updates ?? {}).length > 0\n        ? context.updates\n        : undefined,\n  };\n}\n","import get from \"dlv\";\nimport { setIn, omit, removeAt } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type { BatchSetTransaction, DataModelImpl, Updates } from \"./model\";\n\n/**\n * A data model that stores data in an in-memory JS object\n */\nexport class LocalModel implements DataModelImpl {\n  public model: {\n    [key: string]: any;\n  };\n\n  constructor(model = {}) {\n    this.model = model;\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public reset(model = {}) {\n    this.model = model;\n  }\n\n  public get(binding?: BindingInstance) {\n    if (!binding || !binding.asString()) {\n      return this.model;\n    }\n\n    return get(this.model, binding.asArray() as string[]);\n  }\n\n  public set(transaction: BatchSetTransaction) {\n    const effectiveOperations: Updates = [];\n    transaction.forEach(([binding, value]) => {\n      const oldValue = this.get(binding);\n      this.model = setIn(this.model, binding.asArray(), value) as any;\n      effectiveOperations.push({ binding, oldValue, newValue: value });\n    });\n    return effectiveOperations;\n  }\n\n  public delete(binding: BindingInstance) {\n    const parentBinding = binding.parent();\n\n    if (parentBinding) {\n      const parentValue = this.get(parentBinding);\n\n      if (parentValue !== undefined) {\n        if (Array.isArray(parentValue)) {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            removeAt(parentValue, binding.key() as number),\n          ) as any;\n        } else {\n          this.model = setIn(\n            this.model,\n            parentBinding.asArray(),\n            omit(parentValue, binding.key() as string),\n          ) as any;\n        }\n      }\n    }\n  }\n}\n","import { setIn } from \"timm\";\nimport type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelOptions,\n  DataModelMiddleware,\n  Updates,\n} from \"../data\";\nimport { toModel } from \"../data\";\nimport type { Logger } from \"../logger\";\n\nimport type { ValidationResponse } from \"./types\";\nimport { removeBindingAndChildrenFromMap } from \"./binding-map-splice\";\n\n/**\n * A BindingInstance with an indicator of whether or not it's a strong binding\n */\nexport type StrongOrWeakBinding = {\n  /** BindingInstance in question */\n  binding: BindingInstance;\n  /** Boolean indicating whether the relevant BindingInstance is a strong binding */\n  isStrong: boolean;\n};\n\n/**\n * Returns a validation object if the data is invalid or an set of BindingsInstances if the binding itself is a weak ref of another invalid validation\n */\nexport type MiddlewareChecker = (\n  binding: BindingInstance,\n  model: DataModelImpl,\n) => ValidationResponse | Set<StrongOrWeakBinding> | undefined;\n\n/**\n * Middleware for the data-model that caches the results of invalid data\n */\nexport class ValidationMiddleware implements DataModelMiddleware {\n  public validator: MiddlewareChecker;\n  public shadowModelPaths: Map<BindingInstance, any>;\n  private logger?: Logger;\n  private shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n\n  constructor(\n    validator: MiddlewareChecker,\n    options?: {\n      /** A logger instance */\n      logger?: Logger;\n      /** Optional function to include data staged in shadowModel */\n      shouldIncludeInvalid?: (options?: DataModelOptions) => boolean;\n    },\n  ) {\n    this.validator = validator;\n    this.shadowModelPaths = new Map();\n    this.logger = options?.logger;\n    this.shouldIncludeInvalid = options?.shouldIncludeInvalid;\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ): Updates {\n    const asModel = toModel(this, { ...options, includeInvalid: true }, next);\n    const nextTransaction: BatchSetTransaction = [];\n\n    const includedBindings = new Set<BindingInstance>();\n\n    transaction.forEach(([binding, value]) => {\n      this.shadowModelPaths.set(binding, value);\n      includedBindings.add(binding);\n    });\n\n    const invalidBindings: Array<BindingInstance> = [];\n\n    this.shadowModelPaths.forEach((value, binding) => {\n      const validations = this.validator(binding, asModel);\n\n      if (validations === undefined) {\n        nextTransaction.push([binding, value]);\n      } else if (validations instanceof Set) {\n        validations.forEach((validation) => {\n          invalidBindings.push(validation.binding);\n          if (\n            !validation.isStrong &&\n            validation.binding.asString() === binding.asString()\n          ) {\n            nextTransaction.push([validation.binding, value]);\n          }\n        });\n      } else if (includedBindings.has(binding)) {\n        invalidBindings.push(binding);\n        this.logger?.debug(\n          `Invalid value for path: ${binding.asString()} - ${\n            validations.severity\n          } - ${validations.message}`,\n        );\n      }\n    });\n\n    let validResults: Updates = [];\n\n    if (next && nextTransaction.length > 0) {\n      // defer clearing the shadow model to prevent validations that are run twice due to weak binding refs still needing the data\n      nextTransaction.forEach(([binding]) =>\n        this.shadowModelPaths.delete(binding),\n      );\n      const result = next.set(nextTransaction, options);\n      if (invalidBindings.length === 0) {\n        return result;\n      }\n\n      validResults = result;\n    }\n\n    const invalidResults = invalidBindings.map((binding) => {\n      return {\n        binding,\n        oldValue: asModel.get(binding),\n        newValue: asModel.get(binding),\n        force: true,\n      };\n    });\n\n    return [...validResults, ...invalidResults];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    let val = next?.get(binding, options);\n\n    if (\n      this.shouldIncludeInvalid?.(options) ??\n      options?.includeInvalid === true\n    ) {\n      this.shadowModelPaths.forEach((shadowValue, shadowBinding) => {\n        if (shadowBinding === binding) {\n          val = shadowValue;\n\n          return;\n        }\n\n        if (binding.contains(shadowBinding)) {\n          val = setIn(val, shadowBinding.relative(binding), shadowValue);\n        }\n      });\n    }\n\n    return val;\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl,\n  ) {\n    this.shadowModelPaths = removeBindingAndChildrenFromMap(\n      this.shadowModelPaths,\n      binding,\n    );\n\n    return next?.delete(binding, options);\n  }\n}\n","import { setIn } from \"timm\";\nimport { SyncBailHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { AnyAssetType, Node } from \"./types\";\nimport { NodeType } from \"./types\";\n\nexport * from \"./types\";\nexport * from \"./utils\";\n\nexport const EMPTY_NODE: Node.Empty = {\n  type: NodeType.Empty,\n};\n\nexport interface ParseObjectOptions {\n  /** how nested the templated is */\n  templateDepth?: number;\n}\n\nexport interface ParseObjectChildOptions {\n  key: string;\n  path: Node.PathSegment[];\n  parentObj: object;\n}\n\ninterface NestedObj {\n  /** The values of a nested local object */\n  children: Node.Child[];\n\n  value: any;\n}\n/**\n * The Parser is the way to take an incoming view from the user and parse it into an AST.\n * It provides a few ways to interact with the parsing, including mutating an object before and after creation of an AST node\n */\nexport class Parser {\n  public readonly hooks = {\n    /**\n     * A hook to interact with an object _before_ parsing it into an AST\n     *\n     * @param value - The object we're are about to parse\n     * @returns - A new value to parse.\n     *  If undefined, the original value is used.\n     *  If null, we stop parsing this node.\n     */\n    onParseObject: new SyncWaterfallHook<[object, NodeType]>(),\n\n    /**\n     * A callback to interact with an AST _after_ we parse it into the AST\n     *\n     * @param value - The object we parsed\n     * @param node - The AST node we generated\n     * @returns - A new AST node to use\n     *   If undefined, the original value is used.\n     *   If null, we ignore this node all together\n     */\n    onCreateASTNode: new SyncWaterfallHook<\n      [Node.Node | undefined | null, object]\n    >(),\n\n    parseNode: new SyncBailHook<\n      [\n        obj: object,\n        nodeType: Node.ChildrenTypes,\n        parseOptions: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ],\n      Node.Node | Node.Child[]\n    >(),\n  };\n\n  public parseView(value: AnyAssetType): Node.View {\n    const viewNode = this.parseObject(value, NodeType.View);\n\n    if (!viewNode) {\n      throw new Error(\"Unable to parse object into a view\");\n    }\n\n    return viewNode as Node.View;\n  }\n\n  public createASTNode(node: Node.Node | null, value: any): Node.Node | null {\n    const tapped = this.hooks.onCreateASTNode.call(node, value);\n\n    if (tapped === undefined) {\n      return node;\n    }\n\n    return tapped;\n  }\n\n  public parseObject(\n    obj: object,\n    type: Node.ChildrenTypes = NodeType.Value,\n    options: ParseObjectOptions = { templateDepth: 0 },\n  ): Node.Node | null {\n    const parsedNode = this.hooks.parseNode.call(\n      obj,\n      type,\n      options,\n    ) as Node.Node | null;\n\n    if (parsedNode || parsedNode === null) {\n      return parsedNode;\n    }\n\n    const parseLocalObject = (\n      currentValue: any,\n      objToParse: unknown,\n      path: string[] = [],\n    ): NestedObj => {\n      if (typeof objToParse !== \"object\" || objToParse === null) {\n        return { value: objToParse, children: [] };\n      }\n\n      const localObj = this.hooks.onParseObject.call(objToParse, type);\n\n      if (!localObj) {\n        return currentValue;\n      }\n\n      const objEntries = Array.isArray(localObj)\n        ? localObj.map((v, i) => [i, v])\n        : [\n            ...Object.entries(localObj),\n            ...Object.getOwnPropertySymbols(localObj).map((s) => [\n              s,\n              (localObj as any)[s],\n            ]),\n          ];\n\n      const defaultValue: NestedObj = {\n        children: [],\n        value: currentValue,\n      };\n\n      const newValue = objEntries.reduce((accumulation, current): NestedObj => {\n        let { value } = accumulation;\n        const { children } = accumulation;\n        const [localKey, localValue] = current;\n\n        const newChildren = this.hooks.parseNode.call(\n          localValue,\n          NodeType.Value,\n          options,\n          {\n            path,\n            key: localKey,\n            parentObj: localObj,\n          },\n        ) as Node.Child[];\n\n        if (newChildren) {\n          children.push(...newChildren);\n        } else if (localValue && typeof localValue === \"object\") {\n          const result = parseLocalObject(accumulation.value, localValue, [\n            ...path,\n            localKey,\n          ]);\n\n          value = result.value;\n          children.push(...result.children);\n        } else {\n          value = setIn(accumulation.value, [...path, localKey], localValue);\n        }\n\n        return {\n          value,\n          children,\n        };\n      }, defaultValue);\n\n      return newValue;\n    };\n\n    const { value, children } = parseLocalObject(undefined, obj);\n\n    const baseAst =\n      value === undefined && !children.length\n        ? undefined\n        : {\n            type,\n            value,\n          };\n\n    if (baseAst && children.length) {\n      const parent: Node.BaseWithChildren<any> = baseAst;\n      parent.children = children;\n      children.forEach((child) => {\n        child.value.parent = parent;\n      });\n    }\n\n    return this.hooks.onCreateASTNode.call(baseAst, obj) ?? null;\n  }\n}\n","import { omit } from \"timm\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\n\n/** A view plugin to remove inapplicable assets from the tree */\nexport default class ApplicabilityPlugin implements ViewPlugin {\n  private isApplicability(obj: any) {\n    return obj && Object.prototype.hasOwnProperty.call(obj, \"applicability\");\n  }\n\n  applyResolver(resolver: Resolver) {\n    resolver.hooks.beforeResolve.tap(\n      \"applicability\",\n      (node: Node.Node | null, options: Options) => {\n        let newNode = node;\n\n        if (node?.type === NodeType.Applicability) {\n          const isApplicable = options.evaluate(node.expression);\n\n          if (isApplicable === false) {\n            return null;\n          }\n\n          newNode = node.value;\n        }\n\n        return newNode;\n      },\n    );\n  }\n\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"applicability\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (this.isApplicability(obj)) {\n          const parsedApplicability = parser.parseObject(\n            omit(obj, \"applicability\"),\n            nodeType,\n            options,\n          );\n\n          if (!parsedApplicability) {\n            return childOptions ? [] : null;\n          }\n\n          const applicabilityNode = parser.createASTNode(\n            {\n              type: NodeType.Applicability,\n              expression: (obj as any).applicability,\n              value: parsedApplicability,\n            },\n            obj,\n          );\n\n          if (!applicabilityNode) {\n            return childOptions ? [] : null;\n          }\n\n          if (applicabilityNode.type === NodeType.Applicability) {\n            applicabilityNode.value.parent = applicabilityNode;\n          }\n\n          return childOptions\n            ? [\n                {\n                  path: [...childOptions.path, childOptions.key],\n                  value: applicabilityNode,\n                },\n              ]\n            : applicabilityNode;\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(\"applicability\", this.applyResolver.bind(this));\n    view.hooks.parser.tap(\"applicability\", this.applyParser.bind(this));\n  }\n}\n","import { setIn } from \"timm\";\nimport deferred from \"p-defer\";\nimport type { Flow as FlowType, FlowResult, Asset } from \"@player-ui/types\";\n\nimport { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { Logger } from \"./logger\";\nimport { TapableLogger } from \"./logger\";\nimport type { ExpressionType } from \"./expressions\";\nimport { ExpressionEvaluator, isPromiselike } from \"./expressions\";\nimport { SchemaController } from \"./schema\";\nimport { BindingParser } from \"./binding\";\nimport type { ViewInstance } from \"./view\";\nimport { resolveDataRefs } from \"./string-resolver\";\nimport type { FlowInstance } from \"./controllers\";\nimport {\n  ConstantsController,\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport { FlowExpPlugin } from \"./plugins/flow-exp-plugin\";\nimport { DefaultExpPlugin } from \"./plugins/default-exp-plugin\";\nimport type {\n  PlayerFlowState,\n  InProgressState,\n  CompletedState,\n  ErrorState,\n} from \"./types\";\nimport { NOT_STARTED_STATE } from \"./types\";\nimport { DefaultViewPlugin } from \"./plugins/default-view-plugin\";\n\n// Variables injected at build time\nconst PLAYER_VERSION = \"__VERSION__\";\nconst COMMIT = \"__GIT_COMMIT__\";\n\nexport interface PlayerPlugin {\n  /**\n   * Unique identifier of the plugin.\n   * Enables the plugin to be retrievable from Player.\n   */\n  symbol?: symbol;\n\n  /** The name of the plugin */\n  name: string;\n\n  /**\n   * Use this to tap into Player hooks\n   */\n  apply: (player: Player) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-object-type\nexport interface ExtendedPlayerPlugin<\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Assets = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Views = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  Expressions = void,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  DataTypes = void,\n> {}\n\nexport interface PlayerConfigOptions {\n  /** A set of plugins to load  */\n  plugins?: PlayerPlugin[];\n\n  /** A logger to use */\n  logger?: Logger;\n}\n\nexport interface PlayerInfo {\n  /** Version of the running player */\n  version: string;\n\n  /** Hash of the HEAD commit used to build the current version */\n  commit: string;\n}\n\n/**\n * This is it.\n */\nexport class Player {\n  public static readonly info: PlayerInfo = {\n    version: PLAYER_VERSION,\n    commit: COMMIT,\n  };\n\n  public readonly logger: TapableLogger = new TapableLogger();\n  public readonly constantsController: ConstantsController =\n    new ConstantsController();\n  private config: PlayerConfigOptions;\n  private state: PlayerFlowState = NOT_STARTED_STATE;\n\n  public readonly hooks: {\n    /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n    flowController: SyncHook<[FlowController], Record<string, any>>;\n    /** The hook that updates/handles views */\n    viewController: SyncHook<[ViewController], Record<string, any>>;\n    /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n    view: SyncHook<[ViewInstance], Record<string, any>>;\n    /** Called when an expression evaluator was created */\n    expressionEvaluator: SyncHook<[ExpressionEvaluator], Record<string, any>>;\n    /** The hook that creates and manages data */\n    dataController: SyncHook<[DataController], Record<string, any>>;\n    /** Called after the schema is created for a flow */\n    schema: SyncHook<[SchemaController], Record<string, any>>;\n    /** Manages validations (schema and x-field ) */\n    validationController: SyncHook<[ValidationController], Record<string, any>>;\n    /** Manages parsing binding */\n    bindingParser: SyncHook<[BindingParser], Record<string, any>>;\n    /** A that's called for state changes in the flow execution */\n    state: SyncHook<[PlayerFlowState], Record<string, any>>;\n    /** A hook to access the current flow */\n    onStart: SyncHook<[FlowType<Asset<string>>], Record<string, any>>;\n    /** A hook for when the flow ends either in success or failure */\n    onEnd: SyncHook<[], Record<string, any>>;\n    /** Mutate the Content flow before starting */\n    resolveFlowContent: SyncWaterfallHook<\n      [FlowType<Asset<string>>],\n      Record<string, any>\n    >;\n  } = {\n    /** The hook that fires every time we create a new flowController (a new Content blob is passed in) */\n    flowController: new SyncHook<[FlowController]>(),\n\n    /** The hook that updates/handles views */\n    viewController: new SyncHook<[ViewController]>(),\n\n    /** A hook called every-time there's a new view. This is equivalent to the view hook on the view-controller */\n    view: new SyncHook<[ViewInstance]>(),\n\n    /** Called when an expression evaluator was created */\n    expressionEvaluator: new SyncHook<[ExpressionEvaluator]>(),\n\n    /** The hook that creates and manages data */\n    dataController: new SyncHook<[DataController]>(),\n\n    /** Called after the schema is created for a flow */\n    schema: new SyncHook<[SchemaController]>(),\n\n    /** Manages validations (schema and x-field ) */\n    validationController: new SyncHook<[ValidationController]>(),\n\n    /** Manages parsing binding */\n    bindingParser: new SyncHook<[BindingParser]>(),\n\n    /** A that's called for state changes in the flow execution */\n    state: new SyncHook<[PlayerFlowState]>(),\n\n    /** A hook to access the current flow */\n    onStart: new SyncHook<[FlowType]>(),\n\n    /** A hook for when the flow ends either in success or failure */\n    onEnd: new SyncHook<[]>(),\n    /** Mutate the Content flow before starting */\n    resolveFlowContent: new SyncWaterfallHook<[FlowType]>(),\n  };\n\n  constructor(config?: PlayerConfigOptions) {\n    if (config?.logger) {\n      this.logger.addHandler(config.logger);\n    }\n\n    this.config = config || {};\n    this.config.plugins = [\n      new DefaultExpPlugin(),\n      new DefaultViewPlugin(),\n      ...(this.config.plugins || []),\n      new FlowExpPlugin(),\n    ];\n    this.config.plugins?.forEach((plugin) => {\n      plugin.apply(this);\n    });\n  }\n\n  /**  Returns currently registered plugins */\n  public getPlugins(): PlayerPlugin[] {\n    return this.config.plugins ?? [];\n  }\n\n  /** Find instance of [Plugin] that has been registered to Player */\n  public findPlugin<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n  ): Plugin | undefined {\n    return this.config.plugins?.find((el) => el.symbol === symbol) as Plugin;\n  }\n\n  /** Retrieve an instance of [Plugin] and conditionally invoke [apply] if it exists */\n  public applyTo<Plugin extends PlayerPlugin>(\n    symbol: symbol,\n    apply: (plugin: Plugin) => void,\n  ): void {\n    const plugin = this.findPlugin<Plugin>(symbol);\n\n    if (plugin) {\n      apply(plugin);\n    }\n  }\n\n  /** Register and apply [Plugin] if one with the same symbol is not already registered. */\n  public registerPlugin(plugin: PlayerPlugin): void {\n    plugin.apply(this);\n    this.config.plugins?.push(plugin);\n  }\n\n  /** Returns the current version of the running player */\n  public getVersion(): string {\n    return Player.info.version;\n  }\n\n  /** Returns the git commit used to build Player version */\n  public getCommit(): string {\n    return Player.info.commit;\n  }\n\n  /**\n   * Fetch the current state of Player.\n   * It will return either `not-started`, `in-progress`, `completed`\n   * with some extra data in each\n   */\n  public getState(): PlayerFlowState {\n    return this.state;\n  }\n\n  /**\n   * A private means of setting the state of Player\n   * Calls the hooks for subscribers to listen for this event\n   */\n  private setState(state: PlayerFlowState) {\n    this.state = state;\n    this.hooks.state.call(state);\n  }\n\n  /** Start Player with the given flow */\n  private setupFlow(userContent: FlowType): {\n    /** a callback to _actually_ start the flow */\n    start: () => void;\n\n    /** the state object to kick if off */\n    state: Omit<InProgressState, \"ref\">;\n  } {\n    const userFlow = this.hooks.resolveFlowContent.call(userContent);\n\n    const flowController = new FlowController(userFlow.navigation, {\n      logger: this.logger,\n    });\n\n    this.hooks.onStart.call(userFlow);\n\n    this.hooks.flowController.call(flowController);\n\n    // eslint-disable-next-line prefer-const\n    let expressionEvaluator: ExpressionEvaluator;\n    // eslint-disable-next-line prefer-const\n    let dataController: DataController;\n\n    const pathResolver = new BindingParser({\n      get: (binding) => {\n        return dataController.get(binding);\n      },\n      set: (transaction) => {\n        return dataController.set(transaction);\n      },\n      evaluate: (expression) => {\n        return expressionEvaluator.evaluate(expression);\n      },\n    });\n\n    this.hooks.bindingParser.call(pathResolver);\n    const parseBinding = pathResolver.parse;\n    const flowResultDeferred = deferred<FlowResult>();\n\n    const schema = new SchemaController(userFlow.schema);\n    this.hooks.schema.call(schema);\n\n    const validationController = new ValidationController(schema);\n\n    this.hooks.validationController.call(validationController);\n\n    dataController = new DataController(userFlow.data, {\n      pathResolver,\n      middleware: validationController.getDataMiddleware(),\n      logger: this.logger,\n    });\n\n    dataController.hooks.format.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.format(value) : value;\n    });\n\n    dataController.hooks.deformat.tap(\"player\", (value, binding) => {\n      const formatter = schema.getFormatter(binding);\n\n      return formatter ? formatter.deformat(value) : value;\n    });\n\n    dataController.hooks.resolveDefaultValue.tap(\n      \"player\",\n      (binding) => schema.getApparentType(binding)?.default,\n    );\n\n    // eslint-disable-next-line prefer-const\n    let viewController: ViewController;\n\n    expressionEvaluator = new ExpressionEvaluator({\n      model: dataController,\n      logger: this.logger,\n    });\n\n    this.hooks.expressionEvaluator.call(expressionEvaluator);\n\n    expressionEvaluator.hooks.onError.tap(\"player\", (e) => {\n      flowResultDeferred.reject(e);\n\n      return true;\n    });\n\n    /** Resolve any data references in a string */\n    function resolveStrings<T>(val: T, formatted?: boolean) {\n      return resolveDataRefs(val, {\n        model: dataController,\n        evaluate: expressionEvaluator.evaluate,\n        formatted,\n      });\n    }\n\n    flowController.hooks.flow.tap(\"player\", (flow: FlowInstance) => {\n      flow.hooks.beforeTransition.tap(\"player\", (state, transitionVal) => {\n        /** Checks to see if there are any transitions for a specific transition state (i.e. next, back). If not, it will default to * */\n        const computedTransitionVal = state.transitions[transitionVal]\n          ? transitionVal\n          : \"*\";\n        if (state.onEnd && state.transitions[computedTransitionVal]) {\n          if (typeof state.onEnd === \"object\" && \"exp\" in state.onEnd) {\n            expressionEvaluator?.evaluate(state.onEnd.exp);\n          } else {\n            expressionEvaluator?.evaluate(state.onEnd as ExpressionType);\n          }\n        }\n\n        /** If the transition does not exist, then do not resolve any expressions */\n        if (\n          !(\"transitions\" in state) ||\n          !state.transitions[computedTransitionVal]\n        ) {\n          return state;\n        }\n\n        /** resolves and sets the transition to the computed exp */\n        return setIn(\n          state,\n          [\"transitions\", computedTransitionVal],\n          resolveStrings(state.transitions[computedTransitionVal]),\n        ) as any;\n      });\n\n      flow.hooks.skipTransition.tap(\"validation\", (currentState) => {\n        if (currentState?.value.state_type === \"VIEW\") {\n          const { canTransition, validations } =\n            validationController.validateView(\"navigation\");\n\n          if (!canTransition && validations) {\n            const bindings = new Set(validations.keys());\n            viewController?.currentView?.update(bindings);\n\n            return true;\n          }\n        }\n\n        return undefined;\n      });\n\n      flow.hooks.resolveTransitionNode.tap(\"player\", (state) => {\n        let newState = state;\n\n        if (\"ref\" in state) {\n          newState = setIn(state, [\"ref\"], resolveStrings(state.ref)) as any;\n        }\n\n        if (\"param\" in state) {\n          newState = setIn(\n            state,\n            [\"param\"],\n            resolveStrings(state.param, false),\n          ) as any;\n        }\n\n        return newState;\n      });\n\n      flow.hooks.transition.tap(\"player\", (_oldState, newState) => {\n        if (newState.value.state_type !== \"VIEW\") {\n          validationController.reset();\n        }\n      });\n\n      // Tap for synchronous action states\n      flow.hooks.afterTransition.tap(\"player\", (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ACTION\") {\n          const { exp } = value;\n          const result = expressionEvaluator.evaluate(exp);\n          if (isPromiselike(result)) {\n            this.logger.warn(\n              \"Async expression used as return value in in non-async context, transitioning with '*' value\",\n            );\n          }\n          flowController?.transition(String(result));\n        }\n\n        expressionEvaluator.reset();\n      });\n\n      // Tap for async action states\n      flow.hooks.afterTransition.tap(\"player\", async (flowInstance) => {\n        const value = flowInstance.currentState?.value;\n        if (value && value.state_type === \"ASYNC_ACTION\") {\n          const { exp } = value;\n          try {\n            let result = expressionEvaluator.evaluateAsync(exp);\n            if (isPromiselike(result)) {\n              if (value.await) {\n                result = await result;\n              } else {\n                this.logger.warn(\n                  \"Unawaited promise used as return value in in non-async context, transitioning with '*' value\",\n                );\n              }\n            } else {\n              this.logger.warn(\n                \"Non async expression used in async action node\",\n              );\n            }\n            flowController?.transition(String(result));\n          } catch (e) {\n            flowResultDeferred.reject(e);\n          }\n        }\n\n        expressionEvaluator.reset();\n      });\n    });\n\n    this.hooks.dataController.call(dataController);\n\n    validationController.setOptions({\n      parseBinding,\n      model: dataController,\n      logger: this.logger,\n      evaluate: expressionEvaluator.evaluate,\n      constants: this.constantsController,\n    });\n\n    viewController = new ViewController(userFlow.views || [], {\n      evaluator: expressionEvaluator,\n      parseBinding,\n      transition: flowController.transition,\n      model: dataController,\n      utils: {\n        findPlugin: <Plugin = unknown>(pluginSymbol: symbol) => {\n          return this.findPlugin(pluginSymbol) as unknown as Plugin;\n        },\n      },\n      logger: this.logger,\n      flowController,\n      schema,\n      format: (binding, value) => {\n        const formatter = schema.getFormatter(binding);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      formatValue: (ref, value) => {\n        const formatter = schema.getFormatterForType(ref);\n\n        return formatter?.format ? formatter.format(value) : value;\n      },\n      validation: {\n        ...validationController.forView(parseBinding),\n        type: (b) => schema.getType(parseBinding(b)),\n      },\n      constants: this.constantsController,\n    });\n    viewController.hooks.view.tap(\"player\", (view) => {\n      validationController.onView(view);\n      this.hooks.view.call(view);\n    });\n    this.hooks.viewController.call(viewController);\n\n    return {\n      start: () => {\n        flowController\n          .start()\n          .then((endState) => {\n            const flowResult: FlowResult = {\n              endState: resolveStrings(endState, false),\n              data: dataController.serialize(),\n            };\n\n            return flowResult;\n          })\n          .then(flowResultDeferred.resolve)\n          .catch((e) => {\n            this.logger.error(`Something went wrong: ${e.message}`);\n            throw e;\n          })\n          .catch(flowResultDeferred.reject)\n          .finally(() => this.hooks.onEnd.call());\n      },\n      state: {\n        status: \"in-progress\",\n        flowResult: flowResultDeferred.promise,\n        controllers: {\n          data: dataController,\n          view: viewController,\n          flow: flowController,\n          schema,\n          expression: expressionEvaluator,\n          binding: pathResolver,\n          validation: validationController,\n        },\n        fail: flowResultDeferred.reject,\n        flow: userFlow,\n        logger: this.logger,\n      },\n    };\n  }\n\n  public async start(payload: FlowType): Promise<CompletedState> {\n    const ref = Symbol(payload?.id ?? \"payload\");\n\n    /** A check to avoid updating the state for a flow that's not the current one */\n    const maybeUpdateState = <T extends PlayerFlowState>(newState: T) => {\n      if (this.state.ref !== ref) {\n        this.logger.warn(\n          `Received update for a flow that's not the current one`,\n        );\n\n        return newState;\n      }\n\n      this.setState(newState);\n\n      return newState;\n    };\n\n    this.setState({\n      status: \"not-started\",\n      ref,\n    });\n\n    try {\n      const { state, start } = this.setupFlow(payload);\n      this.setState({\n        ref,\n        ...state,\n      });\n\n      start();\n\n      // common data for the end state\n      // make sure to use the same ref as the starting one\n      const endProps = {\n        ref,\n        status: \"completed\",\n        flow: state.flow,\n        controllers: {\n          data: state.controllers.data.makeReadOnly(),\n        },\n      } as const;\n\n      return maybeUpdateState({\n        ...(await state.flowResult),\n        ...endProps,\n      });\n    } catch (error: any) {\n      const errorState: ErrorState = {\n        status: \"error\",\n        ref,\n        flow: payload,\n        error,\n      };\n\n      maybeUpdateState(errorState);\n\n      throw error;\n    }\n  }\n}\n","import { SyncBailHook, SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport type { DeferredPromise } from \"p-defer\";\nimport defer from \"p-defer\";\nimport type {\n  NavigationFlow,\n  NavigationFlowState,\n  NavigationFlowEndState,\n} from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\n\nexport interface NamedState {\n  /** The name of the navigation node */\n  name: string;\n\n  /** The nav node */\n  value: NavigationFlowState;\n}\n\nexport interface TransitionOptions {\n  /** Ignore any validations or other signals preventing the transition from taking place  */\n  force?: boolean;\n}\nexport type TransitionFunction = (\n  name: string,\n  options?: TransitionOptions,\n) => void;\n\n/** The Content navigation state machine */\nexport class FlowInstance {\n  private flow: NavigationFlow;\n  private log?: Logger;\n  private history: string[];\n  private isTransitioning = false;\n  private flowPromise?: DeferredPromise<NavigationFlowEndState>;\n  public readonly id: string;\n  public currentState?: NamedState;\n  public readonly hooks = {\n    beforeStart: new SyncBailHook<[NavigationFlow], NavigationFlow>(),\n\n    /** A callback when the onStart node was present */\n    onStart: new SyncHook<[any]>(),\n\n    /** A callback when the onEnd node was present */\n    onEnd: new SyncHook<[any]>(),\n\n    /** A hook to intercept and block a transition */\n    skipTransition: new SyncBailHook<\n      [NamedState | undefined],\n      boolean | undefined\n    >(),\n\n    /** A chance to manipulate the flow-node used to calculate the given transition used  */\n    beforeTransition: new SyncWaterfallHook<\n      [Exclude<NavigationFlowState, NavigationFlowEndState>, string]\n    >(),\n\n    /** A chance to manipulate the flow-node calculated after a transition */\n    resolveTransitionNode: new SyncWaterfallHook<[NavigationFlowState]>(),\n\n    /** A callback when a transition from 1 state to another was made */\n    transition: new SyncHook<[NamedState | undefined, NamedState]>(),\n\n    /** A callback to run actions after a transition occurs */\n    afterTransition: new SyncHook<[FlowInstance]>(),\n  };\n\n  constructor(\n    id: string,\n    flow: NavigationFlow,\n    options?: {\n      /** Logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.id = id;\n    this.flow = flow;\n    this.log = options?.logger;\n    this.history = [];\n\n    this.hooks.transition.tap(\n      \"startPromise\",\n      async (_oldState, nextState: NamedState) => {\n        const newState = nextState.value;\n\n        if (this.flowPromise && newState.state_type === \"END\") {\n          this.flowPromise.resolve(newState);\n        }\n      },\n    );\n  }\n\n  /** Start the state machine */\n  public async start(): Promise<NavigationFlowEndState> {\n    if (this.flowPromise) {\n      this.log?.warn(\"Already called start for flow\");\n\n      return this.flowPromise.promise;\n    }\n\n    this.flow = this.hooks.beforeStart.call(this.flow) || this.flow;\n\n    if (this.flow.onStart) {\n      this.hooks.onStart.call(this.flow.onStart);\n    }\n\n    const initialState = this.flow.startState;\n\n    if (!initialState) {\n      return Promise.reject(new Error(\"No 'startState' defined for flow\"));\n    }\n\n    this.flowPromise = defer();\n    this.pushHistory(initialState);\n\n    return this.flowPromise.promise;\n  }\n\n  public transition(transitionValue: string, options?: TransitionOptions) {\n    if (this.isTransitioning) {\n      throw new Error(\n        `Transitioning while ongoing transition from ${this.currentState?.name} is in progress is not supported`,\n      );\n    }\n\n    if (this.currentState?.value.state_type === \"END\") {\n      this.log?.warn(\n        `Skipping transition using ${transitionValue}. Already at and END state`,\n      );\n\n      return;\n    }\n\n    if (this.currentState === undefined) {\n      throw new Error(\"Cannot transition when there's no current state\");\n    }\n\n    if (options?.force) {\n      this.log?.debug(`Forced transition. Skipping validation checks`);\n    } else {\n      const skipTransition = this.hooks.skipTransition.call(this.currentState);\n\n      if (skipTransition) {\n        this.log?.debug(\n          `Skipping transition from ${this.currentState.name} b/c hook told us to`,\n        );\n        return;\n      }\n    }\n\n    const state = this.hooks.beforeTransition.call(\n      this.currentState.value,\n      transitionValue,\n    );\n\n    if (!(\"transitions\" in state)) {\n      throw new Error(`No transitions defined for ${this.currentState.value}`);\n    }\n\n    const { transitions } = state;\n    const nextState = transitions[transitionValue] || transitions[\"*\"];\n\n    if (nextState === undefined) {\n      this.log?.warn(\n        `No transition from ${this.currentState.name} using ${transitionValue} or *`,\n      );\n\n      return;\n    }\n\n    this.log?.debug(\n      `Transitioning from ${this.currentState.name} to ${nextState} using ${transitionValue} `,\n    );\n\n    return this.pushHistory(nextState, options);\n  }\n\n  private pushHistory(stateName: string, options?: TransitionOptions) {\n    if (!Object.prototype.hasOwnProperty.call(this.flow, stateName)) {\n      throw new Error(`No flow definition for: ${stateName} was found.`);\n    }\n\n    let nextState = this.flow[stateName];\n\n    if (\n      !this.flow[stateName] ||\n      typeof nextState !== \"object\" ||\n      !(\"state_type\" in nextState)\n    ) {\n      this.log?.error(`Flow doesn't contain any states named: ${stateName}`);\n\n      return;\n    }\n\n    const prevState = this.currentState;\n\n    this.isTransitioning = true;\n    nextState = this.hooks.resolveTransitionNode.call(nextState);\n\n    const newCurrentState = {\n      name: stateName,\n      value: nextState,\n    } as NamedState;\n    this.currentState = newCurrentState;\n    this.history.push(stateName);\n\n    // If the new state is an END state call the `onEnd` if it exists\n\n    if (newCurrentState.value.state_type === \"END\" && this.flow.onEnd) {\n      this.hooks.onEnd.call(this.flow.onEnd);\n    }\n\n    this.hooks.transition.call(prevState, {\n      ...newCurrentState,\n    });\n\n    this.isTransitioning = false;\n\n    this.hooks.afterTransition.call(this);\n  }\n}\n","import { SyncHook, SyncWaterfallHook } from \"tapable-ts\";\nimport queueMicrotask from \"queue-microtask\";\nimport { Registry } from \"@player-ui/partial-match-registry\";\nimport type { View, NavigationFlowViewState } from \"@player-ui/types\";\n\nimport { resolveDataRefsInString } from \"../../string-resolver\";\nimport type { Resolve } from \"../../view\";\nimport { ViewInstance } from \"../../view\";\nimport type { Logger } from \"../../logger\";\nimport type { FlowInstance, FlowController } from \"../flow\";\nimport type { DataController } from \"../data/controller\";\nimport type { TransformRegistry } from \"./types\";\nimport type { BindingInstance } from \"../../binding\";\n\nexport interface ViewControllerOptions {\n  /** Where to get data from */\n  model: DataController;\n\n  /** Where to log data */\n  logger?: Logger;\n\n  /** A flow-controller instance to listen for view changes */\n  flowController: FlowController;\n}\n\n/** A controller to manage updating/switching views */\nexport class ViewController {\n  public readonly hooks = {\n    /** Do any processing before the `View` instance is created */\n    resolveView: new SyncWaterfallHook<\n      [View | undefined, string, NavigationFlowViewState]\n    >(),\n\n    // The hook right before the View starts resolving. Attach anything custom here\n    view: new SyncHook<[ViewInstance]>(),\n  };\n\n  private readonly viewMap: Record<string, View>;\n  private readonly viewOptions: Resolve.ResolverOptions & ViewControllerOptions;\n  private pendingUpdate?: {\n    /** pending data binding changes */\n    changedBindings?: Set<BindingInstance>;\n    /** Whether we have a microtask queued to handle this pending update */\n    scheduled?: boolean;\n  };\n\n  public currentView?: ViewInstance;\n  public transformRegistry: TransformRegistry = new Registry();\n  public optimizeUpdates = true;\n\n  constructor(\n    initialViews: View[],\n    options: Resolve.ResolverOptions & ViewControllerOptions,\n  ) {\n    this.viewOptions = options;\n    this.viewMap = initialViews.reduce<Record<string, View>>(\n      (viewMap, view) => {\n        // eslint-disable-next-line no-param-reassign\n        viewMap[view.id] = view;\n        return viewMap;\n      },\n      {},\n    );\n\n    options.flowController.hooks.flow.tap(\n      \"viewController\",\n      (flow: FlowInstance) => {\n        flow.hooks.transition.tap(\"viewController\", (_oldState, newState) => {\n          if (newState.value.state_type === \"VIEW\") {\n            this.onView(newState.value);\n          } else {\n            this.currentView = undefined;\n          }\n        });\n      },\n    );\n\n    /** Trigger a view update */\n    const update = (updates: Set<BindingInstance>, silent = false) => {\n      if (this.currentView) {\n        if (this.optimizeUpdates) {\n          this.queueUpdate(updates, silent);\n        } else {\n          this.currentView.update();\n        }\n      }\n    };\n\n    options.model.hooks.onUpdate.tap(\n      \"viewController\",\n      (updates, updateOptions) => {\n        update(\n          new Set(updates.map((t) => t.binding)),\n          updateOptions?.silent ?? false,\n        );\n      },\n    );\n\n    options.model.hooks.onDelete.tap(\"viewController\", (binding) => {\n      const parentBinding = binding.parent();\n      const property = binding.key();\n\n      // Deleting an array item will trigger an update for the entire array\n      if (typeof property === \"number\" && parentBinding) {\n        update(new Set([parentBinding]));\n      } else {\n        update(new Set([binding]));\n      }\n    });\n  }\n\n  private queueUpdate(bindings: Set<BindingInstance>, silent = false) {\n    if (this.pendingUpdate?.changedBindings) {\n      // If there's already a pending update, just add to it don't worry about silent updates here yet\n      this.pendingUpdate.changedBindings = new Set([\n        ...this.pendingUpdate.changedBindings,\n        ...bindings,\n      ]);\n    } else {\n      this.pendingUpdate = { changedBindings: bindings, scheduled: false };\n    }\n\n    // If there's no pending update, schedule one only if this one isn't silent\n    // otherwise if this is silent, we'll just wait for the next non-silent update and make sure our bindings are included\n    if (!this.pendingUpdate.scheduled && !silent) {\n      this.pendingUpdate.scheduled = true;\n      queueMicrotask(() => {\n        const updates = this.pendingUpdate?.changedBindings;\n        this.pendingUpdate = undefined;\n        this.currentView?.update(updates);\n      });\n    }\n  }\n\n  private getViewForRef(viewRef: string): View | undefined {\n    // First look for a 1:1 viewRef -> id mapping (this is most common)\n    if (this.viewMap[viewRef]) {\n      return this.viewMap[viewRef];\n    }\n\n    // The view ids saved may also contain model refs, resolve those and try again\n    const matchingViewId = Object.keys(this.viewMap).find(\n      (possibleViewIdMatch) =>\n        viewRef ===\n        resolveDataRefsInString(possibleViewIdMatch, {\n          model: this.viewOptions.model,\n          evaluate: this.viewOptions.evaluator.evaluate,\n        }),\n    );\n\n    if (matchingViewId && this.viewMap[matchingViewId]) {\n      return this.viewMap[matchingViewId];\n    }\n  }\n\n  public onView(state: NavigationFlowViewState) {\n    const viewId = state.ref;\n\n    const source = this.hooks.resolveView.call(\n      this.getViewForRef(viewId),\n      viewId,\n      state,\n    );\n\n    if (!source) {\n      throw new Error(`No view with id ${viewId}`);\n    }\n\n    const view = new ViewInstance(source, this.viewOptions);\n    this.currentView = view;\n\n    // Give people a chance to attach their\n    // own listeners to the view before we resolve it\n    this.hooks.view.call(view);\n    view.update();\n  }\n}\n","export interface Node<T extends string> {\n  /** The basic node type */\n  name: T;\n}\n\n/**\n * An AST node that represents a nested path in the model\n * foo.{{bar}}.baz (this is {{bar}})\n */\nexport interface PathNode extends Node<\"PathNode\"> {\n  /** The path in the model that this node represents */\n  path: Array<AnyNode>;\n}\n\n/**\n * A segment representing a query\n * [foo=bar]\n */\nexport interface QueryNode extends Node<\"Query\"> {\n  /** The key to query */\n  key: AnyNode;\n\n  /** The target value */\n  value?: AnyNode;\n}\n\n/** A simple segment */\nexport interface ValueNode extends Node<\"Value\"> {\n  /** The segment value */\n  value: string | number;\n}\n\n/** A nested expression */\nexport interface ExpressionNode extends Node<\"Expression\"> {\n  /** The expression */\n  value: string;\n}\n\n/** Helper to create a value node */\nexport const toValue = (value: string | number): ValueNode => ({\n  name: \"Value\",\n  value,\n});\n\n/** Helper to create an expression node */\nexport const toExpression = (value: string): ExpressionNode => ({\n  name: \"Expression\",\n  value,\n});\n\n/** Helper to create a nested path node */\nexport const toPath = (path: Array<AnyNode>): PathNode => ({\n  name: \"PathNode\",\n  path,\n});\n\n/** Helper to create a query node */\nexport const toQuery = (key: AnyNode, value?: AnyNode): QueryNode => ({\n  name: \"Query\",\n  key,\n  value,\n});\n\n/** Create a concat node */\nexport const toConcatenatedNode = (\n  values: Array<PathNode | ValueNode | ExpressionNode>,\n): PathNode | ValueNode | ConcatenatedNode | ExpressionNode => {\n  if (values.length === 1) {\n    return values[0];\n  }\n\n  return {\n    name: \"Concatenated\",\n    value: values,\n  };\n};\n\n/**\n * A binding segment that's multiple smaller ones\n * {{foo}}_bar_{{baz}}\n */\nexport interface ConcatenatedNode extends Node<\"Concatenated\"> {\n  /** A list of nested paths, or value nodes to concat together to form a segment */\n  value: Array<PathNode | ValueNode | ExpressionNode>;\n}\n\nexport type AnyNode =\n  | PathNode\n  | QueryNode\n  | ValueNode\n  | ConcatenatedNode\n  | ExpressionNode;\nexport type Path = Array<AnyNode>;\n\nexport interface ParserSuccessResult {\n  /** A successful parse result */\n  status: true;\n\n  /** The path the binding represents */\n  path: PathNode;\n}\n\nexport interface ParserFailureResult {\n  /** A failed parse result */\n  status: false;\n\n  /** The message representing the reason the parse result failed */\n  error: string;\n}\n\nexport type ParserResult = ParserSuccessResult | ParserFailureResult;\n\nexport type Parser = (raw: string) => ParserResult;\n","import type {\n  Parser,\n  AnyNode,\n  PathNode,\n  ConcatenatedNode,\n  ValueNode,\n  QueryNode,\n  ExpressionNode,\n} from \"../ast\";\nimport {\n  toValue,\n  toPath,\n  toConcatenatedNode,\n  toQuery,\n  toExpression,\n} from \"../ast\";\n\nconst SEGMENT_SEPARATOR = \".\";\nconst OPEN_CURL = \"{\";\nconst CLOSE_CURL = \"}\";\nconst OPEN_BRACKET = \"[\";\nconst CLOSE_BRACKET = \"]\";\nconst EQUALS = \"=\";\nconst SINGLE_QUOTE = \"'\";\nconst DOUBLE_QUOTE = '\"';\nconst BACK_TICK = \"`\";\n// const IDENTIFIER_REGEX = /[\\w\\-@]+/;\n\n/** A _faster_ way to match chars instead of a regex. */\nconst isIdentifierChar = (char?: string): boolean => {\n  if (!char) {\n    return false;\n  }\n\n  const charCode = char.charCodeAt(0);\n\n  const matches =\n    charCode === 32 || // ' '\n    charCode === 34 || // \"\n    charCode === 39 || // '\n    charCode === 40 || // (\n    charCode === 41 || // )\n    charCode === 42 || // *\n    charCode === 46 || // .\n    charCode === 61 || // =\n    charCode === 91 || // [\n    charCode === 93 || // ]\n    charCode === 96 || // `\n    charCode === 123 || // {\n    charCode === 125; // }\n\n  return !matches;\n};\n\n/** Parse out a binding AST from a path */\nexport const parse: Parser = (path) => {\n  let index = 1;\n  let ch = path.charAt(0);\n\n  /** get the next char in the string */\n  const next = (expected?: string) => {\n    if (expected && ch !== expected) {\n      throw new Error(`Expected char: ${expected} but got: ${ch}`);\n    }\n\n    ch = path.charAt(index);\n    index += 1;\n    return ch;\n  };\n\n  /** gobble all whitespace */\n  const whitespace = () => {\n    /* eslint-disable no-unmodified-loop-condition */\n    while (ch === \" \") {\n      next();\n    }\n  };\n\n  /** get an identifier if you can */\n  const identifier = (): ValueNode | undefined => {\n    if (!isIdentifierChar(ch)) {\n      return;\n    }\n\n    let value: string | number = ch;\n\n    while (next()) {\n      if (!isIdentifierChar(ch)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      const maybeNumber = Number(value);\n      value = isNaN(maybeNumber) ? value : maybeNumber;\n      return toValue(value);\n    }\n  };\n\n  /** get an expression node if you can */\n  const expression = (): ExpressionNode | undefined => {\n    if (ch === BACK_TICK) {\n      next(BACK_TICK);\n\n      let exp = ch;\n\n      while (next()) {\n        if (ch === BACK_TICK) {\n          break;\n        }\n\n        exp += ch;\n      }\n\n      next(BACK_TICK);\n\n      if (exp) {\n        return toExpression(exp);\n      }\n    }\n  };\n\n  /** Grab a value using a regex */\n  const regex = (match: RegExp): ValueNode | undefined => {\n    if (!ch?.match(match)) {\n      return;\n    }\n\n    let value = ch;\n\n    while (next()) {\n      if (!ch?.match(match)) {\n        break;\n      }\n\n      value += ch;\n    }\n\n    if (value) {\n      return toValue(value);\n    }\n  };\n\n  /** parse out a nestedPath if you can */\n  const nestedPath = (): PathNode | undefined => {\n    if (ch === OPEN_CURL) {\n      next(OPEN_CURL);\n      next(OPEN_CURL);\n\n      /* eslint-disable-next-line @typescript-eslint/no-use-before-define */\n      const modelRef = parsePath();\n      next(CLOSE_CURL);\n      next(CLOSE_CURL);\n      return modelRef;\n    }\n  };\n\n  /** get a simple segment node */\n  const simpleSegment = () => nestedPath() ?? expression() ?? identifier();\n\n  /** Parse a segment */\n  const segment = ():\n    | ConcatenatedNode\n    | PathNode\n    | ValueNode\n    | ExpressionNode\n    | undefined => {\n    // Either a string, modelRef, or concatenated version (both)\n    const segments: Array<ValueNode | PathNode | ExpressionNode> = [];\n    let nextSegment = simpleSegment();\n\n    while (nextSegment !== undefined) {\n      segments.push(nextSegment);\n      nextSegment = simpleSegment();\n    }\n\n    if (segments.length === 0) {\n      return undefined;\n    }\n\n    return toConcatenatedNode(segments);\n  };\n\n  /** get an optionally quoted block */\n  const optionallyQuotedSegment = ():\n    | ValueNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    whitespace();\n\n    // see if we have a quote\n\n    if (ch === SINGLE_QUOTE || ch === DOUBLE_QUOTE) {\n      const singleQuote = ch === SINGLE_QUOTE;\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      const id = regex(/[^'\"]+/);\n      next(singleQuote ? SINGLE_QUOTE : DOUBLE_QUOTE);\n      return id;\n    }\n\n    return simpleSegment();\n  };\n\n  /** eat equals signs */\n  const equals = (): boolean => {\n    if (ch !== EQUALS) {\n      return false;\n    }\n\n    while (ch === EQUALS) {\n      next();\n    }\n\n    return true;\n  };\n\n  /** Parse out a bracket */\n  const parseBracket = ():\n    | ValueNode\n    | QueryNode\n    | PathNode\n    | ExpressionNode\n    | undefined => {\n    if (ch === OPEN_BRACKET) {\n      next(OPEN_BRACKET);\n      whitespace();\n      let value: ValueNode | QueryNode | PathNode | ExpressionNode | undefined =\n        optionallyQuotedSegment();\n      if (value) {\n        whitespace();\n        if (equals()) {\n          whitespace();\n          const second = optionallyQuotedSegment();\n          value = toQuery(value, second);\n          whitespace();\n        }\n      } else {\n        throw new Error(`Expected identifier`);\n      }\n\n      if (value) {\n        next(CLOSE_BRACKET);\n      }\n\n      return value;\n    }\n  };\n\n  /** Parse a segment and any number of brackets following it */\n  const parseSegmentAndBrackets = (): Array<AnyNode> => {\n    // try to parse a segment first\n\n    const parsed: Array<AnyNode> = [];\n\n    const firstSegment = segment();\n\n    if (firstSegment) {\n      parsed.push(firstSegment);\n\n      let bracketSegment = parseBracket();\n\n      if (bracketSegment?.name === \"Value\") {\n        const maybeNumber = Number(bracketSegment.value);\n        bracketSegment.value =\n          isNaN(maybeNumber) || String(maybeNumber) !== bracketSegment.value\n            ? bracketSegment.value\n            : maybeNumber;\n      }\n\n      while (bracketSegment !== undefined) {\n        parsed.push(bracketSegment);\n        bracketSegment = parseBracket();\n      }\n    }\n\n    return parsed;\n  };\n\n  /** Parse out a path segment */\n  const parsePath = (): PathNode => {\n    const parts: AnyNode[] = [];\n\n    let nextSegment = parseSegmentAndBrackets();\n\n    while (nextSegment !== undefined) {\n      parts.push(...nextSegment);\n\n      if (!ch || ch === CLOSE_CURL) {\n        break;\n      }\n\n      if (nextSegment.length === 0 && ch) {\n        throw new Error(`Unexpected character: ${ch}`);\n      }\n\n      next(SEGMENT_SEPARATOR);\n      nextSegment = parseSegmentAndBrackets();\n    }\n\n    return toPath(parts);\n  };\n\n  try {\n    const result = parsePath();\n\n    return {\n      status: true,\n      path: result,\n    };\n  } catch (e: any) {\n    return {\n      status: false,\n      error: e.message,\n    };\n  }\n};\n","import { getBindingSegments } from \"./utils\";\n\nexport interface BindingParserOptions {\n  /** Get the value for a specific binding */\n  get: (binding: BindingInstance) => any;\n\n  /**\n   * Set the values for bindings.\n   * This is used when the query syntax needs to modify an object\n   */\n  set: (transaction: Array<[BindingInstance, any]>) => void;\n\n  /**\n   * Get the result of evaluating an expression\n   */\n  evaluate: (exp: string) => any;\n\n  /**\n   * Without readOnly, if a binding such as this is used: arr[key='does not exist'],\n   * then an object with that key will be created.\n   * This is done to make assignment such as arr[key='abc'].val = 'foo' work smoothly.\n   * Setting readOnly to true will prevent this behavior, avoiding unintended data changes.\n   */\n  readOnly?: boolean;\n}\n\nexport type Getter = (path: BindingInstance) => any;\n\nexport type RawBindingSegment = number | string;\nexport type RawBinding = string | RawBindingSegment[];\nexport type BindingLike = RawBinding | BindingInstance;\nexport type BindingFactory = (\n  raw: RawBinding,\n  options?: Partial<BindingParserOptions>,\n) => BindingInstance;\n\n/**\n * A path in the data model\n */\nexport class BindingInstance {\n  private split: RawBindingSegment[];\n  private joined: string;\n  private factory: BindingFactory;\n\n  constructor(\n    raw: RawBinding,\n    factory = (rawBinding: RawBinding) => new BindingInstance(rawBinding),\n  ) {\n    const split = Array.isArray(raw) ? raw : raw.split(\".\");\n    this.split = split.map((segment) => {\n      if (typeof segment === \"number\") {\n        return segment;\n      }\n\n      const tryNum = Number(segment);\n      // test to make sure turning a numerical string to a number doesn't change\n      // the actual value of the string by getting rid of a leading zero\n      return isNaN(tryNum) || String(tryNum) !== segment ? segment : tryNum;\n    });\n    Object.freeze(this.split);\n    this.joined = this.split.join(\".\");\n    this.factory = factory;\n  }\n\n  asArray(): RawBindingSegment[] {\n    return this.split;\n  }\n\n  asString(): string {\n    return this.joined;\n  }\n\n  /**\n   * Check to see if the given binding is a sub-path of the current one\n   */\n  contains(binding: BindingInstance): boolean {\n    // need to account for partial key matches\n    // [foo, bar] !== [foo, ba]\n    const bindingAsArray = binding.asArray();\n\n    if (bindingAsArray.length < this.split.length) {\n      return false;\n    }\n\n    // Check every overlapping index to make sure they're the same\n    // Intentionally use a for loop for speeeed\n    for (let i = 0; i < this.split.length; i++) {\n      if (this.split[i] !== bindingAsArray[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  relative(binding: BindingInstance): RawBindingSegment[] {\n    return this.asArray().slice(binding.asArray().length);\n  }\n\n  parent(): BindingInstance {\n    return this.factory(this.split.slice(0, -1));\n  }\n\n  key(): RawBindingSegment {\n    return this.split[this.split.length - 1];\n  }\n\n  /**\n   * This is a utility method to get a binding that is a descendent of this binding\n   *\n   * @param relative - The relative path to descend to\n   */\n  descendent(relative: BindingLike): BindingInstance {\n    const descendentSegments = getBindingSegments(relative);\n\n    return this.factory(this.split.concat(descendentSegments));\n  }\n}\n","import type { BindingInstance } from \"../binding\";\nimport type {\n  BatchSetTransaction,\n  DataModelImpl,\n  DataModelMiddleware,\n  DataModelOptions,\n  Updates,\n} from \"./model\";\n\nexport type DependencySets = \"core\" | \"children\";\n\n/** A class to track usage of read/writes to/from a data model */\nexport class DependencyTracker {\n  protected readDeps: Set<BindingInstance>;\n  protected writeDeps: Set<BindingInstance>;\n  protected namedSet: DependencySets;\n\n  private namedDependencySets: Partial<\n    Record<\n      DependencySets,\n      {\n        /** readDeps */\n        readDeps: Set<BindingInstance>;\n        /** writeDeps */\n        writeDeps: Set<BindingInstance>;\n      }\n    >\n  >;\n\n  constructor() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\");\n    this.createSubset(\"children\");\n  }\n\n  protected createSubset(name: DependencySets, force = false): void {\n    if (force || !this.namedDependencySets[name]) {\n      this.namedDependencySets[name] = {\n        readDeps: new Set(),\n        writeDeps: new Set(),\n      };\n    }\n  }\n\n  /** Grab all of the bindings that this depended on */\n  public getDependencies(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.readDeps ?? new Set();\n    }\n\n    return this.readDeps;\n  }\n\n  public trackSubset(name: DependencySets) {\n    this.createSubset(name);\n    this.namedSet = name;\n  }\n\n  public trackDefault() {\n    this.namedSet = \"core\";\n  }\n\n  /** Grab all of the bindings this wrote to */\n  public getModified(name?: DependencySets): Set<BindingInstance> {\n    if (name !== undefined) {\n      return this.namedDependencySets?.[name]?.writeDeps ?? new Set();\n    }\n\n    return this.writeDeps;\n  }\n\n  /**\n   * Check to see if the dataModel has read the value at the given binding\n   *\n   * @param binding - The binding you want to check for\n   */\n  public readsBinding(binding: BindingInstance): boolean {\n    return this.readDeps.has(binding);\n  }\n\n  /**\n   * Check to see if the dataModel has written to the binding\n   */\n  public writesBinding(binding: BindingInstance): boolean {\n    return this.writeDeps.has(binding);\n  }\n\n  /** Reset all tracking of dependencies */\n  public reset() {\n    this.readDeps = new Set();\n    this.writeDeps = new Set();\n    this.namedDependencySets = {};\n    this.namedSet = \"core\";\n\n    this.createSubset(\"core\", true);\n    this.createSubset(\"children\", true);\n  }\n\n  protected addReadDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.readDeps.add(binding);\n    }\n\n    this.readDeps.add(binding);\n  }\n\n  protected addWriteDep(\n    binding: BindingInstance,\n    namedSet = this.namedSet,\n  ): void {\n    if (namedSet) {\n      this.namedDependencySets?.[namedSet]?.writeDeps.add(binding);\n    }\n\n    this.writeDeps.add(binding);\n  }\n\n  public addChildReadDep(binding: BindingInstance): void {\n    this.addReadDep(binding, \"children\");\n  }\n}\n\n/** Middleware that tracks dependencies of read/written data */\nexport class DependencyMiddleware\n  extends DependencyTracker\n  implements DataModelMiddleware\n{\n  constructor() {\n    super();\n    this.get = this.get.bind(this);\n    this.set = this.set.bind(this);\n  }\n\n  public set(\n    transaction: BatchSetTransaction,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return next?.set(transaction, options) ?? [];\n  }\n\n  public get(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addReadDep(binding);\n\n    return next?.get(binding, options);\n  }\n\n  public delete(\n    binding: BindingInstance,\n    options?: DataModelOptions,\n    next?: DataModelImpl | undefined,\n  ) {\n    this.addWriteDep(binding);\n    return next?.delete(binding, options);\n  }\n}\n\n/** A data-model that tracks dependencies of read/written data */\nexport class DependencyModel<Options = DataModelOptions>\n  extends DependencyTracker\n  implements DataModelImpl<Options>\n{\n  private readonly rootModel: DataModelImpl<Options>;\n\n  constructor(rootModel: DataModelImpl<Options>) {\n    super();\n    this.rootModel = rootModel;\n    this.set = this.set.bind(this);\n    this.get = this.get.bind(this);\n  }\n\n  public set(transaction: BatchSetTransaction, options?: Options): Updates {\n    transaction.forEach(([binding]) => this.addWriteDep(binding));\n\n    return this.rootModel.set(transaction, options);\n  }\n\n  public get(binding: BindingInstance, options?: Options) {\n    this.addReadDep(binding);\n\n    return this.rootModel.get(binding, options);\n  }\n\n  public delete(binding: BindingInstance, options?: Options) {\n    this.addWriteDep(binding);\n    return this.rootModel.delete(binding, options);\n  }\n}\n","import type { DataModelImpl } from \"./model\";\n\n/**\n * A model that does nothing\n * Helpful for testing and other default DataModel applications\n */\nexport class NOOPDataModel implements DataModelImpl {\n  get() {\n    return undefined;\n  }\n\n  set() {\n    return [];\n  }\n\n  delete() {}\n}\n\n/** You only really need 1 instance of the NOOP model */\nexport const NOOP_MODEL = new NOOPDataModel();\n","import type { Binding } from \"@player-ui/types\";\n\nimport type { BindingLike } from \"../binding\";\nimport type {\n  ExpressionHandler,\n  ExpressionContext,\n  ExpressionNode,\n} from \"./types\";\nimport { Awaitable, isAwaitable, makeAwaitable } from \"./async\";\n\n/** Sets a value to the data-model */\nexport const setDataVal: ExpressionHandler<[Binding, any], any> = (\n  _context: ExpressionContext,\n  binding,\n  value,\n) => {\n  _context.model.set([[binding as BindingLike, value]]);\n};\n\n/** Fetches a valid from the data-model */\nexport const getDataVal: ExpressionHandler<[Binding], unknown> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.get(binding as BindingLike);\n};\n\n/** Deletes a value from the model */\nexport const deleteDataVal: ExpressionHandler<[Binding], void> = (\n  _context: ExpressionContext,\n  binding,\n) => {\n  return _context.model.delete(binding);\n};\n\n/** Conditional expression handler */\nexport const conditional: ExpressionHandler<\n  [ExpressionNode, ExpressionNode, ExpressionNode?]\n> = (ctx, condition, ifTrue, ifFalse) => {\n  const testResult = ctx.evaluate(condition);\n\n  // Handle Promise case automatically (same pattern as ternary operator)\n  if (isAwaitable(testResult)) {\n    return testResult.awaitableThen((resolvedTest: any) => {\n      if (resolvedTest) {\n        return ctx.evaluate(ifTrue);\n      }\n      if (ifFalse) {\n        return ctx.evaluate(ifFalse);\n      }\n      return null;\n    });\n  }\n\n  // Handle sync case\n  if (testResult) {\n    return ctx.evaluate(ifTrue);\n  }\n  if (ifFalse) {\n    return ctx.evaluate(ifFalse);\n  }\n  return null;\n};\n\nconditional.resolveParams = false;\n\n/**\n * Internal await function\n * This is technically registered as `await` but can't be called that due to conflicting with the keyword\n */\nexport const waitFor: ExpressionHandler<[Promise<any>], Awaitable<any>> = (\n  ctx,\n  promise,\n) => {\n  return makeAwaitable(promise);\n};\n","import { SyncHook } from \"tapable-ts\";\nimport type { Logger, Severity } from \"./types\";\n\n/** A logger that has a tapable subscriptions to callbacks */\nexport default class TapableLogger implements Logger {\n  public readonly hooks = {\n    trace: new SyncHook<[Array<any>]>(),\n    debug: new SyncHook<[Array<any>]>(),\n    info: new SyncHook<[Array<any>]>(),\n    warn: new SyncHook<[Array<any>]>(),\n    error: new SyncHook<[Array<any>]>(),\n    log: new SyncHook<[Severity, Array<any>]>(),\n  };\n\n  private logHandlers: Set<Logger> = new Set();\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      this.hooks[severity].call(args);\n      this.hooks.log.call(severity, args);\n      this.logHandlers.forEach((logger) => logger[severity](...args));\n    };\n  }\n\n  public addHandler(logHandler: Logger) {\n    this.logHandlers.add(logHandler);\n  }\n\n  public removeHandler(logHandler: Logger) {\n    this.logHandlers.delete(logHandler);\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { Logger, Severity, LoggerProvider } from \"./types\";\n\n/**\n * The ProxyLogger allows a user to log to another Logger instance that may not exist yet\n */\nexport default class ProxyLogger implements Logger {\n  private proxiedLoggerProvider: LoggerProvider;\n\n  constructor(loggerProvider: LoggerProvider) {\n    this.proxiedLoggerProvider = loggerProvider;\n  }\n\n  private createHandler(severity: Severity): (...args: any[]) => void {\n    return (...args: any[]) => {\n      const logger = this.proxiedLoggerProvider();\n      logger?.[severity](...args);\n    };\n  }\n\n  public readonly trace = this.createHandler(\"trace\");\n  public readonly debug = this.createHandler(\"debug\");\n  public readonly info = this.createHandler(\"info\");\n  public readonly warn = this.createHandler(\"warn\");\n  public readonly error = this.createHandler(\"error\");\n}\n","import type { ValidatorFunction } from \"./types\";\n\n/** A registry that tracks validators  */\nexport class ValidatorRegistry {\n  private registry: Map<string, ValidatorFunction<any>>;\n\n  constructor() {\n    this.registry = new Map();\n  }\n\n  /** Use the given validator name to fetch the handler */\n  public get(name: string): ValidatorFunction | undefined {\n    return this.registry.get(name);\n  }\n\n  /** Register a new validator */\n  public register<T>(name: string, handler: ValidatorFunction<T>) {\n    this.registry.set(name, handler);\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { View as ViewType } from \"@player-ui/types\";\nimport type { BindingInstance, BindingFactory } from \"../binding\";\nimport type { ValidationProvider, ValidationObject } from \"../validator\";\nimport type { Logger } from \"../logger\";\nimport type { Resolve } from \"./resolver\";\nimport { Resolver } from \"./resolver\";\nimport type { Node } from \"./parser\";\nimport { Parser } from \"./parser\";\nimport { TemplatePlugin } from \"./plugins\";\n\n/**\n * Manages the view level validations\n */\nclass CrossfieldProvider implements ValidationProvider {\n  private allValidations = new Set<ValidationObject>();\n  private byBinding = new Map<BindingInstance, Array<ValidationObject>>();\n  private logger?: Logger;\n\n  constructor(initialView: ViewType, parser: BindingFactory, logger?: Logger) {\n    this.logger = logger;\n    this.parse(initialView, parser);\n  }\n\n  private parse(contentView: ViewType, parser: BindingFactory) {\n    const xfieldRefs = contentView.validation;\n\n    if (xfieldRefs === undefined) {\n      return;\n    }\n\n    if (!Array.isArray(xfieldRefs)) {\n      this.logger?.warn(\n        `Unable to register view validations for id: ${contentView.id}. 'validation' property must be an Array.`,\n      );\n\n      return;\n    }\n\n    // Grab the validations from the view (as authored) and parse out the ones that have a _ref_ (to a binding)\n    // Group them all by binding to make it easier to return than later\n\n    xfieldRefs.forEach((vRef) => {\n      // x-field validations by default are triggered by navigating away from the page\n      // the reference can also override that _or_ the severity\n      const withDefaults: ValidationObject = {\n        trigger: \"navigation\",\n        severity: \"error\",\n        ...vRef,\n      };\n\n      this.allValidations.add(withDefaults);\n\n      // The validation reference contains a _ref_ (a binding)\n      const { ref } = vRef;\n\n      if (ref) {\n        /** Group together validations by binding */\n        const parsed = parser(ref);\n\n        if (this.byBinding.has(parsed)) {\n          this.byBinding.get(parsed)?.push(withDefaults);\n        } else {\n          this.byBinding.set(parsed, [withDefaults]);\n        }\n      }\n    });\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.byBinding.get(binding);\n  }\n}\n\n/** A stateful view instance from an content */\nexport class ViewInstance implements ValidationProvider {\n  public hooks = {\n    onUpdate: new SyncHook<[ViewType]>(),\n    parser: new SyncHook<[Parser]>(),\n    resolver: new SyncHook<[Resolver]>(),\n    onTemplatePluginCreated: new SyncHook<[TemplatePlugin]>(),\n    templatePlugin: new SyncHook<[TemplatePlugin]>(),\n  };\n\n  private resolver?: Resolver;\n  public readonly initialView: ViewType;\n  public readonly resolverOptions: Resolve.ResolverOptions;\n  private rootNode?: Node.Node;\n\n  private validationProvider?: CrossfieldProvider;\n\n  private templatePlugin: TemplatePlugin | undefined;\n\n  // TODO might want to add a version/timestamp to this to compare updates\n  public lastUpdate: Record<string, any> | undefined;\n\n  constructor(initialView: ViewType, resolverOptions: Resolve.ResolverOptions) {\n    this.initialView = initialView;\n    this.resolverOptions = resolverOptions;\n    this.hooks.onTemplatePluginCreated.tap(\"view\", (templatePlugin) => {\n      this.templatePlugin = templatePlugin;\n    });\n  }\n\n  public updateAsync() {\n    const update = this.resolver?.update();\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n  }\n\n  public update(changes?: Set<BindingInstance>) {\n    if (this.rootNode === undefined) {\n      /** On initialization of the view, also create a validation parser */\n      this.validationProvider = new CrossfieldProvider(\n        this.initialView,\n        this.resolverOptions.parseBinding,\n        this.resolverOptions.logger,\n      );\n\n      if (this.templatePlugin) {\n        this.hooks.templatePlugin.call(this.templatePlugin);\n      } else {\n        this.resolverOptions.logger?.warn(\n          \"templatePlugin not set for View, legacy templates may not work\",\n        );\n      }\n\n      const parser = new Parser();\n      this.hooks.parser.call(parser);\n      this.rootNode = parser.parseView(this.initialView);\n\n      this.resolver = new Resolver(this.rootNode, {\n        ...this.resolverOptions,\n        parseNode: parser.parseObject.bind(parser),\n      });\n      this.hooks.resolver.call(this.resolver);\n    }\n\n    const update = this.resolver?.update(changes);\n\n    if (this.lastUpdate === update) {\n      return this.lastUpdate;\n    }\n\n    this.lastUpdate = update;\n    this.hooks.onUpdate.call(update);\n\n    return update;\n  }\n\n  getValidationsForBinding(binding: BindingInstance) {\n    return this.validationProvider?.getValidationsForBinding(binding);\n  }\n}\n\n/** A plugin for a view */\nexport interface ViewPlugin {\n  /** Called with a view instance */\n  apply(view: ViewInstance): void;\n}\n","import { SyncWaterfallHook } from \"tapable-ts\";\nimport type { Template } from \"@player-ui/types\";\nimport type {\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n  Parser,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type { Resolver } from \"../resolver\";\nimport { hasTemplateKey } from \"../parser/utils\";\n\nconst templateSymbol = Symbol(\"template\");\n\nexport interface TemplateItemInfo {\n  /** The index of the data for the current iteration of the template */\n  index: number;\n  /** The data for the current iteration of the template */\n  data: any;\n  /** The depth of the template node */\n  depth: number;\n}\n\nexport interface TemplateSubstitution {\n  /** Regular expression to find and replace. The global flag will be always be added to this expression. */\n  expression: string | RegExp;\n  /** The value to replace matches with. */\n  value: string;\n}\n\nexport type TemplateSubstitutionsFunc = (\n  baseSubstitutions: TemplateSubstitution[],\n  templateItemInfo: TemplateItemInfo,\n) => TemplateSubstitution[];\n\n/** A view plugin to resolve/manage templates */\nexport default class TemplatePlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  hooks: {\n    resolveTemplateSubstitutions: SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo],\n      Record<string, any>\n    >;\n  } = {\n    resolveTemplateSubstitutions: new SyncWaterfallHook<\n      [TemplateSubstitution[], TemplateItemInfo]\n    >(),\n  };\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private parseTemplate(\n    parseObject: any,\n    node: Node.Template,\n    options: Options,\n  ): Node.Node | null {\n    const { template, depth } = node;\n    const data = options.data.model.get(node.data);\n\n    if (!data) {\n      return null;\n    }\n\n    if (!Array.isArray(data)) {\n      throw new Error(`Template using '${node.data}' but is not an array`);\n    }\n\n    const values: Array<Node.Node> = [];\n\n    data.forEach((dataItem, index) => {\n      const templateSubstitutions =\n        this.hooks.resolveTemplateSubstitutions.call(\n          [\n            {\n              expression: new RegExp(`_index${depth || \"\"}_`),\n              value: String(index),\n            },\n          ],\n          {\n            depth,\n            data: dataItem,\n            index,\n          },\n        );\n      let templateStr = JSON.stringify(template);\n\n      for (const { expression, value } of templateSubstitutions) {\n        let flags = \"g\";\n        if (typeof expression === \"object\") {\n          flags = `${expression.flags}${expression.global ? \"\" : \"g\"}`;\n        }\n\n        templateStr = templateStr.replace(new RegExp(expression, flags), value);\n      }\n\n      const parsed = parseObject(JSON.parse(templateStr), NodeType.Value, {\n        templateDepth: node.depth + 1,\n      });\n\n      if (parsed) {\n        values.push(parsed);\n      }\n    });\n\n    const result: Node.MultiNode = {\n      type: NodeType.MultiNode,\n      override: false,\n      values,\n    };\n\n    // Removes undefined Symbol property\n    if (node.placement !== undefined) {\n      (result as any)[templateSymbol] = node.placement;\n    }\n\n    return result;\n  }\n\n  applyParser(parser: Parser): void {\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      if (node && node.type === NodeType.Template && !node.dynamic) {\n        return this.parseTemplate(\n          parser.parseObject.bind(parser),\n          node,\n          this.options,\n        );\n      }\n\n      return node;\n    });\n\n    parser.hooks.onCreateASTNode.tap(\"template\", (node) => {\n      function getTemplateSymbolValue(node: Node.Node): string | undefined {\n        if (node.type === NodeType.MultiNode) {\n          return (node as any)[templateSymbol];\n        } else if (node.type === NodeType.Template) {\n          return node.placement;\n        }\n        return undefined;\n      }\n\n      if (\n        node &&\n        (node.type === NodeType.View || node.type === NodeType.Asset) &&\n        Array.isArray(node.children)\n      ) {\n        node.children = node.children.sort((a, b) => {\n          // compare template output with static values\n          const aPath = a.path.join();\n          const bPath = b.path.join();\n\n          const pathsEqual = aPath === bPath;\n\n          if (pathsEqual) {\n            const aPlacement = getTemplateSymbolValue(a.value);\n            const bPlacement = getTemplateSymbolValue(b.value);\n\n            if (aPlacement !== undefined && bPlacement === undefined) {\n              return aPlacement === \"prepend\" ? -1 : 1;\n            } else if (bPlacement !== undefined && aPlacement === undefined) {\n              return bPlacement === \"prepend\" ? 1 : -1;\n            } else if (aPlacement !== undefined && bPlacement !== undefined) {\n              // Both have placement values\n              if (aPlacement === bPlacement) {\n                return 0; // Same placement, no preference\n              }\n              // \"prepend\" should come before \"append\"\n              return aPlacement === \"prepend\" ? -1 : 1;\n            }\n            return 0;\n          }\n\n          // Trigger more sorting for nested assets\n          return aPath > bPath ? 1 : -1;\n        });\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"template\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions && hasTemplateKey(childOptions.key)) {\n          return obj\n            .map((template: Template) => {\n              const templateAST = parser.createASTNode(\n                {\n                  type: NodeType.Template,\n                  depth: options.templateDepth ?? 0,\n                  data: template.data,\n                  template: template.value,\n                  dynamic: template.dynamic ?? false,\n                  placement: template.placement,\n                },\n                template,\n              );\n\n              if (!templateAST) return;\n\n              if (templateAST.type === NodeType.MultiNode) {\n                templateAST.values.forEach((v) => {\n                  v.parent = templateAST;\n                });\n              }\n\n              return {\n                path: [...childOptions.path, template.output],\n                value: templateAST,\n              };\n            })\n            .filter(Boolean);\n        }\n      },\n    );\n  }\n\n  applyResolverHooks(resolver: Resolver): void {\n    // Transform dynamic templates into MultiNodes\n    resolver.hooks.beforeResolve.tap(\"template\", (node, options) => {\n      if (node && node.type === NodeType.Template && node.dynamic) {\n        return this.parseTemplate(options.parseNode, node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance): void {\n    view.hooks.parser.tap(\"template\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"template\", this.applyResolverHooks.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type { Options } from \"./options\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { EMPTY_NODE, NodeType } from \"../parser\";\nimport type { Resolver } from \"../resolver\";\nimport { hasSwitchKey } from \"../parser/utils\";\n\n/** A view plugin to resolve switches */\nexport default class SwitchPlugin implements ViewPlugin {\n  private readonly options: Options;\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  private resolveSwitch(node: Node.Switch, options: Options): Node.Node {\n    for (const switchCase of node.cases) {\n      const isApplicable = options.evaluate(switchCase.case);\n      if (isApplicable) {\n        return switchCase.value;\n      }\n    }\n\n    return EMPTY_NODE;\n  }\n\n  private isSwitch(obj: any) {\n    return (\n      obj &&\n      (Object.prototype.hasOwnProperty.call(obj, \"dynamicSwitch\") ||\n        Object.prototype.hasOwnProperty.call(obj, \"staticSwitch\"))\n    );\n  }\n\n  applyParser(parser: Parser) {\n    /** Switches resolved during the parsing phase are static */\n    parser.hooks.onCreateASTNode.tap(\"switch\", (node) => {\n      if (node && node.type === NodeType.Switch && !node.dynamic) {\n        return this.resolveSwitch(node, this.options);\n      }\n\n      return node;\n    });\n\n    parser.hooks.parseNode.tap(\n      \"switch\",\n      (\n        obj: any,\n        _nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          this.isSwitch(obj) ||\n          (childOptions && hasSwitchKey(childOptions.key))\n        ) {\n          const objToParse =\n            childOptions && hasSwitchKey(childOptions.key)\n              ? { [childOptions.key]: obj }\n              : obj;\n          const dynamic = \"dynamicSwitch\" in objToParse;\n          const switchContent = dynamic\n            ? objToParse.dynamicSwitch\n            : objToParse.staticSwitch;\n\n          const cases: Node.SwitchCase[] = switchContent\n            .map(\n              (switchCase: {\n                [x: string]: any;\n                /**\n                 *\n                 */\n                case: any;\n              }) => {\n                const { case: switchCaseExpr, ...switchBody } = switchCase;\n                const value = parser.parseObject(\n                  switchBody,\n                  NodeType.Value,\n                  options,\n                );\n\n                if (value) {\n                  return {\n                    case: switchCaseExpr,\n                    value: value as Node.Value,\n                  };\n                }\n\n                return;\n              },\n            )\n            .filter(Boolean);\n\n          const switchAST = parser.createASTNode(\n            {\n              type: NodeType.Switch,\n              dynamic,\n              cases,\n            },\n            objToParse,\n          );\n\n          if (!switchAST || switchAST.type === NodeType.Empty) {\n            return childOptions ? [] : null;\n          }\n\n          if (switchAST.type === NodeType.Switch) {\n            switchAST.cases.forEach((sCase) => {\n              sCase.value.parent = switchAST;\n            });\n          }\n\n          if (childOptions) {\n            let path = [...childOptions.path, childOptions.key];\n            let value: any = switchAST;\n\n            if (\n              switchAST.type === NodeType.Value &&\n              switchAST.children?.length === 1 &&\n              switchAST.value === undefined\n            ) {\n              const firstChild = switchAST.children[0];\n              path = [...path, ...firstChild.path];\n              value = firstChild.value;\n            }\n\n            return [{ path, value }];\n          }\n\n          return switchAST;\n        }\n      },\n    );\n  }\n\n  applyResolver(resolver: Resolver) {\n    /** Switches resolved during the parsing phase are dynamic */\n    resolver.hooks.beforeResolve.tap(\"switch\", (node, options) => {\n      if (node && node.type === NodeType.Switch && node.dynamic) {\n        return this.resolveSwitch(node, options);\n      }\n\n      return node;\n    });\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"switch\", this.applyParser.bind(this));\n    view.hooks.resolver.tap(\"switch\", this.applyResolver.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\nimport { hasTemplateValues, hasTemplateKey } from \"../parser/utils\";\n\n/** A view plugin to resolve multi nodes */\nexport default class MultiNodePlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"multi-node\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (\n          childOptions &&\n          !hasTemplateKey(childOptions.key) &&\n          Array.isArray(obj)\n        ) {\n          const values = obj\n            .map((childVal) =>\n              parser.parseObject(childVal, NodeType.Value, options),\n            )\n            .filter((child): child is Node.Node => !!child);\n\n          if (!values.length) {\n            return [];\n          }\n\n          const multiNode = parser.createASTNode(\n            {\n              type: NodeType.MultiNode,\n              override: !hasTemplateValues(\n                childOptions.parentObj,\n                childOptions.key,\n              ),\n              values,\n            },\n            obj,\n          );\n\n          if (!multiNode) {\n            return [];\n          }\n\n          if (multiNode.type === NodeType.MultiNode) {\n            multiNode.values.forEach((v) => {\n              v.parent = multiNode;\n            });\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: multiNode,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"multi-node\", this.applyParser.bind(this));\n  }\n}\n","import { ViewInstance, ViewPlugin } from \"../view\";\nimport type {\n  Parser,\n  Node,\n  ParseObjectOptions,\n  ParseObjectChildOptions,\n} from \"../parser\";\nimport { NodeType } from \"../parser\";\n\n/** A view plugin to resolve assets */\nexport default class AssetPlugin implements ViewPlugin {\n  applyParser(parser: Parser) {\n    parser.hooks.parseNode.tap(\n      \"asset\",\n      (\n        obj: any,\n        nodeType: Node.ChildrenTypes,\n        options: ParseObjectOptions,\n        childOptions?: ParseObjectChildOptions,\n      ) => {\n        if (childOptions?.key === \"asset\" && typeof obj === \"object\") {\n          const assetAST = parser.parseObject(obj, NodeType.Asset, options);\n\n          if (!assetAST) {\n            return [];\n          }\n\n          return [\n            {\n              path: [...childOptions.path, childOptions.key],\n              value: assetAST,\n            },\n          ];\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.parser.tap(\"asset\", this.applyParser.bind(this));\n  }\n}\n","export interface Store {\n  useLocalState<T>(initialState: T): readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\ninterface SharedStore {\n  getLocalStateFunction<T>(\n    key: string | symbol,\n    countKey: symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n  useSharedState<T>(\n    key: string | symbol,\n  ): (initialState: T) => readonly [T, (value: T) => void];\n}\n\n/** A store that holds on to state for a transform */\nexport class LocalStateStore implements SharedStore {\n  private state: Map<string | symbol, any>;\n\n  private updateCallback?: () => void;\n\n  constructor(onUpdate?: () => void) {\n    this.updateCallback = onUpdate;\n\n    this.state = new Map();\n  }\n\n  public removeKey(key: symbol | string) {\n    this.state.delete(key);\n  }\n\n  public reset() {\n    this.state.clear();\n  }\n\n  useSharedState<T>(key: string | symbol) {\n    return (initialState: T) => {\n      if (!this.state.has(key)) {\n        this.state.set(key, initialState);\n      }\n\n      return [\n        this.state.get(key) as T,\n        (newState: T) => {\n          const current = this.state.get(key) as T;\n\n          this.state.set(key, newState);\n\n          if (current !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n\n  getLocalStateFunction<T>(key: symbol, countKey: symbol) {\n    return (initialState: T) => {\n      // initialize if not already created\n      if (!this.state.has(key)) {\n        this.state.set(key, []);\n      }\n\n      if (!this.state.has(countKey)) {\n        this.state.set(countKey, 0);\n      }\n\n      const localState = this.state.get(key);\n      const oldCount = this.state.get(countKey);\n\n      this.state.set(countKey, oldCount + 1);\n\n      if (localState.length <= oldCount) {\n        localState.push(initialState);\n      }\n\n      const value = localState[oldCount] as T;\n\n      return [\n        value,\n        (newState: T) => {\n          const oldValue = localState[oldCount] as T;\n          localState[oldCount] = newState;\n\n          if (oldValue !== newState) {\n            this.updateCallback?.();\n          }\n        },\n      ] as const;\n    };\n  }\n}\n","import type { Node, ViewInstance } from \"..\";\nimport { NodeType } from \"..\";\nimport { LocalStateStore } from \"../../controllers/view/store\";\nimport type { TransformRegistry } from \"../../controllers/view/types\";\n\n/** Traverse up the nodes until the target is found */\nfunction findUp(node: Node.Node, target: Node.Node): boolean {\n  if (node === target) {\n    return true;\n  }\n\n  if (node.parent) {\n    return findUp(node.parent, target);\n  }\n\n  return false;\n}\n\n/**\n * A plugin to register custom transforms on certain asset types\n * This allows users to embed stateful data into transforms.\n */\nexport default class AssetTransformCorePlugin {\n  public readonly stateStore: Map<Node.Node, LocalStateStore>;\n  private readonly registry: TransformRegistry;\n  private beforeResolveSymbol: symbol;\n  private resolveSymbol: symbol;\n  private beforeResolveCountSymbol: symbol;\n  private resolveCountSymbol: symbol;\n\n  constructor(registry: TransformRegistry) {\n    this.registry = registry;\n    this.stateStore = new Map();\n    this.beforeResolveSymbol = Symbol(\"before resolve\");\n    this.resolveSymbol = Symbol(\"resolve\");\n    this.beforeResolveCountSymbol = Symbol(\"before resolve count\");\n    this.resolveCountSymbol = Symbol(\"resolve count\");\n  }\n\n  apply(view: ViewInstance) {\n    // Clear out everything when we create a new view\n    this.stateStore.clear();\n\n    view.hooks.resolver.tap(\"asset-transform\", (resolver) => {\n      let lastUpdatedNode: Node.Node | undefined;\n\n      /** A function to update the state and trigger a view re-compute */\n      const updateState = (node: Node.Node) => {\n        lastUpdatedNode = node;\n        view.update(new Set());\n      };\n\n      /** Given a node and a transform step, fetch a local store */\n      const getStore = (node: Node.Node, stepKey: symbol) => {\n        let store: LocalStateStore;\n        const countKey =\n          stepKey === this.resolveSymbol\n            ? this.resolveCountSymbol\n            : this.beforeResolveCountSymbol;\n\n        const storedState = this.stateStore.get(node);\n\n        if (storedState) {\n          store = storedState;\n          store.removeKey(countKey);\n        } else {\n          store = new LocalStateStore(() => {\n            updateState(node);\n          });\n          this.stateStore.set(node, store);\n        }\n\n        return {\n          useSharedState: (\n            key: string | symbol,\n          ): (<T>(initialState: T) => readonly [T, (value: T) => void]) => {\n            return store.useSharedState(key);\n          },\n          useLocalState: <T>(initialState: T) => {\n            return store.getLocalStateFunction<T>(\n              stepKey,\n              countKey,\n            )(initialState);\n          },\n        };\n      };\n\n      resolver.hooks.beforeResolve.tap(\"asset-transform\", (node, options) => {\n        if (node && (node.type === \"asset\" || node.type === \"view\")) {\n          const transform = this.registry.get(node.value);\n\n          if (transform?.beforeResolve) {\n            const store = getStore(\n              options.node ?? node,\n              this.beforeResolveSymbol,\n            );\n\n            return transform.beforeResolve(node, options, store);\n          }\n        }\n\n        return node;\n      });\n\n      resolver.hooks.afterUpdate.tap(\"asset-transform\", () => {\n        lastUpdatedNode = undefined;\n      });\n\n      resolver.hooks.skipResolve.tap(\"asset-transform\", (skip, node) => {\n        if (!skip || !lastUpdatedNode) {\n          return skip;\n        }\n\n        const isParentOfUpdated = findUp(lastUpdatedNode, node);\n        const isChildOfUpdated = findUp(node, lastUpdatedNode);\n\n        return !isParentOfUpdated && !isChildOfUpdated;\n      });\n\n      resolver.hooks.afterResolve.tap(\n        \"asset-transform\",\n        (value, node, options) => {\n          if (node.type !== NodeType.Asset && node.type !== NodeType.View) {\n            return value;\n          }\n\n          const originalNode = resolver.getSourceNode(node);\n\n          if (!originalNode) {\n            return value;\n          }\n\n          const transform = this.registry.get(value);\n\n          if (transform?.resolve) {\n            const store = getStore(originalNode, this.resolveSymbol);\n\n            return transform?.resolve(value, options, store);\n          }\n\n          return value;\n        },\n      );\n    });\n  }\n}\n","import { SyncHook } from \"tapable-ts\";\nimport type { Navigation, NavigationFlowEndState } from \"@player-ui/types\";\nimport type { Logger } from \"../../logger\";\nimport type { TransitionOptions } from \"./flow\";\nimport { FlowInstance } from \"./flow\";\n\n/** A manager for the navigation section of a Content blob */\nexport class FlowController {\n  public readonly hooks = {\n    flow: new SyncHook<[FlowInstance]>(),\n  };\n\n  private readonly log?: Logger;\n  private navigation: Navigation;\n  private navStack: FlowInstance[];\n  public current?: FlowInstance;\n\n  constructor(\n    navigation: Navigation,\n    options?: {\n      /** A logger instance to use */\n      logger?: Logger;\n    },\n  ) {\n    this.navigation = navigation;\n    this.navStack = [];\n    this.log = options?.logger;\n\n    this.start = this.start.bind(this);\n    this.run = this.run.bind(this);\n    this.transition = this.transition.bind(this);\n    this.addNewFlow = this.addNewFlow.bind(this);\n  }\n\n  /** Navigate to another state in the state-machine */\n  public transition(stateTransition: string, options?: TransitionOptions) {\n    if (this.current === undefined) {\n      throw new Error(\"Not currently in a flow. Cannot transition.\");\n    }\n\n    this.current.transition(stateTransition, options);\n  }\n\n  private addNewFlow(flow: FlowInstance) {\n    this.navStack.push(flow);\n    this.current = flow;\n    this.hooks.flow.call(flow);\n  }\n\n  private async run(startState: string): Promise<NavigationFlowEndState> {\n    if (!Object.prototype.hasOwnProperty.call(this.navigation, startState)) {\n      return Promise.reject(new Error(`No flow defined for: ${startState}`));\n    }\n\n    const startFlow = this.navigation[startState];\n\n    if (startFlow === null || typeof startFlow !== \"object\") {\n      return Promise.reject(\n        new Error(`Flow: ${startState} needs to be an object`),\n      );\n    }\n\n    this.log?.debug(`Starting flow: ${startState}`);\n\n    const flow = new FlowInstance(startState, startFlow, { logger: this.log });\n    this.addNewFlow(flow);\n\n    flow.hooks.afterTransition.tap(\"flow-controller\", (flowInstance) => {\n      if (flowInstance.currentState?.value.state_type === \"FLOW\") {\n        const subflowId = flowInstance.currentState?.value.ref;\n        this.log?.debug(`Loading subflow ${subflowId}`);\n        this.run(subflowId).then((subFlowEndState) => {\n          this.log?.debug(\n            `Subflow ended. Using outcome: ${subFlowEndState.outcome}`,\n          );\n          flowInstance.transition(subFlowEndState?.outcome);\n        });\n      }\n    });\n\n    const end = await flow.start();\n    this.navStack.pop();\n\n    if (this.navStack.length > 0) {\n      const firstItem = 0;\n      this.current = this.navStack[firstItem];\n    }\n\n    return end;\n  }\n\n  public async start(): Promise<NavigationFlowEndState> {\n    if (!this.navigation.BEGIN) {\n      return Promise.reject(new Error(\"Must supply a BEGIN state\"));\n    }\n\n    return this.run(this.navigation.BEGIN);\n  }\n}\n","import type { Validation } from \"@player-ui/types\";\nimport type { ViewPlugin, Resolver, Node, ViewInstance } from \"../../view\";\nimport { NodeType } from \"../../view\";\nimport type {\n  BindingInstance,\n  BindingLike,\n  BindingFactory,\n} from \"../../binding\";\nimport { isBinding } from \"../../binding\";\nimport type { ValidationResponse } from \"../../validator\";\n\nconst CONTEXT = \"validation-binding-tracker\";\n\nexport interface BindingTracker {\n  /** Get the bindings currently being tracked for validation */\n  getBindings(): Set<BindingInstance>;\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance): void;\n}\ninterface Options {\n  /** Parse a binding from a view */\n  parseBinding: BindingFactory;\n\n  /** Callbacks when events happen */\n  callbacks?: {\n    /** Called when a binding is encountered for the first time in a view */\n    onAdd?: (binding: BindingInstance) => void;\n  };\n}\n\n/** A view plugin that manages bindings tracked across updates */\nexport class ValidationBindingTrackerViewPlugin\n  implements ViewPlugin, BindingTracker\n{\n  private options: Options;\n\n  private trackedBindings = new Set<BindingInstance>();\n\n  constructor(options: Options) {\n    this.options = options;\n  }\n\n  /** Fetch the tracked bindings in the current view */\n  getBindings(): Set<BindingInstance> {\n    return this.trackedBindings;\n  }\n\n  /** Add a binding to the tracked set */\n  trackBinding(binding: BindingInstance) {\n    if (this.trackedBindings.has(binding)) {\n      return;\n    }\n\n    this.trackedBindings.add(binding);\n    this.options.callbacks?.onAdd?.(binding);\n  }\n\n  /** Attach hooks to the given resolver */\n  applyResolver(resolver: Resolver) {\n    this.trackedBindings.clear();\n\n    /** Each node maps to a set of bindings that it directly tracks */\n    const tracked = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Each Node is a registered section or page that maps to a set of nodes in its section */\n    const sections = new Map<Node.Node, Set<Node.Node>>();\n\n    let lastViewUpdateChangeSet: Set<BindingInstance> | undefined;\n\n    /** Map of node to all bindings in children */\n    const lastComputedBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n    let currentBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of registered section nodes to bindings */\n    const lastSectionBindingTree = new Map<Node.Node, Set<BindingInstance>>();\n\n    /** Map of resolved nodes to their original nodes. */\n    const resolvedNodeMap: Map<Node.Node, Node.Node> = new Map();\n\n    resolver.hooks.beforeUpdate.tap(CONTEXT, (changes) => {\n      lastViewUpdateChangeSet = changes;\n    });\n\n    resolver.hooks.skipResolve.tap(CONTEXT, (shouldSkip, node) => {\n      const trackedBindingsForNode = lastComputedBindingTree.get(node);\n\n      if (!shouldSkip || !lastViewUpdateChangeSet || !trackedBindingsForNode) {\n        return shouldSkip;\n      }\n\n      const intersection = new Set(\n        [...lastViewUpdateChangeSet].filter((b) =>\n          trackedBindingsForNode.has(b),\n        ),\n      );\n\n      return intersection.size === 0;\n    });\n\n    resolver.hooks.resolveOptions.tap(CONTEXT, (options, node) => {\n      if (options.validation === undefined) {\n        return options;\n      }\n\n      // Clear out any old tracked bindings for this node since we're re-compiling it\n      tracked.delete(node);\n\n      /** Validation callback to track a binding */\n      const track = (binding: BindingLike) => {\n        const parsed = isBinding(binding)\n          ? binding\n          : this.options.parseBinding(binding);\n\n        if (tracked.has(node)) {\n          tracked.get(node)?.add(parsed);\n        } else {\n          tracked.set(node, new Set([parsed]));\n        }\n\n        /** find first parent registered as section and add self to its list */\n        let { parent } = node;\n\n        while (parent) {\n          if (sections.has(parent)) {\n            sections.get(parent)?.add(node);\n            break;\n          } else {\n            parent = parent.parent;\n          }\n        }\n\n        this.trackedBindings.add(parsed);\n        this.options.callbacks?.onAdd?.(parsed);\n      };\n\n      return {\n        ...options,\n        validation: {\n          ...options.validation,\n          get: (binding, getOptions) => {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            const eows = options.validation\n              ?._getValidationForBinding(binding)\n              ?.getAll(getOptions);\n\n            const firstFieldEOW = eows?.find(\n              (eow) =>\n                eow.displayTarget === \"field\" ||\n                eow.displayTarget === undefined,\n            );\n\n            return firstFieldEOW;\n          },\n          getValidationsForBinding(binding, getOptions) {\n            if (getOptions?.track) {\n              track(binding);\n            }\n\n            return (\n              options.validation\n                ?._getValidationForBinding(binding)\n                ?.getAll(getOptions) ?? []\n            );\n          },\n          getChildren: (type?: Validation.DisplayTarget) => {\n            const validations = new Array<ValidationResponse>();\n            lastComputedBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && (type === undefined || type === eow.displayTarget)) {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          getValidationsForSection: () => {\n            const validations = new Array<ValidationResponse>();\n            lastSectionBindingTree.get(node)?.forEach((binding) => {\n              const eow = options.validation\n                ?._getValidationForBinding(binding)\n                ?.get();\n\n              if (eow && eow.displayTarget === \"section\") {\n                validations.push(eow);\n              }\n            });\n\n            return validations;\n          },\n          register: (registerOptions) => {\n            if (registerOptions?.type === \"section\") {\n              if (!sections.has(node)) {\n                sections.set(node, new Set());\n              }\n            }\n          },\n          track,\n        },\n      };\n    });\n\n    resolver.hooks.afterNodeUpdate.tap(\n      CONTEXT,\n      (originalNode, parent, update) => {\n        // Compute the new tree for this node\n        // If it's not-updated, use the last known value\n\n        const { updated, node: resolvedNode } = update;\n        resolvedNodeMap.set(resolvedNode, originalNode);\n\n        if (updated) {\n          const newlyComputed = new Set(tracked.get(originalNode));\n          if (resolvedNode.type === NodeType.MultiNode) {\n            resolvedNode.values.forEach((value) =>\n              currentBindingTree\n                .get(value)\n                ?.forEach((b) => newlyComputed.add(b)),\n            );\n          }\n\n          if (\"children\" in resolvedNode && resolvedNode.children) {\n            resolvedNode.children.forEach((child) => {\n              currentBindingTree\n                .get(child.value)\n                ?.forEach((b) => newlyComputed.add(b));\n            });\n          }\n\n          currentBindingTree.set(resolvedNode, newlyComputed);\n        } else {\n          currentBindingTree.set(\n            resolvedNode,\n            lastComputedBindingTree.get(originalNode) ?? new Set(),\n          );\n        }\n\n        if (originalNode === resolver.root) {\n          this.trackedBindings = new Set(currentBindingTree.get(resolvedNode));\n          lastComputedBindingTree.clear();\n          currentBindingTree.forEach((value, key) => {\n            const node = resolvedNodeMap.get(key);\n            if (node) {\n              lastComputedBindingTree.set(node, value);\n            }\n          });\n\n          lastSectionBindingTree.clear();\n          sections.forEach((nodeSet, sectionNode) => {\n            const temp = new Set<BindingInstance>();\n            nodeSet.forEach((n) => {\n              tracked.get(n)?.forEach(temp.add, temp);\n            });\n            lastSectionBindingTree.set(sectionNode, temp);\n          });\n\n          tracked.clear();\n          sections.clear();\n          currentBindingTree = new Map();\n        }\n      },\n    );\n  }\n\n  apply(view: ViewInstance) {\n    view.hooks.resolver.tap(CONTEXT, this.applyResolver.bind(this));\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { DataController } from \".\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingLike } from \"../../binding\";\nimport type {\n  DataModelWithParser,\n  DataModelOptions,\n  Updates,\n} from \"../../data\";\n\n/** Wrapper for the Data Controller Class that prevents writes */\nexport class ReadOnlyDataController\n  implements DataModelWithParser<DataModelOptions>\n{\n  private controller: DataController;\n  private logger?: Logger;\n\n  constructor(controller: DataController, logger?: Logger) {\n    this.controller = controller;\n    this.logger = logger;\n  }\n\n  get(binding: BindingLike, options?: DataModelOptions | undefined) {\n    return this.controller.get(binding, options);\n  }\n\n  set(\n    transaction: [BindingLike, any][],\n    options?: DataModelOptions | undefined,\n  ): Updates {\n    this.logger?.error(\n      \"Error: Tried to set in a read only instance of the DataController\",\n    );\n    return [];\n  }\n\n  delete(binding: BindingLike, options?: DataModelOptions | undefined): void {\n    this.logger?.error(\n      \"Error: Tried to delete in a read only instance of the DataController\",\n    );\n  }\n}\n","import { SyncHook, SyncWaterfallHook, SyncBailHook } from \"tapable-ts\";\nimport { dequal } from \"dequal\";\nimport type { Logger } from \"../../logger\";\nimport type { BindingParser, BindingLike } from \"../../binding\";\nimport { BindingInstance } from \"../../binding\";\nimport type {\n  BatchSetTransaction,\n  Updates,\n  DataModelOptions,\n  DataModelWithParser,\n  DataPipeline,\n  DataModelMiddleware,\n} from \"../../data\";\nimport { PipelinedDataModel, LocalModel } from \"../../data\";\nimport type { RawSetTransaction } from \"../../types\";\nimport { ReadOnlyDataController } from \"./utils\";\n\n/** The orchestrator for player data */\nexport class DataController implements DataModelWithParser<DataModelOptions> {\n  public hooks = {\n    resolve: new SyncWaterfallHook(),\n    resolveDataStages: new SyncWaterfallHook<[DataPipeline]>(),\n\n    // On any set or get of an undefined value, redirect the value to be the default\n    resolveDefaultValue: new SyncBailHook<[BindingInstance], any>(),\n\n    onDelete: new SyncHook<[any]>(),\n\n    onSet: new SyncHook<[BatchSetTransaction]>(),\n\n    onGet: new SyncHook<[any, any]>(),\n\n    onUpdate: new SyncHook<[Updates, DataModelOptions | undefined]>(),\n\n    format: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    deformat: new SyncWaterfallHook<[any, BindingInstance]>(),\n\n    serialize: new SyncWaterfallHook<[any]>(),\n  };\n\n  private model?: PipelinedDataModel;\n  private trash: Set<BindingInstance>;\n  private pathResolver: BindingParser;\n  private baseMiddleware: Array<DataModelMiddleware>;\n  private logger?: Logger;\n\n  constructor(\n    model: Record<any, unknown> | undefined,\n    options: {\n      /** A means of parsing a raw binding to a Binding object */\n      pathResolver: BindingParser;\n\n      /** middleware to use. typically for validation */\n      middleware?: Array<DataModelMiddleware>;\n\n      /** A logger to use  */\n      logger?: Logger;\n    },\n  ) {\n    this.logger = options.logger;\n    const middleware = options.middleware || [];\n    this.baseMiddleware = [new LocalModel(model), ...middleware];\n\n    this.trash = new Set();\n    this.pathResolver = options.pathResolver;\n  }\n\n  public getModel(): PipelinedDataModel {\n    if (!this.model) {\n      const stages = this.hooks.resolveDataStages.call(this.baseMiddleware);\n      const model = new PipelinedDataModel();\n      model.setMiddleware(stages);\n      this.model = model;\n    }\n\n    return this.model;\n  }\n\n  private resolveDataValue(\n    binding: BindingInstance,\n    value: any,\n    deformat: boolean,\n  ) {\n    if (deformat) {\n      return this.hooks.deformat.call(value, binding);\n    }\n\n    return value;\n  }\n\n  public set(\n    transaction: RawSetTransaction,\n    options?: DataModelOptions,\n  ): Updates {\n    let normalizedTransaction: BatchSetTransaction = [];\n\n    if (Array.isArray(transaction)) {\n      normalizedTransaction = transaction.map(([binding, value]) => {\n        const parsed = this.pathResolver.parse(binding);\n\n        return [\n          parsed,\n          this.resolveDataValue(parsed, value, Boolean(options?.formatted)),\n        ];\n      }) as BatchSetTransaction;\n    } else {\n      normalizedTransaction = Object.keys(transaction).map(\n        (binding: string) => {\n          const parsed = this.pathResolver.parse(binding);\n          const val = transaction[binding];\n\n          return [\n            parsed,\n            this.resolveDataValue(parsed, val, Boolean(options?.formatted)),\n          ];\n        },\n      ) as BatchSetTransaction;\n    }\n\n    // Figure out what the base changes being applied are\n    const setUpdates = normalizedTransaction.reduce<Updates>(\n      (updates, [binding, newVal]) => {\n        const oldVal = this.get(binding, { includeInvalid: true });\n\n        const update = {\n          binding,\n          newValue: newVal,\n          oldValue: oldVal,\n        };\n\n        if (dequal(oldVal, newVal)) {\n          this.logger?.debug(\n            `Skipping update for path: ${binding.asString()}. Value was unchanged: ${oldVal}`,\n          );\n        } else {\n          updates.push(update);\n\n          this.logger?.debug(\n            `Setting path: ${binding.asString()} from: ${oldVal} to: ${newVal}`,\n          );\n        }\n\n        return updates;\n      },\n      [],\n    );\n\n    // Get the applied update\n    const result = this.getModel().set(normalizedTransaction, options);\n\n    // Add any extra bindings that were effected\n    const setUpdateBindings = new Set(setUpdates.map((su) => su.binding));\n    result.forEach((tr) => {\n      if (\n        !setUpdateBindings.has(tr.binding) &&\n        (tr.force === true || !dequal(tr.oldValue, tr.newValue))\n      ) {\n        this.logger?.debug(\n          `Path: ${tr.binding.asString()} was changed from: ${\n            tr.oldValue\n          } to: ${tr.newValue}`,\n        );\n        setUpdates.push(tr);\n      }\n    });\n\n    this.hooks.onSet.call(normalizedTransaction);\n\n    if (setUpdates.length > 0) {\n      this.hooks.onUpdate.call(setUpdates, options);\n    }\n\n    return result;\n  }\n\n  private resolve(binding: BindingLike, readOnly: boolean): BindingInstance {\n    return Array.isArray(binding) || typeof binding === \"string\"\n      ? this.pathResolver.parse(binding, { readOnly })\n      : binding;\n  }\n\n  public get(binding: BindingLike, options?: DataModelOptions) {\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, true);\n    let result = this.getModel().get(resolved, options);\n\n    if (result === undefined && !options?.ignoreDefaultValue) {\n      const defaultVal = this.hooks.resolveDefaultValue.call(resolved);\n\n      if (defaultVal !== result) {\n        result = defaultVal;\n      }\n    }\n\n    if (options?.formatted) {\n      result = this.hooks.format.call(result, resolved);\n    } else if (options?.formatted === false) {\n      result = this.hooks.deformat.call(result, resolved);\n    }\n\n    this.hooks.onGet.call(binding, result);\n\n    return result;\n  }\n\n  public delete(binding: BindingLike, options?: DataModelOptions) {\n    if (\n      typeof binding !== \"string\" &&\n      !Array.isArray(binding) &&\n      !(binding instanceof BindingInstance)\n    ) {\n      throw new Error(\"Invalid arguments: delete expects a data path (string)\");\n    }\n\n    const resolved =\n      binding instanceof BindingInstance\n        ? binding\n        : this.resolve(binding, false);\n\n    const parentBinding = resolved.parent();\n    const property = resolved.key();\n    const parentValue = this.get(parentBinding);\n\n    const existedBeforeDelete =\n      typeof parentValue === \"object\" &&\n      parentValue !== null &&\n      Object.prototype.hasOwnProperty.call(parentValue, property);\n\n    this.getModel().delete(resolved, options);\n\n    if (existedBeforeDelete && !this.get(resolved)) {\n      this.trash.add(resolved);\n    }\n\n    this.hooks.onDelete.call(resolved);\n  }\n\n  public serialize(): object {\n    return this.hooks.serialize.call(this.get(\"\"));\n  }\n\n  public makeReadOnly(): ReadOnlyDataController {\n    return new ReadOnlyDataController(this, this.logger);\n  }\n}\n","import { LocalModel } from \"../../data\";\nimport { BindingInstance } from \"../../binding\";\nimport { objectToBatchSet } from \"./utils\";\n\nexport interface ConstantsProvider {\n  /**\n   * Function to add constants to the providers store\n   * - @param data values to add to the constants store\n   */\n  addConstants(data: Record<string, any>, namespace: string): void;\n\n  /**\n   * Function to retrieve constants from the providers store\n   *  - @param key Key used for the store access\n   *  - @param namespace namespace values were loaded under (defined in the plugin)\n   *  - @param fallback Optional - if key doesn't exist in namespace what to return (will return unknown if not provided)\n   */\n  getConstants(key: any, namespace: string, fallback?: any): any;\n\n  /**\n   * Function to set values to temporarily override certain keys in the perminant store\n   * - @param data values to override store with\n   * - @param namespace namespace to override\n   */\n  setTemporaryValues(data: any, namespace: string): void;\n\n  /**\n   * Clears any temporary values that were previously set\n   */\n  clearTemporaryValues(): void;\n}\n\n/**\n * Key/Value store for constants and context for Player\n */\nexport class ConstantsController implements ConstantsProvider {\n  /**\n   * Data store is basically a map of namespaces to DataModels to provide some data isolation\n   */\n  private store: Map<string, LocalModel>;\n\n  /**\n   * Separate store for temporary flow specific overrides.\n   * They are kept in a separate data model to make clearing it easier between flows\n   * and so there is no confusion on what is static and what is temporary\n   */\n  private tempStore: Map<string, LocalModel>;\n\n  constructor() {\n    this.store = new Map();\n    this.tempStore = new Map();\n  }\n\n  addConstants(data: any, namespace: string): void {\n    if (this.store.has(namespace)) {\n      this.store.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.store.set(namespace, new LocalModel(data));\n    }\n  }\n\n  getConstants(key: string, namespace: string, fallback?: any): any {\n    const path = new BindingInstance(key);\n\n    return (\n      this.tempStore.get(namespace)?.get(path) ??\n      this.store.get(namespace)?.get(path) ??\n      fallback\n    );\n  }\n\n  setTemporaryValues(data: any, namespace: string): void {\n    if (this.tempStore.has(namespace)) {\n      this.tempStore.get(namespace)?.set(objectToBatchSet(data));\n    } else {\n      this.tempStore.set(namespace, new LocalModel(data));\n    }\n  }\n\n  clearTemporaryValues(namespace?: string): void {\n    if (namespace) {\n      this.tempStore.get(namespace)?.reset();\n    } else {\n      this.tempStore.forEach((value: LocalModel) => {\n        value.reset();\n      });\n    }\n  }\n}\n","import type {\n  Expression,\n  ExpressionObject,\n  NavigationFlowState,\n} from \"@player-ui/types\";\nimport type { ExpressionEvaluator, ExpressionType } from \"../expressions\";\nimport type { FlowInstance } from \"../controllers\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/**\n * A plugin that taps into the flow controller to evaluate available expressions\n * Expressions can be exposed via lifecycle \"hooks\" in flow/state nodes\n * e.g: onStart, onEnd\n */\nexport class FlowExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let expressionEvaluator: ExpressionEvaluator | undefined;\n\n    /**\n     * Eval Helper\n     *\n     * @param exp - an expression to be evaluated\n     */\n    const handleEval = (exp: Expression | ExpressionObject) => {\n      if (exp) {\n        if (typeof exp === \"object\" && \"exp\" in exp) {\n          expressionEvaluator?.evaluate(exp.exp);\n        } else {\n          expressionEvaluator?.evaluate(exp as ExpressionType);\n        }\n      }\n    };\n\n    player.hooks.expressionEvaluator.tap(this.name, (evaluator) => {\n      expressionEvaluator = evaluator;\n    });\n\n    player.hooks.flowController.tap(this.name, (fc) => {\n      fc.hooks.flow.tap(this.name, (flow: FlowInstance) => {\n        // Eval flow nodes\n        flow.hooks.onStart.tap(this.name, (exp) => handleEval(exp));\n\n        flow.hooks.onEnd.tap(this.name, (exp) => handleEval(exp));\n        // Eval state nodes\n        flow.hooks.resolveTransitionNode.intercept({\n          call: (nextState: NavigationFlowState) => {\n            if (nextState?.onStart) {\n              handleEval(nextState.onStart);\n            }\n          },\n        });\n      });\n    });\n  }\n}\n","import type { ExpressionHandler, ExpressionType } from \"../expressions\";\nimport type { SchemaController } from \"../schema\";\nimport type { Player, PlayerPlugin } from \"../player\";\n\n/** Gets formatter for given formatName and formats value if found, returns value otherwise */\nconst createFormatFunction = (schema: SchemaController) => {\n  /**\n   * The generated handler for the given schema\n   */\n  const handler: ExpressionHandler<[unknown, string], any> = (\n    ctx,\n    value,\n    formatName,\n  ) => {\n    return (\n      schema.getFormatterForType({ type: formatName })?.format(value) ?? value\n    );\n  };\n\n  return handler;\n};\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultExpPlugin implements PlayerPlugin {\n  name = \"flow-exp-plugin\";\n\n  apply(player: Player) {\n    let formatFunction: ExpressionHandler<[unknown, string]> | undefined;\n\n    player.hooks.schema.tap(this.name, (schemaController) => {\n      formatFunction = createFormatFunction(schemaController);\n    });\n\n    player.hooks.expressionEvaluator.tap(this.name, (expEvaluator) => {\n      if (formatFunction) {\n        expEvaluator.addExpressionFunction(\"format\", formatFunction);\n      }\n\n      expEvaluator.addExpressionFunction(\"log\", (ctx, ...args) => {\n        player.logger.info(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\"debug\", (ctx, ...args) => {\n        player.logger.debug(...args);\n      });\n\n      expEvaluator.addExpressionFunction(\n        \"eval\",\n        (ctx, ...args: [ExpressionType]) => {\n          return ctx.evaluate(...args);\n        },\n      );\n    });\n  }\n}\n","import type { Flow, FlowResult } from \"@player-ui/types\";\nimport type { BindingParser, BindingLike } from \"./binding\";\nimport type { SchemaController } from \"./schema\";\nimport type { ExpressionEvaluator } from \"./expressions\";\nimport type { Logger } from \"./logger\";\nimport type {\n  ViewController,\n  DataController,\n  ValidationController,\n  FlowController,\n} from \"./controllers\";\nimport type { ReadOnlyDataController } from \"./controllers/data/utils\";\n\n/** The status for a flow's execution state */\nexport type PlayerFlowStatus =\n  | \"not-started\"\n  | \"in-progress\"\n  | \"completed\"\n  | \"error\";\n\n/** Common interface for the state of Player's flow execution */\nexport interface BaseFlowState<T extends PlayerFlowStatus> {\n  /** A unique reference for the life-cycle of a flow */\n  ref: symbol;\n\n  /** The status of the given flow */\n  status: T;\n}\n\n/** The beginning state of Player, before it's seen a flow  */\nexport type NotStartedState = BaseFlowState<\"not-started\">;\n\nexport const NOT_STARTED_STATE: NotStartedState = {\n  ref: Symbol(\"not-started\"),\n  status: \"not-started\",\n};\n\n/** Shared properties for a flow in any state of execution (in-progress, completed successfully, or errored out) */\nexport interface PlayerFlowExecutionData {\n  /** The currently executing flow */\n  flow: Flow;\n}\n\nexport interface ControllerState {\n  /** The manager for data for a flow */\n  data: DataController;\n\n  /** The view manager for a flow */\n  view: ViewController;\n\n  /** The schema manager for a flow */\n  schema: SchemaController;\n\n  /** The validation manager for a flow */\n  validation: ValidationController;\n\n  /** The expression evaluator for a flow */\n  expression: ExpressionEvaluator;\n\n  /** The manager for parsing and resolving bindings */\n  binding: BindingParser;\n\n  /** the manager for the flow state machine */\n  flow: FlowController;\n}\n\n/** A flow is currently executing */\nexport type InProgressState = BaseFlowState<\"in-progress\"> &\n  PlayerFlowExecutionData & {\n    /** A promise that resolves when the flow is completed */\n    flowResult: Promise<FlowResult>;\n\n    /** The underlying state controllers for the current flow */\n    controllers: ControllerState;\n\n    /** Allow other platforms to abort the current flow with an error  */\n    fail: (error: Error) => void;\n\n    /**\n     * The Logger for the current player instance\n     */\n    logger: Logger;\n  };\n\n/** The flow completed properly */\nexport type CompletedState = BaseFlowState<\"completed\"> &\n  PlayerFlowExecutionData &\n  FlowResult & {\n    /** Readonly Player controllers to provide Player functionality after the flow has ended */\n    controllers: {\n      /** A read only instance of the Data Controller */\n      data: ReadOnlyDataController;\n    };\n  };\n\n/** The flow finished but not successfully */\nexport type ErrorState = BaseFlowState<\"error\"> & {\n  /** The currently executing flow */\n  flow: Flow;\n\n  /** The error associated with the failed flow */\n  error: Error;\n};\n\n/** Any Player state  */\nexport type PlayerFlowState =\n  | NotStartedState\n  | InProgressState\n  | CompletedState\n  | ErrorState;\n\n// Model\n\nexport type RawSetType = [BindingLike, any];\nexport type RawSetTransaction = Record<string, any> | RawSetType[];\n","import type { Player, PlayerPlugin } from \"../player\";\nimport {\n  ApplicabilityPlugin,\n  AssetPlugin,\n  AssetTransformCorePlugin,\n  MultiNodePlugin,\n  StringResolverPlugin,\n  SwitchPlugin,\n  TemplatePlugin,\n  toNodeResolveOptions,\n} from \"../view\";\n\n/**\n * A plugin that provides the out-of-the-box expressions for player\n */\nexport class DefaultViewPlugin implements PlayerPlugin {\n  name = \"default-view-plugin\";\n\n  apply(player: Player) {\n    player.hooks.viewController.tap(this.name, (viewController) => {\n      viewController.hooks.view.tap(this.name, (view) => {\n        const pluginOptions = toNodeResolveOptions(view.resolverOptions);\n        new AssetPlugin().apply(view);\n        new SwitchPlugin(pluginOptions).apply(view);\n        new ApplicabilityPlugin().apply(view);\n        new AssetTransformCorePlugin(viewController.transformRegistry).apply(\n          view,\n        );\n        new StringResolverPlugin().apply(view);\n        const templatePlugin = new TemplatePlugin(pluginOptions);\n        templatePlugin.apply(view);\n        view.hooks.onTemplatePluginCreated.call(templatePlugin);\n        new MultiNodePlugin().apply(view);\n      });\n    });\n  }\n}\n"]}