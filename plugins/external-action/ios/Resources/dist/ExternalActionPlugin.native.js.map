{"version":3,"sources":["/home/circleci/.cache/bazel/_bazel_circleci/e8362d362e14c7d23506d1dfa3aea8b8/sandbox/processwrapper-sandbox/1836/execroot/_main/bazel-out/k8-fastbuild/bin/plugins/external-action/core/dist/index.global.js","../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/external-action/core/src/index.ts"],"names":["ExternalActionPlugin","__defProp","Object","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toCommonJS","mod","value","src_exports","handler","apply","player","hooks","flowController","tap","flow","transition","fromState","toState","state","state_type","setTimeout","shouldTransition","currentState","transitionValue","latestState","error","status","controllers","current","getState","logger","warn","Error","fail"],"mappings":"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","sourcesContent":["\"use strict\";\nvar ExternalActionPlugin = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // ../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/external-action/core/src/index.ts\n  var src_exports = {};\n  __export(src_exports, {\n    ExternalActionPlugin: () => ExternalActionPlugin\n  });\n  var ExternalActionPlugin = class {\n    constructor(handler) {\n      this.name = \"ExternalActionPlugin\";\n      this.handler = handler;\n    }\n    apply(player) {\n      player.hooks.flowController.tap(this.name, (flowController) => {\n        flowController.hooks.flow.tap(this.name, (flow) => {\n          flow.hooks.transition.tap(this.name, (fromState, toState) => {\n            const { value: state } = toState;\n            if (state.state_type === \"EXTERNAL\") {\n              setTimeout(async () => {\n                const shouldTransition = (currentState2) => currentState2.status === \"in-progress\" && currentState2.controllers.flow.current?.currentState?.value === state;\n                const currentState = player.getState();\n                if (shouldTransition(currentState)) {\n                  try {\n                    const transitionValue = await this.handler(\n                      state,\n                      currentState.controllers\n                    );\n                    if (transitionValue !== void 0) {\n                      const latestState = player.getState();\n                      if (shouldTransition(latestState)) {\n                        latestState.controllers.flow.transition(transitionValue);\n                      } else {\n                        player.logger.warn(\n                          `External state resolved with [${transitionValue}], but Player already navigated away from [${toState.name}]`\n                        );\n                      }\n                    }\n                  } catch (error) {\n                    if (error instanceof Error) {\n                      currentState.fail(error);\n                    }\n                  }\n                }\n              }, 0);\n            }\n          });\n        });\n      });\n    }\n  };\n  return __toCommonJS(src_exports);\n})();\n","import type {\n  Player,\n  PlayerPlugin,\n  InProgressState,\n  PlayerFlowState,\n  NavigationFlowExternalState,\n} from \"@player-ui/player\";\n\nexport type ExternalStateHandler = (\n  state: NavigationFlowExternalState,\n  options: InProgressState[\"controllers\"],\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * A plugin to handle external actions states\n */\nexport class ExternalActionPlugin implements PlayerPlugin {\n  name = \"ExternalActionPlugin\";\n  private handler: ExternalStateHandler;\n\n  constructor(handler: ExternalStateHandler) {\n    this.handler = handler;\n  }\n\n  apply(player: Player) {\n    player.hooks.flowController.tap(this.name, (flowController) => {\n      flowController.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.transition.tap(this.name, (fromState, toState) => {\n          const { value: state } = toState;\n          if (state.state_type === \"EXTERNAL\") {\n            setTimeout(async () => {\n              /** Helper for ensuring state is still current relative to external state this is handling */\n              const shouldTransition = (\n                currentState: PlayerFlowState,\n              ): currentState is InProgressState =>\n                currentState.status === \"in-progress\" &&\n                currentState.controllers.flow.current?.currentState?.value ===\n                  state;\n\n              const currentState = player.getState();\n              if (shouldTransition(currentState)) {\n                try {\n                  const transitionValue = await this.handler(\n                    state,\n                    currentState.controllers,\n                  );\n\n                  if (transitionValue !== undefined) {\n                    // Ensure the Player is still in the same state after waiting for transitionValue\n                    const latestState = player.getState();\n                    if (shouldTransition(latestState)) {\n                      latestState.controllers.flow.transition(transitionValue);\n                    } else {\n                      player.logger.warn(\n                        `External state resolved with [${transitionValue}], but Player already navigated away from [${toState.name}]`,\n                      );\n                    }\n                  }\n                } catch (error) {\n                  if (error instanceof Error) {\n                    currentState.fail(error);\n                  }\n                }\n              }\n            }, 0);\n          }\n        });\n      });\n    });\n  }\n}\n"]}