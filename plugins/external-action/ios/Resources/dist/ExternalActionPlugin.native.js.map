{"version":3,"sources":["../../../../../../../../../../../../execroot/_main/bazel-out/k8-fastbuild/bin/plugins/external-action/core/src/index.ts"],"names":["currentState"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAgBO,MAAM,uBAAN,MAAmD;AAAA,IAIxD,YAAY,SAA+B;AAH3C,kBAAO;AAIL,WAAK,UAAU;AAAA,IACjB;AAAA,IAEA,MAAM,QAAgB;AACpB,aAAO,MAAM,eAAe,IAAI,KAAK,MAAM,CAAC,mBAAmB;AAC7D,uBAAe,MAAM,KAAK,IAAI,KAAK,MAAM,CAAC,SAAS;AACjD,eAAK,MAAM,WAAW,IAAI,KAAK,MAAM,CAAC,WAAW,YAAY;AAC3D,kBAAM,EAAE,OAAO,MAAM,IAAI;AACzB,gBAAI,MAAM,eAAe,YAAY;AACnC,yBAAW,YAAY;AAErB,sBAAM,mBAAmB,CACvBA,kBAEAA,cAAa,WAAW,iBACxBA,cAAa,YAAY,KAAK,SAAS,cAAc,UACnD;AAEJ,sBAAM,eAAe,OAAO,SAAS;AACrC,oBAAI,iBAAiB,YAAY,GAAG;AAClC,sBAAI;AACF,0BAAM,kBAAkB,MAAM,KAAK;AAAA,sBACjC;AAAA,sBACA,aAAa;AAAA,oBACf;AAEA,wBAAI,oBAAoB,QAAW;AAEjC,4BAAM,cAAc,OAAO,SAAS;AACpC,0BAAI,iBAAiB,WAAW,GAAG;AACjC,oCAAY,YAAY,KAAK,WAAW,eAAe;AAAA,sBACzD,OAAO;AACL,+BAAO,OAAO;AAAA,0BACZ,iCAAiC,eAAe,8CAA8C,QAAQ,IAAI;AAAA,wBAC5G;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF,SAAS,OAAO;AACd,wBAAI,iBAAiB,OAAO;AAC1B,mCAAa,KAAK,KAAK;AAAA,oBACzB;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,GAAG,CAAC;AAAA,YACN;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF","sourcesContent":["import type {\n  Player,\n  PlayerPlugin,\n  InProgressState,\n  PlayerFlowState,\n  NavigationFlowExternalState,\n} from \"@player-ui/player\";\n\nexport type ExternalStateHandler = (\n  state: NavigationFlowExternalState,\n  options: InProgressState[\"controllers\"],\n) => string | undefined | Promise<string | undefined>;\n\n/**\n * A plugin to handle external actions states\n */\nexport class ExternalActionPlugin implements PlayerPlugin {\n  name = \"ExternalActionPlugin\";\n  private handler: ExternalStateHandler;\n\n  constructor(handler: ExternalStateHandler) {\n    this.handler = handler;\n  }\n\n  apply(player: Player) {\n    player.hooks.flowController.tap(this.name, (flowController) => {\n      flowController.hooks.flow.tap(this.name, (flow) => {\n        flow.hooks.transition.tap(this.name, (fromState, toState) => {\n          const { value: state } = toState;\n          if (state.state_type === \"EXTERNAL\") {\n            setTimeout(async () => {\n              /** Helper for ensuring state is still current relative to external state this is handling */\n              const shouldTransition = (\n                currentState: PlayerFlowState,\n              ): currentState is InProgressState =>\n                currentState.status === \"in-progress\" &&\n                currentState.controllers.flow.current?.currentState?.value ===\n                  state;\n\n              const currentState = player.getState();\n              if (shouldTransition(currentState)) {\n                try {\n                  const transitionValue = await this.handler(\n                    state,\n                    currentState.controllers,\n                  );\n\n                  if (transitionValue !== undefined) {\n                    // Ensure the Player is still in the same state after waiting for transitionValue\n                    const latestState = player.getState();\n                    if (shouldTransition(latestState)) {\n                      latestState.controllers.flow.transition(transitionValue);\n                    } else {\n                      player.logger.warn(\n                        `External state resolved with [${transitionValue}], but Player already navigated away from [${toState.name}]`,\n                      );\n                    }\n                  }\n                } catch (error) {\n                  if (error instanceof Error) {\n                    currentState.fail(error);\n                  }\n                }\n              }\n            }, 0);\n          }\n        });\n      });\n    });\n  }\n}\n"]}